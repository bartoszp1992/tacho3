
chrono.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011478  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000045f8  08011538  08011538  00021538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b30  08015b30  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  08015b30  08015b30  00025b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b38  08015b38  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b38  08015b38  00025b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b3c  08015b3c  00025b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08015b40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  2000009c  08015bdc  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08015bdc  00030800  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a3a0  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059e3  00000000  00000000  0005a464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0005fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  00061918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021299  00000000  00000000  000630e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275fc  00000000  00000000  00084379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8680  00000000  00000000  000ab975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163ff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c70  00000000  00000000  00164048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801151c 	.word	0x0801151c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	0801151c 	.word	0x0801151c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fdff 	bl	8002018 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fd49 	bl	8001ebc <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fdf1 	bl	8002018 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fde7 	bl	8002018 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd6b 	bl	8001f34 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd61 	bl	8001f34 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f864 	bl	8000584 <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_lmul>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	0415      	lsls	r5, r2, #16
 80004cc:	0c2d      	lsrs	r5, r5, #16
 80004ce:	000f      	movs	r7, r1
 80004d0:	0001      	movs	r1, r0
 80004d2:	002e      	movs	r6, r5
 80004d4:	46c6      	mov	lr, r8
 80004d6:	4684      	mov	ip, r0
 80004d8:	0400      	lsls	r0, r0, #16
 80004da:	0c14      	lsrs	r4, r2, #16
 80004dc:	0c00      	lsrs	r0, r0, #16
 80004de:	0c09      	lsrs	r1, r1, #16
 80004e0:	4346      	muls	r6, r0
 80004e2:	434d      	muls	r5, r1
 80004e4:	4360      	muls	r0, r4
 80004e6:	4361      	muls	r1, r4
 80004e8:	1940      	adds	r0, r0, r5
 80004ea:	0c34      	lsrs	r4, r6, #16
 80004ec:	1824      	adds	r4, r4, r0
 80004ee:	b500      	push	{lr}
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	d903      	bls.n	80004fc <__aeabi_lmul+0x34>
 80004f4:	2080      	movs	r0, #128	; 0x80
 80004f6:	0240      	lsls	r0, r0, #9
 80004f8:	4680      	mov	r8, r0
 80004fa:	4441      	add	r1, r8
 80004fc:	0c25      	lsrs	r5, r4, #16
 80004fe:	186d      	adds	r5, r5, r1
 8000500:	4661      	mov	r1, ip
 8000502:	4359      	muls	r1, r3
 8000504:	437a      	muls	r2, r7
 8000506:	0430      	lsls	r0, r6, #16
 8000508:	1949      	adds	r1, r1, r5
 800050a:	0424      	lsls	r4, r4, #16
 800050c:	0c00      	lsrs	r0, r0, #16
 800050e:	1820      	adds	r0, r4, r0
 8000510:	1889      	adds	r1, r1, r2
 8000512:	bc80      	pop	{r7}
 8000514:	46b8      	mov	r8, r7
 8000516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	; 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f002 fd92 	bl	8003048 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 fdd3 	bl	80010d4 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fc05 	bl	8000d44 <__aeabi_fsub>
 800053a:	f000 fdcb 	bl	80010d4 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff8b 	bl	800046c <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f002 fbe7 	bl	8002d30 <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f002 f830 	bl	80025d0 <__aeabi_dsub>
 8000570:	f002 fbde 	bl	8002d30 <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__gnu_ldivmod_helper>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	46ce      	mov	lr, r9
 8000588:	4647      	mov	r7, r8
 800058a:	b580      	push	{r7, lr}
 800058c:	4691      	mov	r9, r2
 800058e:	4698      	mov	r8, r3
 8000590:	0004      	movs	r4, r0
 8000592:	000d      	movs	r5, r1
 8000594:	f002 fd80 	bl	8003098 <__divdi3>
 8000598:	0007      	movs	r7, r0
 800059a:	000e      	movs	r6, r1
 800059c:	0002      	movs	r2, r0
 800059e:	000b      	movs	r3, r1
 80005a0:	4648      	mov	r0, r9
 80005a2:	4641      	mov	r1, r8
 80005a4:	f7ff ff90 	bl	80004c8 <__aeabi_lmul>
 80005a8:	1a24      	subs	r4, r4, r0
 80005aa:	418d      	sbcs	r5, r1
 80005ac:	9b08      	ldr	r3, [sp, #32]
 80005ae:	0038      	movs	r0, r7
 80005b0:	0031      	movs	r1, r6
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	605d      	str	r5, [r3, #4]
 80005b6:	bcc0      	pop	{r6, r7}
 80005b8:	46b9      	mov	r9, r7
 80005ba:	46b0      	mov	r8, r6
 80005bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)

080005c0 <__aeabi_fadd>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	4646      	mov	r6, r8
 80005c4:	46d6      	mov	lr, sl
 80005c6:	464f      	mov	r7, r9
 80005c8:	024d      	lsls	r5, r1, #9
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	b5c0      	push	{r6, r7, lr}
 80005ce:	0a52      	lsrs	r2, r2, #9
 80005d0:	0a6e      	lsrs	r6, r5, #9
 80005d2:	0047      	lsls	r7, r0, #1
 80005d4:	46b0      	mov	r8, r6
 80005d6:	0e3f      	lsrs	r7, r7, #24
 80005d8:	004e      	lsls	r6, r1, #1
 80005da:	0fc4      	lsrs	r4, r0, #31
 80005dc:	00d0      	lsls	r0, r2, #3
 80005de:	4694      	mov	ip, r2
 80005e0:	003b      	movs	r3, r7
 80005e2:	4682      	mov	sl, r0
 80005e4:	0e36      	lsrs	r6, r6, #24
 80005e6:	0fc9      	lsrs	r1, r1, #31
 80005e8:	09ad      	lsrs	r5, r5, #6
 80005ea:	428c      	cmp	r4, r1
 80005ec:	d06d      	beq.n	80006ca <__aeabi_fadd+0x10a>
 80005ee:	1bb8      	subs	r0, r7, r6
 80005f0:	4681      	mov	r9, r0
 80005f2:	2800      	cmp	r0, #0
 80005f4:	dd4d      	ble.n	8000692 <__aeabi_fadd+0xd2>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x3c>
 80005fa:	e088      	b.n	800070e <__aeabi_fadd+0x14e>
 80005fc:	2fff      	cmp	r7, #255	; 0xff
 80005fe:	d05a      	beq.n	80006b6 <__aeabi_fadd+0xf6>
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	04db      	lsls	r3, r3, #19
 8000604:	431d      	orrs	r5, r3
 8000606:	464b      	mov	r3, r9
 8000608:	2201      	movs	r2, #1
 800060a:	2b1b      	cmp	r3, #27
 800060c:	dc0a      	bgt.n	8000624 <__aeabi_fadd+0x64>
 800060e:	002b      	movs	r3, r5
 8000610:	464a      	mov	r2, r9
 8000612:	4649      	mov	r1, r9
 8000614:	40d3      	lsrs	r3, r2
 8000616:	2220      	movs	r2, #32
 8000618:	1a52      	subs	r2, r2, r1
 800061a:	4095      	lsls	r5, r2
 800061c:	002a      	movs	r2, r5
 800061e:	1e55      	subs	r5, r2, #1
 8000620:	41aa      	sbcs	r2, r5
 8000622:	431a      	orrs	r2, r3
 8000624:	4653      	mov	r3, sl
 8000626:	1a9a      	subs	r2, r3, r2
 8000628:	0153      	lsls	r3, r2, #5
 800062a:	d400      	bmi.n	800062e <__aeabi_fadd+0x6e>
 800062c:	e0b9      	b.n	80007a2 <__aeabi_fadd+0x1e2>
 800062e:	0192      	lsls	r2, r2, #6
 8000630:	0996      	lsrs	r6, r2, #6
 8000632:	0030      	movs	r0, r6
 8000634:	f002 fd12 	bl	800305c <__clzsi2>
 8000638:	3805      	subs	r0, #5
 800063a:	4086      	lsls	r6, r0
 800063c:	4287      	cmp	r7, r0
 800063e:	dd00      	ble.n	8000642 <__aeabi_fadd+0x82>
 8000640:	e0d4      	b.n	80007ec <__aeabi_fadd+0x22c>
 8000642:	0033      	movs	r3, r6
 8000644:	1bc7      	subs	r7, r0, r7
 8000646:	2020      	movs	r0, #32
 8000648:	3701      	adds	r7, #1
 800064a:	40fb      	lsrs	r3, r7
 800064c:	1bc7      	subs	r7, r0, r7
 800064e:	40be      	lsls	r6, r7
 8000650:	0032      	movs	r2, r6
 8000652:	1e56      	subs	r6, r2, #1
 8000654:	41b2      	sbcs	r2, r6
 8000656:	2700      	movs	r7, #0
 8000658:	431a      	orrs	r2, r3
 800065a:	0753      	lsls	r3, r2, #29
 800065c:	d004      	beq.n	8000668 <__aeabi_fadd+0xa8>
 800065e:	230f      	movs	r3, #15
 8000660:	4013      	ands	r3, r2
 8000662:	2b04      	cmp	r3, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0xa8>
 8000666:	3204      	adds	r2, #4
 8000668:	0153      	lsls	r3, r2, #5
 800066a:	d400      	bmi.n	800066e <__aeabi_fadd+0xae>
 800066c:	e09c      	b.n	80007a8 <__aeabi_fadd+0x1e8>
 800066e:	1c7b      	adds	r3, r7, #1
 8000670:	2ffe      	cmp	r7, #254	; 0xfe
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0xb6>
 8000674:	e09a      	b.n	80007ac <__aeabi_fadd+0x1ec>
 8000676:	0192      	lsls	r2, r2, #6
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	4694      	mov	ip, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	05d8      	lsls	r0, r3, #23
 8000680:	4663      	mov	r3, ip
 8000682:	07e4      	lsls	r4, r4, #31
 8000684:	4318      	orrs	r0, r3
 8000686:	4320      	orrs	r0, r4
 8000688:	bce0      	pop	{r5, r6, r7}
 800068a:	46ba      	mov	sl, r7
 800068c:	46b1      	mov	r9, r6
 800068e:	46a8      	mov	r8, r5
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000692:	2800      	cmp	r0, #0
 8000694:	d049      	beq.n	800072a <__aeabi_fadd+0x16a>
 8000696:	1bf3      	subs	r3, r6, r7
 8000698:	2f00      	cmp	r7, #0
 800069a:	d000      	beq.n	800069e <__aeabi_fadd+0xde>
 800069c:	e0b6      	b.n	800080c <__aeabi_fadd+0x24c>
 800069e:	4652      	mov	r2, sl
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d060      	beq.n	8000766 <__aeabi_fadd+0x1a6>
 80006a4:	3b01      	subs	r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0xec>
 80006aa:	e0fc      	b.n	80008a6 <__aeabi_fadd+0x2e6>
 80006ac:	2eff      	cmp	r6, #255	; 0xff
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fadd+0xf2>
 80006b0:	e0b4      	b.n	800081c <__aeabi_fadd+0x25c>
 80006b2:	000c      	movs	r4, r1
 80006b4:	4642      	mov	r2, r8
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d078      	beq.n	80007ac <__aeabi_fadd+0x1ec>
 80006ba:	2080      	movs	r0, #128	; 0x80
 80006bc:	03c0      	lsls	r0, r0, #15
 80006be:	4310      	orrs	r0, r2
 80006c0:	0242      	lsls	r2, r0, #9
 80006c2:	0a53      	lsrs	r3, r2, #9
 80006c4:	469c      	mov	ip, r3
 80006c6:	23ff      	movs	r3, #255	; 0xff
 80006c8:	e7d9      	b.n	800067e <__aeabi_fadd+0xbe>
 80006ca:	1bb9      	subs	r1, r7, r6
 80006cc:	2900      	cmp	r1, #0
 80006ce:	dd71      	ble.n	80007b4 <__aeabi_fadd+0x1f4>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d03f      	beq.n	8000754 <__aeabi_fadd+0x194>
 80006d4:	2fff      	cmp	r7, #255	; 0xff
 80006d6:	d0ee      	beq.n	80006b6 <__aeabi_fadd+0xf6>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	04db      	lsls	r3, r3, #19
 80006dc:	431d      	orrs	r5, r3
 80006de:	2201      	movs	r2, #1
 80006e0:	291b      	cmp	r1, #27
 80006e2:	dc07      	bgt.n	80006f4 <__aeabi_fadd+0x134>
 80006e4:	002a      	movs	r2, r5
 80006e6:	2320      	movs	r3, #32
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	408d      	lsls	r5, r1
 80006ee:	1e6b      	subs	r3, r5, #1
 80006f0:	419d      	sbcs	r5, r3
 80006f2:	432a      	orrs	r2, r5
 80006f4:	4452      	add	r2, sl
 80006f6:	0153      	lsls	r3, r2, #5
 80006f8:	d553      	bpl.n	80007a2 <__aeabi_fadd+0x1e2>
 80006fa:	3701      	adds	r7, #1
 80006fc:	2fff      	cmp	r7, #255	; 0xff
 80006fe:	d055      	beq.n	80007ac <__aeabi_fadd+0x1ec>
 8000700:	2301      	movs	r3, #1
 8000702:	497b      	ldr	r1, [pc, #492]	; (80008f0 <__aeabi_fadd+0x330>)
 8000704:	4013      	ands	r3, r2
 8000706:	0852      	lsrs	r2, r2, #1
 8000708:	400a      	ands	r2, r1
 800070a:	431a      	orrs	r2, r3
 800070c:	e7a5      	b.n	800065a <__aeabi_fadd+0x9a>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d02c      	beq.n	800076c <__aeabi_fadd+0x1ac>
 8000712:	2301      	movs	r3, #1
 8000714:	425b      	negs	r3, r3
 8000716:	469c      	mov	ip, r3
 8000718:	44e1      	add	r9, ip
 800071a:	464b      	mov	r3, r9
 800071c:	2b00      	cmp	r3, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x162>
 8000720:	e0ad      	b.n	800087e <__aeabi_fadd+0x2be>
 8000722:	2fff      	cmp	r7, #255	; 0xff
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x168>
 8000726:	e76e      	b.n	8000606 <__aeabi_fadd+0x46>
 8000728:	e7c5      	b.n	80006b6 <__aeabi_fadd+0xf6>
 800072a:	20fe      	movs	r0, #254	; 0xfe
 800072c:	1c7e      	adds	r6, r7, #1
 800072e:	4230      	tst	r0, r6
 8000730:	d160      	bne.n	80007f4 <__aeabi_fadd+0x234>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x178>
 8000736:	e093      	b.n	8000860 <__aeabi_fadd+0x2a0>
 8000738:	4652      	mov	r2, sl
 800073a:	2a00      	cmp	r2, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x180>
 800073e:	e0b6      	b.n	80008ae <__aeabi_fadd+0x2ee>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d09c      	beq.n	800067e <__aeabi_fadd+0xbe>
 8000744:	1b52      	subs	r2, r2, r5
 8000746:	0150      	lsls	r0, r2, #5
 8000748:	d400      	bmi.n	800074c <__aeabi_fadd+0x18c>
 800074a:	e0c3      	b.n	80008d4 <__aeabi_fadd+0x314>
 800074c:	4653      	mov	r3, sl
 800074e:	000c      	movs	r4, r1
 8000750:	1aea      	subs	r2, r5, r3
 8000752:	e782      	b.n	800065a <__aeabi_fadd+0x9a>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d009      	beq.n	800076c <__aeabi_fadd+0x1ac>
 8000758:	3901      	subs	r1, #1
 800075a:	2900      	cmp	r1, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x1a0>
 800075e:	e08b      	b.n	8000878 <__aeabi_fadd+0x2b8>
 8000760:	2fff      	cmp	r7, #255	; 0xff
 8000762:	d1bc      	bne.n	80006de <__aeabi_fadd+0x11e>
 8000764:	e7a7      	b.n	80006b6 <__aeabi_fadd+0xf6>
 8000766:	000c      	movs	r4, r1
 8000768:	4642      	mov	r2, r8
 800076a:	0037      	movs	r7, r6
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d0a2      	beq.n	80006b6 <__aeabi_fadd+0xf6>
 8000770:	0252      	lsls	r2, r2, #9
 8000772:	0a53      	lsrs	r3, r2, #9
 8000774:	469c      	mov	ip, r3
 8000776:	b2fb      	uxtb	r3, r7
 8000778:	e781      	b.n	800067e <__aeabi_fadd+0xbe>
 800077a:	21fe      	movs	r1, #254	; 0xfe
 800077c:	3701      	adds	r7, #1
 800077e:	4239      	tst	r1, r7
 8000780:	d165      	bne.n	800084e <__aeabi_fadd+0x28e>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d17e      	bne.n	8000884 <__aeabi_fadd+0x2c4>
 8000786:	2800      	cmp	r0, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x1cc>
 800078a:	e0aa      	b.n	80008e2 <__aeabi_fadd+0x322>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x1d2>
 8000790:	e775      	b.n	800067e <__aeabi_fadd+0xbe>
 8000792:	002a      	movs	r2, r5
 8000794:	4452      	add	r2, sl
 8000796:	2700      	movs	r7, #0
 8000798:	0153      	lsls	r3, r2, #5
 800079a:	d502      	bpl.n	80007a2 <__aeabi_fadd+0x1e2>
 800079c:	4b55      	ldr	r3, [pc, #340]	; (80008f4 <__aeabi_fadd+0x334>)
 800079e:	3701      	adds	r7, #1
 80007a0:	401a      	ands	r2, r3
 80007a2:	0753      	lsls	r3, r2, #29
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x1e8>
 80007a6:	e75a      	b.n	800065e <__aeabi_fadd+0x9e>
 80007a8:	08d2      	lsrs	r2, r2, #3
 80007aa:	e7df      	b.n	800076c <__aeabi_fadd+0x1ac>
 80007ac:	2200      	movs	r2, #0
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	4694      	mov	ip, r2
 80007b2:	e764      	b.n	800067e <__aeabi_fadd+0xbe>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d0e0      	beq.n	800077a <__aeabi_fadd+0x1ba>
 80007b8:	1bf3      	subs	r3, r6, r7
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d03e      	beq.n	800083c <__aeabi_fadd+0x27c>
 80007be:	2eff      	cmp	r6, #255	; 0xff
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x204>
 80007c2:	e777      	b.n	80006b4 <__aeabi_fadd+0xf4>
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0001      	movs	r1, r0
 80007c8:	04d2      	lsls	r2, r2, #19
 80007ca:	4311      	orrs	r1, r2
 80007cc:	468a      	mov	sl, r1
 80007ce:	2201      	movs	r2, #1
 80007d0:	2b1b      	cmp	r3, #27
 80007d2:	dc08      	bgt.n	80007e6 <__aeabi_fadd+0x226>
 80007d4:	4652      	mov	r2, sl
 80007d6:	2120      	movs	r1, #32
 80007d8:	4650      	mov	r0, sl
 80007da:	40da      	lsrs	r2, r3
 80007dc:	1acb      	subs	r3, r1, r3
 80007de:	4098      	lsls	r0, r3
 80007e0:	1e43      	subs	r3, r0, #1
 80007e2:	4198      	sbcs	r0, r3
 80007e4:	4302      	orrs	r2, r0
 80007e6:	0037      	movs	r7, r6
 80007e8:	1952      	adds	r2, r2, r5
 80007ea:	e784      	b.n	80006f6 <__aeabi_fadd+0x136>
 80007ec:	4a41      	ldr	r2, [pc, #260]	; (80008f4 <__aeabi_fadd+0x334>)
 80007ee:	1a3f      	subs	r7, r7, r0
 80007f0:	4032      	ands	r2, r6
 80007f2:	e732      	b.n	800065a <__aeabi_fadd+0x9a>
 80007f4:	4653      	mov	r3, sl
 80007f6:	1b5e      	subs	r6, r3, r5
 80007f8:	0173      	lsls	r3, r6, #5
 80007fa:	d42d      	bmi.n	8000858 <__aeabi_fadd+0x298>
 80007fc:	2e00      	cmp	r6, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fadd+0x242>
 8000800:	e717      	b.n	8000632 <__aeabi_fadd+0x72>
 8000802:	2200      	movs	r2, #0
 8000804:	2400      	movs	r4, #0
 8000806:	2300      	movs	r3, #0
 8000808:	4694      	mov	ip, r2
 800080a:	e738      	b.n	800067e <__aeabi_fadd+0xbe>
 800080c:	2eff      	cmp	r6, #255	; 0xff
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x252>
 8000810:	e74f      	b.n	80006b2 <__aeabi_fadd+0xf2>
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	4650      	mov	r0, sl
 8000816:	04d2      	lsls	r2, r2, #19
 8000818:	4310      	orrs	r0, r2
 800081a:	4682      	mov	sl, r0
 800081c:	2201      	movs	r2, #1
 800081e:	2b1b      	cmp	r3, #27
 8000820:	dc08      	bgt.n	8000834 <__aeabi_fadd+0x274>
 8000822:	4652      	mov	r2, sl
 8000824:	2420      	movs	r4, #32
 8000826:	4650      	mov	r0, sl
 8000828:	40da      	lsrs	r2, r3
 800082a:	1ae3      	subs	r3, r4, r3
 800082c:	4098      	lsls	r0, r3
 800082e:	1e43      	subs	r3, r0, #1
 8000830:	4198      	sbcs	r0, r3
 8000832:	4302      	orrs	r2, r0
 8000834:	000c      	movs	r4, r1
 8000836:	0037      	movs	r7, r6
 8000838:	1aaa      	subs	r2, r5, r2
 800083a:	e6f5      	b.n	8000628 <__aeabi_fadd+0x68>
 800083c:	2800      	cmp	r0, #0
 800083e:	d093      	beq.n	8000768 <__aeabi_fadd+0x1a8>
 8000840:	3b01      	subs	r3, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	d04f      	beq.n	80008e6 <__aeabi_fadd+0x326>
 8000846:	2eff      	cmp	r6, #255	; 0xff
 8000848:	d1c1      	bne.n	80007ce <__aeabi_fadd+0x20e>
 800084a:	4642      	mov	r2, r8
 800084c:	e733      	b.n	80006b6 <__aeabi_fadd+0xf6>
 800084e:	2fff      	cmp	r7, #255	; 0xff
 8000850:	d0ac      	beq.n	80007ac <__aeabi_fadd+0x1ec>
 8000852:	4455      	add	r5, sl
 8000854:	086a      	lsrs	r2, r5, #1
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x1e2>
 8000858:	4653      	mov	r3, sl
 800085a:	000c      	movs	r4, r1
 800085c:	1aee      	subs	r6, r5, r3
 800085e:	e6e8      	b.n	8000632 <__aeabi_fadd+0x72>
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d128      	bne.n	80008b8 <__aeabi_fadd+0x2f8>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fadd+0x2ac>
 800086a:	e722      	b.n	80006b2 <__aeabi_fadd+0xf2>
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	03db      	lsls	r3, r3, #15
 8000870:	469c      	mov	ip, r3
 8000872:	2400      	movs	r4, #0
 8000874:	23ff      	movs	r3, #255	; 0xff
 8000876:	e702      	b.n	800067e <__aeabi_fadd+0xbe>
 8000878:	002a      	movs	r2, r5
 800087a:	4452      	add	r2, sl
 800087c:	e73b      	b.n	80006f6 <__aeabi_fadd+0x136>
 800087e:	4653      	mov	r3, sl
 8000880:	1b5a      	subs	r2, r3, r5
 8000882:	e6d1      	b.n	8000628 <__aeabi_fadd+0x68>
 8000884:	2800      	cmp	r0, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2ca>
 8000888:	e714      	b.n	80006b4 <__aeabi_fadd+0xf4>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x2d0>
 800088e:	e712      	b.n	80006b6 <__aeabi_fadd+0xf6>
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	03db      	lsls	r3, r3, #15
 8000894:	421a      	tst	r2, r3
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0x2da>
 8000898:	e70d      	b.n	80006b6 <__aeabi_fadd+0xf6>
 800089a:	4641      	mov	r1, r8
 800089c:	4219      	tst	r1, r3
 800089e:	d000      	beq.n	80008a2 <__aeabi_fadd+0x2e2>
 80008a0:	e709      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008a2:	4642      	mov	r2, r8
 80008a4:	e707      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008a6:	000c      	movs	r4, r1
 80008a8:	0037      	movs	r7, r6
 80008aa:	1aaa      	subs	r2, r5, r2
 80008ac:	e6bc      	b.n	8000628 <__aeabi_fadd+0x68>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d013      	beq.n	80008da <__aeabi_fadd+0x31a>
 80008b2:	000c      	movs	r4, r1
 80008b4:	46c4      	mov	ip, r8
 80008b6:	e6e2      	b.n	800067e <__aeabi_fadd+0xbe>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x2fe>
 80008bc:	e6fb      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	03db      	lsls	r3, r3, #15
 80008c2:	421a      	tst	r2, r3
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x308>
 80008c6:	e6f6      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008c8:	4640      	mov	r0, r8
 80008ca:	4218      	tst	r0, r3
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x310>
 80008ce:	e6f2      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008d0:	000c      	movs	r4, r1
 80008d2:	e6ef      	b.n	80006b4 <__aeabi_fadd+0xf4>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_fadd+0x31a>
 80008d8:	e763      	b.n	80007a2 <__aeabi_fadd+0x1e2>
 80008da:	2200      	movs	r2, #0
 80008dc:	2400      	movs	r4, #0
 80008de:	4694      	mov	ip, r2
 80008e0:	e6cd      	b.n	800067e <__aeabi_fadd+0xbe>
 80008e2:	46c4      	mov	ip, r8
 80008e4:	e6cb      	b.n	800067e <__aeabi_fadd+0xbe>
 80008e6:	002a      	movs	r2, r5
 80008e8:	0037      	movs	r7, r6
 80008ea:	4452      	add	r2, sl
 80008ec:	e703      	b.n	80006f6 <__aeabi_fadd+0x136>
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	7dffffff 	.word	0x7dffffff
 80008f4:	fbffffff 	.word	0xfbffffff

080008f8 <__aeabi_fdiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	464f      	mov	r7, r9
 80008fc:	4646      	mov	r6, r8
 80008fe:	46d6      	mov	lr, sl
 8000900:	0245      	lsls	r5, r0, #9
 8000902:	b5c0      	push	{r6, r7, lr}
 8000904:	0047      	lsls	r7, r0, #1
 8000906:	1c0c      	adds	r4, r1, #0
 8000908:	0a6d      	lsrs	r5, r5, #9
 800090a:	0e3f      	lsrs	r7, r7, #24
 800090c:	0fc6      	lsrs	r6, r0, #31
 800090e:	2f00      	cmp	r7, #0
 8000910:	d066      	beq.n	80009e0 <__aeabi_fdiv+0xe8>
 8000912:	2fff      	cmp	r7, #255	; 0xff
 8000914:	d06c      	beq.n	80009f0 <__aeabi_fdiv+0xf8>
 8000916:	2300      	movs	r3, #0
 8000918:	00ea      	lsls	r2, r5, #3
 800091a:	2580      	movs	r5, #128	; 0x80
 800091c:	4699      	mov	r9, r3
 800091e:	469a      	mov	sl, r3
 8000920:	04ed      	lsls	r5, r5, #19
 8000922:	4315      	orrs	r5, r2
 8000924:	3f7f      	subs	r7, #127	; 0x7f
 8000926:	0260      	lsls	r0, r4, #9
 8000928:	0061      	lsls	r1, r4, #1
 800092a:	0a43      	lsrs	r3, r0, #9
 800092c:	4698      	mov	r8, r3
 800092e:	0e09      	lsrs	r1, r1, #24
 8000930:	0fe4      	lsrs	r4, r4, #31
 8000932:	2900      	cmp	r1, #0
 8000934:	d048      	beq.n	80009c8 <__aeabi_fdiv+0xd0>
 8000936:	29ff      	cmp	r1, #255	; 0xff
 8000938:	d010      	beq.n	800095c <__aeabi_fdiv+0x64>
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	00d8      	lsls	r0, r3, #3
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4302      	orrs	r2, r0
 8000942:	4690      	mov	r8, r2
 8000944:	2000      	movs	r0, #0
 8000946:	397f      	subs	r1, #127	; 0x7f
 8000948:	464a      	mov	r2, r9
 800094a:	0033      	movs	r3, r6
 800094c:	1a7f      	subs	r7, r7, r1
 800094e:	4302      	orrs	r2, r0
 8000950:	496c      	ldr	r1, [pc, #432]	; (8000b04 <__aeabi_fdiv+0x20c>)
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	588a      	ldr	r2, [r1, r2]
 8000956:	4063      	eors	r3, r4
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4697      	mov	pc, r2
 800095c:	2b00      	cmp	r3, #0
 800095e:	d16d      	bne.n	8000a3c <__aeabi_fdiv+0x144>
 8000960:	2002      	movs	r0, #2
 8000962:	3fff      	subs	r7, #255	; 0xff
 8000964:	e033      	b.n	80009ce <__aeabi_fdiv+0xd6>
 8000966:	2300      	movs	r3, #0
 8000968:	4698      	mov	r8, r3
 800096a:	0026      	movs	r6, r4
 800096c:	4645      	mov	r5, r8
 800096e:	4682      	mov	sl, r0
 8000970:	4653      	mov	r3, sl
 8000972:	2b02      	cmp	r3, #2
 8000974:	d100      	bne.n	8000978 <__aeabi_fdiv+0x80>
 8000976:	e07f      	b.n	8000a78 <__aeabi_fdiv+0x180>
 8000978:	2b03      	cmp	r3, #3
 800097a:	d100      	bne.n	800097e <__aeabi_fdiv+0x86>
 800097c:	e094      	b.n	8000aa8 <__aeabi_fdiv+0x1b0>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d017      	beq.n	80009b2 <__aeabi_fdiv+0xba>
 8000982:	0038      	movs	r0, r7
 8000984:	307f      	adds	r0, #127	; 0x7f
 8000986:	2800      	cmp	r0, #0
 8000988:	dd5f      	ble.n	8000a4a <__aeabi_fdiv+0x152>
 800098a:	076b      	lsls	r3, r5, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fdiv+0xa0>
 800098e:	230f      	movs	r3, #15
 8000990:	402b      	ands	r3, r5
 8000992:	2b04      	cmp	r3, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fdiv+0xa0>
 8000996:	3504      	adds	r5, #4
 8000998:	012b      	lsls	r3, r5, #4
 800099a:	d503      	bpl.n	80009a4 <__aeabi_fdiv+0xac>
 800099c:	0038      	movs	r0, r7
 800099e:	4b5a      	ldr	r3, [pc, #360]	; (8000b08 <__aeabi_fdiv+0x210>)
 80009a0:	3080      	adds	r0, #128	; 0x80
 80009a2:	401d      	ands	r5, r3
 80009a4:	28fe      	cmp	r0, #254	; 0xfe
 80009a6:	dc67      	bgt.n	8000a78 <__aeabi_fdiv+0x180>
 80009a8:	01ad      	lsls	r5, r5, #6
 80009aa:	0a6d      	lsrs	r5, r5, #9
 80009ac:	b2c0      	uxtb	r0, r0
 80009ae:	e002      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 80009b0:	001e      	movs	r6, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	2500      	movs	r5, #0
 80009b6:	05c0      	lsls	r0, r0, #23
 80009b8:	4328      	orrs	r0, r5
 80009ba:	07f6      	lsls	r6, r6, #31
 80009bc:	4330      	orrs	r0, r6
 80009be:	bce0      	pop	{r5, r6, r7}
 80009c0:	46ba      	mov	sl, r7
 80009c2:	46b1      	mov	r9, r6
 80009c4:	46a8      	mov	r8, r5
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d12b      	bne.n	8000a24 <__aeabi_fdiv+0x12c>
 80009cc:	2001      	movs	r0, #1
 80009ce:	464a      	mov	r2, r9
 80009d0:	0033      	movs	r3, r6
 80009d2:	494e      	ldr	r1, [pc, #312]	; (8000b0c <__aeabi_fdiv+0x214>)
 80009d4:	4302      	orrs	r2, r0
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	588a      	ldr	r2, [r1, r2]
 80009da:	4063      	eors	r3, r4
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4697      	mov	pc, r2
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d113      	bne.n	8000a0c <__aeabi_fdiv+0x114>
 80009e4:	2304      	movs	r3, #4
 80009e6:	4699      	mov	r9, r3
 80009e8:	3b03      	subs	r3, #3
 80009ea:	2700      	movs	r7, #0
 80009ec:	469a      	mov	sl, r3
 80009ee:	e79a      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d105      	bne.n	8000a00 <__aeabi_fdiv+0x108>
 80009f4:	2308      	movs	r3, #8
 80009f6:	4699      	mov	r9, r3
 80009f8:	3b06      	subs	r3, #6
 80009fa:	27ff      	movs	r7, #255	; 0xff
 80009fc:	469a      	mov	sl, r3
 80009fe:	e792      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a00:	230c      	movs	r3, #12
 8000a02:	4699      	mov	r9, r3
 8000a04:	3b09      	subs	r3, #9
 8000a06:	27ff      	movs	r7, #255	; 0xff
 8000a08:	469a      	mov	sl, r3
 8000a0a:	e78c      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a0c:	0028      	movs	r0, r5
 8000a0e:	f002 fb25 	bl	800305c <__clzsi2>
 8000a12:	2776      	movs	r7, #118	; 0x76
 8000a14:	1f43      	subs	r3, r0, #5
 8000a16:	409d      	lsls	r5, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	427f      	negs	r7, r7
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	469a      	mov	sl, r3
 8000a20:	1a3f      	subs	r7, r7, r0
 8000a22:	e780      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 fb19 	bl	800305c <__clzsi2>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	1f43      	subs	r3, r0, #5
 8000a2e:	2176      	movs	r1, #118	; 0x76
 8000a30:	409a      	lsls	r2, r3
 8000a32:	4249      	negs	r1, r1
 8000a34:	1a09      	subs	r1, r1, r0
 8000a36:	4690      	mov	r8, r2
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e785      	b.n	8000948 <__aeabi_fdiv+0x50>
 8000a3c:	21ff      	movs	r1, #255	; 0xff
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e782      	b.n	8000948 <__aeabi_fdiv+0x50>
 8000a42:	001e      	movs	r6, r3
 8000a44:	20ff      	movs	r0, #255	; 0xff
 8000a46:	2500      	movs	r5, #0
 8000a48:	e7b5      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	2b1b      	cmp	r3, #27
 8000a50:	dcaf      	bgt.n	80009b2 <__aeabi_fdiv+0xba>
 8000a52:	379e      	adds	r7, #158	; 0x9e
 8000a54:	0029      	movs	r1, r5
 8000a56:	40bd      	lsls	r5, r7
 8000a58:	40d9      	lsrs	r1, r3
 8000a5a:	1e6a      	subs	r2, r5, #1
 8000a5c:	4195      	sbcs	r5, r2
 8000a5e:	430d      	orrs	r5, r1
 8000a60:	076b      	lsls	r3, r5, #29
 8000a62:	d004      	beq.n	8000a6e <__aeabi_fdiv+0x176>
 8000a64:	230f      	movs	r3, #15
 8000a66:	402b      	ands	r3, r5
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fdiv+0x176>
 8000a6c:	3504      	adds	r5, #4
 8000a6e:	016b      	lsls	r3, r5, #5
 8000a70:	d544      	bpl.n	8000afc <__aeabi_fdiv+0x204>
 8000a72:	2001      	movs	r0, #1
 8000a74:	2500      	movs	r5, #0
 8000a76:	e79e      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a78:	20ff      	movs	r0, #255	; 0xff
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	e79b      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a7e:	2580      	movs	r5, #128	; 0x80
 8000a80:	2600      	movs	r6, #0
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	03ed      	lsls	r5, r5, #15
 8000a86:	e796      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	2080      	movs	r0, #128	; 0x80
 8000a8e:	03c0      	lsls	r0, r0, #15
 8000a90:	4205      	tst	r5, r0
 8000a92:	d009      	beq.n	8000aa8 <__aeabi_fdiv+0x1b0>
 8000a94:	4643      	mov	r3, r8
 8000a96:	4203      	tst	r3, r0
 8000a98:	d106      	bne.n	8000aa8 <__aeabi_fdiv+0x1b0>
 8000a9a:	4645      	mov	r5, r8
 8000a9c:	4305      	orrs	r5, r0
 8000a9e:	026d      	lsls	r5, r5, #9
 8000aa0:	0026      	movs	r6, r4
 8000aa2:	20ff      	movs	r0, #255	; 0xff
 8000aa4:	0a6d      	lsrs	r5, r5, #9
 8000aa6:	e786      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000aa8:	2080      	movs	r0, #128	; 0x80
 8000aaa:	03c0      	lsls	r0, r0, #15
 8000aac:	4305      	orrs	r5, r0
 8000aae:	026d      	lsls	r5, r5, #9
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	0a6d      	lsrs	r5, r5, #9
 8000ab4:	e77f      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	016a      	lsls	r2, r5, #5
 8000aba:	0148      	lsls	r0, r1, #5
 8000abc:	4282      	cmp	r2, r0
 8000abe:	d219      	bcs.n	8000af4 <__aeabi_fdiv+0x1fc>
 8000ac0:	211b      	movs	r1, #27
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	3f01      	subs	r7, #1
 8000ac6:	2601      	movs	r6, #1
 8000ac8:	0014      	movs	r4, r2
 8000aca:	006d      	lsls	r5, r5, #1
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	db01      	blt.n	8000ad6 <__aeabi_fdiv+0x1de>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	d801      	bhi.n	8000ada <__aeabi_fdiv+0x1e2>
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	4335      	orrs	r5, r6
 8000ada:	3901      	subs	r1, #1
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d1f3      	bne.n	8000ac8 <__aeabi_fdiv+0x1d0>
 8000ae0:	1e50      	subs	r0, r2, #1
 8000ae2:	4182      	sbcs	r2, r0
 8000ae4:	0038      	movs	r0, r7
 8000ae6:	307f      	adds	r0, #127	; 0x7f
 8000ae8:	001e      	movs	r6, r3
 8000aea:	4315      	orrs	r5, r2
 8000aec:	2800      	cmp	r0, #0
 8000aee:	dd00      	ble.n	8000af2 <__aeabi_fdiv+0x1fa>
 8000af0:	e74b      	b.n	800098a <__aeabi_fdiv+0x92>
 8000af2:	e7aa      	b.n	8000a4a <__aeabi_fdiv+0x152>
 8000af4:	211a      	movs	r1, #26
 8000af6:	2501      	movs	r5, #1
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	e7e4      	b.n	8000ac6 <__aeabi_fdiv+0x1ce>
 8000afc:	01ad      	lsls	r5, r5, #6
 8000afe:	2000      	movs	r0, #0
 8000b00:	0a6d      	lsrs	r5, r5, #9
 8000b02:	e758      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000b04:	0801197c 	.word	0x0801197c
 8000b08:	f7ffffff 	.word	0xf7ffffff
 8000b0c:	080119bc 	.word	0x080119bc

08000b10 <__aeabi_fmul>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	4657      	mov	r7, sl
 8000b14:	464e      	mov	r6, r9
 8000b16:	4645      	mov	r5, r8
 8000b18:	46de      	mov	lr, fp
 8000b1a:	0244      	lsls	r4, r0, #9
 8000b1c:	b5e0      	push	{r5, r6, r7, lr}
 8000b1e:	0045      	lsls	r5, r0, #1
 8000b20:	1c0f      	adds	r7, r1, #0
 8000b22:	0a64      	lsrs	r4, r4, #9
 8000b24:	0e2d      	lsrs	r5, r5, #24
 8000b26:	0fc6      	lsrs	r6, r0, #31
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d047      	beq.n	8000bbc <__aeabi_fmul+0xac>
 8000b2c:	2dff      	cmp	r5, #255	; 0xff
 8000b2e:	d04d      	beq.n	8000bcc <__aeabi_fmul+0xbc>
 8000b30:	2300      	movs	r3, #0
 8000b32:	2080      	movs	r0, #128	; 0x80
 8000b34:	469a      	mov	sl, r3
 8000b36:	469b      	mov	fp, r3
 8000b38:	00e4      	lsls	r4, r4, #3
 8000b3a:	04c0      	lsls	r0, r0, #19
 8000b3c:	4304      	orrs	r4, r0
 8000b3e:	3d7f      	subs	r5, #127	; 0x7f
 8000b40:	0278      	lsls	r0, r7, #9
 8000b42:	0a43      	lsrs	r3, r0, #9
 8000b44:	4699      	mov	r9, r3
 8000b46:	007a      	lsls	r2, r7, #1
 8000b48:	0ffb      	lsrs	r3, r7, #31
 8000b4a:	4698      	mov	r8, r3
 8000b4c:	0e12      	lsrs	r2, r2, #24
 8000b4e:	464b      	mov	r3, r9
 8000b50:	d044      	beq.n	8000bdc <__aeabi_fmul+0xcc>
 8000b52:	2aff      	cmp	r2, #255	; 0xff
 8000b54:	d011      	beq.n	8000b7a <__aeabi_fmul+0x6a>
 8000b56:	00d8      	lsls	r0, r3, #3
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	04db      	lsls	r3, r3, #19
 8000b5c:	4303      	orrs	r3, r0
 8000b5e:	4699      	mov	r9, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	3a7f      	subs	r2, #127	; 0x7f
 8000b64:	18ad      	adds	r5, r5, r2
 8000b66:	4647      	mov	r7, r8
 8000b68:	4653      	mov	r3, sl
 8000b6a:	4077      	eors	r7, r6
 8000b6c:	1c69      	adds	r1, r5, #1
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d83f      	bhi.n	8000bf2 <__aeabi_fmul+0xe2>
 8000b72:	4a72      	ldr	r2, [pc, #456]	; (8000d3c <__aeabi_fmul+0x22c>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	58d3      	ldr	r3, [r2, r3]
 8000b78:	469f      	mov	pc, r3
 8000b7a:	35ff      	adds	r5, #255	; 0xff
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fmul+0x72>
 8000b80:	e079      	b.n	8000c76 <__aeabi_fmul+0x166>
 8000b82:	4652      	mov	r2, sl
 8000b84:	2302      	movs	r3, #2
 8000b86:	431a      	orrs	r2, r3
 8000b88:	4692      	mov	sl, r2
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	e7eb      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000b8e:	4647      	mov	r7, r8
 8000b90:	464c      	mov	r4, r9
 8000b92:	4683      	mov	fp, r0
 8000b94:	465b      	mov	r3, fp
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d028      	beq.n	8000bec <__aeabi_fmul+0xdc>
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fmul+0x90>
 8000b9e:	e0c6      	b.n	8000d2e <__aeabi_fmul+0x21e>
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d14f      	bne.n	8000c44 <__aeabi_fmul+0x134>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	05c0      	lsls	r0, r0, #23
 8000baa:	07ff      	lsls	r7, r7, #31
 8000bac:	4320      	orrs	r0, r4
 8000bae:	4338      	orrs	r0, r7
 8000bb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb2:	46bb      	mov	fp, r7
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	46a9      	mov	r9, r5
 8000bb8:	46a0      	mov	r8, r4
 8000bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d171      	bne.n	8000ca4 <__aeabi_fmul+0x194>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	469a      	mov	sl, r3
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	469b      	mov	fp, r3
 8000bca:	e7b9      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d163      	bne.n	8000c98 <__aeabi_fmul+0x188>
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	3b06      	subs	r3, #6
 8000bd6:	25ff      	movs	r5, #255	; 0xff
 8000bd8:	469b      	mov	fp, r3
 8000bda:	e7b1      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__aeabi_fmul+0x172>
 8000be0:	4652      	mov	r2, sl
 8000be2:	3301      	adds	r3, #1
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4692      	mov	sl, r2
 8000be8:	2001      	movs	r0, #1
 8000bea:	e7bc      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	2400      	movs	r4, #0
 8000bf0:	e7da      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	0c26      	lsrs	r6, r4, #16
 8000bf6:	0424      	lsls	r4, r4, #16
 8000bf8:	0c22      	lsrs	r2, r4, #16
 8000bfa:	0404      	lsls	r4, r0, #16
 8000bfc:	0c24      	lsrs	r4, r4, #16
 8000bfe:	464b      	mov	r3, r9
 8000c00:	0020      	movs	r0, r4
 8000c02:	0c1b      	lsrs	r3, r3, #16
 8000c04:	4350      	muls	r0, r2
 8000c06:	4374      	muls	r4, r6
 8000c08:	435a      	muls	r2, r3
 8000c0a:	435e      	muls	r6, r3
 8000c0c:	1912      	adds	r2, r2, r4
 8000c0e:	0c03      	lsrs	r3, r0, #16
 8000c10:	189b      	adds	r3, r3, r2
 8000c12:	429c      	cmp	r4, r3
 8000c14:	d903      	bls.n	8000c1e <__aeabi_fmul+0x10e>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0252      	lsls	r2, r2, #9
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	4466      	add	r6, ip
 8000c1e:	0400      	lsls	r0, r0, #16
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	0c00      	lsrs	r0, r0, #16
 8000c24:	1812      	adds	r2, r2, r0
 8000c26:	0194      	lsls	r4, r2, #6
 8000c28:	1e60      	subs	r0, r4, #1
 8000c2a:	4184      	sbcs	r4, r0
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	0e92      	lsrs	r2, r2, #26
 8000c30:	199b      	adds	r3, r3, r6
 8000c32:	4314      	orrs	r4, r2
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	431c      	orrs	r4, r3
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	d572      	bpl.n	8000d22 <__aeabi_fmul+0x212>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	0863      	lsrs	r3, r4, #1
 8000c40:	4004      	ands	r4, r0
 8000c42:	431c      	orrs	r4, r3
 8000c44:	0008      	movs	r0, r1
 8000c46:	307f      	adds	r0, #127	; 0x7f
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	dd3c      	ble.n	8000cc6 <__aeabi_fmul+0x1b6>
 8000c4c:	0763      	lsls	r3, r4, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fmul+0x14a>
 8000c50:	230f      	movs	r3, #15
 8000c52:	4023      	ands	r3, r4
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fmul+0x14a>
 8000c58:	3404      	adds	r4, #4
 8000c5a:	0123      	lsls	r3, r4, #4
 8000c5c:	d503      	bpl.n	8000c66 <__aeabi_fmul+0x156>
 8000c5e:	3180      	adds	r1, #128	; 0x80
 8000c60:	0008      	movs	r0, r1
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <__aeabi_fmul+0x230>)
 8000c64:	401c      	ands	r4, r3
 8000c66:	28fe      	cmp	r0, #254	; 0xfe
 8000c68:	dcc0      	bgt.n	8000bec <__aeabi_fmul+0xdc>
 8000c6a:	01a4      	lsls	r4, r4, #6
 8000c6c:	0a64      	lsrs	r4, r4, #9
 8000c6e:	b2c0      	uxtb	r0, r0
 8000c70:	e79a      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000c72:	0037      	movs	r7, r6
 8000c74:	e78e      	b.n	8000b94 <__aeabi_fmul+0x84>
 8000c76:	4652      	mov	r2, sl
 8000c78:	2303      	movs	r3, #3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	4692      	mov	sl, r2
 8000c7e:	2003      	movs	r0, #3
 8000c80:	e771      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000c82:	4648      	mov	r0, r9
 8000c84:	f002 f9ea 	bl	800305c <__clzsi2>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	1f43      	subs	r3, r0, #5
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	1a2d      	subs	r5, r5, r0
 8000c90:	4691      	mov	r9, r2
 8000c92:	2000      	movs	r0, #0
 8000c94:	3d76      	subs	r5, #118	; 0x76
 8000c96:	e766      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000c98:	230c      	movs	r3, #12
 8000c9a:	469a      	mov	sl, r3
 8000c9c:	3b09      	subs	r3, #9
 8000c9e:	25ff      	movs	r5, #255	; 0xff
 8000ca0:	469b      	mov	fp, r3
 8000ca2:	e74d      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000ca4:	0020      	movs	r0, r4
 8000ca6:	f002 f9d9 	bl	800305c <__clzsi2>
 8000caa:	2576      	movs	r5, #118	; 0x76
 8000cac:	1f43      	subs	r3, r0, #5
 8000cae:	409c      	lsls	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	426d      	negs	r5, r5
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	469b      	mov	fp, r3
 8000cb8:	1a2d      	subs	r5, r5, r0
 8000cba:	e741      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	2700      	movs	r7, #0
 8000cc0:	20ff      	movs	r0, #255	; 0xff
 8000cc2:	03e4      	lsls	r4, r4, #15
 8000cc4:	e770      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	1a1b      	subs	r3, r3, r0
 8000cca:	2b1b      	cmp	r3, #27
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_fmul+0x1c0>
 8000cce:	e769      	b.n	8000ba4 <__aeabi_fmul+0x94>
 8000cd0:	319e      	adds	r1, #158	; 0x9e
 8000cd2:	0020      	movs	r0, r4
 8000cd4:	408c      	lsls	r4, r1
 8000cd6:	40d8      	lsrs	r0, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4304      	orrs	r4, r0
 8000cde:	0763      	lsls	r3, r4, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fmul+0x1dc>
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4023      	ands	r3, r4
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fmul+0x1dc>
 8000cea:	3404      	adds	r4, #4
 8000cec:	0163      	lsls	r3, r4, #5
 8000cee:	d51a      	bpl.n	8000d26 <__aeabi_fmul+0x216>
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	2400      	movs	r4, #0
 8000cf4:	e758      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000cf6:	2080      	movs	r0, #128	; 0x80
 8000cf8:	03c0      	lsls	r0, r0, #15
 8000cfa:	4204      	tst	r4, r0
 8000cfc:	d009      	beq.n	8000d12 <__aeabi_fmul+0x202>
 8000cfe:	464b      	mov	r3, r9
 8000d00:	4203      	tst	r3, r0
 8000d02:	d106      	bne.n	8000d12 <__aeabi_fmul+0x202>
 8000d04:	464c      	mov	r4, r9
 8000d06:	4304      	orrs	r4, r0
 8000d08:	0264      	lsls	r4, r4, #9
 8000d0a:	4647      	mov	r7, r8
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	e74a      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d12:	2080      	movs	r0, #128	; 0x80
 8000d14:	03c0      	lsls	r0, r0, #15
 8000d16:	4304      	orrs	r4, r0
 8000d18:	0264      	lsls	r4, r4, #9
 8000d1a:	0037      	movs	r7, r6
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	0a64      	lsrs	r4, r4, #9
 8000d20:	e742      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d22:	0029      	movs	r1, r5
 8000d24:	e78e      	b.n	8000c44 <__aeabi_fmul+0x134>
 8000d26:	01a4      	lsls	r4, r4, #6
 8000d28:	2000      	movs	r0, #0
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	e73c      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	03c0      	lsls	r0, r0, #15
 8000d32:	4304      	orrs	r4, r0
 8000d34:	0264      	lsls	r4, r4, #9
 8000d36:	20ff      	movs	r0, #255	; 0xff
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	e735      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d3c:	080119fc 	.word	0x080119fc
 8000d40:	f7ffffff 	.word	0xf7ffffff

08000d44 <__aeabi_fsub>:
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	4646      	mov	r6, r8
 8000d48:	46d6      	mov	lr, sl
 8000d4a:	464f      	mov	r7, r9
 8000d4c:	0243      	lsls	r3, r0, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	00da      	lsls	r2, r3, #3
 8000d52:	4694      	mov	ip, r2
 8000d54:	024a      	lsls	r2, r1, #9
 8000d56:	b5c0      	push	{r6, r7, lr}
 8000d58:	0044      	lsls	r4, r0, #1
 8000d5a:	0a56      	lsrs	r6, r2, #9
 8000d5c:	1c05      	adds	r5, r0, #0
 8000d5e:	46b0      	mov	r8, r6
 8000d60:	0e24      	lsrs	r4, r4, #24
 8000d62:	004e      	lsls	r6, r1, #1
 8000d64:	0992      	lsrs	r2, r2, #6
 8000d66:	001f      	movs	r7, r3
 8000d68:	0020      	movs	r0, r4
 8000d6a:	4692      	mov	sl, r2
 8000d6c:	0fed      	lsrs	r5, r5, #31
 8000d6e:	0e36      	lsrs	r6, r6, #24
 8000d70:	0fc9      	lsrs	r1, r1, #31
 8000d72:	2eff      	cmp	r6, #255	; 0xff
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x34>
 8000d76:	e07f      	b.n	8000e78 <__aeabi_fsub+0x134>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4051      	eors	r1, r2
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d051      	beq.n	8000e24 <__aeabi_fsub+0xe0>
 8000d80:	1ba2      	subs	r2, r4, r6
 8000d82:	4691      	mov	r9, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_fsub+0x46>
 8000d88:	e07e      	b.n	8000e88 <__aeabi_fsub+0x144>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x4c>
 8000d8e:	e099      	b.n	8000ec4 <__aeabi_fsub+0x180>
 8000d90:	2cff      	cmp	r4, #255	; 0xff
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x52>
 8000d94:	e08c      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	4652      	mov	r2, sl
 8000d9a:	04db      	lsls	r3, r3, #19
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	464a      	mov	r2, r9
 8000da2:	2301      	movs	r3, #1
 8000da4:	2a1b      	cmp	r2, #27
 8000da6:	dc08      	bgt.n	8000dba <__aeabi_fsub+0x76>
 8000da8:	4653      	mov	r3, sl
 8000daa:	2120      	movs	r1, #32
 8000dac:	40d3      	lsrs	r3, r2
 8000dae:	1a89      	subs	r1, r1, r2
 8000db0:	4652      	mov	r2, sl
 8000db2:	408a      	lsls	r2, r1
 8000db4:	1e51      	subs	r1, r2, #1
 8000db6:	418a      	sbcs	r2, r1
 8000db8:	4313      	orrs	r3, r2
 8000dba:	4662      	mov	r2, ip
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	015a      	lsls	r2, r3, #5
 8000dc0:	d400      	bmi.n	8000dc4 <__aeabi_fsub+0x80>
 8000dc2:	e0f3      	b.n	8000fac <__aeabi_fsub+0x268>
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	099e      	lsrs	r6, r3, #6
 8000dc8:	0030      	movs	r0, r6
 8000dca:	f002 f947 	bl	800305c <__clzsi2>
 8000dce:	3805      	subs	r0, #5
 8000dd0:	4086      	lsls	r6, r0
 8000dd2:	4284      	cmp	r4, r0
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_fsub+0x94>
 8000dd6:	e0f7      	b.n	8000fc8 <__aeabi_fsub+0x284>
 8000dd8:	0032      	movs	r2, r6
 8000dda:	1b04      	subs	r4, r0, r4
 8000ddc:	2020      	movs	r0, #32
 8000dde:	3401      	adds	r4, #1
 8000de0:	40e2      	lsrs	r2, r4
 8000de2:	1b04      	subs	r4, r0, r4
 8000de4:	40a6      	lsls	r6, r4
 8000de6:	0033      	movs	r3, r6
 8000de8:	1e5e      	subs	r6, r3, #1
 8000dea:	41b3      	sbcs	r3, r6
 8000dec:	2400      	movs	r4, #0
 8000dee:	4313      	orrs	r3, r2
 8000df0:	075a      	lsls	r2, r3, #29
 8000df2:	d004      	beq.n	8000dfe <__aeabi_fsub+0xba>
 8000df4:	220f      	movs	r2, #15
 8000df6:	401a      	ands	r2, r3
 8000df8:	2a04      	cmp	r2, #4
 8000dfa:	d000      	beq.n	8000dfe <__aeabi_fsub+0xba>
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	015a      	lsls	r2, r3, #5
 8000e00:	d400      	bmi.n	8000e04 <__aeabi_fsub+0xc0>
 8000e02:	e0d6      	b.n	8000fb2 <__aeabi_fsub+0x26e>
 8000e04:	1c62      	adds	r2, r4, #1
 8000e06:	2cfe      	cmp	r4, #254	; 0xfe
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0xc8>
 8000e0a:	e0da      	b.n	8000fc2 <__aeabi_fsub+0x27e>
 8000e0c:	019b      	lsls	r3, r3, #6
 8000e0e:	0a5f      	lsrs	r7, r3, #9
 8000e10:	b2d0      	uxtb	r0, r2
 8000e12:	05c0      	lsls	r0, r0, #23
 8000e14:	4338      	orrs	r0, r7
 8000e16:	07ed      	lsls	r5, r5, #31
 8000e18:	4328      	orrs	r0, r5
 8000e1a:	bce0      	pop	{r5, r6, r7}
 8000e1c:	46ba      	mov	sl, r7
 8000e1e:	46b1      	mov	r9, r6
 8000e20:	46a8      	mov	r8, r5
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e24:	1ba2      	subs	r2, r4, r6
 8000e26:	4691      	mov	r9, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	dd63      	ble.n	8000ef4 <__aeabi_fsub+0x1b0>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0xee>
 8000e30:	e099      	b.n	8000f66 <__aeabi_fsub+0x222>
 8000e32:	2cff      	cmp	r4, #255	; 0xff
 8000e34:	d03c      	beq.n	8000eb0 <__aeabi_fsub+0x16c>
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	4652      	mov	r2, sl
 8000e3a:	04db      	lsls	r3, r3, #19
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	4692      	mov	sl, r2
 8000e40:	464a      	mov	r2, r9
 8000e42:	2301      	movs	r3, #1
 8000e44:	2a1b      	cmp	r2, #27
 8000e46:	dc08      	bgt.n	8000e5a <__aeabi_fsub+0x116>
 8000e48:	4653      	mov	r3, sl
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	40d3      	lsrs	r3, r2
 8000e4e:	1a89      	subs	r1, r1, r2
 8000e50:	4652      	mov	r2, sl
 8000e52:	408a      	lsls	r2, r1
 8000e54:	1e51      	subs	r1, r2, #1
 8000e56:	418a      	sbcs	r2, r1
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	015a      	lsls	r2, r3, #5
 8000e5e:	d400      	bmi.n	8000e62 <__aeabi_fsub+0x11e>
 8000e60:	e0a4      	b.n	8000fac <__aeabi_fsub+0x268>
 8000e62:	3401      	adds	r4, #1
 8000e64:	2cff      	cmp	r4, #255	; 0xff
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x126>
 8000e68:	e0ab      	b.n	8000fc2 <__aeabi_fsub+0x27e>
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4997      	ldr	r1, [pc, #604]	; (80010cc <__aeabi_fsub+0x388>)
 8000e6e:	401a      	ands	r2, r3
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	400b      	ands	r3, r1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	e7bb      	b.n	8000df0 <__aeabi_fsub+0xac>
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d032      	beq.n	8000ee2 <__aeabi_fsub+0x19e>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d035      	beq.n	8000eec <__aeabi_fsub+0x1a8>
 8000e80:	22ff      	movs	r2, #255	; 0xff
 8000e82:	4252      	negs	r2, r2
 8000e84:	4691      	mov	r9, r2
 8000e86:	44a1      	add	r9, r4
 8000e88:	464a      	mov	r2, r9
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d051      	beq.n	8000f32 <__aeabi_fsub+0x1ee>
 8000e8e:	1b30      	subs	r0, r6, r4
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d000      	beq.n	8000e96 <__aeabi_fsub+0x152>
 8000e94:	e09c      	b.n	8000fd0 <__aeabi_fsub+0x28c>
 8000e96:	4663      	mov	r3, ip
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_fsub+0x15a>
 8000e9c:	e0df      	b.n	800105e <__aeabi_fsub+0x31a>
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x162>
 8000ea4:	e0f7      	b.n	8001096 <__aeabi_fsub+0x352>
 8000ea6:	2eff      	cmp	r6, #255	; 0xff
 8000ea8:	d000      	beq.n	8000eac <__aeabi_fsub+0x168>
 8000eaa:	e099      	b.n	8000fe0 <__aeabi_fsub+0x29c>
 8000eac:	000d      	movs	r5, r1
 8000eae:	4643      	mov	r3, r8
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x172>
 8000eb4:	e085      	b.n	8000fc2 <__aeabi_fsub+0x27e>
 8000eb6:	2780      	movs	r7, #128	; 0x80
 8000eb8:	03ff      	lsls	r7, r7, #15
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	027f      	lsls	r7, r7, #9
 8000ebe:	20ff      	movs	r0, #255	; 0xff
 8000ec0:	0a7f      	lsrs	r7, r7, #9
 8000ec2:	e7a6      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d074      	beq.n	8000fb4 <__aeabi_fsub+0x270>
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4252      	negs	r2, r2
 8000ece:	4690      	mov	r8, r2
 8000ed0:	44c1      	add	r9, r8
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_fsub+0x196>
 8000ed8:	e0c8      	b.n	800106c <__aeabi_fsub+0x328>
 8000eda:	2cff      	cmp	r4, #255	; 0xff
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fsub+0x19c>
 8000ede:	e75f      	b.n	8000da0 <__aeabi_fsub+0x5c>
 8000ee0:	e7e6      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4051      	eors	r1, r2
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d000      	beq.n	8000eec <__aeabi_fsub+0x1a8>
 8000eea:	e749      	b.n	8000d80 <__aeabi_fsub+0x3c>
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	4252      	negs	r2, r2
 8000ef0:	4691      	mov	r9, r2
 8000ef2:	44a1      	add	r9, r4
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d043      	beq.n	8000f82 <__aeabi_fsub+0x23e>
 8000efa:	1b31      	subs	r1, r6, r4
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x1be>
 8000f00:	e08c      	b.n	800101c <__aeabi_fsub+0x2d8>
 8000f02:	2eff      	cmp	r6, #255	; 0xff
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x1c4>
 8000f06:	e092      	b.n	800102e <__aeabi_fsub+0x2ea>
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	04db      	lsls	r3, r3, #19
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	4694      	mov	ip, r2
 8000f12:	2301      	movs	r3, #1
 8000f14:	291b      	cmp	r1, #27
 8000f16:	dc09      	bgt.n	8000f2c <__aeabi_fsub+0x1e8>
 8000f18:	2020      	movs	r0, #32
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	1a41      	subs	r1, r0, r1
 8000f22:	408a      	lsls	r2, r1
 8000f24:	0011      	movs	r1, r2
 8000f26:	1e48      	subs	r0, r1, #1
 8000f28:	4181      	sbcs	r1, r0
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	0034      	movs	r4, r6
 8000f2e:	4453      	add	r3, sl
 8000f30:	e794      	b.n	8000e5c <__aeabi_fsub+0x118>
 8000f32:	22fe      	movs	r2, #254	; 0xfe
 8000f34:	1c66      	adds	r6, r4, #1
 8000f36:	4232      	tst	r2, r6
 8000f38:	d164      	bne.n	8001004 <__aeabi_fsub+0x2c0>
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x1fc>
 8000f3e:	e082      	b.n	8001046 <__aeabi_fsub+0x302>
 8000f40:	4663      	mov	r3, ip
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x204>
 8000f46:	e0ab      	b.n	80010a0 <__aeabi_fsub+0x35c>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fsub+0x20c>
 8000f4e:	e760      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000f50:	4663      	mov	r3, ip
 8000f52:	4652      	mov	r2, sl
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	d400      	bmi.n	8000f5c <__aeabi_fsub+0x218>
 8000f5a:	e0aa      	b.n	80010b2 <__aeabi_fsub+0x36e>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	4652      	mov	r2, sl
 8000f60:	000d      	movs	r5, r1
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	e744      	b.n	8000df0 <__aeabi_fsub+0xac>
 8000f66:	4652      	mov	r2, sl
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d023      	beq.n	8000fb4 <__aeabi_fsub+0x270>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4252      	negs	r2, r2
 8000f70:	4690      	mov	r8, r2
 8000f72:	44c1      	add	r9, r8
 8000f74:	464a      	mov	r2, r9
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d075      	beq.n	8001066 <__aeabi_fsub+0x322>
 8000f7a:	2cff      	cmp	r4, #255	; 0xff
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fsub+0x23c>
 8000f7e:	e75f      	b.n	8000e40 <__aeabi_fsub+0xfc>
 8000f80:	e796      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000f82:	26fe      	movs	r6, #254	; 0xfe
 8000f84:	3401      	adds	r4, #1
 8000f86:	4226      	tst	r6, r4
 8000f88:	d153      	bne.n	8001032 <__aeabi_fsub+0x2ee>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d172      	bne.n	8001074 <__aeabi_fsub+0x330>
 8000f8e:	4663      	mov	r3, ip
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x252>
 8000f94:	e093      	b.n	80010be <__aeabi_fsub+0x37a>
 8000f96:	4653      	mov	r3, sl
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x25a>
 8000f9c:	e739      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	d502      	bpl.n	8000fac <__aeabi_fsub+0x268>
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <__aeabi_fsub+0x38c>)
 8000fa8:	3401      	adds	r4, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	075a      	lsls	r2, r3, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x26e>
 8000fb0:	e720      	b.n	8000df4 <__aeabi_fsub+0xb0>
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	2cff      	cmp	r4, #255	; 0xff
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x276>
 8000fb8:	e77a      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	0a5f      	lsrs	r7, r3, #9
 8000fbe:	b2e0      	uxtb	r0, r4
 8000fc0:	e727      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000fc2:	20ff      	movs	r0, #255	; 0xff
 8000fc4:	2700      	movs	r7, #0
 8000fc6:	e724      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <__aeabi_fsub+0x38c>)
 8000fca:	1a24      	subs	r4, r4, r0
 8000fcc:	4033      	ands	r3, r6
 8000fce:	e70f      	b.n	8000df0 <__aeabi_fsub+0xac>
 8000fd0:	2eff      	cmp	r6, #255	; 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x292>
 8000fd4:	e76a      	b.n	8000eac <__aeabi_fsub+0x168>
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	4662      	mov	r2, ip
 8000fda:	04db      	lsls	r3, r3, #19
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4694      	mov	ip, r2
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	281b      	cmp	r0, #27
 8000fe4:	dc09      	bgt.n	8000ffa <__aeabi_fsub+0x2b6>
 8000fe6:	2420      	movs	r4, #32
 8000fe8:	4663      	mov	r3, ip
 8000fea:	4662      	mov	r2, ip
 8000fec:	40c3      	lsrs	r3, r0
 8000fee:	1a20      	subs	r0, r4, r0
 8000ff0:	4082      	lsls	r2, r0
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	1e44      	subs	r4, r0, #1
 8000ff6:	41a0      	sbcs	r0, r4
 8000ff8:	4303      	orrs	r3, r0
 8000ffa:	4652      	mov	r2, sl
 8000ffc:	000d      	movs	r5, r1
 8000ffe:	0034      	movs	r4, r6
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	e6dc      	b.n	8000dbe <__aeabi_fsub+0x7a>
 8001004:	4663      	mov	r3, ip
 8001006:	4652      	mov	r2, sl
 8001008:	1a9e      	subs	r6, r3, r2
 800100a:	0173      	lsls	r3, r6, #5
 800100c:	d417      	bmi.n	800103e <__aeabi_fsub+0x2fa>
 800100e:	2e00      	cmp	r6, #0
 8001010:	d000      	beq.n	8001014 <__aeabi_fsub+0x2d0>
 8001012:	e6d9      	b.n	8000dc8 <__aeabi_fsub+0x84>
 8001014:	2500      	movs	r5, #0
 8001016:	2000      	movs	r0, #0
 8001018:	2700      	movs	r7, #0
 800101a:	e6fa      	b.n	8000e12 <__aeabi_fsub+0xce>
 800101c:	4663      	mov	r3, ip
 800101e:	2b00      	cmp	r3, #0
 8001020:	d044      	beq.n	80010ac <__aeabi_fsub+0x368>
 8001022:	3901      	subs	r1, #1
 8001024:	2900      	cmp	r1, #0
 8001026:	d04c      	beq.n	80010c2 <__aeabi_fsub+0x37e>
 8001028:	2eff      	cmp	r6, #255	; 0xff
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x2ea>
 800102c:	e771      	b.n	8000f12 <__aeabi_fsub+0x1ce>
 800102e:	4643      	mov	r3, r8
 8001030:	e73e      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8001032:	2cff      	cmp	r4, #255	; 0xff
 8001034:	d0c5      	beq.n	8000fc2 <__aeabi_fsub+0x27e>
 8001036:	4652      	mov	r2, sl
 8001038:	4462      	add	r2, ip
 800103a:	0853      	lsrs	r3, r2, #1
 800103c:	e7b6      	b.n	8000fac <__aeabi_fsub+0x268>
 800103e:	4663      	mov	r3, ip
 8001040:	000d      	movs	r5, r1
 8001042:	1ad6      	subs	r6, r2, r3
 8001044:	e6c0      	b.n	8000dc8 <__aeabi_fsub+0x84>
 8001046:	4662      	mov	r2, ip
 8001048:	2a00      	cmp	r2, #0
 800104a:	d116      	bne.n	800107a <__aeabi_fsub+0x336>
 800104c:	4653      	mov	r3, sl
 800104e:	2b00      	cmp	r3, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_fsub+0x310>
 8001052:	e72b      	b.n	8000eac <__aeabi_fsub+0x168>
 8001054:	2780      	movs	r7, #128	; 0x80
 8001056:	2500      	movs	r5, #0
 8001058:	20ff      	movs	r0, #255	; 0xff
 800105a:	03ff      	lsls	r7, r7, #15
 800105c:	e6d9      	b.n	8000e12 <__aeabi_fsub+0xce>
 800105e:	000d      	movs	r5, r1
 8001060:	4643      	mov	r3, r8
 8001062:	0034      	movs	r4, r6
 8001064:	e7a6      	b.n	8000fb4 <__aeabi_fsub+0x270>
 8001066:	4653      	mov	r3, sl
 8001068:	4463      	add	r3, ip
 800106a:	e6f7      	b.n	8000e5c <__aeabi_fsub+0x118>
 800106c:	4663      	mov	r3, ip
 800106e:	4652      	mov	r2, sl
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	e6a4      	b.n	8000dbe <__aeabi_fsub+0x7a>
 8001074:	4662      	mov	r2, ip
 8001076:	2a00      	cmp	r2, #0
 8001078:	d0d9      	beq.n	800102e <__aeabi_fsub+0x2ea>
 800107a:	4652      	mov	r2, sl
 800107c:	2a00      	cmp	r2, #0
 800107e:	d100      	bne.n	8001082 <__aeabi_fsub+0x33e>
 8001080:	e716      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	03d2      	lsls	r2, r2, #15
 8001086:	4213      	tst	r3, r2
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x348>
 800108a:	e711      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 800108c:	4640      	mov	r0, r8
 800108e:	4210      	tst	r0, r2
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x350>
 8001092:	e70d      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8001094:	e70a      	b.n	8000eac <__aeabi_fsub+0x168>
 8001096:	4652      	mov	r2, sl
 8001098:	000d      	movs	r5, r1
 800109a:	0034      	movs	r4, r6
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	e68e      	b.n	8000dbe <__aeabi_fsub+0x7a>
 80010a0:	4653      	mov	r3, sl
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d008      	beq.n	80010b8 <__aeabi_fsub+0x374>
 80010a6:	000d      	movs	r5, r1
 80010a8:	4647      	mov	r7, r8
 80010aa:	e6b2      	b.n	8000e12 <__aeabi_fsub+0xce>
 80010ac:	4643      	mov	r3, r8
 80010ae:	0034      	movs	r4, r6
 80010b0:	e780      	b.n	8000fb4 <__aeabi_fsub+0x270>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x374>
 80010b6:	e779      	b.n	8000fac <__aeabi_fsub+0x268>
 80010b8:	2500      	movs	r5, #0
 80010ba:	2700      	movs	r7, #0
 80010bc:	e6a9      	b.n	8000e12 <__aeabi_fsub+0xce>
 80010be:	4647      	mov	r7, r8
 80010c0:	e6a7      	b.n	8000e12 <__aeabi_fsub+0xce>
 80010c2:	4653      	mov	r3, sl
 80010c4:	0034      	movs	r4, r6
 80010c6:	4463      	add	r3, ip
 80010c8:	e6c8      	b.n	8000e5c <__aeabi_fsub+0x118>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	7dffffff 	.word	0x7dffffff
 80010d0:	fbffffff 	.word	0xfbffffff

080010d4 <__aeabi_f2iz>:
 80010d4:	0241      	lsls	r1, r0, #9
 80010d6:	0042      	lsls	r2, r0, #1
 80010d8:	0fc3      	lsrs	r3, r0, #31
 80010da:	0a49      	lsrs	r1, r1, #9
 80010dc:	2000      	movs	r0, #0
 80010de:	0e12      	lsrs	r2, r2, #24
 80010e0:	2a7e      	cmp	r2, #126	; 0x7e
 80010e2:	d903      	bls.n	80010ec <__aeabi_f2iz+0x18>
 80010e4:	2a9d      	cmp	r2, #157	; 0x9d
 80010e6:	d902      	bls.n	80010ee <__aeabi_f2iz+0x1a>
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <__aeabi_f2iz+0x3c>)
 80010ea:	1898      	adds	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	2080      	movs	r0, #128	; 0x80
 80010f0:	0400      	lsls	r0, r0, #16
 80010f2:	4301      	orrs	r1, r0
 80010f4:	2a95      	cmp	r2, #149	; 0x95
 80010f6:	dc07      	bgt.n	8001108 <__aeabi_f2iz+0x34>
 80010f8:	2096      	movs	r0, #150	; 0x96
 80010fa:	1a82      	subs	r2, r0, r2
 80010fc:	40d1      	lsrs	r1, r2
 80010fe:	4248      	negs	r0, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f3      	bne.n	80010ec <__aeabi_f2iz+0x18>
 8001104:	0008      	movs	r0, r1
 8001106:	e7f1      	b.n	80010ec <__aeabi_f2iz+0x18>
 8001108:	3a96      	subs	r2, #150	; 0x96
 800110a:	4091      	lsls	r1, r2
 800110c:	e7f7      	b.n	80010fe <__aeabi_f2iz+0x2a>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	7fffffff 	.word	0x7fffffff

08001114 <__aeabi_i2f>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	2800      	cmp	r0, #0
 8001118:	d013      	beq.n	8001142 <__aeabi_i2f+0x2e>
 800111a:	17c3      	asrs	r3, r0, #31
 800111c:	18c5      	adds	r5, r0, r3
 800111e:	405d      	eors	r5, r3
 8001120:	0fc4      	lsrs	r4, r0, #31
 8001122:	0028      	movs	r0, r5
 8001124:	f001 ff9a 	bl	800305c <__clzsi2>
 8001128:	239e      	movs	r3, #158	; 0x9e
 800112a:	0001      	movs	r1, r0
 800112c:	1a1b      	subs	r3, r3, r0
 800112e:	2b96      	cmp	r3, #150	; 0x96
 8001130:	dc0f      	bgt.n	8001152 <__aeabi_i2f+0x3e>
 8001132:	2808      	cmp	r0, #8
 8001134:	dd01      	ble.n	800113a <__aeabi_i2f+0x26>
 8001136:	3908      	subs	r1, #8
 8001138:	408d      	lsls	r5, r1
 800113a:	026d      	lsls	r5, r5, #9
 800113c:	0a6d      	lsrs	r5, r5, #9
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	e002      	b.n	8001148 <__aeabi_i2f+0x34>
 8001142:	2400      	movs	r4, #0
 8001144:	2000      	movs	r0, #0
 8001146:	2500      	movs	r5, #0
 8001148:	05c0      	lsls	r0, r0, #23
 800114a:	4328      	orrs	r0, r5
 800114c:	07e4      	lsls	r4, r4, #31
 800114e:	4320      	orrs	r0, r4
 8001150:	bd70      	pop	{r4, r5, r6, pc}
 8001152:	2b99      	cmp	r3, #153	; 0x99
 8001154:	dd0b      	ble.n	800116e <__aeabi_i2f+0x5a>
 8001156:	2205      	movs	r2, #5
 8001158:	002e      	movs	r6, r5
 800115a:	1a12      	subs	r2, r2, r0
 800115c:	40d6      	lsrs	r6, r2
 800115e:	0002      	movs	r2, r0
 8001160:	321b      	adds	r2, #27
 8001162:	4095      	lsls	r5, r2
 8001164:	0028      	movs	r0, r5
 8001166:	1e45      	subs	r5, r0, #1
 8001168:	41a8      	sbcs	r0, r5
 800116a:	0035      	movs	r5, r6
 800116c:	4305      	orrs	r5, r0
 800116e:	2905      	cmp	r1, #5
 8001170:	dd01      	ble.n	8001176 <__aeabi_i2f+0x62>
 8001172:	1f4a      	subs	r2, r1, #5
 8001174:	4095      	lsls	r5, r2
 8001176:	002a      	movs	r2, r5
 8001178:	4e08      	ldr	r6, [pc, #32]	; (800119c <__aeabi_i2f+0x88>)
 800117a:	4032      	ands	r2, r6
 800117c:	0768      	lsls	r0, r5, #29
 800117e:	d009      	beq.n	8001194 <__aeabi_i2f+0x80>
 8001180:	200f      	movs	r0, #15
 8001182:	4028      	ands	r0, r5
 8001184:	2804      	cmp	r0, #4
 8001186:	d005      	beq.n	8001194 <__aeabi_i2f+0x80>
 8001188:	3204      	adds	r2, #4
 800118a:	0150      	lsls	r0, r2, #5
 800118c:	d502      	bpl.n	8001194 <__aeabi_i2f+0x80>
 800118e:	239f      	movs	r3, #159	; 0x9f
 8001190:	4032      	ands	r2, r6
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	0192      	lsls	r2, r2, #6
 8001196:	0a55      	lsrs	r5, r2, #9
 8001198:	b2d8      	uxtb	r0, r3
 800119a:	e7d5      	b.n	8001148 <__aeabi_i2f+0x34>
 800119c:	fbffffff 	.word	0xfbffffff

080011a0 <__aeabi_ui2f>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	1e05      	subs	r5, r0, #0
 80011a4:	d00e      	beq.n	80011c4 <__aeabi_ui2f+0x24>
 80011a6:	f001 ff59 	bl	800305c <__clzsi2>
 80011aa:	239e      	movs	r3, #158	; 0x9e
 80011ac:	0004      	movs	r4, r0
 80011ae:	1a1b      	subs	r3, r3, r0
 80011b0:	2b96      	cmp	r3, #150	; 0x96
 80011b2:	dc0c      	bgt.n	80011ce <__aeabi_ui2f+0x2e>
 80011b4:	2808      	cmp	r0, #8
 80011b6:	dd01      	ble.n	80011bc <__aeabi_ui2f+0x1c>
 80011b8:	3c08      	subs	r4, #8
 80011ba:	40a5      	lsls	r5, r4
 80011bc:	026d      	lsls	r5, r5, #9
 80011be:	0a6d      	lsrs	r5, r5, #9
 80011c0:	b2d8      	uxtb	r0, r3
 80011c2:	e001      	b.n	80011c8 <__aeabi_ui2f+0x28>
 80011c4:	2000      	movs	r0, #0
 80011c6:	2500      	movs	r5, #0
 80011c8:	05c0      	lsls	r0, r0, #23
 80011ca:	4328      	orrs	r0, r5
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
 80011ce:	2b99      	cmp	r3, #153	; 0x99
 80011d0:	dd09      	ble.n	80011e6 <__aeabi_ui2f+0x46>
 80011d2:	0002      	movs	r2, r0
 80011d4:	0029      	movs	r1, r5
 80011d6:	321b      	adds	r2, #27
 80011d8:	4091      	lsls	r1, r2
 80011da:	1e4a      	subs	r2, r1, #1
 80011dc:	4191      	sbcs	r1, r2
 80011de:	2205      	movs	r2, #5
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	40d5      	lsrs	r5, r2
 80011e4:	430d      	orrs	r5, r1
 80011e6:	2c05      	cmp	r4, #5
 80011e8:	dd01      	ble.n	80011ee <__aeabi_ui2f+0x4e>
 80011ea:	1f62      	subs	r2, r4, #5
 80011ec:	4095      	lsls	r5, r2
 80011ee:	0029      	movs	r1, r5
 80011f0:	4e08      	ldr	r6, [pc, #32]	; (8001214 <__aeabi_ui2f+0x74>)
 80011f2:	4031      	ands	r1, r6
 80011f4:	076a      	lsls	r2, r5, #29
 80011f6:	d009      	beq.n	800120c <__aeabi_ui2f+0x6c>
 80011f8:	200f      	movs	r0, #15
 80011fa:	4028      	ands	r0, r5
 80011fc:	2804      	cmp	r0, #4
 80011fe:	d005      	beq.n	800120c <__aeabi_ui2f+0x6c>
 8001200:	3104      	adds	r1, #4
 8001202:	014a      	lsls	r2, r1, #5
 8001204:	d502      	bpl.n	800120c <__aeabi_ui2f+0x6c>
 8001206:	239f      	movs	r3, #159	; 0x9f
 8001208:	4031      	ands	r1, r6
 800120a:	1b1b      	subs	r3, r3, r4
 800120c:	0189      	lsls	r1, r1, #6
 800120e:	0a4d      	lsrs	r5, r1, #9
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	e7d9      	b.n	80011c8 <__aeabi_ui2f+0x28>
 8001214:	fbffffff 	.word	0xfbffffff

08001218 <__aeabi_dadd>:
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	464f      	mov	r7, r9
 800121c:	46d6      	mov	lr, sl
 800121e:	4646      	mov	r6, r8
 8001220:	000d      	movs	r5, r1
 8001222:	0001      	movs	r1, r0
 8001224:	0018      	movs	r0, r3
 8001226:	b5c0      	push	{r6, r7, lr}
 8001228:	0017      	movs	r7, r2
 800122a:	032b      	lsls	r3, r5, #12
 800122c:	0a5a      	lsrs	r2, r3, #9
 800122e:	0f4b      	lsrs	r3, r1, #29
 8001230:	4313      	orrs	r3, r2
 8001232:	00ca      	lsls	r2, r1, #3
 8001234:	4691      	mov	r9, r2
 8001236:	0302      	lsls	r2, r0, #12
 8001238:	006e      	lsls	r6, r5, #1
 800123a:	0041      	lsls	r1, r0, #1
 800123c:	0a52      	lsrs	r2, r2, #9
 800123e:	0fec      	lsrs	r4, r5, #31
 8001240:	0f7d      	lsrs	r5, r7, #29
 8001242:	4315      	orrs	r5, r2
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	0d49      	lsrs	r1, r1, #21
 8001248:	0fc0      	lsrs	r0, r0, #31
 800124a:	4682      	mov	sl, r0
 800124c:	46ac      	mov	ip, r5
 800124e:	00ff      	lsls	r7, r7, #3
 8001250:	1a72      	subs	r2, r6, r1
 8001252:	4284      	cmp	r4, r0
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x40>
 8001256:	e098      	b.n	800138a <__aeabi_dadd+0x172>
 8001258:	2a00      	cmp	r2, #0
 800125a:	dc00      	bgt.n	800125e <__aeabi_dadd+0x46>
 800125c:	e081      	b.n	8001362 <__aeabi_dadd+0x14a>
 800125e:	2900      	cmp	r1, #0
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x4c>
 8001262:	e0b6      	b.n	80013d2 <__aeabi_dadd+0x1ba>
 8001264:	49c9      	ldr	r1, [pc, #804]	; (800158c <__aeabi_dadd+0x374>)
 8001266:	428e      	cmp	r6, r1
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x54>
 800126a:	e172      	b.n	8001552 <__aeabi_dadd+0x33a>
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0028      	movs	r0, r5
 8001270:	0409      	lsls	r1, r1, #16
 8001272:	4308      	orrs	r0, r1
 8001274:	4684      	mov	ip, r0
 8001276:	2a38      	cmp	r2, #56	; 0x38
 8001278:	dd00      	ble.n	800127c <__aeabi_dadd+0x64>
 800127a:	e15e      	b.n	800153a <__aeabi_dadd+0x322>
 800127c:	2a1f      	cmp	r2, #31
 800127e:	dd00      	ble.n	8001282 <__aeabi_dadd+0x6a>
 8001280:	e1ee      	b.n	8001660 <__aeabi_dadd+0x448>
 8001282:	2020      	movs	r0, #32
 8001284:	0039      	movs	r1, r7
 8001286:	4665      	mov	r5, ip
 8001288:	1a80      	subs	r0, r0, r2
 800128a:	4087      	lsls	r7, r0
 800128c:	40d1      	lsrs	r1, r2
 800128e:	4085      	lsls	r5, r0
 8001290:	430d      	orrs	r5, r1
 8001292:	0039      	movs	r1, r7
 8001294:	1e4f      	subs	r7, r1, #1
 8001296:	41b9      	sbcs	r1, r7
 8001298:	4667      	mov	r7, ip
 800129a:	40d7      	lsrs	r7, r2
 800129c:	4329      	orrs	r1, r5
 800129e:	1bdb      	subs	r3, r3, r7
 80012a0:	464a      	mov	r2, r9
 80012a2:	1a55      	subs	r5, r2, r1
 80012a4:	45a9      	cmp	r9, r5
 80012a6:	4189      	sbcs	r1, r1
 80012a8:	4249      	negs	r1, r1
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	4698      	mov	r8, r3
 80012ae:	4643      	mov	r3, r8
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	d400      	bmi.n	80012b6 <__aeabi_dadd+0x9e>
 80012b4:	e0cc      	b.n	8001450 <__aeabi_dadd+0x238>
 80012b6:	4643      	mov	r3, r8
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	4698      	mov	r8, r3
 80012be:	4643      	mov	r3, r8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0xae>
 80012c4:	e12c      	b.n	8001520 <__aeabi_dadd+0x308>
 80012c6:	4640      	mov	r0, r8
 80012c8:	f001 fec8 	bl	800305c <__clzsi2>
 80012cc:	0001      	movs	r1, r0
 80012ce:	3908      	subs	r1, #8
 80012d0:	2220      	movs	r2, #32
 80012d2:	0028      	movs	r0, r5
 80012d4:	4643      	mov	r3, r8
 80012d6:	1a52      	subs	r2, r2, r1
 80012d8:	408b      	lsls	r3, r1
 80012da:	40d0      	lsrs	r0, r2
 80012dc:	408d      	lsls	r5, r1
 80012de:	4303      	orrs	r3, r0
 80012e0:	428e      	cmp	r6, r1
 80012e2:	dd00      	ble.n	80012e6 <__aeabi_dadd+0xce>
 80012e4:	e117      	b.n	8001516 <__aeabi_dadd+0x2fe>
 80012e6:	1b8e      	subs	r6, r1, r6
 80012e8:	1c72      	adds	r2, r6, #1
 80012ea:	2a1f      	cmp	r2, #31
 80012ec:	dd00      	ble.n	80012f0 <__aeabi_dadd+0xd8>
 80012ee:	e1a7      	b.n	8001640 <__aeabi_dadd+0x428>
 80012f0:	2120      	movs	r1, #32
 80012f2:	0018      	movs	r0, r3
 80012f4:	002e      	movs	r6, r5
 80012f6:	1a89      	subs	r1, r1, r2
 80012f8:	408d      	lsls	r5, r1
 80012fa:	4088      	lsls	r0, r1
 80012fc:	40d6      	lsrs	r6, r2
 80012fe:	40d3      	lsrs	r3, r2
 8001300:	1e69      	subs	r1, r5, #1
 8001302:	418d      	sbcs	r5, r1
 8001304:	4330      	orrs	r0, r6
 8001306:	4698      	mov	r8, r3
 8001308:	2600      	movs	r6, #0
 800130a:	4305      	orrs	r5, r0
 800130c:	076b      	lsls	r3, r5, #29
 800130e:	d009      	beq.n	8001324 <__aeabi_dadd+0x10c>
 8001310:	230f      	movs	r3, #15
 8001312:	402b      	ands	r3, r5
 8001314:	2b04      	cmp	r3, #4
 8001316:	d005      	beq.n	8001324 <__aeabi_dadd+0x10c>
 8001318:	1d2b      	adds	r3, r5, #4
 800131a:	42ab      	cmp	r3, r5
 800131c:	41ad      	sbcs	r5, r5
 800131e:	426d      	negs	r5, r5
 8001320:	44a8      	add	r8, r5
 8001322:	001d      	movs	r5, r3
 8001324:	4643      	mov	r3, r8
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	d400      	bmi.n	800132c <__aeabi_dadd+0x114>
 800132a:	e094      	b.n	8001456 <__aeabi_dadd+0x23e>
 800132c:	4b97      	ldr	r3, [pc, #604]	; (800158c <__aeabi_dadd+0x374>)
 800132e:	1c72      	adds	r2, r6, #1
 8001330:	429a      	cmp	r2, r3
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x11e>
 8001334:	e09d      	b.n	8001472 <__aeabi_dadd+0x25a>
 8001336:	4641      	mov	r1, r8
 8001338:	4b95      	ldr	r3, [pc, #596]	; (8001590 <__aeabi_dadd+0x378>)
 800133a:	08ed      	lsrs	r5, r5, #3
 800133c:	4019      	ands	r1, r3
 800133e:	000b      	movs	r3, r1
 8001340:	0552      	lsls	r2, r2, #21
 8001342:	0749      	lsls	r1, r1, #29
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4329      	orrs	r1, r5
 8001348:	0b1b      	lsrs	r3, r3, #12
 800134a:	0d52      	lsrs	r2, r2, #21
 800134c:	0512      	lsls	r2, r2, #20
 800134e:	4313      	orrs	r3, r2
 8001350:	07e4      	lsls	r4, r4, #31
 8001352:	4323      	orrs	r3, r4
 8001354:	0008      	movs	r0, r1
 8001356:	0019      	movs	r1, r3
 8001358:	bce0      	pop	{r5, r6, r7}
 800135a:	46ba      	mov	sl, r7
 800135c:	46b1      	mov	r9, r6
 800135e:	46a8      	mov	r8, r5
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	2a00      	cmp	r2, #0
 8001364:	d043      	beq.n	80013ee <__aeabi_dadd+0x1d6>
 8001366:	1b8a      	subs	r2, r1, r6
 8001368:	2e00      	cmp	r6, #0
 800136a:	d000      	beq.n	800136e <__aeabi_dadd+0x156>
 800136c:	e12a      	b.n	80015c4 <__aeabi_dadd+0x3ac>
 800136e:	464c      	mov	r4, r9
 8001370:	431c      	orrs	r4, r3
 8001372:	d100      	bne.n	8001376 <__aeabi_dadd+0x15e>
 8001374:	e1d1      	b.n	800171a <__aeabi_dadd+0x502>
 8001376:	1e54      	subs	r4, r2, #1
 8001378:	2a01      	cmp	r2, #1
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x166>
 800137c:	e21f      	b.n	80017be <__aeabi_dadd+0x5a6>
 800137e:	4d83      	ldr	r5, [pc, #524]	; (800158c <__aeabi_dadd+0x374>)
 8001380:	42aa      	cmp	r2, r5
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x16e>
 8001384:	e272      	b.n	800186c <__aeabi_dadd+0x654>
 8001386:	0022      	movs	r2, r4
 8001388:	e123      	b.n	80015d2 <__aeabi_dadd+0x3ba>
 800138a:	2a00      	cmp	r2, #0
 800138c:	dc00      	bgt.n	8001390 <__aeabi_dadd+0x178>
 800138e:	e098      	b.n	80014c2 <__aeabi_dadd+0x2aa>
 8001390:	2900      	cmp	r1, #0
 8001392:	d042      	beq.n	800141a <__aeabi_dadd+0x202>
 8001394:	497d      	ldr	r1, [pc, #500]	; (800158c <__aeabi_dadd+0x374>)
 8001396:	428e      	cmp	r6, r1
 8001398:	d100      	bne.n	800139c <__aeabi_dadd+0x184>
 800139a:	e0da      	b.n	8001552 <__aeabi_dadd+0x33a>
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0028      	movs	r0, r5
 80013a0:	0409      	lsls	r1, r1, #16
 80013a2:	4308      	orrs	r0, r1
 80013a4:	4684      	mov	ip, r0
 80013a6:	2a38      	cmp	r2, #56	; 0x38
 80013a8:	dd00      	ble.n	80013ac <__aeabi_dadd+0x194>
 80013aa:	e129      	b.n	8001600 <__aeabi_dadd+0x3e8>
 80013ac:	2a1f      	cmp	r2, #31
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_dadd+0x19a>
 80013b0:	e187      	b.n	80016c2 <__aeabi_dadd+0x4aa>
 80013b2:	0011      	movs	r1, r2
 80013b4:	4665      	mov	r5, ip
 80013b6:	3920      	subs	r1, #32
 80013b8:	40cd      	lsrs	r5, r1
 80013ba:	2a20      	cmp	r2, #32
 80013bc:	d004      	beq.n	80013c8 <__aeabi_dadd+0x1b0>
 80013be:	2040      	movs	r0, #64	; 0x40
 80013c0:	4661      	mov	r1, ip
 80013c2:	1a82      	subs	r2, r0, r2
 80013c4:	4091      	lsls	r1, r2
 80013c6:	430f      	orrs	r7, r1
 80013c8:	0039      	movs	r1, r7
 80013ca:	1e4f      	subs	r7, r1, #1
 80013cc:	41b9      	sbcs	r1, r7
 80013ce:	430d      	orrs	r5, r1
 80013d0:	e11b      	b.n	800160a <__aeabi_dadd+0x3f2>
 80013d2:	0029      	movs	r1, r5
 80013d4:	4339      	orrs	r1, r7
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x1c2>
 80013d8:	e0b5      	b.n	8001546 <__aeabi_dadd+0x32e>
 80013da:	1e51      	subs	r1, r2, #1
 80013dc:	2a01      	cmp	r2, #1
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x1ca>
 80013e0:	e1ab      	b.n	800173a <__aeabi_dadd+0x522>
 80013e2:	486a      	ldr	r0, [pc, #424]	; (800158c <__aeabi_dadd+0x374>)
 80013e4:	4282      	cmp	r2, r0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x1d2>
 80013e8:	e1b2      	b.n	8001750 <__aeabi_dadd+0x538>
 80013ea:	000a      	movs	r2, r1
 80013ec:	e743      	b.n	8001276 <__aeabi_dadd+0x5e>
 80013ee:	4969      	ldr	r1, [pc, #420]	; (8001594 <__aeabi_dadd+0x37c>)
 80013f0:	1c75      	adds	r5, r6, #1
 80013f2:	420d      	tst	r5, r1
 80013f4:	d000      	beq.n	80013f8 <__aeabi_dadd+0x1e0>
 80013f6:	e0cf      	b.n	8001598 <__aeabi_dadd+0x380>
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x1e6>
 80013fc:	e193      	b.n	8001726 <__aeabi_dadd+0x50e>
 80013fe:	4649      	mov	r1, r9
 8001400:	4319      	orrs	r1, r3
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x1ee>
 8001404:	e1d1      	b.n	80017aa <__aeabi_dadd+0x592>
 8001406:	4661      	mov	r1, ip
 8001408:	4339      	orrs	r1, r7
 800140a:	d000      	beq.n	800140e <__aeabi_dadd+0x1f6>
 800140c:	e1e3      	b.n	80017d6 <__aeabi_dadd+0x5be>
 800140e:	4649      	mov	r1, r9
 8001410:	0758      	lsls	r0, r3, #29
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	4301      	orrs	r1, r0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e026      	b.n	8001468 <__aeabi_dadd+0x250>
 800141a:	0029      	movs	r1, r5
 800141c:	4339      	orrs	r1, r7
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x20a>
 8001420:	e091      	b.n	8001546 <__aeabi_dadd+0x32e>
 8001422:	1e51      	subs	r1, r2, #1
 8001424:	2a01      	cmp	r2, #1
 8001426:	d005      	beq.n	8001434 <__aeabi_dadd+0x21c>
 8001428:	4858      	ldr	r0, [pc, #352]	; (800158c <__aeabi_dadd+0x374>)
 800142a:	4282      	cmp	r2, r0
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x218>
 800142e:	e18f      	b.n	8001750 <__aeabi_dadd+0x538>
 8001430:	000a      	movs	r2, r1
 8001432:	e7b8      	b.n	80013a6 <__aeabi_dadd+0x18e>
 8001434:	003d      	movs	r5, r7
 8001436:	444d      	add	r5, r9
 8001438:	454d      	cmp	r5, r9
 800143a:	4189      	sbcs	r1, r1
 800143c:	4463      	add	r3, ip
 800143e:	4698      	mov	r8, r3
 8001440:	4249      	negs	r1, r1
 8001442:	4488      	add	r8, r1
 8001444:	4643      	mov	r3, r8
 8001446:	2602      	movs	r6, #2
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	d500      	bpl.n	800144e <__aeabi_dadd+0x236>
 800144c:	e0eb      	b.n	8001626 <__aeabi_dadd+0x40e>
 800144e:	3e01      	subs	r6, #1
 8001450:	076b      	lsls	r3, r5, #29
 8001452:	d000      	beq.n	8001456 <__aeabi_dadd+0x23e>
 8001454:	e75c      	b.n	8001310 <__aeabi_dadd+0xf8>
 8001456:	4643      	mov	r3, r8
 8001458:	08e9      	lsrs	r1, r5, #3
 800145a:	075a      	lsls	r2, r3, #29
 800145c:	4311      	orrs	r1, r2
 800145e:	0032      	movs	r2, r6
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	484a      	ldr	r0, [pc, #296]	; (800158c <__aeabi_dadd+0x374>)
 8001464:	4282      	cmp	r2, r0
 8001466:	d021      	beq.n	80014ac <__aeabi_dadd+0x294>
 8001468:	031b      	lsls	r3, r3, #12
 800146a:	0552      	lsls	r2, r2, #21
 800146c:	0b1b      	lsrs	r3, r3, #12
 800146e:	0d52      	lsrs	r2, r2, #21
 8001470:	e76c      	b.n	800134c <__aeabi_dadd+0x134>
 8001472:	2300      	movs	r3, #0
 8001474:	2100      	movs	r1, #0
 8001476:	e769      	b.n	800134c <__aeabi_dadd+0x134>
 8001478:	002a      	movs	r2, r5
 800147a:	433a      	orrs	r2, r7
 800147c:	d069      	beq.n	8001552 <__aeabi_dadd+0x33a>
 800147e:	464a      	mov	r2, r9
 8001480:	0758      	lsls	r0, r3, #29
 8001482:	08d1      	lsrs	r1, r2, #3
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	4308      	orrs	r0, r1
 800148c:	421a      	tst	r2, r3
 800148e:	d007      	beq.n	80014a0 <__aeabi_dadd+0x288>
 8001490:	0029      	movs	r1, r5
 8001492:	08ed      	lsrs	r5, r5, #3
 8001494:	421d      	tst	r5, r3
 8001496:	d103      	bne.n	80014a0 <__aeabi_dadd+0x288>
 8001498:	002a      	movs	r2, r5
 800149a:	08ff      	lsrs	r7, r7, #3
 800149c:	0748      	lsls	r0, r1, #29
 800149e:	4338      	orrs	r0, r7
 80014a0:	0f43      	lsrs	r3, r0, #29
 80014a2:	00c1      	lsls	r1, r0, #3
 80014a4:	075b      	lsls	r3, r3, #29
 80014a6:	08c9      	lsrs	r1, r1, #3
 80014a8:	4319      	orrs	r1, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	d100      	bne.n	80014b4 <__aeabi_dadd+0x29c>
 80014b2:	e213      	b.n	80018dc <__aeabi_dadd+0x6c4>
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0312      	lsls	r2, r2, #12
 80014b8:	4313      	orrs	r3, r2
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <__aeabi_dadd+0x374>)
 80014be:	0b1b      	lsrs	r3, r3, #12
 80014c0:	e744      	b.n	800134c <__aeabi_dadd+0x134>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d04b      	beq.n	800155e <__aeabi_dadd+0x346>
 80014c6:	1b8a      	subs	r2, r1, r6
 80014c8:	2e00      	cmp	r6, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x2b6>
 80014cc:	e0e7      	b.n	800169e <__aeabi_dadd+0x486>
 80014ce:	482f      	ldr	r0, [pc, #188]	; (800158c <__aeabi_dadd+0x374>)
 80014d0:	4281      	cmp	r1, r0
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x2be>
 80014d4:	e195      	b.n	8001802 <__aeabi_dadd+0x5ea>
 80014d6:	2080      	movs	r0, #128	; 0x80
 80014d8:	0400      	lsls	r0, r0, #16
 80014da:	4303      	orrs	r3, r0
 80014dc:	2a38      	cmp	r2, #56	; 0x38
 80014de:	dd00      	ble.n	80014e2 <__aeabi_dadd+0x2ca>
 80014e0:	e143      	b.n	800176a <__aeabi_dadd+0x552>
 80014e2:	2a1f      	cmp	r2, #31
 80014e4:	dd00      	ble.n	80014e8 <__aeabi_dadd+0x2d0>
 80014e6:	e1db      	b.n	80018a0 <__aeabi_dadd+0x688>
 80014e8:	2020      	movs	r0, #32
 80014ea:	001d      	movs	r5, r3
 80014ec:	464e      	mov	r6, r9
 80014ee:	1a80      	subs	r0, r0, r2
 80014f0:	4085      	lsls	r5, r0
 80014f2:	40d6      	lsrs	r6, r2
 80014f4:	4335      	orrs	r5, r6
 80014f6:	464e      	mov	r6, r9
 80014f8:	4086      	lsls	r6, r0
 80014fa:	0030      	movs	r0, r6
 80014fc:	40d3      	lsrs	r3, r2
 80014fe:	1e46      	subs	r6, r0, #1
 8001500:	41b0      	sbcs	r0, r6
 8001502:	449c      	add	ip, r3
 8001504:	4305      	orrs	r5, r0
 8001506:	19ed      	adds	r5, r5, r7
 8001508:	42bd      	cmp	r5, r7
 800150a:	419b      	sbcs	r3, r3
 800150c:	425b      	negs	r3, r3
 800150e:	4463      	add	r3, ip
 8001510:	4698      	mov	r8, r3
 8001512:	000e      	movs	r6, r1
 8001514:	e07f      	b.n	8001616 <__aeabi_dadd+0x3fe>
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <__aeabi_dadd+0x378>)
 8001518:	1a76      	subs	r6, r6, r1
 800151a:	4013      	ands	r3, r2
 800151c:	4698      	mov	r8, r3
 800151e:	e6f5      	b.n	800130c <__aeabi_dadd+0xf4>
 8001520:	0028      	movs	r0, r5
 8001522:	f001 fd9b 	bl	800305c <__clzsi2>
 8001526:	0001      	movs	r1, r0
 8001528:	3118      	adds	r1, #24
 800152a:	291f      	cmp	r1, #31
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x318>
 800152e:	e6cf      	b.n	80012d0 <__aeabi_dadd+0xb8>
 8001530:	002b      	movs	r3, r5
 8001532:	3808      	subs	r0, #8
 8001534:	4083      	lsls	r3, r0
 8001536:	2500      	movs	r5, #0
 8001538:	e6d2      	b.n	80012e0 <__aeabi_dadd+0xc8>
 800153a:	4662      	mov	r2, ip
 800153c:	433a      	orrs	r2, r7
 800153e:	0011      	movs	r1, r2
 8001540:	1e4f      	subs	r7, r1, #1
 8001542:	41b9      	sbcs	r1, r7
 8001544:	e6ac      	b.n	80012a0 <__aeabi_dadd+0x88>
 8001546:	4649      	mov	r1, r9
 8001548:	0758      	lsls	r0, r3, #29
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	4301      	orrs	r1, r0
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	e787      	b.n	8001462 <__aeabi_dadd+0x24a>
 8001552:	4649      	mov	r1, r9
 8001554:	075a      	lsls	r2, r3, #29
 8001556:	08c9      	lsrs	r1, r1, #3
 8001558:	4311      	orrs	r1, r2
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	e7a6      	b.n	80014ac <__aeabi_dadd+0x294>
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <__aeabi_dadd+0x37c>)
 8001560:	1c70      	adds	r0, r6, #1
 8001562:	4208      	tst	r0, r1
 8001564:	d000      	beq.n	8001568 <__aeabi_dadd+0x350>
 8001566:	e0bb      	b.n	80016e0 <__aeabi_dadd+0x4c8>
 8001568:	2e00      	cmp	r6, #0
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x356>
 800156c:	e114      	b.n	8001798 <__aeabi_dadd+0x580>
 800156e:	4649      	mov	r1, r9
 8001570:	4319      	orrs	r1, r3
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x35e>
 8001574:	e175      	b.n	8001862 <__aeabi_dadd+0x64a>
 8001576:	0029      	movs	r1, r5
 8001578:	4339      	orrs	r1, r7
 800157a:	d000      	beq.n	800157e <__aeabi_dadd+0x366>
 800157c:	e17e      	b.n	800187c <__aeabi_dadd+0x664>
 800157e:	4649      	mov	r1, r9
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	4301      	orrs	r1, r0
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	e76e      	b.n	8001468 <__aeabi_dadd+0x250>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	000007ff 	.word	0x000007ff
 8001590:	ff7fffff 	.word	0xff7fffff
 8001594:	000007fe 	.word	0x000007fe
 8001598:	4649      	mov	r1, r9
 800159a:	1bcd      	subs	r5, r1, r7
 800159c:	4661      	mov	r1, ip
 800159e:	1a58      	subs	r0, r3, r1
 80015a0:	45a9      	cmp	r9, r5
 80015a2:	4189      	sbcs	r1, r1
 80015a4:	4249      	negs	r1, r1
 80015a6:	4688      	mov	r8, r1
 80015a8:	0001      	movs	r1, r0
 80015aa:	4640      	mov	r0, r8
 80015ac:	1a09      	subs	r1, r1, r0
 80015ae:	4688      	mov	r8, r1
 80015b0:	0209      	lsls	r1, r1, #8
 80015b2:	d500      	bpl.n	80015b6 <__aeabi_dadd+0x39e>
 80015b4:	e0a6      	b.n	8001704 <__aeabi_dadd+0x4ec>
 80015b6:	4641      	mov	r1, r8
 80015b8:	4329      	orrs	r1, r5
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x3a6>
 80015bc:	e67f      	b.n	80012be <__aeabi_dadd+0xa6>
 80015be:	2300      	movs	r3, #0
 80015c0:	2400      	movs	r4, #0
 80015c2:	e751      	b.n	8001468 <__aeabi_dadd+0x250>
 80015c4:	4cc7      	ldr	r4, [pc, #796]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80015c6:	42a1      	cmp	r1, r4
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x3b4>
 80015ca:	e0c7      	b.n	800175c <__aeabi_dadd+0x544>
 80015cc:	2480      	movs	r4, #128	; 0x80
 80015ce:	0424      	lsls	r4, r4, #16
 80015d0:	4323      	orrs	r3, r4
 80015d2:	2a38      	cmp	r2, #56	; 0x38
 80015d4:	dc54      	bgt.n	8001680 <__aeabi_dadd+0x468>
 80015d6:	2a1f      	cmp	r2, #31
 80015d8:	dd00      	ble.n	80015dc <__aeabi_dadd+0x3c4>
 80015da:	e0cc      	b.n	8001776 <__aeabi_dadd+0x55e>
 80015dc:	2420      	movs	r4, #32
 80015de:	4648      	mov	r0, r9
 80015e0:	1aa4      	subs	r4, r4, r2
 80015e2:	001d      	movs	r5, r3
 80015e4:	464e      	mov	r6, r9
 80015e6:	40a0      	lsls	r0, r4
 80015e8:	40d6      	lsrs	r6, r2
 80015ea:	40a5      	lsls	r5, r4
 80015ec:	0004      	movs	r4, r0
 80015ee:	40d3      	lsrs	r3, r2
 80015f0:	4662      	mov	r2, ip
 80015f2:	4335      	orrs	r5, r6
 80015f4:	1e66      	subs	r6, r4, #1
 80015f6:	41b4      	sbcs	r4, r6
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	469c      	mov	ip, r3
 80015fc:	4325      	orrs	r5, r4
 80015fe:	e044      	b.n	800168a <__aeabi_dadd+0x472>
 8001600:	4662      	mov	r2, ip
 8001602:	433a      	orrs	r2, r7
 8001604:	0015      	movs	r5, r2
 8001606:	1e6f      	subs	r7, r5, #1
 8001608:	41bd      	sbcs	r5, r7
 800160a:	444d      	add	r5, r9
 800160c:	454d      	cmp	r5, r9
 800160e:	4189      	sbcs	r1, r1
 8001610:	4249      	negs	r1, r1
 8001612:	4688      	mov	r8, r1
 8001614:	4498      	add	r8, r3
 8001616:	4643      	mov	r3, r8
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	d400      	bmi.n	800161e <__aeabi_dadd+0x406>
 800161c:	e718      	b.n	8001450 <__aeabi_dadd+0x238>
 800161e:	4bb1      	ldr	r3, [pc, #708]	; (80018e4 <__aeabi_dadd+0x6cc>)
 8001620:	3601      	adds	r6, #1
 8001622:	429e      	cmp	r6, r3
 8001624:	d049      	beq.n	80016ba <__aeabi_dadd+0x4a2>
 8001626:	4642      	mov	r2, r8
 8001628:	4baf      	ldr	r3, [pc, #700]	; (80018e8 <__aeabi_dadd+0x6d0>)
 800162a:	2101      	movs	r1, #1
 800162c:	401a      	ands	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	086a      	lsrs	r2, r5, #1
 8001632:	400d      	ands	r5, r1
 8001634:	4315      	orrs	r5, r2
 8001636:	07d9      	lsls	r1, r3, #31
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	4698      	mov	r8, r3
 800163c:	430d      	orrs	r5, r1
 800163e:	e665      	b.n	800130c <__aeabi_dadd+0xf4>
 8001640:	0018      	movs	r0, r3
 8001642:	3e1f      	subs	r6, #31
 8001644:	40f0      	lsrs	r0, r6
 8001646:	2a20      	cmp	r2, #32
 8001648:	d003      	beq.n	8001652 <__aeabi_dadd+0x43a>
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	1a8a      	subs	r2, r1, r2
 800164e:	4093      	lsls	r3, r2
 8001650:	431d      	orrs	r5, r3
 8001652:	1e69      	subs	r1, r5, #1
 8001654:	418d      	sbcs	r5, r1
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4698      	mov	r8, r3
 800165c:	4305      	orrs	r5, r0
 800165e:	e6f7      	b.n	8001450 <__aeabi_dadd+0x238>
 8001660:	0011      	movs	r1, r2
 8001662:	4665      	mov	r5, ip
 8001664:	3920      	subs	r1, #32
 8001666:	40cd      	lsrs	r5, r1
 8001668:	2a20      	cmp	r2, #32
 800166a:	d004      	beq.n	8001676 <__aeabi_dadd+0x45e>
 800166c:	2040      	movs	r0, #64	; 0x40
 800166e:	4661      	mov	r1, ip
 8001670:	1a82      	subs	r2, r0, r2
 8001672:	4091      	lsls	r1, r2
 8001674:	430f      	orrs	r7, r1
 8001676:	0039      	movs	r1, r7
 8001678:	1e4f      	subs	r7, r1, #1
 800167a:	41b9      	sbcs	r1, r7
 800167c:	4329      	orrs	r1, r5
 800167e:	e60f      	b.n	80012a0 <__aeabi_dadd+0x88>
 8001680:	464a      	mov	r2, r9
 8001682:	4313      	orrs	r3, r2
 8001684:	001d      	movs	r5, r3
 8001686:	1e6b      	subs	r3, r5, #1
 8001688:	419d      	sbcs	r5, r3
 800168a:	1b7d      	subs	r5, r7, r5
 800168c:	42af      	cmp	r7, r5
 800168e:	419b      	sbcs	r3, r3
 8001690:	4662      	mov	r2, ip
 8001692:	425b      	negs	r3, r3
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4698      	mov	r8, r3
 8001698:	4654      	mov	r4, sl
 800169a:	000e      	movs	r6, r1
 800169c:	e607      	b.n	80012ae <__aeabi_dadd+0x96>
 800169e:	4648      	mov	r0, r9
 80016a0:	4318      	orrs	r0, r3
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x48e>
 80016a4:	e0b3      	b.n	800180e <__aeabi_dadd+0x5f6>
 80016a6:	1e50      	subs	r0, r2, #1
 80016a8:	2a01      	cmp	r2, #1
 80016aa:	d100      	bne.n	80016ae <__aeabi_dadd+0x496>
 80016ac:	e10d      	b.n	80018ca <__aeabi_dadd+0x6b2>
 80016ae:	4d8d      	ldr	r5, [pc, #564]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80016b0:	42aa      	cmp	r2, r5
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x49e>
 80016b4:	e0a5      	b.n	8001802 <__aeabi_dadd+0x5ea>
 80016b6:	0002      	movs	r2, r0
 80016b8:	e710      	b.n	80014dc <__aeabi_dadd+0x2c4>
 80016ba:	0032      	movs	r2, r6
 80016bc:	2300      	movs	r3, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	e644      	b.n	800134c <__aeabi_dadd+0x134>
 80016c2:	2120      	movs	r1, #32
 80016c4:	0038      	movs	r0, r7
 80016c6:	1a89      	subs	r1, r1, r2
 80016c8:	4665      	mov	r5, ip
 80016ca:	408f      	lsls	r7, r1
 80016cc:	408d      	lsls	r5, r1
 80016ce:	40d0      	lsrs	r0, r2
 80016d0:	1e79      	subs	r1, r7, #1
 80016d2:	418f      	sbcs	r7, r1
 80016d4:	4305      	orrs	r5, r0
 80016d6:	433d      	orrs	r5, r7
 80016d8:	4667      	mov	r7, ip
 80016da:	40d7      	lsrs	r7, r2
 80016dc:	19db      	adds	r3, r3, r7
 80016de:	e794      	b.n	800160a <__aeabi_dadd+0x3f2>
 80016e0:	4a80      	ldr	r2, [pc, #512]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dadd+0x4d0>
 80016e6:	e0ec      	b.n	80018c2 <__aeabi_dadd+0x6aa>
 80016e8:	0039      	movs	r1, r7
 80016ea:	4449      	add	r1, r9
 80016ec:	4549      	cmp	r1, r9
 80016ee:	4192      	sbcs	r2, r2
 80016f0:	4463      	add	r3, ip
 80016f2:	4252      	negs	r2, r2
 80016f4:	189b      	adds	r3, r3, r2
 80016f6:	07dd      	lsls	r5, r3, #31
 80016f8:	0849      	lsrs	r1, r1, #1
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	4698      	mov	r8, r3
 80016fe:	0006      	movs	r6, r0
 8001700:	430d      	orrs	r5, r1
 8001702:	e6a5      	b.n	8001450 <__aeabi_dadd+0x238>
 8001704:	464a      	mov	r2, r9
 8001706:	1abd      	subs	r5, r7, r2
 8001708:	42af      	cmp	r7, r5
 800170a:	4189      	sbcs	r1, r1
 800170c:	4662      	mov	r2, ip
 800170e:	4249      	negs	r1, r1
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	4698      	mov	r8, r3
 8001716:	4654      	mov	r4, sl
 8001718:	e5d1      	b.n	80012be <__aeabi_dadd+0xa6>
 800171a:	076c      	lsls	r4, r5, #29
 800171c:	08f9      	lsrs	r1, r7, #3
 800171e:	4321      	orrs	r1, r4
 8001720:	08eb      	lsrs	r3, r5, #3
 8001722:	0004      	movs	r4, r0
 8001724:	e69d      	b.n	8001462 <__aeabi_dadd+0x24a>
 8001726:	464a      	mov	r2, r9
 8001728:	431a      	orrs	r2, r3
 800172a:	d175      	bne.n	8001818 <__aeabi_dadd+0x600>
 800172c:	4661      	mov	r1, ip
 800172e:	4339      	orrs	r1, r7
 8001730:	d114      	bne.n	800175c <__aeabi_dadd+0x544>
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	2400      	movs	r4, #0
 8001736:	031b      	lsls	r3, r3, #12
 8001738:	e6bc      	b.n	80014b4 <__aeabi_dadd+0x29c>
 800173a:	464a      	mov	r2, r9
 800173c:	1bd5      	subs	r5, r2, r7
 800173e:	45a9      	cmp	r9, r5
 8001740:	4189      	sbcs	r1, r1
 8001742:	4662      	mov	r2, ip
 8001744:	4249      	negs	r1, r1
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	1a5b      	subs	r3, r3, r1
 800174a:	4698      	mov	r8, r3
 800174c:	2601      	movs	r6, #1
 800174e:	e5ae      	b.n	80012ae <__aeabi_dadd+0x96>
 8001750:	464a      	mov	r2, r9
 8001752:	08d1      	lsrs	r1, r2, #3
 8001754:	075a      	lsls	r2, r3, #29
 8001756:	4311      	orrs	r1, r2
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	e6a7      	b.n	80014ac <__aeabi_dadd+0x294>
 800175c:	4663      	mov	r3, ip
 800175e:	08f9      	lsrs	r1, r7, #3
 8001760:	075a      	lsls	r2, r3, #29
 8001762:	4654      	mov	r4, sl
 8001764:	4311      	orrs	r1, r2
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	e6a0      	b.n	80014ac <__aeabi_dadd+0x294>
 800176a:	464a      	mov	r2, r9
 800176c:	4313      	orrs	r3, r2
 800176e:	001d      	movs	r5, r3
 8001770:	1e6b      	subs	r3, r5, #1
 8001772:	419d      	sbcs	r5, r3
 8001774:	e6c7      	b.n	8001506 <__aeabi_dadd+0x2ee>
 8001776:	0014      	movs	r4, r2
 8001778:	001e      	movs	r6, r3
 800177a:	3c20      	subs	r4, #32
 800177c:	40e6      	lsrs	r6, r4
 800177e:	2a20      	cmp	r2, #32
 8001780:	d005      	beq.n	800178e <__aeabi_dadd+0x576>
 8001782:	2440      	movs	r4, #64	; 0x40
 8001784:	1aa2      	subs	r2, r4, r2
 8001786:	4093      	lsls	r3, r2
 8001788:	464a      	mov	r2, r9
 800178a:	431a      	orrs	r2, r3
 800178c:	4691      	mov	r9, r2
 800178e:	464d      	mov	r5, r9
 8001790:	1e6b      	subs	r3, r5, #1
 8001792:	419d      	sbcs	r5, r3
 8001794:	4335      	orrs	r5, r6
 8001796:	e778      	b.n	800168a <__aeabi_dadd+0x472>
 8001798:	464a      	mov	r2, r9
 800179a:	431a      	orrs	r2, r3
 800179c:	d000      	beq.n	80017a0 <__aeabi_dadd+0x588>
 800179e:	e66b      	b.n	8001478 <__aeabi_dadd+0x260>
 80017a0:	076b      	lsls	r3, r5, #29
 80017a2:	08f9      	lsrs	r1, r7, #3
 80017a4:	4319      	orrs	r1, r3
 80017a6:	08eb      	lsrs	r3, r5, #3
 80017a8:	e680      	b.n	80014ac <__aeabi_dadd+0x294>
 80017aa:	4661      	mov	r1, ip
 80017ac:	4339      	orrs	r1, r7
 80017ae:	d054      	beq.n	800185a <__aeabi_dadd+0x642>
 80017b0:	4663      	mov	r3, ip
 80017b2:	08f9      	lsrs	r1, r7, #3
 80017b4:	075c      	lsls	r4, r3, #29
 80017b6:	4321      	orrs	r1, r4
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	0004      	movs	r4, r0
 80017bc:	e654      	b.n	8001468 <__aeabi_dadd+0x250>
 80017be:	464a      	mov	r2, r9
 80017c0:	1abd      	subs	r5, r7, r2
 80017c2:	42af      	cmp	r7, r5
 80017c4:	4189      	sbcs	r1, r1
 80017c6:	4662      	mov	r2, ip
 80017c8:	4249      	negs	r1, r1
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	1a5b      	subs	r3, r3, r1
 80017ce:	4698      	mov	r8, r3
 80017d0:	0004      	movs	r4, r0
 80017d2:	2601      	movs	r6, #1
 80017d4:	e56b      	b.n	80012ae <__aeabi_dadd+0x96>
 80017d6:	464a      	mov	r2, r9
 80017d8:	1bd5      	subs	r5, r2, r7
 80017da:	45a9      	cmp	r9, r5
 80017dc:	4189      	sbcs	r1, r1
 80017de:	4662      	mov	r2, ip
 80017e0:	4249      	negs	r1, r1
 80017e2:	1a9a      	subs	r2, r3, r2
 80017e4:	1a52      	subs	r2, r2, r1
 80017e6:	4690      	mov	r8, r2
 80017e8:	0212      	lsls	r2, r2, #8
 80017ea:	d532      	bpl.n	8001852 <__aeabi_dadd+0x63a>
 80017ec:	464a      	mov	r2, r9
 80017ee:	1abd      	subs	r5, r7, r2
 80017f0:	42af      	cmp	r7, r5
 80017f2:	4189      	sbcs	r1, r1
 80017f4:	4662      	mov	r2, ip
 80017f6:	4249      	negs	r1, r1
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	1a5b      	subs	r3, r3, r1
 80017fc:	4698      	mov	r8, r3
 80017fe:	0004      	movs	r4, r0
 8001800:	e584      	b.n	800130c <__aeabi_dadd+0xf4>
 8001802:	4663      	mov	r3, ip
 8001804:	08f9      	lsrs	r1, r7, #3
 8001806:	075a      	lsls	r2, r3, #29
 8001808:	4311      	orrs	r1, r2
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	e64e      	b.n	80014ac <__aeabi_dadd+0x294>
 800180e:	08f9      	lsrs	r1, r7, #3
 8001810:	0768      	lsls	r0, r5, #29
 8001812:	4301      	orrs	r1, r0
 8001814:	08eb      	lsrs	r3, r5, #3
 8001816:	e624      	b.n	8001462 <__aeabi_dadd+0x24a>
 8001818:	4662      	mov	r2, ip
 800181a:	433a      	orrs	r2, r7
 800181c:	d100      	bne.n	8001820 <__aeabi_dadd+0x608>
 800181e:	e698      	b.n	8001552 <__aeabi_dadd+0x33a>
 8001820:	464a      	mov	r2, r9
 8001822:	08d1      	lsrs	r1, r2, #3
 8001824:	075a      	lsls	r2, r3, #29
 8001826:	4311      	orrs	r1, r2
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	031b      	lsls	r3, r3, #12
 800182e:	421a      	tst	r2, r3
 8001830:	d008      	beq.n	8001844 <__aeabi_dadd+0x62c>
 8001832:	4660      	mov	r0, ip
 8001834:	08c5      	lsrs	r5, r0, #3
 8001836:	421d      	tst	r5, r3
 8001838:	d104      	bne.n	8001844 <__aeabi_dadd+0x62c>
 800183a:	4654      	mov	r4, sl
 800183c:	002a      	movs	r2, r5
 800183e:	08f9      	lsrs	r1, r7, #3
 8001840:	0743      	lsls	r3, r0, #29
 8001842:	4319      	orrs	r1, r3
 8001844:	0f4b      	lsrs	r3, r1, #29
 8001846:	00c9      	lsls	r1, r1, #3
 8001848:	075b      	lsls	r3, r3, #29
 800184a:	08c9      	lsrs	r1, r1, #3
 800184c:	4319      	orrs	r1, r3
 800184e:	0013      	movs	r3, r2
 8001850:	e62c      	b.n	80014ac <__aeabi_dadd+0x294>
 8001852:	4641      	mov	r1, r8
 8001854:	4329      	orrs	r1, r5
 8001856:	d000      	beq.n	800185a <__aeabi_dadd+0x642>
 8001858:	e5fa      	b.n	8001450 <__aeabi_dadd+0x238>
 800185a:	2300      	movs	r3, #0
 800185c:	000a      	movs	r2, r1
 800185e:	2400      	movs	r4, #0
 8001860:	e602      	b.n	8001468 <__aeabi_dadd+0x250>
 8001862:	076b      	lsls	r3, r5, #29
 8001864:	08f9      	lsrs	r1, r7, #3
 8001866:	4319      	orrs	r1, r3
 8001868:	08eb      	lsrs	r3, r5, #3
 800186a:	e5fd      	b.n	8001468 <__aeabi_dadd+0x250>
 800186c:	4663      	mov	r3, ip
 800186e:	08f9      	lsrs	r1, r7, #3
 8001870:	075b      	lsls	r3, r3, #29
 8001872:	4319      	orrs	r1, r3
 8001874:	4663      	mov	r3, ip
 8001876:	0004      	movs	r4, r0
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	e617      	b.n	80014ac <__aeabi_dadd+0x294>
 800187c:	003d      	movs	r5, r7
 800187e:	444d      	add	r5, r9
 8001880:	4463      	add	r3, ip
 8001882:	454d      	cmp	r5, r9
 8001884:	4189      	sbcs	r1, r1
 8001886:	4698      	mov	r8, r3
 8001888:	4249      	negs	r1, r1
 800188a:	4488      	add	r8, r1
 800188c:	4643      	mov	r3, r8
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_dadd+0x67c>
 8001892:	e5dd      	b.n	8001450 <__aeabi_dadd+0x238>
 8001894:	4642      	mov	r2, r8
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <__aeabi_dadd+0x6d0>)
 8001898:	2601      	movs	r6, #1
 800189a:	401a      	ands	r2, r3
 800189c:	4690      	mov	r8, r2
 800189e:	e5d7      	b.n	8001450 <__aeabi_dadd+0x238>
 80018a0:	0010      	movs	r0, r2
 80018a2:	001e      	movs	r6, r3
 80018a4:	3820      	subs	r0, #32
 80018a6:	40c6      	lsrs	r6, r0
 80018a8:	2a20      	cmp	r2, #32
 80018aa:	d005      	beq.n	80018b8 <__aeabi_dadd+0x6a0>
 80018ac:	2040      	movs	r0, #64	; 0x40
 80018ae:	1a82      	subs	r2, r0, r2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	464a      	mov	r2, r9
 80018b4:	431a      	orrs	r2, r3
 80018b6:	4691      	mov	r9, r2
 80018b8:	464d      	mov	r5, r9
 80018ba:	1e6b      	subs	r3, r5, #1
 80018bc:	419d      	sbcs	r5, r3
 80018be:	4335      	orrs	r5, r6
 80018c0:	e621      	b.n	8001506 <__aeabi_dadd+0x2ee>
 80018c2:	0002      	movs	r2, r0
 80018c4:	2300      	movs	r3, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	e540      	b.n	800134c <__aeabi_dadd+0x134>
 80018ca:	464a      	mov	r2, r9
 80018cc:	19d5      	adds	r5, r2, r7
 80018ce:	42bd      	cmp	r5, r7
 80018d0:	4189      	sbcs	r1, r1
 80018d2:	4463      	add	r3, ip
 80018d4:	4698      	mov	r8, r3
 80018d6:	4249      	negs	r1, r1
 80018d8:	4488      	add	r8, r1
 80018da:	e5b3      	b.n	8001444 <__aeabi_dadd+0x22c>
 80018dc:	2100      	movs	r1, #0
 80018de:	4a01      	ldr	r2, [pc, #4]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80018e0:	000b      	movs	r3, r1
 80018e2:	e533      	b.n	800134c <__aeabi_dadd+0x134>
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	ff7fffff 	.word	0xff7fffff

080018ec <__aeabi_ddiv>:
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	4657      	mov	r7, sl
 80018f0:	464e      	mov	r6, r9
 80018f2:	4645      	mov	r5, r8
 80018f4:	46de      	mov	lr, fp
 80018f6:	b5e0      	push	{r5, r6, r7, lr}
 80018f8:	4681      	mov	r9, r0
 80018fa:	0005      	movs	r5, r0
 80018fc:	030c      	lsls	r4, r1, #12
 80018fe:	0048      	lsls	r0, r1, #1
 8001900:	4692      	mov	sl, r2
 8001902:	001f      	movs	r7, r3
 8001904:	b085      	sub	sp, #20
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	0d40      	lsrs	r0, r0, #21
 800190a:	0fce      	lsrs	r6, r1, #31
 800190c:	2800      	cmp	r0, #0
 800190e:	d059      	beq.n	80019c4 <__aeabi_ddiv+0xd8>
 8001910:	4b87      	ldr	r3, [pc, #540]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001912:	4298      	cmp	r0, r3
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x2c>
 8001916:	e098      	b.n	8001a4a <__aeabi_ddiv+0x15e>
 8001918:	0f6b      	lsrs	r3, r5, #29
 800191a:	00e4      	lsls	r4, r4, #3
 800191c:	431c      	orrs	r4, r3
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	4323      	orrs	r3, r4
 8001924:	4698      	mov	r8, r3
 8001926:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <__aeabi_ddiv+0x248>)
 8001928:	00ed      	lsls	r5, r5, #3
 800192a:	469b      	mov	fp, r3
 800192c:	2300      	movs	r3, #0
 800192e:	4699      	mov	r9, r3
 8001930:	4483      	add	fp, r0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	033c      	lsls	r4, r7, #12
 8001936:	007b      	lsls	r3, r7, #1
 8001938:	4650      	mov	r0, sl
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	0d5b      	lsrs	r3, r3, #21
 800193e:	0fff      	lsrs	r7, r7, #31
 8001940:	2b00      	cmp	r3, #0
 8001942:	d067      	beq.n	8001a14 <__aeabi_ddiv+0x128>
 8001944:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d018      	beq.n	800197c <__aeabi_ddiv+0x90>
 800194a:	497a      	ldr	r1, [pc, #488]	; (8001b34 <__aeabi_ddiv+0x248>)
 800194c:	0f42      	lsrs	r2, r0, #29
 800194e:	468c      	mov	ip, r1
 8001950:	00e4      	lsls	r4, r4, #3
 8001952:	4659      	mov	r1, fp
 8001954:	4314      	orrs	r4, r2
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	4463      	add	r3, ip
 800195a:	0412      	lsls	r2, r2, #16
 800195c:	1acb      	subs	r3, r1, r3
 800195e:	4314      	orrs	r4, r2
 8001960:	469b      	mov	fp, r3
 8001962:	00c2      	lsls	r2, r0, #3
 8001964:	2000      	movs	r0, #0
 8001966:	0033      	movs	r3, r6
 8001968:	407b      	eors	r3, r7
 800196a:	469a      	mov	sl, r3
 800196c:	464b      	mov	r3, r9
 800196e:	2b0f      	cmp	r3, #15
 8001970:	d900      	bls.n	8001974 <__aeabi_ddiv+0x88>
 8001972:	e0ef      	b.n	8001b54 <__aeabi_ddiv+0x268>
 8001974:	4970      	ldr	r1, [pc, #448]	; (8001b38 <__aeabi_ddiv+0x24c>)
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	58cb      	ldr	r3, [r1, r3]
 800197a:	469f      	mov	pc, r3
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <__aeabi_ddiv+0x250>)
 800197e:	4652      	mov	r2, sl
 8001980:	469c      	mov	ip, r3
 8001982:	4322      	orrs	r2, r4
 8001984:	44e3      	add	fp, ip
 8001986:	2a00      	cmp	r2, #0
 8001988:	d000      	beq.n	800198c <__aeabi_ddiv+0xa0>
 800198a:	e095      	b.n	8001ab8 <__aeabi_ddiv+0x1cc>
 800198c:	4649      	mov	r1, r9
 800198e:	2302      	movs	r3, #2
 8001990:	4319      	orrs	r1, r3
 8001992:	4689      	mov	r9, r1
 8001994:	2400      	movs	r4, #0
 8001996:	2002      	movs	r0, #2
 8001998:	e7e5      	b.n	8001966 <__aeabi_ddiv+0x7a>
 800199a:	2300      	movs	r3, #0
 800199c:	2400      	movs	r4, #0
 800199e:	2500      	movs	r5, #0
 80019a0:	4652      	mov	r2, sl
 80019a2:	051b      	lsls	r3, r3, #20
 80019a4:	4323      	orrs	r3, r4
 80019a6:	07d2      	lsls	r2, r2, #31
 80019a8:	4313      	orrs	r3, r2
 80019aa:	0028      	movs	r0, r5
 80019ac:	0019      	movs	r1, r3
 80019ae:	b005      	add	sp, #20
 80019b0:	bcf0      	pop	{r4, r5, r6, r7}
 80019b2:	46bb      	mov	fp, r7
 80019b4:	46b2      	mov	sl, r6
 80019b6:	46a9      	mov	r9, r5
 80019b8:	46a0      	mov	r8, r4
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019bc:	2400      	movs	r4, #0
 80019be:	2500      	movs	r5, #0
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <__aeabi_ddiv+0x244>)
 80019c2:	e7ed      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 80019c4:	464b      	mov	r3, r9
 80019c6:	4323      	orrs	r3, r4
 80019c8:	4698      	mov	r8, r3
 80019ca:	d100      	bne.n	80019ce <__aeabi_ddiv+0xe2>
 80019cc:	e089      	b.n	8001ae2 <__aeabi_ddiv+0x1f6>
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0xe8>
 80019d2:	e1e0      	b.n	8001d96 <__aeabi_ddiv+0x4aa>
 80019d4:	0020      	movs	r0, r4
 80019d6:	f001 fb41 	bl	800305c <__clzsi2>
 80019da:	0001      	movs	r1, r0
 80019dc:	0002      	movs	r2, r0
 80019de:	390b      	subs	r1, #11
 80019e0:	231d      	movs	r3, #29
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	4649      	mov	r1, r9
 80019e6:	0010      	movs	r0, r2
 80019e8:	40d9      	lsrs	r1, r3
 80019ea:	3808      	subs	r0, #8
 80019ec:	4084      	lsls	r4, r0
 80019ee:	000b      	movs	r3, r1
 80019f0:	464d      	mov	r5, r9
 80019f2:	4323      	orrs	r3, r4
 80019f4:	4698      	mov	r8, r3
 80019f6:	4085      	lsls	r5, r0
 80019f8:	4851      	ldr	r0, [pc, #324]	; (8001b40 <__aeabi_ddiv+0x254>)
 80019fa:	033c      	lsls	r4, r7, #12
 80019fc:	1a83      	subs	r3, r0, r2
 80019fe:	469b      	mov	fp, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	4699      	mov	r9, r3
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	007b      	lsls	r3, r7, #1
 8001a08:	4650      	mov	r0, sl
 8001a0a:	0b24      	lsrs	r4, r4, #12
 8001a0c:	0d5b      	lsrs	r3, r3, #21
 8001a0e:	0fff      	lsrs	r7, r7, #31
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d197      	bne.n	8001944 <__aeabi_ddiv+0x58>
 8001a14:	4652      	mov	r2, sl
 8001a16:	4322      	orrs	r2, r4
 8001a18:	d055      	beq.n	8001ac6 <__aeabi_ddiv+0x1da>
 8001a1a:	2c00      	cmp	r4, #0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_ddiv+0x134>
 8001a1e:	e1ca      	b.n	8001db6 <__aeabi_ddiv+0x4ca>
 8001a20:	0020      	movs	r0, r4
 8001a22:	f001 fb1b 	bl	800305c <__clzsi2>
 8001a26:	0002      	movs	r2, r0
 8001a28:	3a0b      	subs	r2, #11
 8001a2a:	231d      	movs	r3, #29
 8001a2c:	0001      	movs	r1, r0
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	4652      	mov	r2, sl
 8001a32:	3908      	subs	r1, #8
 8001a34:	40da      	lsrs	r2, r3
 8001a36:	408c      	lsls	r4, r1
 8001a38:	4314      	orrs	r4, r2
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	408a      	lsls	r2, r1
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <__aeabi_ddiv+0x258>)
 8001a40:	4458      	add	r0, fp
 8001a42:	469b      	mov	fp, r3
 8001a44:	4483      	add	fp, r0
 8001a46:	2000      	movs	r0, #0
 8001a48:	e78d      	b.n	8001966 <__aeabi_ddiv+0x7a>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	4323      	orrs	r3, r4
 8001a4e:	4698      	mov	r8, r3
 8001a50:	d140      	bne.n	8001ad4 <__aeabi_ddiv+0x1e8>
 8001a52:	2308      	movs	r3, #8
 8001a54:	4699      	mov	r9, r3
 8001a56:	3b06      	subs	r3, #6
 8001a58:	2500      	movs	r5, #0
 8001a5a:	4683      	mov	fp, r0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	e769      	b.n	8001934 <__aeabi_ddiv+0x48>
 8001a60:	46b2      	mov	sl, r6
 8001a62:	9b00      	ldr	r3, [sp, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d0a9      	beq.n	80019bc <__aeabi_ddiv+0xd0>
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_ddiv+0x182>
 8001a6c:	e211      	b.n	8001e92 <__aeabi_ddiv+0x5a6>
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d093      	beq.n	800199a <__aeabi_ddiv+0xae>
 8001a72:	4a35      	ldr	r2, [pc, #212]	; (8001b48 <__aeabi_ddiv+0x25c>)
 8001a74:	445a      	add	r2, fp
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	dc00      	bgt.n	8001a7c <__aeabi_ddiv+0x190>
 8001a7a:	e13c      	b.n	8001cf6 <__aeabi_ddiv+0x40a>
 8001a7c:	076b      	lsls	r3, r5, #29
 8001a7e:	d000      	beq.n	8001a82 <__aeabi_ddiv+0x196>
 8001a80:	e1a7      	b.n	8001dd2 <__aeabi_ddiv+0x4e6>
 8001a82:	08ed      	lsrs	r5, r5, #3
 8001a84:	4643      	mov	r3, r8
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	d506      	bpl.n	8001a98 <__aeabi_ddiv+0x1ac>
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <__aeabi_ddiv+0x260>)
 8001a8e:	401a      	ands	r2, r3
 8001a90:	4690      	mov	r8, r2
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	00d2      	lsls	r2, r2, #3
 8001a96:	445a      	add	r2, fp
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <__aeabi_ddiv+0x264>)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dc8e      	bgt.n	80019bc <__aeabi_ddiv+0xd0>
 8001a9e:	4643      	mov	r3, r8
 8001aa0:	0552      	lsls	r2, r2, #21
 8001aa2:	0758      	lsls	r0, r3, #29
 8001aa4:	025c      	lsls	r4, r3, #9
 8001aa6:	4305      	orrs	r5, r0
 8001aa8:	0b24      	lsrs	r4, r4, #12
 8001aaa:	0d53      	lsrs	r3, r2, #21
 8001aac:	e778      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001aae:	46ba      	mov	sl, r7
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	0015      	movs	r5, r2
 8001ab4:	9000      	str	r0, [sp, #0]
 8001ab6:	e7d4      	b.n	8001a62 <__aeabi_ddiv+0x176>
 8001ab8:	464a      	mov	r2, r9
 8001aba:	2303      	movs	r3, #3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	4691      	mov	r9, r2
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	4652      	mov	r2, sl
 8001ac4:	e74f      	b.n	8001966 <__aeabi_ddiv+0x7a>
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	2301      	movs	r3, #1
 8001aca:	4319      	orrs	r1, r3
 8001acc:	4689      	mov	r9, r1
 8001ace:	2400      	movs	r4, #0
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	e748      	b.n	8001966 <__aeabi_ddiv+0x7a>
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	3b09      	subs	r3, #9
 8001ada:	46a0      	mov	r8, r4
 8001adc:	4683      	mov	fp, r0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	e728      	b.n	8001934 <__aeabi_ddiv+0x48>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	469b      	mov	fp, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	2500      	movs	r5, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	e720      	b.n	8001934 <__aeabi_ddiv+0x48>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2480      	movs	r4, #128	; 0x80
 8001af6:	469a      	mov	sl, r3
 8001af8:	2500      	movs	r5, #0
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	e74f      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	4641      	mov	r1, r8
 8001b04:	031b      	lsls	r3, r3, #12
 8001b06:	4219      	tst	r1, r3
 8001b08:	d008      	beq.n	8001b1c <__aeabi_ddiv+0x230>
 8001b0a:	421c      	tst	r4, r3
 8001b0c:	d106      	bne.n	8001b1c <__aeabi_ddiv+0x230>
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	46ba      	mov	sl, r7
 8001b14:	0015      	movs	r5, r2
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001b18:	0b24      	lsrs	r4, r4, #12
 8001b1a:	e741      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001b1c:	2480      	movs	r4, #128	; 0x80
 8001b1e:	4643      	mov	r3, r8
 8001b20:	0324      	lsls	r4, r4, #12
 8001b22:	431c      	orrs	r4, r3
 8001b24:	0324      	lsls	r4, r4, #12
 8001b26:	46b2      	mov	sl, r6
 8001b28:	4b01      	ldr	r3, [pc, #4]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001b2a:	0b24      	lsrs	r4, r4, #12
 8001b2c:	e738      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	000007ff 	.word	0x000007ff
 8001b34:	fffffc01 	.word	0xfffffc01
 8001b38:	08011a3c 	.word	0x08011a3c
 8001b3c:	fffff801 	.word	0xfffff801
 8001b40:	fffffc0d 	.word	0xfffffc0d
 8001b44:	000003f3 	.word	0x000003f3
 8001b48:	000003ff 	.word	0x000003ff
 8001b4c:	feffffff 	.word	0xfeffffff
 8001b50:	000007fe 	.word	0x000007fe
 8001b54:	4544      	cmp	r4, r8
 8001b56:	d200      	bcs.n	8001b5a <__aeabi_ddiv+0x26e>
 8001b58:	e116      	b.n	8001d88 <__aeabi_ddiv+0x49c>
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x272>
 8001b5c:	e111      	b.n	8001d82 <__aeabi_ddiv+0x496>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	425b      	negs	r3, r3
 8001b62:	469c      	mov	ip, r3
 8001b64:	002e      	movs	r6, r5
 8001b66:	4640      	mov	r0, r8
 8001b68:	2500      	movs	r5, #0
 8001b6a:	44e3      	add	fp, ip
 8001b6c:	0223      	lsls	r3, r4, #8
 8001b6e:	0e14      	lsrs	r4, r2, #24
 8001b70:	431c      	orrs	r4, r3
 8001b72:	0c1b      	lsrs	r3, r3, #16
 8001b74:	4699      	mov	r9, r3
 8001b76:	0423      	lsls	r3, r4, #16
 8001b78:	0c1f      	lsrs	r7, r3, #16
 8001b7a:	0212      	lsls	r2, r2, #8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	9701      	str	r7, [sp, #4]
 8001b82:	f7fe fb4f 	bl	8000224 <__aeabi_uidivmod>
 8001b86:	0002      	movs	r2, r0
 8001b88:	437a      	muls	r2, r7
 8001b8a:	040b      	lsls	r3, r1, #16
 8001b8c:	0c31      	lsrs	r1, r6, #16
 8001b8e:	4680      	mov	r8, r0
 8001b90:	4319      	orrs	r1, r3
 8001b92:	428a      	cmp	r2, r1
 8001b94:	d90b      	bls.n	8001bae <__aeabi_ddiv+0x2c2>
 8001b96:	2301      	movs	r3, #1
 8001b98:	425b      	negs	r3, r3
 8001b9a:	469c      	mov	ip, r3
 8001b9c:	1909      	adds	r1, r1, r4
 8001b9e:	44e0      	add	r8, ip
 8001ba0:	428c      	cmp	r4, r1
 8001ba2:	d804      	bhi.n	8001bae <__aeabi_ddiv+0x2c2>
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d902      	bls.n	8001bae <__aeabi_ddiv+0x2c2>
 8001ba8:	1e83      	subs	r3, r0, #2
 8001baa:	4698      	mov	r8, r3
 8001bac:	1909      	adds	r1, r1, r4
 8001bae:	1a88      	subs	r0, r1, r2
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	f7fe fb37 	bl	8000224 <__aeabi_uidivmod>
 8001bb6:	0409      	lsls	r1, r1, #16
 8001bb8:	468c      	mov	ip, r1
 8001bba:	0431      	lsls	r1, r6, #16
 8001bbc:	4666      	mov	r6, ip
 8001bbe:	9a01      	ldr	r2, [sp, #4]
 8001bc0:	0c09      	lsrs	r1, r1, #16
 8001bc2:	4342      	muls	r2, r0
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	4331      	orrs	r1, r6
 8001bc8:	428a      	cmp	r2, r1
 8001bca:	d904      	bls.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001bcc:	1909      	adds	r1, r1, r4
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	428c      	cmp	r4, r1
 8001bd2:	d800      	bhi.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001bd4:	e111      	b.n	8001dfa <__aeabi_ddiv+0x50e>
 8001bd6:	1a89      	subs	r1, r1, r2
 8001bd8:	4642      	mov	r2, r8
 8001bda:	9e00      	ldr	r6, [sp, #0]
 8001bdc:	0412      	lsls	r2, r2, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	0c33      	lsrs	r3, r6, #16
 8001be2:	001f      	movs	r7, r3
 8001be4:	0c10      	lsrs	r0, r2, #16
 8001be6:	4690      	mov	r8, r2
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	0413      	lsls	r3, r2, #16
 8001bec:	0432      	lsls	r2, r6, #16
 8001bee:	0c16      	lsrs	r6, r2, #16
 8001bf0:	0032      	movs	r2, r6
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	435a      	muls	r2, r3
 8001bf6:	9603      	str	r6, [sp, #12]
 8001bf8:	437b      	muls	r3, r7
 8001bfa:	4346      	muls	r6, r0
 8001bfc:	4378      	muls	r0, r7
 8001bfe:	0c17      	lsrs	r7, r2, #16
 8001c00:	46bc      	mov	ip, r7
 8001c02:	199b      	adds	r3, r3, r6
 8001c04:	4463      	add	r3, ip
 8001c06:	429e      	cmp	r6, r3
 8001c08:	d903      	bls.n	8001c12 <__aeabi_ddiv+0x326>
 8001c0a:	2680      	movs	r6, #128	; 0x80
 8001c0c:	0276      	lsls	r6, r6, #9
 8001c0e:	46b4      	mov	ip, r6
 8001c10:	4460      	add	r0, ip
 8001c12:	0c1e      	lsrs	r6, r3, #16
 8001c14:	1830      	adds	r0, r6, r0
 8001c16:	0416      	lsls	r6, r2, #16
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	0c36      	lsrs	r6, r6, #16
 8001c1c:	199e      	adds	r6, r3, r6
 8001c1e:	4281      	cmp	r1, r0
 8001c20:	d200      	bcs.n	8001c24 <__aeabi_ddiv+0x338>
 8001c22:	e09c      	b.n	8001d5e <__aeabi_ddiv+0x472>
 8001c24:	d100      	bne.n	8001c28 <__aeabi_ddiv+0x33c>
 8001c26:	e097      	b.n	8001d58 <__aeabi_ddiv+0x46c>
 8001c28:	1bae      	subs	r6, r5, r6
 8001c2a:	1a09      	subs	r1, r1, r0
 8001c2c:	42b5      	cmp	r5, r6
 8001c2e:	4180      	sbcs	r0, r0
 8001c30:	4240      	negs	r0, r0
 8001c32:	1a08      	subs	r0, r1, r0
 8001c34:	4284      	cmp	r4, r0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0x34e>
 8001c38:	e111      	b.n	8001e5e <__aeabi_ddiv+0x572>
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	f7fe faf2 	bl	8000224 <__aeabi_uidivmod>
 8001c40:	9a01      	ldr	r2, [sp, #4]
 8001c42:	040b      	lsls	r3, r1, #16
 8001c44:	4342      	muls	r2, r0
 8001c46:	0c31      	lsrs	r1, r6, #16
 8001c48:	0005      	movs	r5, r0
 8001c4a:	4319      	orrs	r1, r3
 8001c4c:	428a      	cmp	r2, r1
 8001c4e:	d907      	bls.n	8001c60 <__aeabi_ddiv+0x374>
 8001c50:	1909      	adds	r1, r1, r4
 8001c52:	3d01      	subs	r5, #1
 8001c54:	428c      	cmp	r4, r1
 8001c56:	d803      	bhi.n	8001c60 <__aeabi_ddiv+0x374>
 8001c58:	428a      	cmp	r2, r1
 8001c5a:	d901      	bls.n	8001c60 <__aeabi_ddiv+0x374>
 8001c5c:	1e85      	subs	r5, r0, #2
 8001c5e:	1909      	adds	r1, r1, r4
 8001c60:	1a88      	subs	r0, r1, r2
 8001c62:	4649      	mov	r1, r9
 8001c64:	f7fe fade 	bl	8000224 <__aeabi_uidivmod>
 8001c68:	0409      	lsls	r1, r1, #16
 8001c6a:	468c      	mov	ip, r1
 8001c6c:	0431      	lsls	r1, r6, #16
 8001c6e:	4666      	mov	r6, ip
 8001c70:	9a01      	ldr	r2, [sp, #4]
 8001c72:	0c09      	lsrs	r1, r1, #16
 8001c74:	4342      	muls	r2, r0
 8001c76:	0003      	movs	r3, r0
 8001c78:	4331      	orrs	r1, r6
 8001c7a:	428a      	cmp	r2, r1
 8001c7c:	d907      	bls.n	8001c8e <__aeabi_ddiv+0x3a2>
 8001c7e:	1909      	adds	r1, r1, r4
 8001c80:	3b01      	subs	r3, #1
 8001c82:	428c      	cmp	r4, r1
 8001c84:	d803      	bhi.n	8001c8e <__aeabi_ddiv+0x3a2>
 8001c86:	428a      	cmp	r2, r1
 8001c88:	d901      	bls.n	8001c8e <__aeabi_ddiv+0x3a2>
 8001c8a:	1e83      	subs	r3, r0, #2
 8001c8c:	1909      	adds	r1, r1, r4
 8001c8e:	9e03      	ldr	r6, [sp, #12]
 8001c90:	1a89      	subs	r1, r1, r2
 8001c92:	0032      	movs	r2, r6
 8001c94:	042d      	lsls	r5, r5, #16
 8001c96:	431d      	orrs	r5, r3
 8001c98:	9f02      	ldr	r7, [sp, #8]
 8001c9a:	042b      	lsls	r3, r5, #16
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	435a      	muls	r2, r3
 8001ca0:	437b      	muls	r3, r7
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	0c28      	lsrs	r0, r5, #16
 8001ca6:	4346      	muls	r6, r0
 8001ca8:	0c13      	lsrs	r3, r2, #16
 8001caa:	44b4      	add	ip, r6
 8001cac:	4463      	add	r3, ip
 8001cae:	4378      	muls	r0, r7
 8001cb0:	429e      	cmp	r6, r3
 8001cb2:	d903      	bls.n	8001cbc <__aeabi_ddiv+0x3d0>
 8001cb4:	2680      	movs	r6, #128	; 0x80
 8001cb6:	0276      	lsls	r6, r6, #9
 8001cb8:	46b4      	mov	ip, r6
 8001cba:	4460      	add	r0, ip
 8001cbc:	0c1e      	lsrs	r6, r3, #16
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	0c12      	lsrs	r2, r2, #16
 8001cc4:	1830      	adds	r0, r6, r0
 8001cc6:	189b      	adds	r3, r3, r2
 8001cc8:	4281      	cmp	r1, r0
 8001cca:	d306      	bcc.n	8001cda <__aeabi_ddiv+0x3ee>
 8001ccc:	d002      	beq.n	8001cd4 <__aeabi_ddiv+0x3e8>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	431d      	orrs	r5, r3
 8001cd2:	e6ce      	b.n	8001a72 <__aeabi_ddiv+0x186>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_ddiv+0x3ee>
 8001cd8:	e6cb      	b.n	8001a72 <__aeabi_ddiv+0x186>
 8001cda:	1861      	adds	r1, r4, r1
 8001cdc:	1e6e      	subs	r6, r5, #1
 8001cde:	42a1      	cmp	r1, r4
 8001ce0:	d200      	bcs.n	8001ce4 <__aeabi_ddiv+0x3f8>
 8001ce2:	e0a4      	b.n	8001e2e <__aeabi_ddiv+0x542>
 8001ce4:	4281      	cmp	r1, r0
 8001ce6:	d200      	bcs.n	8001cea <__aeabi_ddiv+0x3fe>
 8001ce8:	e0c9      	b.n	8001e7e <__aeabi_ddiv+0x592>
 8001cea:	d100      	bne.n	8001cee <__aeabi_ddiv+0x402>
 8001cec:	e0d9      	b.n	8001ea2 <__aeabi_ddiv+0x5b6>
 8001cee:	0035      	movs	r5, r6
 8001cf0:	e7ed      	b.n	8001cce <__aeabi_ddiv+0x3e2>
 8001cf2:	2501      	movs	r5, #1
 8001cf4:	426d      	negs	r5, r5
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	1a89      	subs	r1, r1, r2
 8001cfa:	2938      	cmp	r1, #56	; 0x38
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_ddiv+0x414>
 8001cfe:	e64c      	b.n	800199a <__aeabi_ddiv+0xae>
 8001d00:	291f      	cmp	r1, #31
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_ddiv+0x41a>
 8001d04:	e07f      	b.n	8001e06 <__aeabi_ddiv+0x51a>
 8001d06:	231f      	movs	r3, #31
 8001d08:	425b      	negs	r3, r3
 8001d0a:	1a9a      	subs	r2, r3, r2
 8001d0c:	4643      	mov	r3, r8
 8001d0e:	40d3      	lsrs	r3, r2
 8001d10:	2920      	cmp	r1, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_ddiv+0x432>
 8001d14:	4644      	mov	r4, r8
 8001d16:	4a65      	ldr	r2, [pc, #404]	; (8001eac <__aeabi_ddiv+0x5c0>)
 8001d18:	445a      	add	r2, fp
 8001d1a:	4094      	lsls	r4, r2
 8001d1c:	4325      	orrs	r5, r4
 8001d1e:	1e6a      	subs	r2, r5, #1
 8001d20:	4195      	sbcs	r5, r2
 8001d22:	2207      	movs	r2, #7
 8001d24:	432b      	orrs	r3, r5
 8001d26:	0015      	movs	r5, r2
 8001d28:	2400      	movs	r4, #0
 8001d2a:	401d      	ands	r5, r3
 8001d2c:	421a      	tst	r2, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_ddiv+0x446>
 8001d30:	e0a1      	b.n	8001e76 <__aeabi_ddiv+0x58a>
 8001d32:	220f      	movs	r2, #15
 8001d34:	2400      	movs	r4, #0
 8001d36:	401a      	ands	r2, r3
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_ddiv+0x452>
 8001d3c:	e098      	b.n	8001e70 <__aeabi_ddiv+0x584>
 8001d3e:	1d1a      	adds	r2, r3, #4
 8001d40:	429a      	cmp	r2, r3
 8001d42:	419b      	sbcs	r3, r3
 8001d44:	425b      	negs	r3, r3
 8001d46:	18e4      	adds	r4, r4, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	0222      	lsls	r2, r4, #8
 8001d4c:	d400      	bmi.n	8001d50 <__aeabi_ddiv+0x464>
 8001d4e:	e08f      	b.n	8001e70 <__aeabi_ddiv+0x584>
 8001d50:	2301      	movs	r3, #1
 8001d52:	2400      	movs	r4, #0
 8001d54:	2500      	movs	r5, #0
 8001d56:	e623      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001d58:	42b5      	cmp	r5, r6
 8001d5a:	d300      	bcc.n	8001d5e <__aeabi_ddiv+0x472>
 8001d5c:	e764      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001d5e:	4643      	mov	r3, r8
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	469c      	mov	ip, r3
 8001d66:	4465      	add	r5, ip
 8001d68:	001f      	movs	r7, r3
 8001d6a:	429d      	cmp	r5, r3
 8001d6c:	419b      	sbcs	r3, r3
 8001d6e:	425b      	negs	r3, r3
 8001d70:	191b      	adds	r3, r3, r4
 8001d72:	18c9      	adds	r1, r1, r3
 8001d74:	428c      	cmp	r4, r1
 8001d76:	d23a      	bcs.n	8001dee <__aeabi_ddiv+0x502>
 8001d78:	4288      	cmp	r0, r1
 8001d7a:	d863      	bhi.n	8001e44 <__aeabi_ddiv+0x558>
 8001d7c:	d060      	beq.n	8001e40 <__aeabi_ddiv+0x554>
 8001d7e:	4690      	mov	r8, r2
 8001d80:	e752      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001d82:	42aa      	cmp	r2, r5
 8001d84:	d900      	bls.n	8001d88 <__aeabi_ddiv+0x49c>
 8001d86:	e6ea      	b.n	8001b5e <__aeabi_ddiv+0x272>
 8001d88:	4643      	mov	r3, r8
 8001d8a:	07de      	lsls	r6, r3, #31
 8001d8c:	0858      	lsrs	r0, r3, #1
 8001d8e:	086b      	lsrs	r3, r5, #1
 8001d90:	431e      	orrs	r6, r3
 8001d92:	07ed      	lsls	r5, r5, #31
 8001d94:	e6ea      	b.n	8001b6c <__aeabi_ddiv+0x280>
 8001d96:	4648      	mov	r0, r9
 8001d98:	f001 f960 	bl	800305c <__clzsi2>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	0002      	movs	r2, r0
 8001da0:	3115      	adds	r1, #21
 8001da2:	3220      	adds	r2, #32
 8001da4:	291c      	cmp	r1, #28
 8001da6:	dc00      	bgt.n	8001daa <__aeabi_ddiv+0x4be>
 8001da8:	e61a      	b.n	80019e0 <__aeabi_ddiv+0xf4>
 8001daa:	464b      	mov	r3, r9
 8001dac:	3808      	subs	r0, #8
 8001dae:	4083      	lsls	r3, r0
 8001db0:	2500      	movs	r5, #0
 8001db2:	4698      	mov	r8, r3
 8001db4:	e620      	b.n	80019f8 <__aeabi_ddiv+0x10c>
 8001db6:	f001 f951 	bl	800305c <__clzsi2>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	3215      	adds	r2, #21
 8001dc0:	3020      	adds	r0, #32
 8001dc2:	2a1c      	cmp	r2, #28
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_ddiv+0x4dc>
 8001dc6:	e630      	b.n	8001a2a <__aeabi_ddiv+0x13e>
 8001dc8:	4654      	mov	r4, sl
 8001dca:	3b08      	subs	r3, #8
 8001dcc:	2200      	movs	r2, #0
 8001dce:	409c      	lsls	r4, r3
 8001dd0:	e635      	b.n	8001a3e <__aeabi_ddiv+0x152>
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	402b      	ands	r3, r5
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x4f0>
 8001dda:	e652      	b.n	8001a82 <__aeabi_ddiv+0x196>
 8001ddc:	2305      	movs	r3, #5
 8001dde:	425b      	negs	r3, r3
 8001de0:	42ab      	cmp	r3, r5
 8001de2:	419b      	sbcs	r3, r3
 8001de4:	3504      	adds	r5, #4
 8001de6:	425b      	negs	r3, r3
 8001de8:	08ed      	lsrs	r5, r5, #3
 8001dea:	4498      	add	r8, r3
 8001dec:	e64a      	b.n	8001a84 <__aeabi_ddiv+0x198>
 8001dee:	428c      	cmp	r4, r1
 8001df0:	d1c5      	bne.n	8001d7e <__aeabi_ddiv+0x492>
 8001df2:	42af      	cmp	r7, r5
 8001df4:	d9c0      	bls.n	8001d78 <__aeabi_ddiv+0x48c>
 8001df6:	4690      	mov	r8, r2
 8001df8:	e716      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	d800      	bhi.n	8001e00 <__aeabi_ddiv+0x514>
 8001dfe:	e6ea      	b.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001e00:	1e83      	subs	r3, r0, #2
 8001e02:	1909      	adds	r1, r1, r4
 8001e04:	e6e7      	b.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001e06:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <__aeabi_ddiv+0x5c4>)
 8001e08:	0028      	movs	r0, r5
 8001e0a:	445a      	add	r2, fp
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	4095      	lsls	r5, r2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	40c8      	lsrs	r0, r1
 8001e14:	1e6a      	subs	r2, r5, #1
 8001e16:	4195      	sbcs	r5, r2
 8001e18:	4644      	mov	r4, r8
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	432b      	orrs	r3, r5
 8001e1e:	40cc      	lsrs	r4, r1
 8001e20:	075a      	lsls	r2, r3, #29
 8001e22:	d092      	beq.n	8001d4a <__aeabi_ddiv+0x45e>
 8001e24:	220f      	movs	r2, #15
 8001e26:	401a      	ands	r2, r3
 8001e28:	2a04      	cmp	r2, #4
 8001e2a:	d188      	bne.n	8001d3e <__aeabi_ddiv+0x452>
 8001e2c:	e78d      	b.n	8001d4a <__aeabi_ddiv+0x45e>
 8001e2e:	0035      	movs	r5, r6
 8001e30:	4281      	cmp	r1, r0
 8001e32:	d000      	beq.n	8001e36 <__aeabi_ddiv+0x54a>
 8001e34:	e74b      	b.n	8001cce <__aeabi_ddiv+0x3e2>
 8001e36:	9a00      	ldr	r2, [sp, #0]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_ddiv+0x552>
 8001e3c:	e747      	b.n	8001cce <__aeabi_ddiv+0x3e2>
 8001e3e:	e618      	b.n	8001a72 <__aeabi_ddiv+0x186>
 8001e40:	42ae      	cmp	r6, r5
 8001e42:	d99c      	bls.n	8001d7e <__aeabi_ddiv+0x492>
 8001e44:	2302      	movs	r3, #2
 8001e46:	425b      	negs	r3, r3
 8001e48:	469c      	mov	ip, r3
 8001e4a:	9b00      	ldr	r3, [sp, #0]
 8001e4c:	44e0      	add	r8, ip
 8001e4e:	469c      	mov	ip, r3
 8001e50:	4465      	add	r5, ip
 8001e52:	429d      	cmp	r5, r3
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	425b      	negs	r3, r3
 8001e58:	191b      	adds	r3, r3, r4
 8001e5a:	18c9      	adds	r1, r1, r3
 8001e5c:	e6e4      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <__aeabi_ddiv+0x5c8>)
 8001e60:	445a      	add	r2, fp
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	dc00      	bgt.n	8001e68 <__aeabi_ddiv+0x57c>
 8001e66:	e744      	b.n	8001cf2 <__aeabi_ddiv+0x406>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	4498      	add	r8, r3
 8001e6e:	e609      	b.n	8001a84 <__aeabi_ddiv+0x198>
 8001e70:	0765      	lsls	r5, r4, #29
 8001e72:	0264      	lsls	r4, r4, #9
 8001e74:	0b24      	lsrs	r4, r4, #12
 8001e76:	08db      	lsrs	r3, r3, #3
 8001e78:	431d      	orrs	r5, r3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e590      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001e7e:	9e00      	ldr	r6, [sp, #0]
 8001e80:	3d02      	subs	r5, #2
 8001e82:	0072      	lsls	r2, r6, #1
 8001e84:	42b2      	cmp	r2, r6
 8001e86:	41bf      	sbcs	r7, r7
 8001e88:	427f      	negs	r7, r7
 8001e8a:	193c      	adds	r4, r7, r4
 8001e8c:	1909      	adds	r1, r1, r4
 8001e8e:	9200      	str	r2, [sp, #0]
 8001e90:	e7ce      	b.n	8001e30 <__aeabi_ddiv+0x544>
 8001e92:	2480      	movs	r4, #128	; 0x80
 8001e94:	4643      	mov	r3, r8
 8001e96:	0324      	lsls	r4, r4, #12
 8001e98:	431c      	orrs	r4, r3
 8001e9a:	0324      	lsls	r4, r4, #12
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <__aeabi_ddiv+0x5cc>)
 8001e9e:	0b24      	lsrs	r4, r4, #12
 8001ea0:	e57e      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001ea2:	9a00      	ldr	r2, [sp, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3ea      	bcc.n	8001e7e <__aeabi_ddiv+0x592>
 8001ea8:	0035      	movs	r5, r6
 8001eaa:	e7c4      	b.n	8001e36 <__aeabi_ddiv+0x54a>
 8001eac:	0000043e 	.word	0x0000043e
 8001eb0:	0000041e 	.word	0x0000041e
 8001eb4:	000003ff 	.word	0x000003ff
 8001eb8:	000007ff 	.word	0x000007ff

08001ebc <__eqdf2>:
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	464f      	mov	r7, r9
 8001ec0:	4646      	mov	r6, r8
 8001ec2:	46d6      	mov	lr, sl
 8001ec4:	4694      	mov	ip, r2
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	031a      	lsls	r2, r3, #12
 8001eca:	0b12      	lsrs	r2, r2, #12
 8001ecc:	4d18      	ldr	r5, [pc, #96]	; (8001f30 <__eqdf2+0x74>)
 8001ece:	b5c0      	push	{r6, r7, lr}
 8001ed0:	004c      	lsls	r4, r1, #1
 8001ed2:	030f      	lsls	r7, r1, #12
 8001ed4:	4692      	mov	sl, r2
 8001ed6:	005a      	lsls	r2, r3, #1
 8001ed8:	0006      	movs	r6, r0
 8001eda:	4680      	mov	r8, r0
 8001edc:	0b3f      	lsrs	r7, r7, #12
 8001ede:	2001      	movs	r0, #1
 8001ee0:	0d64      	lsrs	r4, r4, #21
 8001ee2:	0fc9      	lsrs	r1, r1, #31
 8001ee4:	0d52      	lsrs	r2, r2, #21
 8001ee6:	0fdb      	lsrs	r3, r3, #31
 8001ee8:	42ac      	cmp	r4, r5
 8001eea:	d00a      	beq.n	8001f02 <__eqdf2+0x46>
 8001eec:	42aa      	cmp	r2, r5
 8001eee:	d003      	beq.n	8001ef8 <__eqdf2+0x3c>
 8001ef0:	4294      	cmp	r4, r2
 8001ef2:	d101      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001ef4:	4557      	cmp	r7, sl
 8001ef6:	d00d      	beq.n	8001f14 <__eqdf2+0x58>
 8001ef8:	bce0      	pop	{r5, r6, r7}
 8001efa:	46ba      	mov	sl, r7
 8001efc:	46b1      	mov	r9, r6
 8001efe:	46a8      	mov	r8, r5
 8001f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f02:	003d      	movs	r5, r7
 8001f04:	4335      	orrs	r5, r6
 8001f06:	d1f7      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f08:	42a2      	cmp	r2, r4
 8001f0a:	d1f5      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f0c:	4652      	mov	r2, sl
 8001f0e:	4665      	mov	r5, ip
 8001f10:	432a      	orrs	r2, r5
 8001f12:	d1f1      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f14:	2001      	movs	r0, #1
 8001f16:	45c8      	cmp	r8, r9
 8001f18:	d1ee      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f1a:	4299      	cmp	r1, r3
 8001f1c:	d006      	beq.n	8001f2c <__eqdf2+0x70>
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	d1ea      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f22:	433e      	orrs	r6, r7
 8001f24:	0030      	movs	r0, r6
 8001f26:	1e46      	subs	r6, r0, #1
 8001f28:	41b0      	sbcs	r0, r6
 8001f2a:	e7e5      	b.n	8001ef8 <__eqdf2+0x3c>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7e3      	b.n	8001ef8 <__eqdf2+0x3c>
 8001f30:	000007ff 	.word	0x000007ff

08001f34 <__gedf2>:
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	464e      	mov	r6, r9
 8001f38:	4645      	mov	r5, r8
 8001f3a:	4657      	mov	r7, sl
 8001f3c:	46de      	mov	lr, fp
 8001f3e:	0004      	movs	r4, r0
 8001f40:	0018      	movs	r0, r3
 8001f42:	b5e0      	push	{r5, r6, r7, lr}
 8001f44:	0016      	movs	r6, r2
 8001f46:	031b      	lsls	r3, r3, #12
 8001f48:	0b1b      	lsrs	r3, r3, #12
 8001f4a:	4d32      	ldr	r5, [pc, #200]	; (8002014 <__gedf2+0xe0>)
 8001f4c:	030f      	lsls	r7, r1, #12
 8001f4e:	004a      	lsls	r2, r1, #1
 8001f50:	4699      	mov	r9, r3
 8001f52:	0043      	lsls	r3, r0, #1
 8001f54:	46a4      	mov	ip, r4
 8001f56:	46b0      	mov	r8, r6
 8001f58:	0b3f      	lsrs	r7, r7, #12
 8001f5a:	0d52      	lsrs	r2, r2, #21
 8001f5c:	0fc9      	lsrs	r1, r1, #31
 8001f5e:	0d5b      	lsrs	r3, r3, #21
 8001f60:	0fc0      	lsrs	r0, r0, #31
 8001f62:	42aa      	cmp	r2, r5
 8001f64:	d029      	beq.n	8001fba <__gedf2+0x86>
 8001f66:	42ab      	cmp	r3, r5
 8001f68:	d018      	beq.n	8001f9c <__gedf2+0x68>
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d12a      	bne.n	8001fc4 <__gedf2+0x90>
 8001f6e:	433c      	orrs	r4, r7
 8001f70:	46a3      	mov	fp, r4
 8001f72:	4265      	negs	r5, r4
 8001f74:	4165      	adcs	r5, r4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <__gedf2+0x4c>
 8001f7a:	464c      	mov	r4, r9
 8001f7c:	4326      	orrs	r6, r4
 8001f7e:	d027      	beq.n	8001fd0 <__gedf2+0x9c>
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	d115      	bne.n	8001fb0 <__gedf2+0x7c>
 8001f84:	4281      	cmp	r1, r0
 8001f86:	d028      	beq.n	8001fda <__gedf2+0xa6>
 8001f88:	2002      	movs	r0, #2
 8001f8a:	3901      	subs	r1, #1
 8001f8c:	4008      	ands	r0, r1
 8001f8e:	3801      	subs	r0, #1
 8001f90:	bcf0      	pop	{r4, r5, r6, r7}
 8001f92:	46bb      	mov	fp, r7
 8001f94:	46b2      	mov	sl, r6
 8001f96:	46a9      	mov	r9, r5
 8001f98:	46a0      	mov	r8, r4
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9c:	464d      	mov	r5, r9
 8001f9e:	432e      	orrs	r6, r5
 8001fa0:	d12f      	bne.n	8002002 <__gedf2+0xce>
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	d1ee      	bne.n	8001f84 <__gedf2+0x50>
 8001fa6:	433c      	orrs	r4, r7
 8001fa8:	4265      	negs	r5, r4
 8001faa:	4165      	adcs	r5, r4
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	d0e9      	beq.n	8001f84 <__gedf2+0x50>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d1ed      	bne.n	8001f90 <__gedf2+0x5c>
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	e7ea      	b.n	8001f90 <__gedf2+0x5c>
 8001fba:	003d      	movs	r5, r7
 8001fbc:	4325      	orrs	r5, r4
 8001fbe:	d120      	bne.n	8002002 <__gedf2+0xce>
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d0eb      	beq.n	8001f9c <__gedf2+0x68>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1dd      	bne.n	8001f84 <__gedf2+0x50>
 8001fc8:	464c      	mov	r4, r9
 8001fca:	4326      	orrs	r6, r4
 8001fcc:	d1da      	bne.n	8001f84 <__gedf2+0x50>
 8001fce:	e7db      	b.n	8001f88 <__gedf2+0x54>
 8001fd0:	465b      	mov	r3, fp
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0db      	beq.n	8001f90 <__gedf2+0x5c>
 8001fd8:	e7d6      	b.n	8001f88 <__gedf2+0x54>
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dc0a      	bgt.n	8001ff4 <__gedf2+0xc0>
 8001fde:	dbe7      	blt.n	8001fb0 <__gedf2+0x7c>
 8001fe0:	454f      	cmp	r7, r9
 8001fe2:	d8d1      	bhi.n	8001f88 <__gedf2+0x54>
 8001fe4:	d010      	beq.n	8002008 <__gedf2+0xd4>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	454f      	cmp	r7, r9
 8001fea:	d2d1      	bcs.n	8001f90 <__gedf2+0x5c>
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d0e1      	beq.n	8001fb4 <__gedf2+0x80>
 8001ff0:	0008      	movs	r0, r1
 8001ff2:	e7cd      	b.n	8001f90 <__gedf2+0x5c>
 8001ff4:	4243      	negs	r3, r0
 8001ff6:	4158      	adcs	r0, r3
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	4240      	negs	r0, r0
 8001ffc:	4018      	ands	r0, r3
 8001ffe:	3801      	subs	r0, #1
 8002000:	e7c6      	b.n	8001f90 <__gedf2+0x5c>
 8002002:	2002      	movs	r0, #2
 8002004:	4240      	negs	r0, r0
 8002006:	e7c3      	b.n	8001f90 <__gedf2+0x5c>
 8002008:	45c4      	cmp	ip, r8
 800200a:	d8bd      	bhi.n	8001f88 <__gedf2+0x54>
 800200c:	2000      	movs	r0, #0
 800200e:	45c4      	cmp	ip, r8
 8002010:	d2be      	bcs.n	8001f90 <__gedf2+0x5c>
 8002012:	e7eb      	b.n	8001fec <__gedf2+0xb8>
 8002014:	000007ff 	.word	0x000007ff

08002018 <__ledf2>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	464e      	mov	r6, r9
 800201c:	4645      	mov	r5, r8
 800201e:	4657      	mov	r7, sl
 8002020:	46de      	mov	lr, fp
 8002022:	0004      	movs	r4, r0
 8002024:	0018      	movs	r0, r3
 8002026:	b5e0      	push	{r5, r6, r7, lr}
 8002028:	0016      	movs	r6, r2
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	0b1b      	lsrs	r3, r3, #12
 800202e:	4d31      	ldr	r5, [pc, #196]	; (80020f4 <__ledf2+0xdc>)
 8002030:	030f      	lsls	r7, r1, #12
 8002032:	004a      	lsls	r2, r1, #1
 8002034:	4699      	mov	r9, r3
 8002036:	0043      	lsls	r3, r0, #1
 8002038:	46a4      	mov	ip, r4
 800203a:	46b0      	mov	r8, r6
 800203c:	0b3f      	lsrs	r7, r7, #12
 800203e:	0d52      	lsrs	r2, r2, #21
 8002040:	0fc9      	lsrs	r1, r1, #31
 8002042:	0d5b      	lsrs	r3, r3, #21
 8002044:	0fc0      	lsrs	r0, r0, #31
 8002046:	42aa      	cmp	r2, r5
 8002048:	d011      	beq.n	800206e <__ledf2+0x56>
 800204a:	42ab      	cmp	r3, r5
 800204c:	d014      	beq.n	8002078 <__ledf2+0x60>
 800204e:	2a00      	cmp	r2, #0
 8002050:	d12f      	bne.n	80020b2 <__ledf2+0x9a>
 8002052:	433c      	orrs	r4, r7
 8002054:	46a3      	mov	fp, r4
 8002056:	4265      	negs	r5, r4
 8002058:	4165      	adcs	r5, r4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d114      	bne.n	8002088 <__ledf2+0x70>
 800205e:	464c      	mov	r4, r9
 8002060:	4326      	orrs	r6, r4
 8002062:	d111      	bne.n	8002088 <__ledf2+0x70>
 8002064:	465b      	mov	r3, fp
 8002066:	2000      	movs	r0, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <__ledf2+0x84>
 800206c:	e010      	b.n	8002090 <__ledf2+0x78>
 800206e:	003d      	movs	r5, r7
 8002070:	4325      	orrs	r5, r4
 8002072:	d112      	bne.n	800209a <__ledf2+0x82>
 8002074:	4293      	cmp	r3, r2
 8002076:	d11c      	bne.n	80020b2 <__ledf2+0x9a>
 8002078:	464d      	mov	r5, r9
 800207a:	432e      	orrs	r6, r5
 800207c:	d10d      	bne.n	800209a <__ledf2+0x82>
 800207e:	2a00      	cmp	r2, #0
 8002080:	d104      	bne.n	800208c <__ledf2+0x74>
 8002082:	433c      	orrs	r4, r7
 8002084:	4265      	negs	r5, r4
 8002086:	4165      	adcs	r5, r4
 8002088:	2d00      	cmp	r5, #0
 800208a:	d10d      	bne.n	80020a8 <__ledf2+0x90>
 800208c:	4281      	cmp	r1, r0
 800208e:	d016      	beq.n	80020be <__ledf2+0xa6>
 8002090:	2002      	movs	r0, #2
 8002092:	3901      	subs	r1, #1
 8002094:	4008      	ands	r0, r1
 8002096:	3801      	subs	r0, #1
 8002098:	e000      	b.n	800209c <__ledf2+0x84>
 800209a:	2002      	movs	r0, #2
 800209c:	bcf0      	pop	{r4, r5, r6, r7}
 800209e:	46bb      	mov	fp, r7
 80020a0:	46b2      	mov	sl, r6
 80020a2:	46a9      	mov	r9, r5
 80020a4:	46a0      	mov	r8, r4
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1f7      	bne.n	800209c <__ledf2+0x84>
 80020ac:	2001      	movs	r0, #1
 80020ae:	4240      	negs	r0, r0
 80020b0:	e7f4      	b.n	800209c <__ledf2+0x84>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ea      	bne.n	800208c <__ledf2+0x74>
 80020b6:	464c      	mov	r4, r9
 80020b8:	4326      	orrs	r6, r4
 80020ba:	d1e7      	bne.n	800208c <__ledf2+0x74>
 80020bc:	e7e8      	b.n	8002090 <__ledf2+0x78>
 80020be:	429a      	cmp	r2, r3
 80020c0:	dd06      	ble.n	80020d0 <__ledf2+0xb8>
 80020c2:	4243      	negs	r3, r0
 80020c4:	4158      	adcs	r0, r3
 80020c6:	2302      	movs	r3, #2
 80020c8:	4240      	negs	r0, r0
 80020ca:	4018      	ands	r0, r3
 80020cc:	3801      	subs	r0, #1
 80020ce:	e7e5      	b.n	800209c <__ledf2+0x84>
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbe9      	blt.n	80020a8 <__ledf2+0x90>
 80020d4:	454f      	cmp	r7, r9
 80020d6:	d8db      	bhi.n	8002090 <__ledf2+0x78>
 80020d8:	d006      	beq.n	80020e8 <__ledf2+0xd0>
 80020da:	2000      	movs	r0, #0
 80020dc:	454f      	cmp	r7, r9
 80020de:	d2dd      	bcs.n	800209c <__ledf2+0x84>
 80020e0:	2900      	cmp	r1, #0
 80020e2:	d0e3      	beq.n	80020ac <__ledf2+0x94>
 80020e4:	0008      	movs	r0, r1
 80020e6:	e7d9      	b.n	800209c <__ledf2+0x84>
 80020e8:	45c4      	cmp	ip, r8
 80020ea:	d8d1      	bhi.n	8002090 <__ledf2+0x78>
 80020ec:	2000      	movs	r0, #0
 80020ee:	45c4      	cmp	ip, r8
 80020f0:	d2d4      	bcs.n	800209c <__ledf2+0x84>
 80020f2:	e7f5      	b.n	80020e0 <__ledf2+0xc8>
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__aeabi_dmul>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	4657      	mov	r7, sl
 80020fc:	464e      	mov	r6, r9
 80020fe:	4645      	mov	r5, r8
 8002100:	46de      	mov	lr, fp
 8002102:	b5e0      	push	{r5, r6, r7, lr}
 8002104:	4698      	mov	r8, r3
 8002106:	030c      	lsls	r4, r1, #12
 8002108:	004b      	lsls	r3, r1, #1
 800210a:	0006      	movs	r6, r0
 800210c:	4692      	mov	sl, r2
 800210e:	b087      	sub	sp, #28
 8002110:	0b24      	lsrs	r4, r4, #12
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	0fcf      	lsrs	r7, r1, #31
 8002116:	2b00      	cmp	r3, #0
 8002118:	d06c      	beq.n	80021f4 <__aeabi_dmul+0xfc>
 800211a:	4add      	ldr	r2, [pc, #884]	; (8002490 <__aeabi_dmul+0x398>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <__aeabi_dmul+0x2a>
 8002120:	e086      	b.n	8002230 <__aeabi_dmul+0x138>
 8002122:	0f42      	lsrs	r2, r0, #29
 8002124:	00e4      	lsls	r4, r4, #3
 8002126:	4314      	orrs	r4, r2
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	0412      	lsls	r2, r2, #16
 800212c:	4314      	orrs	r4, r2
 800212e:	4ad9      	ldr	r2, [pc, #868]	; (8002494 <__aeabi_dmul+0x39c>)
 8002130:	00c5      	lsls	r5, r0, #3
 8002132:	4694      	mov	ip, r2
 8002134:	4463      	add	r3, ip
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	4699      	mov	r9, r3
 800213c:	469b      	mov	fp, r3
 800213e:	4643      	mov	r3, r8
 8002140:	4642      	mov	r2, r8
 8002142:	031e      	lsls	r6, r3, #12
 8002144:	0fd2      	lsrs	r2, r2, #31
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4650      	mov	r0, sl
 800214a:	4690      	mov	r8, r2
 800214c:	0b36      	lsrs	r6, r6, #12
 800214e:	0d5b      	lsrs	r3, r3, #21
 8002150:	d100      	bne.n	8002154 <__aeabi_dmul+0x5c>
 8002152:	e078      	b.n	8002246 <__aeabi_dmul+0x14e>
 8002154:	4ace      	ldr	r2, [pc, #824]	; (8002490 <__aeabi_dmul+0x398>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01d      	beq.n	8002196 <__aeabi_dmul+0x9e>
 800215a:	49ce      	ldr	r1, [pc, #824]	; (8002494 <__aeabi_dmul+0x39c>)
 800215c:	0f42      	lsrs	r2, r0, #29
 800215e:	468c      	mov	ip, r1
 8002160:	9900      	ldr	r1, [sp, #0]
 8002162:	4463      	add	r3, ip
 8002164:	00f6      	lsls	r6, r6, #3
 8002166:	468c      	mov	ip, r1
 8002168:	4316      	orrs	r6, r2
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	449c      	add	ip, r3
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	4663      	mov	r3, ip
 8002172:	4316      	orrs	r6, r2
 8002174:	00c2      	lsls	r2, r0, #3
 8002176:	2000      	movs	r0, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	9900      	ldr	r1, [sp, #0]
 800217c:	4643      	mov	r3, r8
 800217e:	3101      	adds	r1, #1
 8002180:	468c      	mov	ip, r1
 8002182:	4649      	mov	r1, r9
 8002184:	407b      	eors	r3, r7
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	290f      	cmp	r1, #15
 800218a:	d900      	bls.n	800218e <__aeabi_dmul+0x96>
 800218c:	e07e      	b.n	800228c <__aeabi_dmul+0x194>
 800218e:	4bc2      	ldr	r3, [pc, #776]	; (8002498 <__aeabi_dmul+0x3a0>)
 8002190:	0089      	lsls	r1, r1, #2
 8002192:	5859      	ldr	r1, [r3, r1]
 8002194:	468f      	mov	pc, r1
 8002196:	4652      	mov	r2, sl
 8002198:	9b00      	ldr	r3, [sp, #0]
 800219a:	4332      	orrs	r2, r6
 800219c:	d000      	beq.n	80021a0 <__aeabi_dmul+0xa8>
 800219e:	e156      	b.n	800244e <__aeabi_dmul+0x356>
 80021a0:	49bb      	ldr	r1, [pc, #748]	; (8002490 <__aeabi_dmul+0x398>)
 80021a2:	2600      	movs	r6, #0
 80021a4:	468c      	mov	ip, r1
 80021a6:	4463      	add	r3, ip
 80021a8:	4649      	mov	r1, r9
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	4319      	orrs	r1, r3
 80021b0:	4689      	mov	r9, r1
 80021b2:	2002      	movs	r0, #2
 80021b4:	e7e1      	b.n	800217a <__aeabi_dmul+0x82>
 80021b6:	4643      	mov	r3, r8
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	0034      	movs	r4, r6
 80021bc:	0015      	movs	r5, r2
 80021be:	4683      	mov	fp, r0
 80021c0:	465b      	mov	r3, fp
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d05e      	beq.n	8002284 <__aeabi_dmul+0x18c>
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d100      	bne.n	80021cc <__aeabi_dmul+0xd4>
 80021ca:	e1f3      	b.n	80025b4 <__aeabi_dmul+0x4bc>
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d000      	beq.n	80021d2 <__aeabi_dmul+0xda>
 80021d0:	e118      	b.n	8002404 <__aeabi_dmul+0x30c>
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	2500      	movs	r5, #0
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	0512      	lsls	r2, r2, #20
 80021dc:	4322      	orrs	r2, r4
 80021de:	07db      	lsls	r3, r3, #31
 80021e0:	431a      	orrs	r2, r3
 80021e2:	0028      	movs	r0, r5
 80021e4:	0011      	movs	r1, r2
 80021e6:	b007      	add	sp, #28
 80021e8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ea:	46bb      	mov	fp, r7
 80021ec:	46b2      	mov	sl, r6
 80021ee:	46a9      	mov	r9, r5
 80021f0:	46a0      	mov	r8, r4
 80021f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f4:	0025      	movs	r5, r4
 80021f6:	4305      	orrs	r5, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dmul+0x104>
 80021fa:	e141      	b.n	8002480 <__aeabi_dmul+0x388>
 80021fc:	2c00      	cmp	r4, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dmul+0x10a>
 8002200:	e1ad      	b.n	800255e <__aeabi_dmul+0x466>
 8002202:	0020      	movs	r0, r4
 8002204:	f000 ff2a 	bl	800305c <__clzsi2>
 8002208:	0001      	movs	r1, r0
 800220a:	0002      	movs	r2, r0
 800220c:	390b      	subs	r1, #11
 800220e:	231d      	movs	r3, #29
 8002210:	0010      	movs	r0, r2
 8002212:	1a5b      	subs	r3, r3, r1
 8002214:	0031      	movs	r1, r6
 8002216:	0035      	movs	r5, r6
 8002218:	3808      	subs	r0, #8
 800221a:	4084      	lsls	r4, r0
 800221c:	40d9      	lsrs	r1, r3
 800221e:	4085      	lsls	r5, r0
 8002220:	430c      	orrs	r4, r1
 8002222:	489e      	ldr	r0, [pc, #632]	; (800249c <__aeabi_dmul+0x3a4>)
 8002224:	1a83      	subs	r3, r0, r2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	4699      	mov	r9, r3
 800222c:	469b      	mov	fp, r3
 800222e:	e786      	b.n	800213e <__aeabi_dmul+0x46>
 8002230:	0005      	movs	r5, r0
 8002232:	4325      	orrs	r5, r4
 8002234:	d000      	beq.n	8002238 <__aeabi_dmul+0x140>
 8002236:	e11c      	b.n	8002472 <__aeabi_dmul+0x37a>
 8002238:	2208      	movs	r2, #8
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2302      	movs	r3, #2
 800223e:	2400      	movs	r4, #0
 8002240:	4691      	mov	r9, r2
 8002242:	469b      	mov	fp, r3
 8002244:	e77b      	b.n	800213e <__aeabi_dmul+0x46>
 8002246:	4652      	mov	r2, sl
 8002248:	4332      	orrs	r2, r6
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x156>
 800224c:	e10a      	b.n	8002464 <__aeabi_dmul+0x36c>
 800224e:	2e00      	cmp	r6, #0
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0x15c>
 8002252:	e176      	b.n	8002542 <__aeabi_dmul+0x44a>
 8002254:	0030      	movs	r0, r6
 8002256:	f000 ff01 	bl	800305c <__clzsi2>
 800225a:	0002      	movs	r2, r0
 800225c:	3a0b      	subs	r2, #11
 800225e:	231d      	movs	r3, #29
 8002260:	0001      	movs	r1, r0
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	4652      	mov	r2, sl
 8002266:	3908      	subs	r1, #8
 8002268:	40da      	lsrs	r2, r3
 800226a:	408e      	lsls	r6, r1
 800226c:	4316      	orrs	r6, r2
 800226e:	4652      	mov	r2, sl
 8002270:	408a      	lsls	r2, r1
 8002272:	9b00      	ldr	r3, [sp, #0]
 8002274:	4989      	ldr	r1, [pc, #548]	; (800249c <__aeabi_dmul+0x3a4>)
 8002276:	1a18      	subs	r0, r3, r0
 8002278:	0003      	movs	r3, r0
 800227a:	468c      	mov	ip, r1
 800227c:	4463      	add	r3, ip
 800227e:	2000      	movs	r0, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	e77a      	b.n	800217a <__aeabi_dmul+0x82>
 8002284:	2400      	movs	r4, #0
 8002286:	2500      	movs	r5, #0
 8002288:	4a81      	ldr	r2, [pc, #516]	; (8002490 <__aeabi_dmul+0x398>)
 800228a:	e7a5      	b.n	80021d8 <__aeabi_dmul+0xe0>
 800228c:	0c2f      	lsrs	r7, r5, #16
 800228e:	042d      	lsls	r5, r5, #16
 8002290:	0c2d      	lsrs	r5, r5, #16
 8002292:	002b      	movs	r3, r5
 8002294:	0c11      	lsrs	r1, r2, #16
 8002296:	0412      	lsls	r2, r2, #16
 8002298:	0c12      	lsrs	r2, r2, #16
 800229a:	4353      	muls	r3, r2
 800229c:	4698      	mov	r8, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	0028      	movs	r0, r5
 80022a2:	437b      	muls	r3, r7
 80022a4:	4699      	mov	r9, r3
 80022a6:	4348      	muls	r0, r1
 80022a8:	4448      	add	r0, r9
 80022aa:	4683      	mov	fp, r0
 80022ac:	4640      	mov	r0, r8
 80022ae:	000b      	movs	r3, r1
 80022b0:	0c00      	lsrs	r0, r0, #16
 80022b2:	4682      	mov	sl, r0
 80022b4:	4658      	mov	r0, fp
 80022b6:	437b      	muls	r3, r7
 80022b8:	4450      	add	r0, sl
 80022ba:	9302      	str	r3, [sp, #8]
 80022bc:	4581      	cmp	r9, r0
 80022be:	d906      	bls.n	80022ce <__aeabi_dmul+0x1d6>
 80022c0:	469a      	mov	sl, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	4699      	mov	r9, r3
 80022c8:	44ca      	add	sl, r9
 80022ca:	4653      	mov	r3, sl
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	0c03      	lsrs	r3, r0, #16
 80022d0:	469b      	mov	fp, r3
 80022d2:	4643      	mov	r3, r8
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	0400      	lsls	r0, r0, #16
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	4698      	mov	r8, r3
 80022dc:	0003      	movs	r3, r0
 80022de:	4443      	add	r3, r8
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	0c33      	lsrs	r3, r6, #16
 80022e4:	4699      	mov	r9, r3
 80022e6:	002b      	movs	r3, r5
 80022e8:	0436      	lsls	r6, r6, #16
 80022ea:	0c36      	lsrs	r6, r6, #16
 80022ec:	4373      	muls	r3, r6
 80022ee:	4698      	mov	r8, r3
 80022f0:	0033      	movs	r3, r6
 80022f2:	437b      	muls	r3, r7
 80022f4:	469a      	mov	sl, r3
 80022f6:	464b      	mov	r3, r9
 80022f8:	435d      	muls	r5, r3
 80022fa:	435f      	muls	r7, r3
 80022fc:	4643      	mov	r3, r8
 80022fe:	4455      	add	r5, sl
 8002300:	0c18      	lsrs	r0, r3, #16
 8002302:	1940      	adds	r0, r0, r5
 8002304:	4582      	cmp	sl, r0
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x218>
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	469a      	mov	sl, r3
 800230e:	4457      	add	r7, sl
 8002310:	0c05      	lsrs	r5, r0, #16
 8002312:	19eb      	adds	r3, r5, r7
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	4643      	mov	r3, r8
 8002318:	041d      	lsls	r5, r3, #16
 800231a:	0c2d      	lsrs	r5, r5, #16
 800231c:	0400      	lsls	r0, r0, #16
 800231e:	1940      	adds	r0, r0, r5
 8002320:	0c25      	lsrs	r5, r4, #16
 8002322:	0424      	lsls	r4, r4, #16
 8002324:	0c24      	lsrs	r4, r4, #16
 8002326:	0027      	movs	r7, r4
 8002328:	4357      	muls	r7, r2
 800232a:	436a      	muls	r2, r5
 800232c:	4690      	mov	r8, r2
 800232e:	002a      	movs	r2, r5
 8002330:	0c3b      	lsrs	r3, r7, #16
 8002332:	469a      	mov	sl, r3
 8002334:	434a      	muls	r2, r1
 8002336:	4361      	muls	r1, r4
 8002338:	4441      	add	r1, r8
 800233a:	4451      	add	r1, sl
 800233c:	4483      	add	fp, r0
 800233e:	4588      	cmp	r8, r1
 8002340:	d903      	bls.n	800234a <__aeabi_dmul+0x252>
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	4698      	mov	r8, r3
 8002348:	4442      	add	r2, r8
 800234a:	043f      	lsls	r7, r7, #16
 800234c:	0c0b      	lsrs	r3, r1, #16
 800234e:	0c3f      	lsrs	r7, r7, #16
 8002350:	0409      	lsls	r1, r1, #16
 8002352:	19c9      	adds	r1, r1, r7
 8002354:	0027      	movs	r7, r4
 8002356:	4698      	mov	r8, r3
 8002358:	464b      	mov	r3, r9
 800235a:	4377      	muls	r7, r6
 800235c:	435c      	muls	r4, r3
 800235e:	436e      	muls	r6, r5
 8002360:	435d      	muls	r5, r3
 8002362:	0c3b      	lsrs	r3, r7, #16
 8002364:	4699      	mov	r9, r3
 8002366:	19a4      	adds	r4, r4, r6
 8002368:	444c      	add	r4, r9
 800236a:	4442      	add	r2, r8
 800236c:	9503      	str	r5, [sp, #12]
 800236e:	42a6      	cmp	r6, r4
 8002370:	d904      	bls.n	800237c <__aeabi_dmul+0x284>
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	4698      	mov	r8, r3
 8002378:	4445      	add	r5, r8
 800237a:	9503      	str	r5, [sp, #12]
 800237c:	9b02      	ldr	r3, [sp, #8]
 800237e:	043f      	lsls	r7, r7, #16
 8002380:	445b      	add	r3, fp
 8002382:	001e      	movs	r6, r3
 8002384:	4283      	cmp	r3, r0
 8002386:	4180      	sbcs	r0, r0
 8002388:	0423      	lsls	r3, r4, #16
 800238a:	4698      	mov	r8, r3
 800238c:	9b05      	ldr	r3, [sp, #20]
 800238e:	0c3f      	lsrs	r7, r7, #16
 8002390:	4447      	add	r7, r8
 8002392:	4698      	mov	r8, r3
 8002394:	1876      	adds	r6, r6, r1
 8002396:	428e      	cmp	r6, r1
 8002398:	4189      	sbcs	r1, r1
 800239a:	4447      	add	r7, r8
 800239c:	4240      	negs	r0, r0
 800239e:	183d      	adds	r5, r7, r0
 80023a0:	46a8      	mov	r8, r5
 80023a2:	4693      	mov	fp, r2
 80023a4:	4249      	negs	r1, r1
 80023a6:	468a      	mov	sl, r1
 80023a8:	44c3      	add	fp, r8
 80023aa:	429f      	cmp	r7, r3
 80023ac:	41bf      	sbcs	r7, r7
 80023ae:	4580      	cmp	r8, r0
 80023b0:	4180      	sbcs	r0, r0
 80023b2:	9b03      	ldr	r3, [sp, #12]
 80023b4:	44da      	add	sl, fp
 80023b6:	4698      	mov	r8, r3
 80023b8:	4653      	mov	r3, sl
 80023ba:	4240      	negs	r0, r0
 80023bc:	427f      	negs	r7, r7
 80023be:	4307      	orrs	r7, r0
 80023c0:	0c24      	lsrs	r4, r4, #16
 80023c2:	4593      	cmp	fp, r2
 80023c4:	4192      	sbcs	r2, r2
 80023c6:	458a      	cmp	sl, r1
 80023c8:	4189      	sbcs	r1, r1
 80023ca:	193f      	adds	r7, r7, r4
 80023cc:	0ddc      	lsrs	r4, r3, #23
 80023ce:	9b04      	ldr	r3, [sp, #16]
 80023d0:	0275      	lsls	r5, r6, #9
 80023d2:	431d      	orrs	r5, r3
 80023d4:	1e68      	subs	r0, r5, #1
 80023d6:	4185      	sbcs	r5, r0
 80023d8:	4653      	mov	r3, sl
 80023da:	4252      	negs	r2, r2
 80023dc:	4249      	negs	r1, r1
 80023de:	430a      	orrs	r2, r1
 80023e0:	18bf      	adds	r7, r7, r2
 80023e2:	4447      	add	r7, r8
 80023e4:	0df6      	lsrs	r6, r6, #23
 80023e6:	027f      	lsls	r7, r7, #9
 80023e8:	4335      	orrs	r5, r6
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	433c      	orrs	r4, r7
 80023ee:	4315      	orrs	r5, r2
 80023f0:	01fb      	lsls	r3, r7, #7
 80023f2:	d400      	bmi.n	80023f6 <__aeabi_dmul+0x2fe>
 80023f4:	e0c1      	b.n	800257a <__aeabi_dmul+0x482>
 80023f6:	2101      	movs	r1, #1
 80023f8:	086a      	lsrs	r2, r5, #1
 80023fa:	400d      	ands	r5, r1
 80023fc:	4315      	orrs	r5, r2
 80023fe:	07e2      	lsls	r2, r4, #31
 8002400:	4315      	orrs	r5, r2
 8002402:	0864      	lsrs	r4, r4, #1
 8002404:	4926      	ldr	r1, [pc, #152]	; (80024a0 <__aeabi_dmul+0x3a8>)
 8002406:	4461      	add	r1, ip
 8002408:	2900      	cmp	r1, #0
 800240a:	dd56      	ble.n	80024ba <__aeabi_dmul+0x3c2>
 800240c:	076b      	lsls	r3, r5, #29
 800240e:	d009      	beq.n	8002424 <__aeabi_dmul+0x32c>
 8002410:	220f      	movs	r2, #15
 8002412:	402a      	ands	r2, r5
 8002414:	2a04      	cmp	r2, #4
 8002416:	d005      	beq.n	8002424 <__aeabi_dmul+0x32c>
 8002418:	1d2a      	adds	r2, r5, #4
 800241a:	42aa      	cmp	r2, r5
 800241c:	41ad      	sbcs	r5, r5
 800241e:	426d      	negs	r5, r5
 8002420:	1964      	adds	r4, r4, r5
 8002422:	0015      	movs	r5, r2
 8002424:	01e3      	lsls	r3, r4, #7
 8002426:	d504      	bpl.n	8002432 <__aeabi_dmul+0x33a>
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <__aeabi_dmul+0x3ac>)
 800242c:	00c9      	lsls	r1, r1, #3
 800242e:	4014      	ands	r4, r2
 8002430:	4461      	add	r1, ip
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <__aeabi_dmul+0x3b0>)
 8002434:	4291      	cmp	r1, r2
 8002436:	dd00      	ble.n	800243a <__aeabi_dmul+0x342>
 8002438:	e724      	b.n	8002284 <__aeabi_dmul+0x18c>
 800243a:	0762      	lsls	r2, r4, #29
 800243c:	08ed      	lsrs	r5, r5, #3
 800243e:	0264      	lsls	r4, r4, #9
 8002440:	0549      	lsls	r1, r1, #21
 8002442:	4315      	orrs	r5, r2
 8002444:	0b24      	lsrs	r4, r4, #12
 8002446:	0d4a      	lsrs	r2, r1, #21
 8002448:	e6c6      	b.n	80021d8 <__aeabi_dmul+0xe0>
 800244a:	9701      	str	r7, [sp, #4]
 800244c:	e6b8      	b.n	80021c0 <__aeabi_dmul+0xc8>
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <__aeabi_dmul+0x398>)
 8002450:	2003      	movs	r0, #3
 8002452:	4694      	mov	ip, r2
 8002454:	4463      	add	r3, ip
 8002456:	464a      	mov	r2, r9
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2303      	movs	r3, #3
 800245c:	431a      	orrs	r2, r3
 800245e:	4691      	mov	r9, r2
 8002460:	4652      	mov	r2, sl
 8002462:	e68a      	b.n	800217a <__aeabi_dmul+0x82>
 8002464:	4649      	mov	r1, r9
 8002466:	2301      	movs	r3, #1
 8002468:	4319      	orrs	r1, r3
 800246a:	4689      	mov	r9, r1
 800246c:	2600      	movs	r6, #0
 800246e:	2001      	movs	r0, #1
 8002470:	e683      	b.n	800217a <__aeabi_dmul+0x82>
 8002472:	220c      	movs	r2, #12
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2303      	movs	r3, #3
 8002478:	0005      	movs	r5, r0
 800247a:	4691      	mov	r9, r2
 800247c:	469b      	mov	fp, r3
 800247e:	e65e      	b.n	800213e <__aeabi_dmul+0x46>
 8002480:	2304      	movs	r3, #4
 8002482:	4699      	mov	r9, r3
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	2400      	movs	r4, #0
 800248c:	469b      	mov	fp, r3
 800248e:	e656      	b.n	800213e <__aeabi_dmul+0x46>
 8002490:	000007ff 	.word	0x000007ff
 8002494:	fffffc01 	.word	0xfffffc01
 8002498:	08011a7c 	.word	0x08011a7c
 800249c:	fffffc0d 	.word	0xfffffc0d
 80024a0:	000003ff 	.word	0x000003ff
 80024a4:	feffffff 	.word	0xfeffffff
 80024a8:	000007fe 	.word	0x000007fe
 80024ac:	2300      	movs	r3, #0
 80024ae:	2480      	movs	r4, #128	; 0x80
 80024b0:	2500      	movs	r5, #0
 80024b2:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <__aeabi_dmul+0x4cc>)
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	0324      	lsls	r4, r4, #12
 80024b8:	e68e      	b.n	80021d8 <__aeabi_dmul+0xe0>
 80024ba:	2001      	movs	r0, #1
 80024bc:	1a40      	subs	r0, r0, r1
 80024be:	2838      	cmp	r0, #56	; 0x38
 80024c0:	dd00      	ble.n	80024c4 <__aeabi_dmul+0x3cc>
 80024c2:	e686      	b.n	80021d2 <__aeabi_dmul+0xda>
 80024c4:	281f      	cmp	r0, #31
 80024c6:	dd5b      	ble.n	8002580 <__aeabi_dmul+0x488>
 80024c8:	221f      	movs	r2, #31
 80024ca:	0023      	movs	r3, r4
 80024cc:	4252      	negs	r2, r2
 80024ce:	1a51      	subs	r1, r2, r1
 80024d0:	40cb      	lsrs	r3, r1
 80024d2:	0019      	movs	r1, r3
 80024d4:	2820      	cmp	r0, #32
 80024d6:	d003      	beq.n	80024e0 <__aeabi_dmul+0x3e8>
 80024d8:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <__aeabi_dmul+0x4d0>)
 80024da:	4462      	add	r2, ip
 80024dc:	4094      	lsls	r4, r2
 80024de:	4325      	orrs	r5, r4
 80024e0:	1e6a      	subs	r2, r5, #1
 80024e2:	4195      	sbcs	r5, r2
 80024e4:	002a      	movs	r2, r5
 80024e6:	430a      	orrs	r2, r1
 80024e8:	2107      	movs	r1, #7
 80024ea:	000d      	movs	r5, r1
 80024ec:	2400      	movs	r4, #0
 80024ee:	4015      	ands	r5, r2
 80024f0:	4211      	tst	r1, r2
 80024f2:	d05b      	beq.n	80025ac <__aeabi_dmul+0x4b4>
 80024f4:	210f      	movs	r1, #15
 80024f6:	2400      	movs	r4, #0
 80024f8:	4011      	ands	r1, r2
 80024fa:	2904      	cmp	r1, #4
 80024fc:	d053      	beq.n	80025a6 <__aeabi_dmul+0x4ae>
 80024fe:	1d11      	adds	r1, r2, #4
 8002500:	4291      	cmp	r1, r2
 8002502:	4192      	sbcs	r2, r2
 8002504:	4252      	negs	r2, r2
 8002506:	18a4      	adds	r4, r4, r2
 8002508:	000a      	movs	r2, r1
 800250a:	0223      	lsls	r3, r4, #8
 800250c:	d54b      	bpl.n	80025a6 <__aeabi_dmul+0x4ae>
 800250e:	2201      	movs	r2, #1
 8002510:	2400      	movs	r4, #0
 8002512:	2500      	movs	r5, #0
 8002514:	e660      	b.n	80021d8 <__aeabi_dmul+0xe0>
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	031b      	lsls	r3, r3, #12
 800251a:	421c      	tst	r4, r3
 800251c:	d009      	beq.n	8002532 <__aeabi_dmul+0x43a>
 800251e:	421e      	tst	r6, r3
 8002520:	d107      	bne.n	8002532 <__aeabi_dmul+0x43a>
 8002522:	4333      	orrs	r3, r6
 8002524:	031c      	lsls	r4, r3, #12
 8002526:	4643      	mov	r3, r8
 8002528:	0015      	movs	r5, r2
 800252a:	0b24      	lsrs	r4, r4, #12
 800252c:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <__aeabi_dmul+0x4cc>)
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	e652      	b.n	80021d8 <__aeabi_dmul+0xe0>
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	0312      	lsls	r2, r2, #12
 8002536:	4314      	orrs	r4, r2
 8002538:	0324      	lsls	r4, r4, #12
 800253a:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <__aeabi_dmul+0x4cc>)
 800253c:	0b24      	lsrs	r4, r4, #12
 800253e:	9701      	str	r7, [sp, #4]
 8002540:	e64a      	b.n	80021d8 <__aeabi_dmul+0xe0>
 8002542:	f000 fd8b 	bl	800305c <__clzsi2>
 8002546:	0003      	movs	r3, r0
 8002548:	001a      	movs	r2, r3
 800254a:	3215      	adds	r2, #21
 800254c:	3020      	adds	r0, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_dmul+0x45c>
 8002552:	e684      	b.n	800225e <__aeabi_dmul+0x166>
 8002554:	4656      	mov	r6, sl
 8002556:	3b08      	subs	r3, #8
 8002558:	2200      	movs	r2, #0
 800255a:	409e      	lsls	r6, r3
 800255c:	e689      	b.n	8002272 <__aeabi_dmul+0x17a>
 800255e:	f000 fd7d 	bl	800305c <__clzsi2>
 8002562:	0001      	movs	r1, r0
 8002564:	0002      	movs	r2, r0
 8002566:	3115      	adds	r1, #21
 8002568:	3220      	adds	r2, #32
 800256a:	291c      	cmp	r1, #28
 800256c:	dc00      	bgt.n	8002570 <__aeabi_dmul+0x478>
 800256e:	e64e      	b.n	800220e <__aeabi_dmul+0x116>
 8002570:	0034      	movs	r4, r6
 8002572:	3808      	subs	r0, #8
 8002574:	2500      	movs	r5, #0
 8002576:	4084      	lsls	r4, r0
 8002578:	e653      	b.n	8002222 <__aeabi_dmul+0x12a>
 800257a:	9b00      	ldr	r3, [sp, #0]
 800257c:	469c      	mov	ip, r3
 800257e:	e741      	b.n	8002404 <__aeabi_dmul+0x30c>
 8002580:	4912      	ldr	r1, [pc, #72]	; (80025cc <__aeabi_dmul+0x4d4>)
 8002582:	0022      	movs	r2, r4
 8002584:	4461      	add	r1, ip
 8002586:	002e      	movs	r6, r5
 8002588:	408d      	lsls	r5, r1
 800258a:	408a      	lsls	r2, r1
 800258c:	40c6      	lsrs	r6, r0
 800258e:	1e69      	subs	r1, r5, #1
 8002590:	418d      	sbcs	r5, r1
 8002592:	4332      	orrs	r2, r6
 8002594:	432a      	orrs	r2, r5
 8002596:	40c4      	lsrs	r4, r0
 8002598:	0753      	lsls	r3, r2, #29
 800259a:	d0b6      	beq.n	800250a <__aeabi_dmul+0x412>
 800259c:	210f      	movs	r1, #15
 800259e:	4011      	ands	r1, r2
 80025a0:	2904      	cmp	r1, #4
 80025a2:	d1ac      	bne.n	80024fe <__aeabi_dmul+0x406>
 80025a4:	e7b1      	b.n	800250a <__aeabi_dmul+0x412>
 80025a6:	0765      	lsls	r5, r4, #29
 80025a8:	0264      	lsls	r4, r4, #9
 80025aa:	0b24      	lsrs	r4, r4, #12
 80025ac:	08d2      	lsrs	r2, r2, #3
 80025ae:	4315      	orrs	r5, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	e611      	b.n	80021d8 <__aeabi_dmul+0xe0>
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0312      	lsls	r2, r2, #12
 80025b8:	4314      	orrs	r4, r2
 80025ba:	0324      	lsls	r4, r4, #12
 80025bc:	4a01      	ldr	r2, [pc, #4]	; (80025c4 <__aeabi_dmul+0x4cc>)
 80025be:	0b24      	lsrs	r4, r4, #12
 80025c0:	e60a      	b.n	80021d8 <__aeabi_dmul+0xe0>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	000007ff 	.word	0x000007ff
 80025c8:	0000043e 	.word	0x0000043e
 80025cc:	0000041e 	.word	0x0000041e

080025d0 <__aeabi_dsub>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	4657      	mov	r7, sl
 80025d4:	464e      	mov	r6, r9
 80025d6:	4645      	mov	r5, r8
 80025d8:	46de      	mov	lr, fp
 80025da:	0004      	movs	r4, r0
 80025dc:	b5e0      	push	{r5, r6, r7, lr}
 80025de:	001f      	movs	r7, r3
 80025e0:	0010      	movs	r0, r2
 80025e2:	030b      	lsls	r3, r1, #12
 80025e4:	0f62      	lsrs	r2, r4, #29
 80025e6:	004e      	lsls	r6, r1, #1
 80025e8:	0fcd      	lsrs	r5, r1, #31
 80025ea:	0a5b      	lsrs	r3, r3, #9
 80025ec:	0339      	lsls	r1, r7, #12
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0a49      	lsrs	r1, r1, #9
 80025f2:	00e2      	lsls	r2, r4, #3
 80025f4:	0f44      	lsrs	r4, r0, #29
 80025f6:	4321      	orrs	r1, r4
 80025f8:	4cc2      	ldr	r4, [pc, #776]	; (8002904 <__aeabi_dsub+0x334>)
 80025fa:	4691      	mov	r9, r2
 80025fc:	4692      	mov	sl, r2
 80025fe:	00c0      	lsls	r0, r0, #3
 8002600:	007a      	lsls	r2, r7, #1
 8002602:	4680      	mov	r8, r0
 8002604:	0d76      	lsrs	r6, r6, #21
 8002606:	0d52      	lsrs	r2, r2, #21
 8002608:	0fff      	lsrs	r7, r7, #31
 800260a:	42a2      	cmp	r2, r4
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x40>
 800260e:	e0b4      	b.n	800277a <__aeabi_dsub+0x1aa>
 8002610:	2401      	movs	r4, #1
 8002612:	4067      	eors	r7, r4
 8002614:	46bb      	mov	fp, r7
 8002616:	42bd      	cmp	r5, r7
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x4c>
 800261a:	e088      	b.n	800272e <__aeabi_dsub+0x15e>
 800261c:	1ab4      	subs	r4, r6, r2
 800261e:	46a4      	mov	ip, r4
 8002620:	2c00      	cmp	r4, #0
 8002622:	dc00      	bgt.n	8002626 <__aeabi_dsub+0x56>
 8002624:	e0b2      	b.n	800278c <__aeabi_dsub+0x1bc>
 8002626:	2a00      	cmp	r2, #0
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x5c>
 800262a:	e0c5      	b.n	80027b8 <__aeabi_dsub+0x1e8>
 800262c:	4ab5      	ldr	r2, [pc, #724]	; (8002904 <__aeabi_dsub+0x334>)
 800262e:	4296      	cmp	r6, r2
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x64>
 8002632:	e28b      	b.n	8002b4c <__aeabi_dsub+0x57c>
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	0412      	lsls	r2, r2, #16
 8002638:	4311      	orrs	r1, r2
 800263a:	4662      	mov	r2, ip
 800263c:	2a38      	cmp	r2, #56	; 0x38
 800263e:	dd00      	ble.n	8002642 <__aeabi_dsub+0x72>
 8002640:	e1a1      	b.n	8002986 <__aeabi_dsub+0x3b6>
 8002642:	2a1f      	cmp	r2, #31
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x78>
 8002646:	e216      	b.n	8002a76 <__aeabi_dsub+0x4a6>
 8002648:	2720      	movs	r7, #32
 800264a:	000c      	movs	r4, r1
 800264c:	1abf      	subs	r7, r7, r2
 800264e:	40bc      	lsls	r4, r7
 8002650:	0002      	movs	r2, r0
 8002652:	46a0      	mov	r8, r4
 8002654:	4664      	mov	r4, ip
 8002656:	40b8      	lsls	r0, r7
 8002658:	40e2      	lsrs	r2, r4
 800265a:	4644      	mov	r4, r8
 800265c:	4314      	orrs	r4, r2
 800265e:	0002      	movs	r2, r0
 8002660:	1e50      	subs	r0, r2, #1
 8002662:	4182      	sbcs	r2, r0
 8002664:	4660      	mov	r0, ip
 8002666:	40c1      	lsrs	r1, r0
 8002668:	4322      	orrs	r2, r4
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	4649      	mov	r1, r9
 800266e:	1a8c      	subs	r4, r1, r2
 8002670:	45a1      	cmp	r9, r4
 8002672:	4192      	sbcs	r2, r2
 8002674:	4252      	negs	r2, r2
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	4698      	mov	r8, r3
 800267a:	4643      	mov	r3, r8
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xb2>
 8002680:	e117      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002682:	4643      	mov	r3, r8
 8002684:	025b      	lsls	r3, r3, #9
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	4698      	mov	r8, r3
 800268a:	4643      	mov	r3, r8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d100      	bne.n	8002692 <__aeabi_dsub+0xc2>
 8002690:	e16c      	b.n	800296c <__aeabi_dsub+0x39c>
 8002692:	4640      	mov	r0, r8
 8002694:	f000 fce2 	bl	800305c <__clzsi2>
 8002698:	0002      	movs	r2, r0
 800269a:	3a08      	subs	r2, #8
 800269c:	2120      	movs	r1, #32
 800269e:	0020      	movs	r0, r4
 80026a0:	4643      	mov	r3, r8
 80026a2:	1a89      	subs	r1, r1, r2
 80026a4:	4093      	lsls	r3, r2
 80026a6:	40c8      	lsrs	r0, r1
 80026a8:	4094      	lsls	r4, r2
 80026aa:	4303      	orrs	r3, r0
 80026ac:	4296      	cmp	r6, r2
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dsub+0xe2>
 80026b0:	e157      	b.n	8002962 <__aeabi_dsub+0x392>
 80026b2:	1b96      	subs	r6, r2, r6
 80026b4:	1c71      	adds	r1, r6, #1
 80026b6:	291f      	cmp	r1, #31
 80026b8:	dd00      	ble.n	80026bc <__aeabi_dsub+0xec>
 80026ba:	e1cb      	b.n	8002a54 <__aeabi_dsub+0x484>
 80026bc:	2220      	movs	r2, #32
 80026be:	0018      	movs	r0, r3
 80026c0:	0026      	movs	r6, r4
 80026c2:	1a52      	subs	r2, r2, r1
 80026c4:	4094      	lsls	r4, r2
 80026c6:	4090      	lsls	r0, r2
 80026c8:	40ce      	lsrs	r6, r1
 80026ca:	40cb      	lsrs	r3, r1
 80026cc:	1e62      	subs	r2, r4, #1
 80026ce:	4194      	sbcs	r4, r2
 80026d0:	4330      	orrs	r0, r6
 80026d2:	4698      	mov	r8, r3
 80026d4:	2600      	movs	r6, #0
 80026d6:	4304      	orrs	r4, r0
 80026d8:	0763      	lsls	r3, r4, #29
 80026da:	d009      	beq.n	80026f0 <__aeabi_dsub+0x120>
 80026dc:	230f      	movs	r3, #15
 80026de:	4023      	ands	r3, r4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d005      	beq.n	80026f0 <__aeabi_dsub+0x120>
 80026e4:	1d23      	adds	r3, r4, #4
 80026e6:	42a3      	cmp	r3, r4
 80026e8:	41a4      	sbcs	r4, r4
 80026ea:	4264      	negs	r4, r4
 80026ec:	44a0      	add	r8, r4
 80026ee:	001c      	movs	r4, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	d400      	bmi.n	80026f8 <__aeabi_dsub+0x128>
 80026f6:	e0df      	b.n	80028b8 <__aeabi_dsub+0x2e8>
 80026f8:	4b82      	ldr	r3, [pc, #520]	; (8002904 <__aeabi_dsub+0x334>)
 80026fa:	3601      	adds	r6, #1
 80026fc:	429e      	cmp	r6, r3
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x132>
 8002700:	e0fb      	b.n	80028fa <__aeabi_dsub+0x32a>
 8002702:	4642      	mov	r2, r8
 8002704:	4b80      	ldr	r3, [pc, #512]	; (8002908 <__aeabi_dsub+0x338>)
 8002706:	08e4      	lsrs	r4, r4, #3
 8002708:	401a      	ands	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	0571      	lsls	r1, r6, #21
 800270e:	0752      	lsls	r2, r2, #29
 8002710:	025b      	lsls	r3, r3, #9
 8002712:	4322      	orrs	r2, r4
 8002714:	0b1b      	lsrs	r3, r3, #12
 8002716:	0d49      	lsrs	r1, r1, #21
 8002718:	0509      	lsls	r1, r1, #20
 800271a:	07ed      	lsls	r5, r5, #31
 800271c:	4319      	orrs	r1, r3
 800271e:	4329      	orrs	r1, r5
 8002720:	0010      	movs	r0, r2
 8002722:	bcf0      	pop	{r4, r5, r6, r7}
 8002724:	46bb      	mov	fp, r7
 8002726:	46b2      	mov	sl, r6
 8002728:	46a9      	mov	r9, r5
 800272a:	46a0      	mov	r8, r4
 800272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800272e:	1ab4      	subs	r4, r6, r2
 8002730:	46a4      	mov	ip, r4
 8002732:	2c00      	cmp	r4, #0
 8002734:	dd58      	ble.n	80027e8 <__aeabi_dsub+0x218>
 8002736:	2a00      	cmp	r2, #0
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x16c>
 800273a:	e09e      	b.n	800287a <__aeabi_dsub+0x2aa>
 800273c:	4a71      	ldr	r2, [pc, #452]	; (8002904 <__aeabi_dsub+0x334>)
 800273e:	4296      	cmp	r6, r2
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x174>
 8002742:	e13b      	b.n	80029bc <__aeabi_dsub+0x3ec>
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0412      	lsls	r2, r2, #16
 8002748:	4311      	orrs	r1, r2
 800274a:	4662      	mov	r2, ip
 800274c:	2a38      	cmp	r2, #56	; 0x38
 800274e:	dd00      	ble.n	8002752 <__aeabi_dsub+0x182>
 8002750:	e0c1      	b.n	80028d6 <__aeabi_dsub+0x306>
 8002752:	2a1f      	cmp	r2, #31
 8002754:	dc00      	bgt.n	8002758 <__aeabi_dsub+0x188>
 8002756:	e1bb      	b.n	8002ad0 <__aeabi_dsub+0x500>
 8002758:	000c      	movs	r4, r1
 800275a:	3a20      	subs	r2, #32
 800275c:	40d4      	lsrs	r4, r2
 800275e:	0022      	movs	r2, r4
 8002760:	4664      	mov	r4, ip
 8002762:	2c20      	cmp	r4, #32
 8002764:	d004      	beq.n	8002770 <__aeabi_dsub+0x1a0>
 8002766:	2740      	movs	r7, #64	; 0x40
 8002768:	1b3f      	subs	r7, r7, r4
 800276a:	40b9      	lsls	r1, r7
 800276c:	4308      	orrs	r0, r1
 800276e:	4680      	mov	r8, r0
 8002770:	4644      	mov	r4, r8
 8002772:	1e61      	subs	r1, r4, #1
 8002774:	418c      	sbcs	r4, r1
 8002776:	4314      	orrs	r4, r2
 8002778:	e0b1      	b.n	80028de <__aeabi_dsub+0x30e>
 800277a:	000c      	movs	r4, r1
 800277c:	4304      	orrs	r4, r0
 800277e:	d02a      	beq.n	80027d6 <__aeabi_dsub+0x206>
 8002780:	46bb      	mov	fp, r7
 8002782:	42bd      	cmp	r5, r7
 8002784:	d02d      	beq.n	80027e2 <__aeabi_dsub+0x212>
 8002786:	4c61      	ldr	r4, [pc, #388]	; (800290c <__aeabi_dsub+0x33c>)
 8002788:	46a4      	mov	ip, r4
 800278a:	44b4      	add	ip, r6
 800278c:	4664      	mov	r4, ip
 800278e:	2c00      	cmp	r4, #0
 8002790:	d05c      	beq.n	800284c <__aeabi_dsub+0x27c>
 8002792:	1b94      	subs	r4, r2, r6
 8002794:	46a4      	mov	ip, r4
 8002796:	2e00      	cmp	r6, #0
 8002798:	d000      	beq.n	800279c <__aeabi_dsub+0x1cc>
 800279a:	e115      	b.n	80029c8 <__aeabi_dsub+0x3f8>
 800279c:	464d      	mov	r5, r9
 800279e:	431d      	orrs	r5, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x1d4>
 80027a2:	e1c3      	b.n	8002b2c <__aeabi_dsub+0x55c>
 80027a4:	1e65      	subs	r5, r4, #1
 80027a6:	2c01      	cmp	r4, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x1dc>
 80027aa:	e20c      	b.n	8002bc6 <__aeabi_dsub+0x5f6>
 80027ac:	4e55      	ldr	r6, [pc, #340]	; (8002904 <__aeabi_dsub+0x334>)
 80027ae:	42b4      	cmp	r4, r6
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x1e4>
 80027b2:	e1f8      	b.n	8002ba6 <__aeabi_dsub+0x5d6>
 80027b4:	46ac      	mov	ip, r5
 80027b6:	e10e      	b.n	80029d6 <__aeabi_dsub+0x406>
 80027b8:	000a      	movs	r2, r1
 80027ba:	4302      	orrs	r2, r0
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x1f0>
 80027be:	e136      	b.n	8002a2e <__aeabi_dsub+0x45e>
 80027c0:	0022      	movs	r2, r4
 80027c2:	3a01      	subs	r2, #1
 80027c4:	2c01      	cmp	r4, #1
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x1fa>
 80027c8:	e1c6      	b.n	8002b58 <__aeabi_dsub+0x588>
 80027ca:	4c4e      	ldr	r4, [pc, #312]	; (8002904 <__aeabi_dsub+0x334>)
 80027cc:	45a4      	cmp	ip, r4
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x202>
 80027d0:	e0f4      	b.n	80029bc <__aeabi_dsub+0x3ec>
 80027d2:	4694      	mov	ip, r2
 80027d4:	e731      	b.n	800263a <__aeabi_dsub+0x6a>
 80027d6:	2401      	movs	r4, #1
 80027d8:	4067      	eors	r7, r4
 80027da:	46bb      	mov	fp, r7
 80027dc:	42bd      	cmp	r5, r7
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x212>
 80027e0:	e71c      	b.n	800261c <__aeabi_dsub+0x4c>
 80027e2:	4c4a      	ldr	r4, [pc, #296]	; (800290c <__aeabi_dsub+0x33c>)
 80027e4:	46a4      	mov	ip, r4
 80027e6:	44b4      	add	ip, r6
 80027e8:	4664      	mov	r4, ip
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	d100      	bne.n	80027f0 <__aeabi_dsub+0x220>
 80027ee:	e0cf      	b.n	8002990 <__aeabi_dsub+0x3c0>
 80027f0:	1b94      	subs	r4, r2, r6
 80027f2:	46a4      	mov	ip, r4
 80027f4:	2e00      	cmp	r6, #0
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x22a>
 80027f8:	e15c      	b.n	8002ab4 <__aeabi_dsub+0x4e4>
 80027fa:	4e42      	ldr	r6, [pc, #264]	; (8002904 <__aeabi_dsub+0x334>)
 80027fc:	42b2      	cmp	r2, r6
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x232>
 8002800:	e1ec      	b.n	8002bdc <__aeabi_dsub+0x60c>
 8002802:	2680      	movs	r6, #128	; 0x80
 8002804:	0436      	lsls	r6, r6, #16
 8002806:	4333      	orrs	r3, r6
 8002808:	4664      	mov	r4, ip
 800280a:	2c38      	cmp	r4, #56	; 0x38
 800280c:	dd00      	ble.n	8002810 <__aeabi_dsub+0x240>
 800280e:	e1b3      	b.n	8002b78 <__aeabi_dsub+0x5a8>
 8002810:	2c1f      	cmp	r4, #31
 8002812:	dd00      	ble.n	8002816 <__aeabi_dsub+0x246>
 8002814:	e238      	b.n	8002c88 <__aeabi_dsub+0x6b8>
 8002816:	2620      	movs	r6, #32
 8002818:	1b36      	subs	r6, r6, r4
 800281a:	001c      	movs	r4, r3
 800281c:	40b4      	lsls	r4, r6
 800281e:	464f      	mov	r7, r9
 8002820:	46a0      	mov	r8, r4
 8002822:	4664      	mov	r4, ip
 8002824:	40e7      	lsrs	r7, r4
 8002826:	4644      	mov	r4, r8
 8002828:	433c      	orrs	r4, r7
 800282a:	464f      	mov	r7, r9
 800282c:	40b7      	lsls	r7, r6
 800282e:	003e      	movs	r6, r7
 8002830:	1e77      	subs	r7, r6, #1
 8002832:	41be      	sbcs	r6, r7
 8002834:	4334      	orrs	r4, r6
 8002836:	4666      	mov	r6, ip
 8002838:	40f3      	lsrs	r3, r6
 800283a:	18c9      	adds	r1, r1, r3
 800283c:	1824      	adds	r4, r4, r0
 800283e:	4284      	cmp	r4, r0
 8002840:	419b      	sbcs	r3, r3
 8002842:	425b      	negs	r3, r3
 8002844:	4698      	mov	r8, r3
 8002846:	0016      	movs	r6, r2
 8002848:	4488      	add	r8, r1
 800284a:	e04e      	b.n	80028ea <__aeabi_dsub+0x31a>
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <__aeabi_dsub+0x340>)
 800284e:	1c74      	adds	r4, r6, #1
 8002850:	4214      	tst	r4, r2
 8002852:	d000      	beq.n	8002856 <__aeabi_dsub+0x286>
 8002854:	e0d6      	b.n	8002a04 <__aeabi_dsub+0x434>
 8002856:	464a      	mov	r2, r9
 8002858:	431a      	orrs	r2, r3
 800285a:	2e00      	cmp	r6, #0
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x290>
 800285e:	e15b      	b.n	8002b18 <__aeabi_dsub+0x548>
 8002860:	2a00      	cmp	r2, #0
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x296>
 8002864:	e1a5      	b.n	8002bb2 <__aeabi_dsub+0x5e2>
 8002866:	000a      	movs	r2, r1
 8002868:	4302      	orrs	r2, r0
 800286a:	d000      	beq.n	800286e <__aeabi_dsub+0x29e>
 800286c:	e1bb      	b.n	8002be6 <__aeabi_dsub+0x616>
 800286e:	464a      	mov	r2, r9
 8002870:	0759      	lsls	r1, r3, #29
 8002872:	08d2      	lsrs	r2, r2, #3
 8002874:	430a      	orrs	r2, r1
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	e027      	b.n	80028ca <__aeabi_dsub+0x2fa>
 800287a:	000a      	movs	r2, r1
 800287c:	4302      	orrs	r2, r0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x2b2>
 8002880:	e174      	b.n	8002b6c <__aeabi_dsub+0x59c>
 8002882:	0022      	movs	r2, r4
 8002884:	3a01      	subs	r2, #1
 8002886:	2c01      	cmp	r4, #1
 8002888:	d005      	beq.n	8002896 <__aeabi_dsub+0x2c6>
 800288a:	4c1e      	ldr	r4, [pc, #120]	; (8002904 <__aeabi_dsub+0x334>)
 800288c:	45a4      	cmp	ip, r4
 800288e:	d100      	bne.n	8002892 <__aeabi_dsub+0x2c2>
 8002890:	e094      	b.n	80029bc <__aeabi_dsub+0x3ec>
 8002892:	4694      	mov	ip, r2
 8002894:	e759      	b.n	800274a <__aeabi_dsub+0x17a>
 8002896:	4448      	add	r0, r9
 8002898:	4548      	cmp	r0, r9
 800289a:	4192      	sbcs	r2, r2
 800289c:	185b      	adds	r3, r3, r1
 800289e:	4698      	mov	r8, r3
 80028a0:	0004      	movs	r4, r0
 80028a2:	4252      	negs	r2, r2
 80028a4:	4490      	add	r8, r2
 80028a6:	4643      	mov	r3, r8
 80028a8:	2602      	movs	r6, #2
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	d500      	bpl.n	80028b0 <__aeabi_dsub+0x2e0>
 80028ae:	e0c4      	b.n	8002a3a <__aeabi_dsub+0x46a>
 80028b0:	3e01      	subs	r6, #1
 80028b2:	0763      	lsls	r3, r4, #29
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x2e8>
 80028b6:	e711      	b.n	80026dc <__aeabi_dsub+0x10c>
 80028b8:	4643      	mov	r3, r8
 80028ba:	46b4      	mov	ip, r6
 80028bc:	0759      	lsls	r1, r3, #29
 80028be:	08e2      	lsrs	r2, r4, #3
 80028c0:	430a      	orrs	r2, r1
 80028c2:	08db      	lsrs	r3, r3, #3
 80028c4:	490f      	ldr	r1, [pc, #60]	; (8002904 <__aeabi_dsub+0x334>)
 80028c6:	458c      	cmp	ip, r1
 80028c8:	d040      	beq.n	800294c <__aeabi_dsub+0x37c>
 80028ca:	4661      	mov	r1, ip
 80028cc:	031b      	lsls	r3, r3, #12
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	0b1b      	lsrs	r3, r3, #12
 80028d2:	0d49      	lsrs	r1, r1, #21
 80028d4:	e720      	b.n	8002718 <__aeabi_dsub+0x148>
 80028d6:	4301      	orrs	r1, r0
 80028d8:	000c      	movs	r4, r1
 80028da:	1e61      	subs	r1, r4, #1
 80028dc:	418c      	sbcs	r4, r1
 80028de:	444c      	add	r4, r9
 80028e0:	454c      	cmp	r4, r9
 80028e2:	4192      	sbcs	r2, r2
 80028e4:	4252      	negs	r2, r2
 80028e6:	4690      	mov	r8, r2
 80028e8:	4498      	add	r8, r3
 80028ea:	4643      	mov	r3, r8
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	d5e0      	bpl.n	80028b2 <__aeabi_dsub+0x2e2>
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__aeabi_dsub+0x334>)
 80028f2:	3601      	adds	r6, #1
 80028f4:	429e      	cmp	r6, r3
 80028f6:	d000      	beq.n	80028fa <__aeabi_dsub+0x32a>
 80028f8:	e09f      	b.n	8002a3a <__aeabi_dsub+0x46a>
 80028fa:	0031      	movs	r1, r6
 80028fc:	2300      	movs	r3, #0
 80028fe:	2200      	movs	r2, #0
 8002900:	e70a      	b.n	8002718 <__aeabi_dsub+0x148>
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	000007ff 	.word	0x000007ff
 8002908:	ff7fffff 	.word	0xff7fffff
 800290c:	fffff801 	.word	0xfffff801
 8002910:	000007fe 	.word	0x000007fe
 8002914:	2a00      	cmp	r2, #0
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x34a>
 8002918:	e160      	b.n	8002bdc <__aeabi_dsub+0x60c>
 800291a:	000a      	movs	r2, r1
 800291c:	4302      	orrs	r2, r0
 800291e:	d04d      	beq.n	80029bc <__aeabi_dsub+0x3ec>
 8002920:	464a      	mov	r2, r9
 8002922:	075c      	lsls	r4, r3, #29
 8002924:	08d2      	lsrs	r2, r2, #3
 8002926:	4322      	orrs	r2, r4
 8002928:	2480      	movs	r4, #128	; 0x80
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	0324      	lsls	r4, r4, #12
 800292e:	4223      	tst	r3, r4
 8002930:	d007      	beq.n	8002942 <__aeabi_dsub+0x372>
 8002932:	08ce      	lsrs	r6, r1, #3
 8002934:	4226      	tst	r6, r4
 8002936:	d104      	bne.n	8002942 <__aeabi_dsub+0x372>
 8002938:	465d      	mov	r5, fp
 800293a:	0033      	movs	r3, r6
 800293c:	08c2      	lsrs	r2, r0, #3
 800293e:	0749      	lsls	r1, r1, #29
 8002940:	430a      	orrs	r2, r1
 8002942:	0f51      	lsrs	r1, r2, #29
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	08d2      	lsrs	r2, r2, #3
 8002948:	0749      	lsls	r1, r1, #29
 800294a:	430a      	orrs	r2, r1
 800294c:	0011      	movs	r1, r2
 800294e:	4319      	orrs	r1, r3
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x384>
 8002952:	e1c8      	b.n	8002ce6 <__aeabi_dsub+0x716>
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0309      	lsls	r1, r1, #12
 8002958:	430b      	orrs	r3, r1
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	49d5      	ldr	r1, [pc, #852]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 800295e:	0b1b      	lsrs	r3, r3, #12
 8002960:	e6da      	b.n	8002718 <__aeabi_dsub+0x148>
 8002962:	49d5      	ldr	r1, [pc, #852]	; (8002cb8 <__aeabi_dsub+0x6e8>)
 8002964:	1ab6      	subs	r6, r6, r2
 8002966:	400b      	ands	r3, r1
 8002968:	4698      	mov	r8, r3
 800296a:	e6b5      	b.n	80026d8 <__aeabi_dsub+0x108>
 800296c:	0020      	movs	r0, r4
 800296e:	f000 fb75 	bl	800305c <__clzsi2>
 8002972:	0002      	movs	r2, r0
 8002974:	3218      	adds	r2, #24
 8002976:	2a1f      	cmp	r2, #31
 8002978:	dc00      	bgt.n	800297c <__aeabi_dsub+0x3ac>
 800297a:	e68f      	b.n	800269c <__aeabi_dsub+0xcc>
 800297c:	0023      	movs	r3, r4
 800297e:	3808      	subs	r0, #8
 8002980:	4083      	lsls	r3, r0
 8002982:	2400      	movs	r4, #0
 8002984:	e692      	b.n	80026ac <__aeabi_dsub+0xdc>
 8002986:	4308      	orrs	r0, r1
 8002988:	0002      	movs	r2, r0
 800298a:	1e50      	subs	r0, r2, #1
 800298c:	4182      	sbcs	r2, r0
 800298e:	e66d      	b.n	800266c <__aeabi_dsub+0x9c>
 8002990:	4cca      	ldr	r4, [pc, #808]	; (8002cbc <__aeabi_dsub+0x6ec>)
 8002992:	1c72      	adds	r2, r6, #1
 8002994:	4222      	tst	r2, r4
 8002996:	d000      	beq.n	800299a <__aeabi_dsub+0x3ca>
 8002998:	e0ad      	b.n	8002af6 <__aeabi_dsub+0x526>
 800299a:	464a      	mov	r2, r9
 800299c:	431a      	orrs	r2, r3
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d1b8      	bne.n	8002914 <__aeabi_dsub+0x344>
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x3d8>
 80029a6:	e158      	b.n	8002c5a <__aeabi_dsub+0x68a>
 80029a8:	000a      	movs	r2, r1
 80029aa:	4302      	orrs	r2, r0
 80029ac:	d000      	beq.n	80029b0 <__aeabi_dsub+0x3e0>
 80029ae:	e159      	b.n	8002c64 <__aeabi_dsub+0x694>
 80029b0:	464a      	mov	r2, r9
 80029b2:	0759      	lsls	r1, r3, #29
 80029b4:	08d2      	lsrs	r2, r2, #3
 80029b6:	430a      	orrs	r2, r1
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	e786      	b.n	80028ca <__aeabi_dsub+0x2fa>
 80029bc:	464a      	mov	r2, r9
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	08d2      	lsrs	r2, r2, #3
 80029c2:	430a      	orrs	r2, r1
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	e7c1      	b.n	800294c <__aeabi_dsub+0x37c>
 80029c8:	4dba      	ldr	r5, [pc, #744]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 80029ca:	42aa      	cmp	r2, r5
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x400>
 80029ce:	e11e      	b.n	8002c0e <__aeabi_dsub+0x63e>
 80029d0:	2580      	movs	r5, #128	; 0x80
 80029d2:	042d      	lsls	r5, r5, #16
 80029d4:	432b      	orrs	r3, r5
 80029d6:	4664      	mov	r4, ip
 80029d8:	2c38      	cmp	r4, #56	; 0x38
 80029da:	dc5d      	bgt.n	8002a98 <__aeabi_dsub+0x4c8>
 80029dc:	2c1f      	cmp	r4, #31
 80029de:	dd00      	ble.n	80029e2 <__aeabi_dsub+0x412>
 80029e0:	e0d0      	b.n	8002b84 <__aeabi_dsub+0x5b4>
 80029e2:	2520      	movs	r5, #32
 80029e4:	4667      	mov	r7, ip
 80029e6:	1b2d      	subs	r5, r5, r4
 80029e8:	464e      	mov	r6, r9
 80029ea:	001c      	movs	r4, r3
 80029ec:	40fe      	lsrs	r6, r7
 80029ee:	40ac      	lsls	r4, r5
 80029f0:	4334      	orrs	r4, r6
 80029f2:	464e      	mov	r6, r9
 80029f4:	40ae      	lsls	r6, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	40fb      	lsrs	r3, r7
 80029fa:	1e6e      	subs	r6, r5, #1
 80029fc:	41b5      	sbcs	r5, r6
 80029fe:	1ac9      	subs	r1, r1, r3
 8002a00:	432c      	orrs	r4, r5
 8002a02:	e04e      	b.n	8002aa2 <__aeabi_dsub+0x4d2>
 8002a04:	464a      	mov	r2, r9
 8002a06:	1a14      	subs	r4, r2, r0
 8002a08:	45a1      	cmp	r9, r4
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	4252      	negs	r2, r2
 8002a0e:	4690      	mov	r8, r2
 8002a10:	1a5f      	subs	r7, r3, r1
 8002a12:	003a      	movs	r2, r7
 8002a14:	4647      	mov	r7, r8
 8002a16:	1bd2      	subs	r2, r2, r7
 8002a18:	4690      	mov	r8, r2
 8002a1a:	0212      	lsls	r2, r2, #8
 8002a1c:	d500      	bpl.n	8002a20 <__aeabi_dsub+0x450>
 8002a1e:	e08b      	b.n	8002b38 <__aeabi_dsub+0x568>
 8002a20:	4642      	mov	r2, r8
 8002a22:	4322      	orrs	r2, r4
 8002a24:	d000      	beq.n	8002a28 <__aeabi_dsub+0x458>
 8002a26:	e630      	b.n	800268a <__aeabi_dsub+0xba>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2500      	movs	r5, #0
 8002a2c:	e74d      	b.n	80028ca <__aeabi_dsub+0x2fa>
 8002a2e:	464a      	mov	r2, r9
 8002a30:	0759      	lsls	r1, r3, #29
 8002a32:	08d2      	lsrs	r2, r2, #3
 8002a34:	430a      	orrs	r2, r1
 8002a36:	08db      	lsrs	r3, r3, #3
 8002a38:	e744      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002a3a:	4642      	mov	r2, r8
 8002a3c:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <__aeabi_dsub+0x6e8>)
 8002a3e:	0861      	lsrs	r1, r4, #1
 8002a40:	401a      	ands	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	2201      	movs	r2, #1
 8002a46:	4014      	ands	r4, r2
 8002a48:	430c      	orrs	r4, r1
 8002a4a:	07da      	lsls	r2, r3, #31
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	4698      	mov	r8, r3
 8002a50:	4314      	orrs	r4, r2
 8002a52:	e641      	b.n	80026d8 <__aeabi_dsub+0x108>
 8002a54:	001a      	movs	r2, r3
 8002a56:	3e1f      	subs	r6, #31
 8002a58:	40f2      	lsrs	r2, r6
 8002a5a:	0016      	movs	r6, r2
 8002a5c:	2920      	cmp	r1, #32
 8002a5e:	d003      	beq.n	8002a68 <__aeabi_dsub+0x498>
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	1a51      	subs	r1, r2, r1
 8002a64:	408b      	lsls	r3, r1
 8002a66:	431c      	orrs	r4, r3
 8002a68:	1e62      	subs	r2, r4, #1
 8002a6a:	4194      	sbcs	r4, r2
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4334      	orrs	r4, r6
 8002a70:	4698      	mov	r8, r3
 8002a72:	2600      	movs	r6, #0
 8002a74:	e71d      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002a76:	000c      	movs	r4, r1
 8002a78:	3a20      	subs	r2, #32
 8002a7a:	40d4      	lsrs	r4, r2
 8002a7c:	0022      	movs	r2, r4
 8002a7e:	4664      	mov	r4, ip
 8002a80:	2c20      	cmp	r4, #32
 8002a82:	d004      	beq.n	8002a8e <__aeabi_dsub+0x4be>
 8002a84:	2740      	movs	r7, #64	; 0x40
 8002a86:	1b3f      	subs	r7, r7, r4
 8002a88:	40b9      	lsls	r1, r7
 8002a8a:	4308      	orrs	r0, r1
 8002a8c:	4680      	mov	r8, r0
 8002a8e:	4644      	mov	r4, r8
 8002a90:	1e61      	subs	r1, r4, #1
 8002a92:	418c      	sbcs	r4, r1
 8002a94:	4322      	orrs	r2, r4
 8002a96:	e5e9      	b.n	800266c <__aeabi_dsub+0x9c>
 8002a98:	464c      	mov	r4, r9
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	001c      	movs	r4, r3
 8002a9e:	1e63      	subs	r3, r4, #1
 8002aa0:	419c      	sbcs	r4, r3
 8002aa2:	1b04      	subs	r4, r0, r4
 8002aa4:	42a0      	cmp	r0, r4
 8002aa6:	419b      	sbcs	r3, r3
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	1acb      	subs	r3, r1, r3
 8002aac:	4698      	mov	r8, r3
 8002aae:	465d      	mov	r5, fp
 8002ab0:	0016      	movs	r6, r2
 8002ab2:	e5e2      	b.n	800267a <__aeabi_dsub+0xaa>
 8002ab4:	464e      	mov	r6, r9
 8002ab6:	431e      	orrs	r6, r3
 8002ab8:	d100      	bne.n	8002abc <__aeabi_dsub+0x4ec>
 8002aba:	e0ae      	b.n	8002c1a <__aeabi_dsub+0x64a>
 8002abc:	1e66      	subs	r6, r4, #1
 8002abe:	2c01      	cmp	r4, #1
 8002ac0:	d100      	bne.n	8002ac4 <__aeabi_dsub+0x4f4>
 8002ac2:	e0fd      	b.n	8002cc0 <__aeabi_dsub+0x6f0>
 8002ac4:	4f7b      	ldr	r7, [pc, #492]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 8002ac6:	42bc      	cmp	r4, r7
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x4fc>
 8002aca:	e107      	b.n	8002cdc <__aeabi_dsub+0x70c>
 8002acc:	46b4      	mov	ip, r6
 8002ace:	e69b      	b.n	8002808 <__aeabi_dsub+0x238>
 8002ad0:	4664      	mov	r4, ip
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	1b12      	subs	r2, r2, r4
 8002ad6:	000c      	movs	r4, r1
 8002ad8:	4094      	lsls	r4, r2
 8002ada:	0007      	movs	r7, r0
 8002adc:	4090      	lsls	r0, r2
 8002ade:	46a0      	mov	r8, r4
 8002ae0:	4664      	mov	r4, ip
 8002ae2:	1e42      	subs	r2, r0, #1
 8002ae4:	4190      	sbcs	r0, r2
 8002ae6:	4662      	mov	r2, ip
 8002ae8:	40e7      	lsrs	r7, r4
 8002aea:	4644      	mov	r4, r8
 8002aec:	40d1      	lsrs	r1, r2
 8002aee:	433c      	orrs	r4, r7
 8002af0:	4304      	orrs	r4, r0
 8002af2:	185b      	adds	r3, r3, r1
 8002af4:	e6f3      	b.n	80028de <__aeabi_dsub+0x30e>
 8002af6:	4c6f      	ldr	r4, [pc, #444]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 8002af8:	42a2      	cmp	r2, r4
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x52e>
 8002afc:	e0d5      	b.n	8002caa <__aeabi_dsub+0x6da>
 8002afe:	4448      	add	r0, r9
 8002b00:	185b      	adds	r3, r3, r1
 8002b02:	4548      	cmp	r0, r9
 8002b04:	4189      	sbcs	r1, r1
 8002b06:	4249      	negs	r1, r1
 8002b08:	185b      	adds	r3, r3, r1
 8002b0a:	07dc      	lsls	r4, r3, #31
 8002b0c:	0840      	lsrs	r0, r0, #1
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	4698      	mov	r8, r3
 8002b12:	0016      	movs	r6, r2
 8002b14:	4304      	orrs	r4, r0
 8002b16:	e6cc      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x54e>
 8002b1c:	e082      	b.n	8002c24 <__aeabi_dsub+0x654>
 8002b1e:	000a      	movs	r2, r1
 8002b20:	4302      	orrs	r2, r0
 8002b22:	d140      	bne.n	8002ba6 <__aeabi_dsub+0x5d6>
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	2500      	movs	r5, #0
 8002b28:	031b      	lsls	r3, r3, #12
 8002b2a:	e713      	b.n	8002954 <__aeabi_dsub+0x384>
 8002b2c:	074b      	lsls	r3, r1, #29
 8002b2e:	08c2      	lsrs	r2, r0, #3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	08cb      	lsrs	r3, r1, #3
 8002b36:	e6c5      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002b38:	464a      	mov	r2, r9
 8002b3a:	1a84      	subs	r4, r0, r2
 8002b3c:	42a0      	cmp	r0, r4
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	1acb      	subs	r3, r1, r3
 8002b42:	4252      	negs	r2, r2
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	4698      	mov	r8, r3
 8002b48:	465d      	mov	r5, fp
 8002b4a:	e59e      	b.n	800268a <__aeabi_dsub+0xba>
 8002b4c:	464a      	mov	r2, r9
 8002b4e:	0759      	lsls	r1, r3, #29
 8002b50:	08d2      	lsrs	r2, r2, #3
 8002b52:	430a      	orrs	r2, r1
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	e6f9      	b.n	800294c <__aeabi_dsub+0x37c>
 8002b58:	464a      	mov	r2, r9
 8002b5a:	1a14      	subs	r4, r2, r0
 8002b5c:	45a1      	cmp	r9, r4
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a5b      	subs	r3, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	4698      	mov	r8, r3
 8002b68:	2601      	movs	r6, #1
 8002b6a:	e586      	b.n	800267a <__aeabi_dsub+0xaa>
 8002b6c:	464a      	mov	r2, r9
 8002b6e:	0759      	lsls	r1, r3, #29
 8002b70:	08d2      	lsrs	r2, r2, #3
 8002b72:	430a      	orrs	r2, r1
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	e6a5      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002b78:	464c      	mov	r4, r9
 8002b7a:	4323      	orrs	r3, r4
 8002b7c:	001c      	movs	r4, r3
 8002b7e:	1e63      	subs	r3, r4, #1
 8002b80:	419c      	sbcs	r4, r3
 8002b82:	e65b      	b.n	800283c <__aeabi_dsub+0x26c>
 8002b84:	4665      	mov	r5, ip
 8002b86:	001e      	movs	r6, r3
 8002b88:	3d20      	subs	r5, #32
 8002b8a:	40ee      	lsrs	r6, r5
 8002b8c:	2c20      	cmp	r4, #32
 8002b8e:	d005      	beq.n	8002b9c <__aeabi_dsub+0x5cc>
 8002b90:	2540      	movs	r5, #64	; 0x40
 8002b92:	1b2d      	subs	r5, r5, r4
 8002b94:	40ab      	lsls	r3, r5
 8002b96:	464c      	mov	r4, r9
 8002b98:	431c      	orrs	r4, r3
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	4654      	mov	r4, sl
 8002b9e:	1e63      	subs	r3, r4, #1
 8002ba0:	419c      	sbcs	r4, r3
 8002ba2:	4334      	orrs	r4, r6
 8002ba4:	e77d      	b.n	8002aa2 <__aeabi_dsub+0x4d2>
 8002ba6:	074b      	lsls	r3, r1, #29
 8002ba8:	08c2      	lsrs	r2, r0, #3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	465d      	mov	r5, fp
 8002bae:	08cb      	lsrs	r3, r1, #3
 8002bb0:	e6cc      	b.n	800294c <__aeabi_dsub+0x37c>
 8002bb2:	000a      	movs	r2, r1
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x5ea>
 8002bb8:	e736      	b.n	8002a28 <__aeabi_dsub+0x458>
 8002bba:	074b      	lsls	r3, r1, #29
 8002bbc:	08c2      	lsrs	r2, r0, #3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	465d      	mov	r5, fp
 8002bc2:	08cb      	lsrs	r3, r1, #3
 8002bc4:	e681      	b.n	80028ca <__aeabi_dsub+0x2fa>
 8002bc6:	464a      	mov	r2, r9
 8002bc8:	1a84      	subs	r4, r0, r2
 8002bca:	42a0      	cmp	r0, r4
 8002bcc:	4192      	sbcs	r2, r2
 8002bce:	1acb      	subs	r3, r1, r3
 8002bd0:	4252      	negs	r2, r2
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	4698      	mov	r8, r3
 8002bd6:	465d      	mov	r5, fp
 8002bd8:	2601      	movs	r6, #1
 8002bda:	e54e      	b.n	800267a <__aeabi_dsub+0xaa>
 8002bdc:	074b      	lsls	r3, r1, #29
 8002bde:	08c2      	lsrs	r2, r0, #3
 8002be0:	431a      	orrs	r2, r3
 8002be2:	08cb      	lsrs	r3, r1, #3
 8002be4:	e6b2      	b.n	800294c <__aeabi_dsub+0x37c>
 8002be6:	464a      	mov	r2, r9
 8002be8:	1a14      	subs	r4, r2, r0
 8002bea:	45a1      	cmp	r9, r4
 8002bec:	4192      	sbcs	r2, r2
 8002bee:	1a5f      	subs	r7, r3, r1
 8002bf0:	4252      	negs	r2, r2
 8002bf2:	1aba      	subs	r2, r7, r2
 8002bf4:	4690      	mov	r8, r2
 8002bf6:	0212      	lsls	r2, r2, #8
 8002bf8:	d56b      	bpl.n	8002cd2 <__aeabi_dsub+0x702>
 8002bfa:	464a      	mov	r2, r9
 8002bfc:	1a84      	subs	r4, r0, r2
 8002bfe:	42a0      	cmp	r0, r4
 8002c00:	4192      	sbcs	r2, r2
 8002c02:	1acb      	subs	r3, r1, r3
 8002c04:	4252      	negs	r2, r2
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	4698      	mov	r8, r3
 8002c0a:	465d      	mov	r5, fp
 8002c0c:	e564      	b.n	80026d8 <__aeabi_dsub+0x108>
 8002c0e:	074b      	lsls	r3, r1, #29
 8002c10:	08c2      	lsrs	r2, r0, #3
 8002c12:	431a      	orrs	r2, r3
 8002c14:	465d      	mov	r5, fp
 8002c16:	08cb      	lsrs	r3, r1, #3
 8002c18:	e698      	b.n	800294c <__aeabi_dsub+0x37c>
 8002c1a:	074b      	lsls	r3, r1, #29
 8002c1c:	08c2      	lsrs	r2, r0, #3
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	08cb      	lsrs	r3, r1, #3
 8002c22:	e64f      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002c24:	000a      	movs	r2, r1
 8002c26:	4302      	orrs	r2, r0
 8002c28:	d090      	beq.n	8002b4c <__aeabi_dsub+0x57c>
 8002c2a:	464a      	mov	r2, r9
 8002c2c:	075c      	lsls	r4, r3, #29
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	4314      	orrs	r4, r2
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	0312      	lsls	r2, r2, #12
 8002c38:	4213      	tst	r3, r2
 8002c3a:	d008      	beq.n	8002c4e <__aeabi_dsub+0x67e>
 8002c3c:	08ce      	lsrs	r6, r1, #3
 8002c3e:	4216      	tst	r6, r2
 8002c40:	d105      	bne.n	8002c4e <__aeabi_dsub+0x67e>
 8002c42:	08c0      	lsrs	r0, r0, #3
 8002c44:	0749      	lsls	r1, r1, #29
 8002c46:	4308      	orrs	r0, r1
 8002c48:	0004      	movs	r4, r0
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	0033      	movs	r3, r6
 8002c4e:	0f61      	lsrs	r1, r4, #29
 8002c50:	00e2      	lsls	r2, r4, #3
 8002c52:	0749      	lsls	r1, r1, #29
 8002c54:	08d2      	lsrs	r2, r2, #3
 8002c56:	430a      	orrs	r2, r1
 8002c58:	e678      	b.n	800294c <__aeabi_dsub+0x37c>
 8002c5a:	074b      	lsls	r3, r1, #29
 8002c5c:	08c2      	lsrs	r2, r0, #3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	08cb      	lsrs	r3, r1, #3
 8002c62:	e632      	b.n	80028ca <__aeabi_dsub+0x2fa>
 8002c64:	4448      	add	r0, r9
 8002c66:	185b      	adds	r3, r3, r1
 8002c68:	4548      	cmp	r0, r9
 8002c6a:	4192      	sbcs	r2, r2
 8002c6c:	4698      	mov	r8, r3
 8002c6e:	4252      	negs	r2, r2
 8002c70:	4490      	add	r8, r2
 8002c72:	4643      	mov	r3, r8
 8002c74:	0004      	movs	r4, r0
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x6ac>
 8002c7a:	e61a      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <__aeabi_dsub+0x6e8>)
 8002c80:	2601      	movs	r6, #1
 8002c82:	401a      	ands	r2, r3
 8002c84:	4690      	mov	r8, r2
 8002c86:	e614      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002c88:	4666      	mov	r6, ip
 8002c8a:	001f      	movs	r7, r3
 8002c8c:	3e20      	subs	r6, #32
 8002c8e:	40f7      	lsrs	r7, r6
 8002c90:	2c20      	cmp	r4, #32
 8002c92:	d005      	beq.n	8002ca0 <__aeabi_dsub+0x6d0>
 8002c94:	2640      	movs	r6, #64	; 0x40
 8002c96:	1b36      	subs	r6, r6, r4
 8002c98:	40b3      	lsls	r3, r6
 8002c9a:	464c      	mov	r4, r9
 8002c9c:	431c      	orrs	r4, r3
 8002c9e:	46a2      	mov	sl, r4
 8002ca0:	4654      	mov	r4, sl
 8002ca2:	1e63      	subs	r3, r4, #1
 8002ca4:	419c      	sbcs	r4, r3
 8002ca6:	433c      	orrs	r4, r7
 8002ca8:	e5c8      	b.n	800283c <__aeabi_dsub+0x26c>
 8002caa:	0011      	movs	r1, r2
 8002cac:	2300      	movs	r3, #0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	e532      	b.n	8002718 <__aeabi_dsub+0x148>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	000007ff 	.word	0x000007ff
 8002cb8:	ff7fffff 	.word	0xff7fffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	464a      	mov	r2, r9
 8002cc2:	1814      	adds	r4, r2, r0
 8002cc4:	4284      	cmp	r4, r0
 8002cc6:	4192      	sbcs	r2, r2
 8002cc8:	185b      	adds	r3, r3, r1
 8002cca:	4698      	mov	r8, r3
 8002ccc:	4252      	negs	r2, r2
 8002cce:	4490      	add	r8, r2
 8002cd0:	e5e9      	b.n	80028a6 <__aeabi_dsub+0x2d6>
 8002cd2:	4642      	mov	r2, r8
 8002cd4:	4322      	orrs	r2, r4
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x70a>
 8002cd8:	e6a6      	b.n	8002a28 <__aeabi_dsub+0x458>
 8002cda:	e5ea      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002cdc:	074b      	lsls	r3, r1, #29
 8002cde:	08c2      	lsrs	r2, r0, #3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	08cb      	lsrs	r3, r1, #3
 8002ce4:	e632      	b.n	800294c <__aeabi_dsub+0x37c>
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4901      	ldr	r1, [pc, #4]	; (8002cf0 <__aeabi_dsub+0x720>)
 8002cea:	0013      	movs	r3, r2
 8002cec:	e514      	b.n	8002718 <__aeabi_dsub+0x148>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	000007ff 	.word	0x000007ff

08002cf4 <__aeabi_dcmpun>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	0005      	movs	r5, r0
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <__aeabi_dcmpun+0x38>)
 8002cfa:	030c      	lsls	r4, r1, #12
 8002cfc:	0016      	movs	r6, r2
 8002cfe:	0049      	lsls	r1, r1, #1
 8002d00:	031a      	lsls	r2, r3, #12
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	0b24      	lsrs	r4, r4, #12
 8002d06:	0d49      	lsrs	r1, r1, #21
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	0d5b      	lsrs	r3, r3, #21
 8002d0c:	4281      	cmp	r1, r0
 8002d0e:	d008      	beq.n	8002d22 <__aeabi_dcmpun+0x2e>
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <__aeabi_dcmpun+0x38>)
 8002d12:	2000      	movs	r0, #0
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d103      	bne.n	8002d20 <__aeabi_dcmpun+0x2c>
 8002d18:	4332      	orrs	r2, r6
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	1e42      	subs	r2, r0, #1
 8002d1e:	4190      	sbcs	r0, r2
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	2001      	movs	r0, #1
 8002d24:	432c      	orrs	r4, r5
 8002d26:	d1fb      	bne.n	8002d20 <__aeabi_dcmpun+0x2c>
 8002d28:	e7f2      	b.n	8002d10 <__aeabi_dcmpun+0x1c>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	000007ff 	.word	0x000007ff

08002d30 <__aeabi_d2iz>:
 8002d30:	000a      	movs	r2, r1
 8002d32:	b530      	push	{r4, r5, lr}
 8002d34:	4c13      	ldr	r4, [pc, #76]	; (8002d84 <__aeabi_d2iz+0x54>)
 8002d36:	0053      	lsls	r3, r2, #1
 8002d38:	0309      	lsls	r1, r1, #12
 8002d3a:	0005      	movs	r5, r0
 8002d3c:	0b09      	lsrs	r1, r1, #12
 8002d3e:	2000      	movs	r0, #0
 8002d40:	0d5b      	lsrs	r3, r3, #21
 8002d42:	0fd2      	lsrs	r2, r2, #31
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	dd04      	ble.n	8002d52 <__aeabi_d2iz+0x22>
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <__aeabi_d2iz+0x58>)
 8002d4a:	4283      	cmp	r3, r0
 8002d4c:	dd02      	ble.n	8002d54 <__aeabi_d2iz+0x24>
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <__aeabi_d2iz+0x5c>)
 8002d50:	18d0      	adds	r0, r2, r3
 8002d52:	bd30      	pop	{r4, r5, pc}
 8002d54:	2080      	movs	r0, #128	; 0x80
 8002d56:	0340      	lsls	r0, r0, #13
 8002d58:	4301      	orrs	r1, r0
 8002d5a:	480d      	ldr	r0, [pc, #52]	; (8002d90 <__aeabi_d2iz+0x60>)
 8002d5c:	1ac0      	subs	r0, r0, r3
 8002d5e:	281f      	cmp	r0, #31
 8002d60:	dd08      	ble.n	8002d74 <__aeabi_d2iz+0x44>
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_d2iz+0x64>)
 8002d64:	1ac3      	subs	r3, r0, r3
 8002d66:	40d9      	lsrs	r1, r3
 8002d68:	000b      	movs	r3, r1
 8002d6a:	4258      	negs	r0, r3
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d1f0      	bne.n	8002d52 <__aeabi_d2iz+0x22>
 8002d70:	0018      	movs	r0, r3
 8002d72:	e7ee      	b.n	8002d52 <__aeabi_d2iz+0x22>
 8002d74:	4c08      	ldr	r4, [pc, #32]	; (8002d98 <__aeabi_d2iz+0x68>)
 8002d76:	40c5      	lsrs	r5, r0
 8002d78:	46a4      	mov	ip, r4
 8002d7a:	4463      	add	r3, ip
 8002d7c:	4099      	lsls	r1, r3
 8002d7e:	000b      	movs	r3, r1
 8002d80:	432b      	orrs	r3, r5
 8002d82:	e7f2      	b.n	8002d6a <__aeabi_d2iz+0x3a>
 8002d84:	000003fe 	.word	0x000003fe
 8002d88:	0000041d 	.word	0x0000041d
 8002d8c:	7fffffff 	.word	0x7fffffff
 8002d90:	00000433 	.word	0x00000433
 8002d94:	00000413 	.word	0x00000413
 8002d98:	fffffbed 	.word	0xfffffbed

08002d9c <__aeabi_i2d>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d016      	beq.n	8002dd0 <__aeabi_i2d+0x34>
 8002da2:	17c3      	asrs	r3, r0, #31
 8002da4:	18c5      	adds	r5, r0, r3
 8002da6:	405d      	eors	r5, r3
 8002da8:	0fc4      	lsrs	r4, r0, #31
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f956 	bl	800305c <__clzsi2>
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <__aeabi_i2d+0x5c>)
 8002db2:	1a12      	subs	r2, r2, r0
 8002db4:	280a      	cmp	r0, #10
 8002db6:	dc16      	bgt.n	8002de6 <__aeabi_i2d+0x4a>
 8002db8:	0003      	movs	r3, r0
 8002dba:	002e      	movs	r6, r5
 8002dbc:	3315      	adds	r3, #21
 8002dbe:	409e      	lsls	r6, r3
 8002dc0:	230b      	movs	r3, #11
 8002dc2:	1a18      	subs	r0, r3, r0
 8002dc4:	40c5      	lsrs	r5, r0
 8002dc6:	0553      	lsls	r3, r2, #21
 8002dc8:	032d      	lsls	r5, r5, #12
 8002dca:	0b2d      	lsrs	r5, r5, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e003      	b.n	8002dd8 <__aeabi_i2d+0x3c>
 8002dd0:	2400      	movs	r4, #0
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2500      	movs	r5, #0
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	432b      	orrs	r3, r5
 8002ddc:	07e4      	lsls	r4, r4, #31
 8002dde:	4323      	orrs	r3, r4
 8002de0:	0030      	movs	r0, r6
 8002de2:	0019      	movs	r1, r3
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	380b      	subs	r0, #11
 8002de8:	4085      	lsls	r5, r0
 8002dea:	0553      	lsls	r3, r2, #21
 8002dec:	032d      	lsls	r5, r5, #12
 8002dee:	2600      	movs	r6, #0
 8002df0:	0b2d      	lsrs	r5, r5, #12
 8002df2:	0d5b      	lsrs	r3, r3, #21
 8002df4:	e7f0      	b.n	8002dd8 <__aeabi_i2d+0x3c>
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	0000041e 	.word	0x0000041e

08002dfc <__aeabi_ui2d>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	1e04      	subs	r4, r0, #0
 8002e00:	d010      	beq.n	8002e24 <__aeabi_ui2d+0x28>
 8002e02:	f000 f92b 	bl	800305c <__clzsi2>
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <__aeabi_ui2d+0x48>)
 8002e08:	1a1b      	subs	r3, r3, r0
 8002e0a:	280a      	cmp	r0, #10
 8002e0c:	dc11      	bgt.n	8002e32 <__aeabi_ui2d+0x36>
 8002e0e:	220b      	movs	r2, #11
 8002e10:	0021      	movs	r1, r4
 8002e12:	1a12      	subs	r2, r2, r0
 8002e14:	40d1      	lsrs	r1, r2
 8002e16:	3015      	adds	r0, #21
 8002e18:	030a      	lsls	r2, r1, #12
 8002e1a:	055b      	lsls	r3, r3, #21
 8002e1c:	4084      	lsls	r4, r0
 8002e1e:	0b12      	lsrs	r2, r2, #12
 8002e20:	0d5b      	lsrs	r3, r3, #21
 8002e22:	e001      	b.n	8002e28 <__aeabi_ui2d+0x2c>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2200      	movs	r2, #0
 8002e28:	051b      	lsls	r3, r3, #20
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	0020      	movs	r0, r4
 8002e2e:	0019      	movs	r1, r3
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	0022      	movs	r2, r4
 8002e34:	380b      	subs	r0, #11
 8002e36:	4082      	lsls	r2, r0
 8002e38:	055b      	lsls	r3, r3, #21
 8002e3a:	0312      	lsls	r2, r2, #12
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	0b12      	lsrs	r2, r2, #12
 8002e40:	0d5b      	lsrs	r3, r3, #21
 8002e42:	e7f1      	b.n	8002e28 <__aeabi_ui2d+0x2c>
 8002e44:	0000041e 	.word	0x0000041e

08002e48 <__aeabi_f2d>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	0043      	lsls	r3, r0, #1
 8002e4c:	0246      	lsls	r6, r0, #9
 8002e4e:	0fc4      	lsrs	r4, r0, #31
 8002e50:	20fe      	movs	r0, #254	; 0xfe
 8002e52:	0e1b      	lsrs	r3, r3, #24
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	0a75      	lsrs	r5, r6, #9
 8002e58:	4208      	tst	r0, r1
 8002e5a:	d00c      	beq.n	8002e76 <__aeabi_f2d+0x2e>
 8002e5c:	22e0      	movs	r2, #224	; 0xe0
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4694      	mov	ip, r2
 8002e62:	076d      	lsls	r5, r5, #29
 8002e64:	0b36      	lsrs	r6, r6, #12
 8002e66:	4463      	add	r3, ip
 8002e68:	051b      	lsls	r3, r3, #20
 8002e6a:	4333      	orrs	r3, r6
 8002e6c:	07e4      	lsls	r4, r4, #31
 8002e6e:	4323      	orrs	r3, r4
 8002e70:	0028      	movs	r0, r5
 8002e72:	0019      	movs	r1, r3
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <__aeabi_f2d+0x5c>
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d01b      	beq.n	8002eb6 <__aeabi_f2d+0x6e>
 8002e7e:	0028      	movs	r0, r5
 8002e80:	f000 f8ec 	bl	800305c <__clzsi2>
 8002e84:	280a      	cmp	r0, #10
 8002e86:	dc1c      	bgt.n	8002ec2 <__aeabi_f2d+0x7a>
 8002e88:	230b      	movs	r3, #11
 8002e8a:	002a      	movs	r2, r5
 8002e8c:	1a1b      	subs	r3, r3, r0
 8002e8e:	40da      	lsrs	r2, r3
 8002e90:	0003      	movs	r3, r0
 8002e92:	3315      	adds	r3, #21
 8002e94:	409d      	lsls	r5, r3
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <__aeabi_f2d+0x88>)
 8002e98:	0312      	lsls	r2, r2, #12
 8002e9a:	1a1b      	subs	r3, r3, r0
 8002e9c:	055b      	lsls	r3, r3, #21
 8002e9e:	0b16      	lsrs	r6, r2, #12
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	e7e1      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002ea4:	2d00      	cmp	r5, #0
 8002ea6:	d009      	beq.n	8002ebc <__aeabi_f2d+0x74>
 8002ea8:	0b32      	lsrs	r2, r6, #12
 8002eaa:	2680      	movs	r6, #128	; 0x80
 8002eac:	0336      	lsls	r6, r6, #12
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <__aeabi_f2d+0x8c>)
 8002eb0:	076d      	lsls	r5, r5, #29
 8002eb2:	4316      	orrs	r6, r2
 8002eb4:	e7d8      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2600      	movs	r6, #0
 8002eba:	e7d5      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <__aeabi_f2d+0x8c>)
 8002ec0:	e7d2      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	002a      	movs	r2, r5
 8002ec6:	3b0b      	subs	r3, #11
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	2500      	movs	r5, #0
 8002ecc:	e7e3      	b.n	8002e96 <__aeabi_f2d+0x4e>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	00000389 	.word	0x00000389
 8002ed4:	000007ff 	.word	0x000007ff

08002ed8 <__aeabi_d2f>:
 8002ed8:	0002      	movs	r2, r0
 8002eda:	004b      	lsls	r3, r1, #1
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	0308      	lsls	r0, r1, #12
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	4e3d      	ldr	r6, [pc, #244]	; (8002fd8 <__aeabi_d2f+0x100>)
 8002ee4:	0fcc      	lsrs	r4, r1, #31
 8002ee6:	0a40      	lsrs	r0, r0, #9
 8002ee8:	0f51      	lsrs	r1, r2, #29
 8002eea:	1c5f      	adds	r7, r3, #1
 8002eec:	4308      	orrs	r0, r1
 8002eee:	00d5      	lsls	r5, r2, #3
 8002ef0:	4237      	tst	r7, r6
 8002ef2:	d00a      	beq.n	8002f0a <__aeabi_d2f+0x32>
 8002ef4:	4939      	ldr	r1, [pc, #228]	; (8002fdc <__aeabi_d2f+0x104>)
 8002ef6:	185e      	adds	r6, r3, r1
 8002ef8:	2efe      	cmp	r6, #254	; 0xfe
 8002efa:	dd16      	ble.n	8002f2a <__aeabi_d2f+0x52>
 8002efc:	23ff      	movs	r3, #255	; 0xff
 8002efe:	2100      	movs	r1, #0
 8002f00:	05db      	lsls	r3, r3, #23
 8002f02:	430b      	orrs	r3, r1
 8002f04:	07e0      	lsls	r0, r4, #31
 8002f06:	4318      	orrs	r0, r3
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <__aeabi_d2f+0x44>
 8002f0e:	4328      	orrs	r0, r5
 8002f10:	d027      	beq.n	8002f62 <__aeabi_d2f+0x8a>
 8002f12:	2105      	movs	r1, #5
 8002f14:	0189      	lsls	r1, r1, #6
 8002f16:	0a49      	lsrs	r1, r1, #9
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e7f1      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f1c:	4305      	orrs	r5, r0
 8002f1e:	d0ed      	beq.n	8002efc <__aeabi_d2f+0x24>
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	03c9      	lsls	r1, r1, #15
 8002f24:	23ff      	movs	r3, #255	; 0xff
 8002f26:	4301      	orrs	r1, r0
 8002f28:	e7ea      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	dd1c      	ble.n	8002f68 <__aeabi_d2f+0x90>
 8002f2e:	0192      	lsls	r2, r2, #6
 8002f30:	0011      	movs	r1, r2
 8002f32:	1e4a      	subs	r2, r1, #1
 8002f34:	4191      	sbcs	r1, r2
 8002f36:	00c0      	lsls	r0, r0, #3
 8002f38:	0f6d      	lsrs	r5, r5, #29
 8002f3a:	4301      	orrs	r1, r0
 8002f3c:	4329      	orrs	r1, r5
 8002f3e:	074b      	lsls	r3, r1, #29
 8002f40:	d048      	beq.n	8002fd4 <__aeabi_d2f+0xfc>
 8002f42:	230f      	movs	r3, #15
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d000      	beq.n	8002f4c <__aeabi_d2f+0x74>
 8002f4a:	3104      	adds	r1, #4
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	04db      	lsls	r3, r3, #19
 8002f50:	400b      	ands	r3, r1
 8002f52:	d03f      	beq.n	8002fd4 <__aeabi_d2f+0xfc>
 8002f54:	1c72      	adds	r2, r6, #1
 8002f56:	2efe      	cmp	r6, #254	; 0xfe
 8002f58:	d0d0      	beq.n	8002efc <__aeabi_d2f+0x24>
 8002f5a:	0189      	lsls	r1, r1, #6
 8002f5c:	0a49      	lsrs	r1, r1, #9
 8002f5e:	b2d3      	uxtb	r3, r2
 8002f60:	e7ce      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	e7cb      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f68:	0032      	movs	r2, r6
 8002f6a:	3217      	adds	r2, #23
 8002f6c:	db22      	blt.n	8002fb4 <__aeabi_d2f+0xdc>
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	221e      	movs	r2, #30
 8002f72:	0409      	lsls	r1, r1, #16
 8002f74:	4308      	orrs	r0, r1
 8002f76:	1b92      	subs	r2, r2, r6
 8002f78:	2a1f      	cmp	r2, #31
 8002f7a:	dd1d      	ble.n	8002fb8 <__aeabi_d2f+0xe0>
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4249      	negs	r1, r1
 8002f80:	1b8e      	subs	r6, r1, r6
 8002f82:	0001      	movs	r1, r0
 8002f84:	40f1      	lsrs	r1, r6
 8002f86:	000e      	movs	r6, r1
 8002f88:	2a20      	cmp	r2, #32
 8002f8a:	d004      	beq.n	8002f96 <__aeabi_d2f+0xbe>
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <__aeabi_d2f+0x108>)
 8002f8e:	4694      	mov	ip, r2
 8002f90:	4463      	add	r3, ip
 8002f92:	4098      	lsls	r0, r3
 8002f94:	4305      	orrs	r5, r0
 8002f96:	0029      	movs	r1, r5
 8002f98:	1e4d      	subs	r5, r1, #1
 8002f9a:	41a9      	sbcs	r1, r5
 8002f9c:	4331      	orrs	r1, r6
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	074b      	lsls	r3, r1, #29
 8002fa2:	d1ce      	bne.n	8002f42 <__aeabi_d2f+0x6a>
 8002fa4:	2080      	movs	r0, #128	; 0x80
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	04c0      	lsls	r0, r0, #19
 8002faa:	2201      	movs	r2, #1
 8002fac:	4003      	ands	r3, r0
 8002fae:	4201      	tst	r1, r0
 8002fb0:	d1d3      	bne.n	8002f5a <__aeabi_d2f+0x82>
 8002fb2:	e7af      	b.n	8002f14 <__aeabi_d2f+0x3c>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e7ac      	b.n	8002f12 <__aeabi_d2f+0x3a>
 8002fb8:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <__aeabi_d2f+0x10c>)
 8002fba:	468c      	mov	ip, r1
 8002fbc:	0029      	movs	r1, r5
 8002fbe:	4463      	add	r3, ip
 8002fc0:	40d1      	lsrs	r1, r2
 8002fc2:	409d      	lsls	r5, r3
 8002fc4:	000a      	movs	r2, r1
 8002fc6:	0029      	movs	r1, r5
 8002fc8:	4098      	lsls	r0, r3
 8002fca:	1e4d      	subs	r5, r1, #1
 8002fcc:	41a9      	sbcs	r1, r5
 8002fce:	4301      	orrs	r1, r0
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	e7e4      	b.n	8002f9e <__aeabi_d2f+0xc6>
 8002fd4:	0033      	movs	r3, r6
 8002fd6:	e79d      	b.n	8002f14 <__aeabi_d2f+0x3c>
 8002fd8:	000007fe 	.word	0x000007fe
 8002fdc:	fffffc80 	.word	0xfffffc80
 8002fe0:	fffffca2 	.word	0xfffffca2
 8002fe4:	fffffc82 	.word	0xfffffc82

08002fe8 <__aeabi_cfrcmple>:
 8002fe8:	4684      	mov	ip, r0
 8002fea:	1c08      	adds	r0, r1, #0
 8002fec:	4661      	mov	r1, ip
 8002fee:	e7ff      	b.n	8002ff0 <__aeabi_cfcmpeq>

08002ff0 <__aeabi_cfcmpeq>:
 8002ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ff2:	f000 f9ab 	bl	800334c <__lesf2>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d401      	bmi.n	8002ffe <__aeabi_cfcmpeq+0xe>
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	42c8      	cmn	r0, r1
 8002ffe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003000 <__aeabi_fcmpeq>:
 8003000:	b510      	push	{r4, lr}
 8003002:	f000 f92f 	bl	8003264 <__eqsf2>
 8003006:	4240      	negs	r0, r0
 8003008:	3001      	adds	r0, #1
 800300a:	bd10      	pop	{r4, pc}

0800300c <__aeabi_fcmplt>:
 800300c:	b510      	push	{r4, lr}
 800300e:	f000 f99d 	bl	800334c <__lesf2>
 8003012:	2800      	cmp	r0, #0
 8003014:	db01      	blt.n	800301a <__aeabi_fcmplt+0xe>
 8003016:	2000      	movs	r0, #0
 8003018:	bd10      	pop	{r4, pc}
 800301a:	2001      	movs	r0, #1
 800301c:	bd10      	pop	{r4, pc}
 800301e:	46c0      	nop			; (mov r8, r8)

08003020 <__aeabi_fcmple>:
 8003020:	b510      	push	{r4, lr}
 8003022:	f000 f993 	bl	800334c <__lesf2>
 8003026:	2800      	cmp	r0, #0
 8003028:	dd01      	ble.n	800302e <__aeabi_fcmple+0xe>
 800302a:	2000      	movs	r0, #0
 800302c:	bd10      	pop	{r4, pc}
 800302e:	2001      	movs	r0, #1
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			; (mov r8, r8)

08003034 <__aeabi_fcmpgt>:
 8003034:	b510      	push	{r4, lr}
 8003036:	f000 f93d 	bl	80032b4 <__gesf2>
 800303a:	2800      	cmp	r0, #0
 800303c:	dc01      	bgt.n	8003042 <__aeabi_fcmpgt+0xe>
 800303e:	2000      	movs	r0, #0
 8003040:	bd10      	pop	{r4, pc}
 8003042:	2001      	movs	r0, #1
 8003044:	bd10      	pop	{r4, pc}
 8003046:	46c0      	nop			; (mov r8, r8)

08003048 <__aeabi_fcmpge>:
 8003048:	b510      	push	{r4, lr}
 800304a:	f000 f933 	bl	80032b4 <__gesf2>
 800304e:	2800      	cmp	r0, #0
 8003050:	da01      	bge.n	8003056 <__aeabi_fcmpge+0xe>
 8003052:	2000      	movs	r0, #0
 8003054:	bd10      	pop	{r4, pc}
 8003056:	2001      	movs	r0, #1
 8003058:	bd10      	pop	{r4, pc}
 800305a:	46c0      	nop			; (mov r8, r8)

0800305c <__clzsi2>:
 800305c:	211c      	movs	r1, #28
 800305e:	2301      	movs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	4298      	cmp	r0, r3
 8003064:	d301      	bcc.n	800306a <__clzsi2+0xe>
 8003066:	0c00      	lsrs	r0, r0, #16
 8003068:	3910      	subs	r1, #16
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	4298      	cmp	r0, r3
 800306e:	d301      	bcc.n	8003074 <__clzsi2+0x18>
 8003070:	0a00      	lsrs	r0, r0, #8
 8003072:	3908      	subs	r1, #8
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	4298      	cmp	r0, r3
 8003078:	d301      	bcc.n	800307e <__clzsi2+0x22>
 800307a:	0900      	lsrs	r0, r0, #4
 800307c:	3904      	subs	r1, #4
 800307e:	a202      	add	r2, pc, #8	; (adr r2, 8003088 <__clzsi2+0x2c>)
 8003080:	5c10      	ldrb	r0, [r2, r0]
 8003082:	1840      	adds	r0, r0, r1
 8003084:	4770      	bx	lr
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	02020304 	.word	0x02020304
 800308c:	01010101 	.word	0x01010101
	...

08003098 <__divdi3>:
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	4657      	mov	r7, sl
 800309c:	464e      	mov	r6, r9
 800309e:	4645      	mov	r5, r8
 80030a0:	46de      	mov	lr, fp
 80030a2:	b5e0      	push	{r5, r6, r7, lr}
 80030a4:	000f      	movs	r7, r1
 80030a6:	0019      	movs	r1, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	0006      	movs	r6, r0
 80030ac:	4698      	mov	r8, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	b083      	sub	sp, #12
 80030b2:	2f00      	cmp	r7, #0
 80030b4:	da07      	bge.n	80030c6 <__divdi3+0x2e>
 80030b6:	0033      	movs	r3, r6
 80030b8:	003c      	movs	r4, r7
 80030ba:	2700      	movs	r7, #0
 80030bc:	425e      	negs	r6, r3
 80030be:	41a7      	sbcs	r7, r4
 80030c0:	2301      	movs	r3, #1
 80030c2:	425b      	negs	r3, r3
 80030c4:	4698      	mov	r8, r3
 80030c6:	2900      	cmp	r1, #0
 80030c8:	da07      	bge.n	80030da <__divdi3+0x42>
 80030ca:	4643      	mov	r3, r8
 80030cc:	43db      	mvns	r3, r3
 80030ce:	000c      	movs	r4, r1
 80030d0:	4698      	mov	r8, r3
 80030d2:	0003      	movs	r3, r0
 80030d4:	2100      	movs	r1, #0
 80030d6:	4258      	negs	r0, r3
 80030d8:	41a1      	sbcs	r1, r4
 80030da:	0034      	movs	r4, r6
 80030dc:	003d      	movs	r5, r7
 80030de:	4682      	mov	sl, r0
 80030e0:	4689      	mov	r9, r1
 80030e2:	42b9      	cmp	r1, r7
 80030e4:	d86a      	bhi.n	80031bc <__divdi3+0x124>
 80030e6:	d067      	beq.n	80031b8 <__divdi3+0x120>
 80030e8:	4649      	mov	r1, r9
 80030ea:	4650      	mov	r0, sl
 80030ec:	f000 f978 	bl	80033e0 <__clzdi2>
 80030f0:	4683      	mov	fp, r0
 80030f2:	0039      	movs	r1, r7
 80030f4:	0030      	movs	r0, r6
 80030f6:	f000 f973 	bl	80033e0 <__clzdi2>
 80030fa:	465b      	mov	r3, fp
 80030fc:	1a1b      	subs	r3, r3, r0
 80030fe:	469c      	mov	ip, r3
 8003100:	3b20      	subs	r3, #32
 8003102:	469b      	mov	fp, r3
 8003104:	d46b      	bmi.n	80031de <__divdi3+0x146>
 8003106:	4658      	mov	r0, fp
 8003108:	4651      	mov	r1, sl
 800310a:	4081      	lsls	r1, r0
 800310c:	4660      	mov	r0, ip
 800310e:	000b      	movs	r3, r1
 8003110:	4651      	mov	r1, sl
 8003112:	4081      	lsls	r1, r0
 8003114:	000a      	movs	r2, r1
 8003116:	42bb      	cmp	r3, r7
 8003118:	d900      	bls.n	800311c <__divdi3+0x84>
 800311a:	e072      	b.n	8003202 <__divdi3+0x16a>
 800311c:	42bb      	cmp	r3, r7
 800311e:	d100      	bne.n	8003122 <__divdi3+0x8a>
 8003120:	e079      	b.n	8003216 <__divdi3+0x17e>
 8003122:	0034      	movs	r4, r6
 8003124:	003d      	movs	r5, r7
 8003126:	4659      	mov	r1, fp
 8003128:	1aa4      	subs	r4, r4, r2
 800312a:	419d      	sbcs	r5, r3
 800312c:	2900      	cmp	r1, #0
 800312e:	da00      	bge.n	8003132 <__divdi3+0x9a>
 8003130:	e074      	b.n	800321c <__divdi3+0x184>
 8003132:	2100      	movs	r1, #0
 8003134:	2000      	movs	r0, #0
 8003136:	2601      	movs	r6, #1
 8003138:	9000      	str	r0, [sp, #0]
 800313a:	9101      	str	r1, [sp, #4]
 800313c:	4659      	mov	r1, fp
 800313e:	408e      	lsls	r6, r1
 8003140:	9601      	str	r6, [sp, #4]
 8003142:	4661      	mov	r1, ip
 8003144:	2601      	movs	r6, #1
 8003146:	408e      	lsls	r6, r1
 8003148:	4661      	mov	r1, ip
 800314a:	9600      	str	r6, [sp, #0]
 800314c:	2900      	cmp	r1, #0
 800314e:	d05f      	beq.n	8003210 <__divdi3+0x178>
 8003150:	07d9      	lsls	r1, r3, #31
 8003152:	0856      	lsrs	r6, r2, #1
 8003154:	430e      	orrs	r6, r1
 8003156:	085f      	lsrs	r7, r3, #1
 8003158:	4661      	mov	r1, ip
 800315a:	2201      	movs	r2, #1
 800315c:	2300      	movs	r3, #0
 800315e:	e00c      	b.n	800317a <__divdi3+0xe2>
 8003160:	42af      	cmp	r7, r5
 8003162:	d101      	bne.n	8003168 <__divdi3+0xd0>
 8003164:	42a6      	cmp	r6, r4
 8003166:	d80a      	bhi.n	800317e <__divdi3+0xe6>
 8003168:	1ba4      	subs	r4, r4, r6
 800316a:	41bd      	sbcs	r5, r7
 800316c:	1924      	adds	r4, r4, r4
 800316e:	416d      	adcs	r5, r5
 8003170:	3901      	subs	r1, #1
 8003172:	18a4      	adds	r4, r4, r2
 8003174:	415d      	adcs	r5, r3
 8003176:	2900      	cmp	r1, #0
 8003178:	d006      	beq.n	8003188 <__divdi3+0xf0>
 800317a:	42af      	cmp	r7, r5
 800317c:	d9f0      	bls.n	8003160 <__divdi3+0xc8>
 800317e:	3901      	subs	r1, #1
 8003180:	1924      	adds	r4, r4, r4
 8003182:	416d      	adcs	r5, r5
 8003184:	2900      	cmp	r1, #0
 8003186:	d1f8      	bne.n	800317a <__divdi3+0xe2>
 8003188:	9800      	ldr	r0, [sp, #0]
 800318a:	9901      	ldr	r1, [sp, #4]
 800318c:	465b      	mov	r3, fp
 800318e:	1900      	adds	r0, r0, r4
 8003190:	4169      	adcs	r1, r5
 8003192:	2b00      	cmp	r3, #0
 8003194:	db4d      	blt.n	8003232 <__divdi3+0x19a>
 8003196:	002e      	movs	r6, r5
 8003198:	002c      	movs	r4, r5
 800319a:	40de      	lsrs	r6, r3
 800319c:	4663      	mov	r3, ip
 800319e:	40dc      	lsrs	r4, r3
 80031a0:	465b      	mov	r3, fp
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db55      	blt.n	8003252 <__divdi3+0x1ba>
 80031a6:	0034      	movs	r4, r6
 80031a8:	409c      	lsls	r4, r3
 80031aa:	0023      	movs	r3, r4
 80031ac:	4664      	mov	r4, ip
 80031ae:	40a6      	lsls	r6, r4
 80031b0:	0032      	movs	r2, r6
 80031b2:	1a80      	subs	r0, r0, r2
 80031b4:	4199      	sbcs	r1, r3
 80031b6:	e003      	b.n	80031c0 <__divdi3+0x128>
 80031b8:	42b0      	cmp	r0, r6
 80031ba:	d995      	bls.n	80030e8 <__divdi3+0x50>
 80031bc:	2000      	movs	r0, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	4643      	mov	r3, r8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <__divdi3+0x138>
 80031c6:	0003      	movs	r3, r0
 80031c8:	000c      	movs	r4, r1
 80031ca:	2100      	movs	r1, #0
 80031cc:	4258      	negs	r0, r3
 80031ce:	41a1      	sbcs	r1, r4
 80031d0:	b003      	add	sp, #12
 80031d2:	bcf0      	pop	{r4, r5, r6, r7}
 80031d4:	46bb      	mov	fp, r7
 80031d6:	46b2      	mov	sl, r6
 80031d8:	46a9      	mov	r9, r5
 80031da:	46a0      	mov	r8, r4
 80031dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031de:	4662      	mov	r2, ip
 80031e0:	4648      	mov	r0, r9
 80031e2:	2320      	movs	r3, #32
 80031e4:	4651      	mov	r1, sl
 80031e6:	4090      	lsls	r0, r2
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	40d9      	lsrs	r1, r3
 80031ec:	0003      	movs	r3, r0
 80031ee:	9100      	str	r1, [sp, #0]
 80031f0:	9900      	ldr	r1, [sp, #0]
 80031f2:	4660      	mov	r0, ip
 80031f4:	430b      	orrs	r3, r1
 80031f6:	4651      	mov	r1, sl
 80031f8:	4081      	lsls	r1, r0
 80031fa:	000a      	movs	r2, r1
 80031fc:	42bb      	cmp	r3, r7
 80031fe:	d800      	bhi.n	8003202 <__divdi3+0x16a>
 8003200:	e78c      	b.n	800311c <__divdi3+0x84>
 8003202:	2100      	movs	r1, #0
 8003204:	2000      	movs	r0, #0
 8003206:	9000      	str	r0, [sp, #0]
 8003208:	9101      	str	r1, [sp, #4]
 800320a:	4661      	mov	r1, ip
 800320c:	2900      	cmp	r1, #0
 800320e:	d19f      	bne.n	8003150 <__divdi3+0xb8>
 8003210:	9800      	ldr	r0, [sp, #0]
 8003212:	9901      	ldr	r1, [sp, #4]
 8003214:	e7d4      	b.n	80031c0 <__divdi3+0x128>
 8003216:	42b1      	cmp	r1, r6
 8003218:	d8f3      	bhi.n	8003202 <__divdi3+0x16a>
 800321a:	e782      	b.n	8003122 <__divdi3+0x8a>
 800321c:	4661      	mov	r1, ip
 800321e:	2620      	movs	r6, #32
 8003220:	2701      	movs	r7, #1
 8003222:	1a76      	subs	r6, r6, r1
 8003224:	2000      	movs	r0, #0
 8003226:	2100      	movs	r1, #0
 8003228:	40f7      	lsrs	r7, r6
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	9101      	str	r1, [sp, #4]
 800322e:	9701      	str	r7, [sp, #4]
 8003230:	e787      	b.n	8003142 <__divdi3+0xaa>
 8003232:	4662      	mov	r2, ip
 8003234:	2320      	movs	r3, #32
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	002a      	movs	r2, r5
 800323a:	409a      	lsls	r2, r3
 800323c:	0026      	movs	r6, r4
 800323e:	0013      	movs	r3, r2
 8003240:	4662      	mov	r2, ip
 8003242:	40d6      	lsrs	r6, r2
 8003244:	002c      	movs	r4, r5
 8003246:	431e      	orrs	r6, r3
 8003248:	4663      	mov	r3, ip
 800324a:	40dc      	lsrs	r4, r3
 800324c:	465b      	mov	r3, fp
 800324e:	2b00      	cmp	r3, #0
 8003250:	daa9      	bge.n	80031a6 <__divdi3+0x10e>
 8003252:	4662      	mov	r2, ip
 8003254:	2320      	movs	r3, #32
 8003256:	0035      	movs	r5, r6
 8003258:	4094      	lsls	r4, r2
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	40dd      	lsrs	r5, r3
 800325e:	0023      	movs	r3, r4
 8003260:	432b      	orrs	r3, r5
 8003262:	e7a3      	b.n	80031ac <__divdi3+0x114>

08003264 <__eqsf2>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	0042      	lsls	r2, r0, #1
 8003268:	024e      	lsls	r6, r1, #9
 800326a:	004c      	lsls	r4, r1, #1
 800326c:	0245      	lsls	r5, r0, #9
 800326e:	0a6d      	lsrs	r5, r5, #9
 8003270:	0e12      	lsrs	r2, r2, #24
 8003272:	0fc3      	lsrs	r3, r0, #31
 8003274:	0a76      	lsrs	r6, r6, #9
 8003276:	0e24      	lsrs	r4, r4, #24
 8003278:	0fc9      	lsrs	r1, r1, #31
 800327a:	2aff      	cmp	r2, #255	; 0xff
 800327c:	d00f      	beq.n	800329e <__eqsf2+0x3a>
 800327e:	2cff      	cmp	r4, #255	; 0xff
 8003280:	d011      	beq.n	80032a6 <__eqsf2+0x42>
 8003282:	2001      	movs	r0, #1
 8003284:	42a2      	cmp	r2, r4
 8003286:	d000      	beq.n	800328a <__eqsf2+0x26>
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	42b5      	cmp	r5, r6
 800328c:	d1fc      	bne.n	8003288 <__eqsf2+0x24>
 800328e:	428b      	cmp	r3, r1
 8003290:	d00d      	beq.n	80032ae <__eqsf2+0x4a>
 8003292:	2a00      	cmp	r2, #0
 8003294:	d1f8      	bne.n	8003288 <__eqsf2+0x24>
 8003296:	0028      	movs	r0, r5
 8003298:	1e45      	subs	r5, r0, #1
 800329a:	41a8      	sbcs	r0, r5
 800329c:	e7f4      	b.n	8003288 <__eqsf2+0x24>
 800329e:	2001      	movs	r0, #1
 80032a0:	2d00      	cmp	r5, #0
 80032a2:	d1f1      	bne.n	8003288 <__eqsf2+0x24>
 80032a4:	e7eb      	b.n	800327e <__eqsf2+0x1a>
 80032a6:	2001      	movs	r0, #1
 80032a8:	2e00      	cmp	r6, #0
 80032aa:	d1ed      	bne.n	8003288 <__eqsf2+0x24>
 80032ac:	e7e9      	b.n	8003282 <__eqsf2+0x1e>
 80032ae:	2000      	movs	r0, #0
 80032b0:	e7ea      	b.n	8003288 <__eqsf2+0x24>
 80032b2:	46c0      	nop			; (mov r8, r8)

080032b4 <__gesf2>:
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	0042      	lsls	r2, r0, #1
 80032b8:	0246      	lsls	r6, r0, #9
 80032ba:	024d      	lsls	r5, r1, #9
 80032bc:	004c      	lsls	r4, r1, #1
 80032be:	0fc3      	lsrs	r3, r0, #31
 80032c0:	0a76      	lsrs	r6, r6, #9
 80032c2:	0e12      	lsrs	r2, r2, #24
 80032c4:	0a6d      	lsrs	r5, r5, #9
 80032c6:	0e24      	lsrs	r4, r4, #24
 80032c8:	0fc8      	lsrs	r0, r1, #31
 80032ca:	2aff      	cmp	r2, #255	; 0xff
 80032cc:	d01f      	beq.n	800330e <__gesf2+0x5a>
 80032ce:	2cff      	cmp	r4, #255	; 0xff
 80032d0:	d010      	beq.n	80032f4 <__gesf2+0x40>
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d11f      	bne.n	8003316 <__gesf2+0x62>
 80032d6:	4271      	negs	r1, r6
 80032d8:	4171      	adcs	r1, r6
 80032da:	2c00      	cmp	r4, #0
 80032dc:	d101      	bne.n	80032e2 <__gesf2+0x2e>
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d01e      	beq.n	8003320 <__gesf2+0x6c>
 80032e2:	2900      	cmp	r1, #0
 80032e4:	d10e      	bne.n	8003304 <__gesf2+0x50>
 80032e6:	4283      	cmp	r3, r0
 80032e8:	d01e      	beq.n	8003328 <__gesf2+0x74>
 80032ea:	2102      	movs	r1, #2
 80032ec:	1e58      	subs	r0, r3, #1
 80032ee:	4008      	ands	r0, r1
 80032f0:	3801      	subs	r0, #1
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	d126      	bne.n	8003346 <__gesf2+0x92>
 80032f8:	2a00      	cmp	r2, #0
 80032fa:	d1f4      	bne.n	80032e6 <__gesf2+0x32>
 80032fc:	4271      	negs	r1, r6
 80032fe:	4171      	adcs	r1, r6
 8003300:	2900      	cmp	r1, #0
 8003302:	d0f0      	beq.n	80032e6 <__gesf2+0x32>
 8003304:	2800      	cmp	r0, #0
 8003306:	d1f4      	bne.n	80032f2 <__gesf2+0x3e>
 8003308:	2001      	movs	r0, #1
 800330a:	4240      	negs	r0, r0
 800330c:	e7f1      	b.n	80032f2 <__gesf2+0x3e>
 800330e:	2e00      	cmp	r6, #0
 8003310:	d119      	bne.n	8003346 <__gesf2+0x92>
 8003312:	2cff      	cmp	r4, #255	; 0xff
 8003314:	d0ee      	beq.n	80032f4 <__gesf2+0x40>
 8003316:	2c00      	cmp	r4, #0
 8003318:	d1e5      	bne.n	80032e6 <__gesf2+0x32>
 800331a:	2d00      	cmp	r5, #0
 800331c:	d1e3      	bne.n	80032e6 <__gesf2+0x32>
 800331e:	e7e4      	b.n	80032ea <__gesf2+0x36>
 8003320:	2000      	movs	r0, #0
 8003322:	2e00      	cmp	r6, #0
 8003324:	d0e5      	beq.n	80032f2 <__gesf2+0x3e>
 8003326:	e7e0      	b.n	80032ea <__gesf2+0x36>
 8003328:	42a2      	cmp	r2, r4
 800332a:	dc05      	bgt.n	8003338 <__gesf2+0x84>
 800332c:	dbea      	blt.n	8003304 <__gesf2+0x50>
 800332e:	42ae      	cmp	r6, r5
 8003330:	d802      	bhi.n	8003338 <__gesf2+0x84>
 8003332:	d3e7      	bcc.n	8003304 <__gesf2+0x50>
 8003334:	2000      	movs	r0, #0
 8003336:	e7dc      	b.n	80032f2 <__gesf2+0x3e>
 8003338:	4241      	negs	r1, r0
 800333a:	4141      	adcs	r1, r0
 800333c:	4248      	negs	r0, r1
 800333e:	2102      	movs	r1, #2
 8003340:	4008      	ands	r0, r1
 8003342:	3801      	subs	r0, #1
 8003344:	e7d5      	b.n	80032f2 <__gesf2+0x3e>
 8003346:	2002      	movs	r0, #2
 8003348:	4240      	negs	r0, r0
 800334a:	e7d2      	b.n	80032f2 <__gesf2+0x3e>

0800334c <__lesf2>:
 800334c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334e:	0042      	lsls	r2, r0, #1
 8003350:	0246      	lsls	r6, r0, #9
 8003352:	024d      	lsls	r5, r1, #9
 8003354:	004c      	lsls	r4, r1, #1
 8003356:	0fc3      	lsrs	r3, r0, #31
 8003358:	0a76      	lsrs	r6, r6, #9
 800335a:	0e12      	lsrs	r2, r2, #24
 800335c:	0a6d      	lsrs	r5, r5, #9
 800335e:	0e24      	lsrs	r4, r4, #24
 8003360:	0fc8      	lsrs	r0, r1, #31
 8003362:	2aff      	cmp	r2, #255	; 0xff
 8003364:	d00d      	beq.n	8003382 <__lesf2+0x36>
 8003366:	2cff      	cmp	r4, #255	; 0xff
 8003368:	d00f      	beq.n	800338a <__lesf2+0x3e>
 800336a:	2a00      	cmp	r2, #0
 800336c:	d123      	bne.n	80033b6 <__lesf2+0x6a>
 800336e:	4271      	negs	r1, r6
 8003370:	4171      	adcs	r1, r6
 8003372:	2c00      	cmp	r4, #0
 8003374:	d10f      	bne.n	8003396 <__lesf2+0x4a>
 8003376:	2d00      	cmp	r5, #0
 8003378:	d10d      	bne.n	8003396 <__lesf2+0x4a>
 800337a:	2000      	movs	r0, #0
 800337c:	2e00      	cmp	r6, #0
 800337e:	d014      	beq.n	80033aa <__lesf2+0x5e>
 8003380:	e00d      	b.n	800339e <__lesf2+0x52>
 8003382:	2e00      	cmp	r6, #0
 8003384:	d110      	bne.n	80033a8 <__lesf2+0x5c>
 8003386:	2cff      	cmp	r4, #255	; 0xff
 8003388:	d115      	bne.n	80033b6 <__lesf2+0x6a>
 800338a:	2d00      	cmp	r5, #0
 800338c:	d10c      	bne.n	80033a8 <__lesf2+0x5c>
 800338e:	2a00      	cmp	r2, #0
 8003390:	d103      	bne.n	800339a <__lesf2+0x4e>
 8003392:	4271      	negs	r1, r6
 8003394:	4171      	adcs	r1, r6
 8003396:	2900      	cmp	r1, #0
 8003398:	d108      	bne.n	80033ac <__lesf2+0x60>
 800339a:	4283      	cmp	r3, r0
 800339c:	d010      	beq.n	80033c0 <__lesf2+0x74>
 800339e:	2102      	movs	r1, #2
 80033a0:	1e58      	subs	r0, r3, #1
 80033a2:	4008      	ands	r0, r1
 80033a4:	3801      	subs	r0, #1
 80033a6:	e000      	b.n	80033aa <__lesf2+0x5e>
 80033a8:	2002      	movs	r0, #2
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d1fc      	bne.n	80033aa <__lesf2+0x5e>
 80033b0:	2001      	movs	r0, #1
 80033b2:	4240      	negs	r0, r0
 80033b4:	e7f9      	b.n	80033aa <__lesf2+0x5e>
 80033b6:	2c00      	cmp	r4, #0
 80033b8:	d1ef      	bne.n	800339a <__lesf2+0x4e>
 80033ba:	2d00      	cmp	r5, #0
 80033bc:	d1ed      	bne.n	800339a <__lesf2+0x4e>
 80033be:	e7ee      	b.n	800339e <__lesf2+0x52>
 80033c0:	42a2      	cmp	r2, r4
 80033c2:	dc05      	bgt.n	80033d0 <__lesf2+0x84>
 80033c4:	dbf2      	blt.n	80033ac <__lesf2+0x60>
 80033c6:	42ae      	cmp	r6, r5
 80033c8:	d802      	bhi.n	80033d0 <__lesf2+0x84>
 80033ca:	d3ef      	bcc.n	80033ac <__lesf2+0x60>
 80033cc:	2000      	movs	r0, #0
 80033ce:	e7ec      	b.n	80033aa <__lesf2+0x5e>
 80033d0:	4241      	negs	r1, r0
 80033d2:	4141      	adcs	r1, r0
 80033d4:	4248      	negs	r0, r1
 80033d6:	2102      	movs	r1, #2
 80033d8:	4008      	ands	r0, r1
 80033da:	3801      	subs	r0, #1
 80033dc:	e7e5      	b.n	80033aa <__lesf2+0x5e>
 80033de:	46c0      	nop			; (mov r8, r8)

080033e0 <__clzdi2>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	2900      	cmp	r1, #0
 80033e4:	d103      	bne.n	80033ee <__clzdi2+0xe>
 80033e6:	f7ff fe39 	bl	800305c <__clzsi2>
 80033ea:	3020      	adds	r0, #32
 80033ec:	e002      	b.n	80033f4 <__clzdi2+0x14>
 80033ee:	1c08      	adds	r0, r1, #0
 80033f0:	f7ff fe34 	bl	800305c <__clzsi2>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)

080033f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_Init+0x3c>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_Init+0x3c>)
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	0049      	lsls	r1, r1, #1
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003412:	2003      	movs	r0, #3
 8003414:	f000 f810 	bl	8003438 <HAL_InitTick>
 8003418:	1e03      	subs	r3, r0, #0
 800341a:	d003      	beq.n	8003424 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e001      	b.n	8003428 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003424:	f006 fe84 	bl	800a130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40022000 	.word	0x40022000

08003438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003440:	230f      	movs	r3, #15
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_InitTick+0x88>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02b      	beq.n	80034a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_InitTick+0x8c>)
 8003452:	681c      	ldr	r4, [r3, #0]
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_InitTick+0x88>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	0019      	movs	r1, r3
 800345a:	23fa      	movs	r3, #250	; 0xfa
 800345c:	0098      	lsls	r0, r3, #2
 800345e:	f7fc fe5b 	bl	8000118 <__udivsi3>
 8003462:	0003      	movs	r3, r0
 8003464:	0019      	movs	r1, r3
 8003466:	0020      	movs	r0, r4
 8003468:	f7fc fe56 	bl	8000118 <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	0018      	movs	r0, r3
 8003470:	f001 f8dd 	bl	800462e <HAL_SYSTICK_Config>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d112      	bne.n	800349e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d80a      	bhi.n	8003494 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	2301      	movs	r3, #1
 8003482:	425b      	negs	r3, r3
 8003484:	2200      	movs	r2, #0
 8003486:	0018      	movs	r0, r3
 8003488:	f001 f8ac 	bl	80045e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_InitTick+0x90>)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e00d      	b.n	80034b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e008      	b.n	80034b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800349e:	230f      	movs	r3, #15
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034a8:	230f      	movs	r3, #15
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034b0:	230f      	movs	r3, #15
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b005      	add	sp, #20
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	20000004 	.word	0x20000004
 80034c4:	20000030 	.word	0x20000030
 80034c8:	20000000 	.word	0x20000000

080034cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x1c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	001a      	movs	r2, r3
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_IncTick+0x20>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	18d2      	adds	r2, r2, r3
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_IncTick+0x20>)
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	20000004 	.word	0x20000004
 80034ec:	200005e0 	.word	0x200005e0

080034f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  return uwTick;
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <HAL_GetTick+0x10>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	200005e0 	.word	0x200005e0

08003504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7ff fff0 	bl	80034f0 <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	d005      	beq.n	800352a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_Delay+0x44>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	001a      	movs	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	189b      	adds	r3, r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	f7ff ffe0 	bl	80034f0 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d8f7      	bhi.n	800352c <HAL_Delay+0x28>
  {
  }
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_SuspendTick+0x18>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_SuspendTick+0x18>)
 8003556:	2102      	movs	r1, #2
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	e000e010 	.word	0xe000e010

08003568 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_ResumeTick+0x18>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_ResumeTick+0x18>)
 8003572:	2102      	movs	r1, #2
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	40010000 	.word	0x40010000
 80035ac:	fffff9ff 	.word	0xfffff9ff

080035b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035c0:	401a      	ands	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	fe3fffff 	.word	0xfe3fffff

080035d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	23e0      	movs	r3, #224	; 0xe0
 80035e6:	045b      	lsls	r3, r3, #17
 80035e8:	4013      	ands	r3, r2
}
 80035ea:	0018      	movs	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	2104      	movs	r1, #4
 8003606:	400a      	ands	r2, r1
 8003608:	2107      	movs	r1, #7
 800360a:	4091      	lsls	r1, r2
 800360c:	000a      	movs	r2, r1
 800360e:	43d2      	mvns	r2, r2
 8003610:	401a      	ands	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2104      	movs	r1, #4
 8003616:	400b      	ands	r3, r1
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4099      	lsls	r1, r3
 800361c:	000b      	movs	r3, r1
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}

0800362c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4013      	ands	r3, r2
 800363e:	d101      	bne.n	8003644 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}

0800364e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	211f      	movs	r1, #31
 8003662:	400a      	ands	r2, r1
 8003664:	210f      	movs	r1, #15
 8003666:	4091      	lsls	r1, r2
 8003668:	000a      	movs	r2, r1
 800366a:	43d2      	mvns	r2, r2
 800366c:	401a      	ands	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	210f      	movs	r1, #15
 8003674:	4019      	ands	r1, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	201f      	movs	r0, #31
 800367a:	4003      	ands	r3, r0
 800367c:	4099      	lsls	r1, r3
 800367e:	000b      	movs	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b004      	add	sp, #16
 800368c:	bd80      	pop	{r7, pc}

0800368e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	035b      	lsls	r3, r3, #13
 80036a0:	0b5b      	lsrs	r3, r3, #13
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	0352      	lsls	r2, r2, #13
 80036c2:	0b52      	lsrs	r2, r2, #13
 80036c4:	43d2      	mvns	r2, r2
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	0212      	lsls	r2, r2, #8
 80036e8:	43d2      	mvns	r2, r2
 80036ea:	401a      	ands	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	400b      	ands	r3, r1
 80036f4:	4904      	ldr	r1, [pc, #16]	; (8003708 <LL_ADC_SetChannelSamplingTime+0x34>)
 80036f6:	400b      	ands	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	07ffff00 	.word	0x07ffff00

0800370c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a05      	ldr	r2, [pc, #20]	; (8003730 <LL_ADC_EnableInternalRegulator+0x24>)
 800371a:	4013      	ands	r3, r2
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	0552      	lsls	r2, r2, #21
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	6fffffe8 	.word	0x6fffffe8

08003734 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	055b      	lsls	r3, r3, #21
 8003744:	401a      	ands	r2, r3
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	055b      	lsls	r3, r3, #21
 800374a:	429a      	cmp	r2, r3
 800374c:	d101      	bne.n	8003752 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}

0800375c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <LL_ADC_Enable+0x20>)
 800376a:	4013      	ands	r3, r2
 800376c:	2201      	movs	r2, #1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}
 800377c:	7fffffe8 	.word	0x7fffffe8

08003780 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <LL_ADC_Disable+0x20>)
 800378e:	4013      	ands	r3, r2
 8003790:	2202      	movs	r2, #2
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	7fffffe8 	.word	0x7fffffe8

080037a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2201      	movs	r2, #1
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <LL_ADC_IsEnabled+0x18>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <LL_ADC_IsEnabled+0x1a>
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2202      	movs	r2, #2
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d101      	bne.n	80037de <LL_ADC_IsDisableOngoing+0x18>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_ADC_IsDisableOngoing+0x1a>
 80037de:	2300      	movs	r3, #0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a04      	ldr	r2, [pc, #16]	; (8003808 <LL_ADC_REG_StartConversion+0x20>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	2204      	movs	r2, #4
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}
 8003808:	7fffffe8 	.word	0x7fffffe8

0800380c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2204      	movs	r2, #4
 800381a:	4013      	ands	r3, r2
 800381c:	2b04      	cmp	r3, #4
 800381e:	d101      	bne.n	8003824 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003824:	2300      	movs	r3, #0
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	231f      	movs	r3, #31
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1b1      	b.n	8003bba <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f005 ffb1 	bl	80097c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2254      	movs	r2, #84	; 0x54
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0018      	movs	r0, r3
 800387a:	f7ff ff5b 	bl	8003734 <LL_ADC_IsInternalRegulatorEnabled>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d115      	bne.n	80038ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0018      	movs	r0, r3
 8003888:	f7ff ff40 	bl	800370c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800388c:	4bcd      	ldr	r3, [pc, #820]	; (8003bc4 <HAL_ADC_Init+0x394>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	49cd      	ldr	r1, [pc, #820]	; (8003bc8 <HAL_ADC_Init+0x398>)
 8003892:	0018      	movs	r0, r3
 8003894:	f7fc fc40 	bl	8000118 <__udivsi3>
 8003898:	0003      	movs	r3, r0
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038a0:	e002      	b.n	80038a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f9      	bne.n	80038a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff ff3e 	bl	8003734 <LL_ADC_IsInternalRegulatorEnabled>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d10f      	bne.n	80038dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	2210      	movs	r2, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2201      	movs	r2, #1
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038d4:	231f      	movs	r3, #31
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7ff ff93 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 80038e6:	0003      	movs	r3, r0
 80038e8:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	2210      	movs	r2, #16
 80038f0:	4013      	ands	r3, r2
 80038f2:	d000      	beq.n	80038f6 <HAL_ADC_Init+0xc6>
 80038f4:	e154      	b.n	8003ba0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d000      	beq.n	80038fe <HAL_ADC_Init+0xce>
 80038fc:	e150      	b.n	8003ba0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	4ab2      	ldr	r2, [pc, #712]	; (8003bcc <HAL_ADC_Init+0x39c>)
 8003904:	4013      	ands	r3, r2
 8003906:	2202      	movs	r2, #2
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0018      	movs	r0, r3
 8003914:	f7ff ff46 	bl	80037a4 <LL_ADC_IsEnabled>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d156      	bne.n	80039ca <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2218      	movs	r2, #24
 8003924:	4393      	bics	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	0f9b      	lsrs	r3, r3, #30
 800393a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003940:	4313      	orrs	r3, r2
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	223c      	movs	r2, #60	; 0x3c
 800394c:	5c9b      	ldrb	r3, [r3, r2]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d111      	bne.n	8003976 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0f9b      	lsrs	r3, r3, #30
 8003958:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800395e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003964:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800396a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	2201      	movs	r2, #1
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a94      	ldr	r2, [pc, #592]	; (8003bd0 <HAL_ADC_Init+0x3a0>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	430a      	orrs	r2, r1
 800398a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	23c0      	movs	r3, #192	; 0xc0
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	429a      	cmp	r2, r3
 8003996:	d018      	beq.n	80039ca <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	05db      	lsls	r3, r3, #23
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d012      	beq.n	80039ca <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	061b      	lsls	r3, r3, #24
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d00c      	beq.n	80039ca <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80039b0:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_ADC_Init+0x3a4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a88      	ldr	r2, [pc, #544]	; (8003bd8 <HAL_ADC_Init+0x3a8>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	0019      	movs	r1, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	23f0      	movs	r3, #240	; 0xf0
 80039c0:	039b      	lsls	r3, r3, #14
 80039c2:	401a      	ands	r2, r3
 80039c4:	4b83      	ldr	r3, [pc, #524]	; (8003bd4 <HAL_ADC_Init+0x3a4>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7e1b      	ldrb	r3, [r3, #24]
 80039ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7e5b      	ldrb	r3, [r3, #25]
 80039d4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80039d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e9b      	ldrb	r3, [r3, #26]
 80039dc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80039de:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_ADC_Init+0x1be>
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	e000      	b.n	80039f0 <HAL_ADC_Init+0x1c0>
 80039ee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80039f0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80039f6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da04      	bge.n	8003a0a <HAL_ADC_Init+0x1da>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	e001      	b.n	8003a0e <HAL_ADC_Init+0x1de>
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003a0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	5c5b      	ldrb	r3, [r3, r1]
 8003a16:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a18:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d115      	bne.n	8003a56 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7e9b      	ldrb	r3, [r3, #26]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	0252      	lsls	r2, r2, #9
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e00b      	b.n	8003a56 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	2220      	movs	r2, #32
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2201      	movs	r2, #1
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a62:	23e0      	movs	r3, #224	; 0xe0
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_ADC_Init+0x3ac>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	4a53      	ldr	r2, [pc, #332]	; (8003be0 <HAL_ADC_Init+0x3b0>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f7ff fda1 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	494a      	ldr	r1, [pc, #296]	; (8003be4 <HAL_ADC_Init+0x3b4>)
 8003aba:	001a      	movs	r2, r3
 8003abc:	f7ff fd99 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	4249      	negs	r1, r1
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8003ada:	e03a      	b.n	8003b52 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	039b      	lsls	r3, r3, #14
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d134      	bne.n	8003b52 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e00c      	b.n	8003b08 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	40da      	lsrs	r2, r3
 8003af8:	0013      	movs	r3, r2
 8003afa:	220f      	movs	r2, #15
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	d006      	beq.n	8003b10 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3301      	adds	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b07      	cmp	r3, #7
 8003b0c:	d9ef      	bls.n	8003aee <HAL_ADC_Init+0x2be>
 8003b0e:	e000      	b.n	8003b12 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003b10:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d109      	bne.n	8003b2c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2110      	movs	r1, #16
 8003b24:	4249      	negs	r1, r1
 8003b26:	430a      	orrs	r2, r1
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
 8003b2a:	e012      	b.n	8003b52 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	221c      	movs	r2, #28
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2210      	movs	r2, #16
 8003b40:	4252      	negs	r2, r2
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0011      	movs	r1, r2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <HAL_ADC_Init+0x3b8>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d10b      	bne.n	8003b7a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4393      	bics	r3, r2
 8003b70:	2201      	movs	r2, #1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b78:	e01c      	b.n	8003bb4 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	2212      	movs	r2, #18
 8003b80:	4393      	bics	r3, r2
 8003b82:	2210      	movs	r2, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2201      	movs	r2, #1
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b96:	231f      	movs	r3, #31
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b9e:	e009      	b.n	8003bb4 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bac:	231f      	movs	r3, #31
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003bb4:	231f      	movs	r3, #31
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b008      	add	sp, #32
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	20000030 	.word	0x20000030
 8003bc8:	00030d40 	.word	0x00030d40
 8003bcc:	fffffefd 	.word	0xfffffefd
 8003bd0:	1ffffc02 	.word	0x1ffffc02
 8003bd4:	40012708 	.word	0x40012708
 8003bd8:	ffc3ffff 	.word	0xffc3ffff
 8003bdc:	fffe0219 	.word	0xfffe0219
 8003be0:	dffffc02 	.word	0xdffffc02
 8003be4:	07ffff04 	.word	0x07ffff04
 8003be8:	833fffe7 	.word	0x833fffe7

08003bec <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bec:	b5b0      	push	{r4, r5, r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff fe07 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d135      	bne.n	8003c6e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2254      	movs	r2, #84	; 0x54
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_Start+0x24>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e035      	b.n	8003c7c <HAL_ADC_Start+0x90>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2254      	movs	r2, #84	; 0x54
 8003c14:	2101      	movs	r1, #1
 8003c16:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c18:	250f      	movs	r5, #15
 8003c1a:	197c      	adds	r4, r7, r5
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 faaa 	bl	8004178 <ADC_Enable>
 8003c24:	0003      	movs	r3, r0
 8003c26:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c28:	197b      	adds	r3, r7, r5
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d119      	bne.n	8003c64 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <HAL_ADC_Start+0x98>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	0052      	lsls	r2, r2, #1
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	221c      	movs	r2, #28
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2254      	movs	r2, #84	; 0x54
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff fdc3 	bl	80037e8 <LL_ADC_REG_StartConversion>
 8003c62:	e008      	b.n	8003c76 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2254      	movs	r2, #84	; 0x54
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]
 8003c6c:	e003      	b.n	8003c76 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2202      	movs	r2, #2
 8003c74:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003c76:	230f      	movs	r3, #15
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	781b      	ldrb	r3, [r3, #0]
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bdb0      	pop	{r4, r5, r7, pc}
 8003c84:	fffff0fe 	.word	0xfffff0fe

08003c88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d102      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e00f      	b.n	8003cc0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d007      	beq.n	8003cbc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e072      	b.n	8003da2 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cc0:	f7ff fc16 	bl	80034f0 <HAL_GetTick>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003cc8:	e01f      	b.n	8003d0a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	d01c      	beq.n	8003d0a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003cd0:	f7ff fc0e 	bl	80034f0 <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <HAL_ADC_PollForConversion+0x5e>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d111      	bne.n	8003d0a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d10b      	bne.n	8003d0a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2254      	movs	r2, #84	; 0x54
 8003d02:	2100      	movs	r1, #0
 8003d04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04b      	b.n	8003da2 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4013      	ands	r3, r2
 8003d14:	d0d9      	beq.n	8003cca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	0092      	lsls	r2, r2, #2
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff fc7f 	bl	800362c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d02e      	beq.n	8003d90 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7e9b      	ldrb	r3, [r3, #26]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d12a      	bne.n	8003d90 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2208      	movs	r2, #8
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d123      	bne.n	8003d90 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff fd5d 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d110      	bne.n	8003d78 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	210c      	movs	r1, #12
 8003d62:	438a      	bics	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <HAL_ADC_PollForConversion+0x124>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2201      	movs	r2, #1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	659a      	str	r2, [r3, #88]	; 0x58
 8003d76:	e00b      	b.n	8003d90 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	2201      	movs	r2, #1
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7e1b      	ldrb	r3, [r3, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	fffffefe 	.word	0xfffffefe

08003db0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd2:	2317      	movs	r3, #23
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2254      	movs	r2, #84	; 0x54
 8003de2:	5c9b      	ldrb	r3, [r3, r2]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x24>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e1c0      	b.n	800416e <HAL_ADC_ConfigChannel+0x3a6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2254      	movs	r2, #84	; 0x54
 8003df0:	2101      	movs	r1, #1
 8003df2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff fd07 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003dfe:	1e03      	subs	r3, r0, #0
 8003e00:	d000      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x3c>
 8003e02:	e1a3      	b.n	800414c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d100      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x46>
 8003e0c:	e143      	b.n	8004096 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d004      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e1e:	4ac1      	ldr	r2, [pc, #772]	; (8004124 <HAL_ADC_ConfigChannel+0x35c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	0010      	movs	r0, r2
 8003e30:	f7ff fc2d 	bl	800368e <LL_ADC_REG_SetSequencerChAdd>
 8003e34:	e0c9      	b.n	8003fca <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	211f      	movs	r1, #31
 8003e40:	400b      	ands	r3, r1
 8003e42:	210f      	movs	r1, #15
 8003e44:	4099      	lsls	r1, r3
 8003e46:	000b      	movs	r3, r1
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	035b      	lsls	r3, r3, #13
 8003e54:	0b5b      	lsrs	r3, r3, #13
 8003e56:	d105      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x9c>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	221f      	movs	r2, #31
 8003e60:	4013      	ands	r3, r2
 8003e62:	e098      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d000      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0xa8>
 8003e6e:	e091      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x1cc>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2202      	movs	r2, #2
 8003e76:	4013      	ands	r3, r2
 8003e78:	d000      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0xb4>
 8003e7a:	e089      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x1c8>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2204      	movs	r2, #4
 8003e82:	4013      	ands	r3, r2
 8003e84:	d000      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0xc0>
 8003e86:	e081      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x1c4>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d000      	beq.n	8003e94 <HAL_ADC_ConfigChannel+0xcc>
 8003e92:	e079      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x1c0>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d000      	beq.n	8003ea0 <HAL_ADC_ConfigChannel+0xd8>
 8003e9e:	e071      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x1bc>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d000      	beq.n	8003eac <HAL_ADC_ConfigChannel+0xe4>
 8003eaa:	e069      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x1b8>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2240      	movs	r2, #64	; 0x40
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d000      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0xf0>
 8003eb6:	e061      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x1b4>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d000      	beq.n	8003ec4 <HAL_ADC_ConfigChannel+0xfc>
 8003ec2:	e059      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x1b0>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d151      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x1ac>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d149      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x1a8>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d141      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x1a4>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d139      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x1a0>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	4013      	ands	r3, r2
 8003efe:	d131      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x19c>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	019b      	lsls	r3, r3, #6
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d129      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x198>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	01db      	lsls	r3, r3, #7
 8003f14:	4013      	ands	r3, r2
 8003f16:	d121      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x194>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	4013      	ands	r3, r2
 8003f22:	d119      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x190>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	025b      	lsls	r3, r3, #9
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d111      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x18c>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	029b      	lsls	r3, r3, #10
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d109      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x188>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	02db      	lsls	r3, r3, #11
 8003f44:	4013      	ands	r3, r2
 8003f46:	d001      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x184>
 8003f48:	2312      	movs	r3, #18
 8003f4a:	e024      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e022      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f50:	2311      	movs	r3, #17
 8003f52:	e020      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f54:	2310      	movs	r3, #16
 8003f56:	e01e      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f58:	230f      	movs	r3, #15
 8003f5a:	e01c      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f5c:	230e      	movs	r3, #14
 8003f5e:	e01a      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f60:	230d      	movs	r3, #13
 8003f62:	e018      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f64:	230c      	movs	r3, #12
 8003f66:	e016      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f68:	230b      	movs	r3, #11
 8003f6a:	e014      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f6c:	230a      	movs	r3, #10
 8003f6e:	e012      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f70:	2309      	movs	r3, #9
 8003f72:	e010      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f74:	2308      	movs	r3, #8
 8003f76:	e00e      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f78:	2307      	movs	r3, #7
 8003f7a:	e00c      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f7c:	2306      	movs	r3, #6
 8003f7e:	e00a      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f80:	2305      	movs	r3, #5
 8003f82:	e008      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f84:	2304      	movs	r3, #4
 8003f86:	e006      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e004      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e002      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1ce>
 8003f94:	2300      	movs	r3, #0
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	6852      	ldr	r2, [r2, #4]
 8003f9a:	201f      	movs	r0, #31
 8003f9c:	4002      	ands	r2, r0
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	000a      	movs	r2, r1
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d808      	bhi.n	8003fca <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	001a      	movs	r2, r3
 8003fc6:	f7ff fb42 	bl	800364e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	f7ff fb7c 	bl	80036d4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	db00      	blt.n	8003fe6 <HAL_ADC_ConfigChannel+0x21e>
 8003fe4:	e0bc      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe6:	4b50      	ldr	r3, [pc, #320]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff faf5 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a4d      	ldr	r2, [pc, #308]	; (800412c <HAL_ADC_ConfigChannel+0x364>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d122      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004004:	d11d      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0412      	lsls	r2, r2, #16
 800400c:	4313      	orrs	r3, r2
 800400e:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 8004010:	0019      	movs	r1, r3
 8004012:	0010      	movs	r0, r2
 8004014:	f7ff facc 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004018:	4b45      	ldr	r3, [pc, #276]	; (8004130 <HAL_ADC_ConfigChannel+0x368>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4945      	ldr	r1, [pc, #276]	; (8004134 <HAL_ADC_ConfigChannel+0x36c>)
 800401e:	0018      	movs	r0, r3
 8004020:	f7fc f87a 	bl	8000118 <__udivsi3>
 8004024:	0003      	movs	r3, r0
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	0013      	movs	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	189b      	adds	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004032:	e002      	b.n	800403a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f9      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004040:	e08e      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3c      	ldr	r2, [pc, #240]	; (8004138 <HAL_ADC_ConfigChannel+0x370>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10e      	bne.n	800406a <HAL_ADC_ConfigChannel+0x2a2>
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	045b      	lsls	r3, r3, #17
 8004052:	4013      	ands	r3, r2
 8004054:	d109      	bne.n	800406a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	0452      	lsls	r2, r2, #17
 800405c:	4313      	orrs	r3, r2
 800405e:	4a32      	ldr	r2, [pc, #200]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 8004060:	0019      	movs	r1, r3
 8004062:	0010      	movs	r0, r2
 8004064:	f7ff faa4 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 8004068:	e07a      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a33      	ldr	r2, [pc, #204]	; (800413c <HAL_ADC_ConfigChannel+0x374>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d000      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x2ae>
 8004074:	e074      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	03db      	lsls	r3, r3, #15
 800407c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800407e:	d000      	beq.n	8004082 <HAL_ADC_ConfigChannel+0x2ba>
 8004080:	e06e      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	03d2      	lsls	r2, r2, #15
 8004088:	4313      	orrs	r3, r2
 800408a:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 800408c:	0019      	movs	r1, r3
 800408e:	0010      	movs	r0, r2
 8004090:	f7ff fa8e 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 8004094:	e064      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	429a      	cmp	r2, r3
 80040a0:	d004      	beq.n	80040ac <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <HAL_ADC_ConfigChannel+0x35c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d107      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0019      	movs	r1, r3
 80040b6:	0010      	movs	r0, r2
 80040b8:	f7ff fafa 	bl	80036b0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da4d      	bge.n	8004160 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f7ff fa86 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 80040cc:	0003      	movs	r3, r0
 80040ce:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_ADC_ConfigChannel+0x364>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_ADC_ConfigChannel+0x378>)
 80040de:	4013      	ands	r3, r2
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 80040e2:	0019      	movs	r1, r3
 80040e4:	0010      	movs	r0, r2
 80040e6:	f7ff fa63 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 80040ea:	e039      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a11      	ldr	r2, [pc, #68]	; (8004138 <HAL_ADC_ConfigChannel+0x370>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d108      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <HAL_ADC_ConfigChannel+0x37c>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 80040fe:	0019      	movs	r1, r3
 8004100:	0010      	movs	r0, r2
 8004102:	f7ff fa55 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 8004106:	e02b      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0b      	ldr	r2, [pc, #44]	; (800413c <HAL_ADC_ConfigChannel+0x374>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d126      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <HAL_ADC_ConfigChannel+0x380>)
 8004116:	4013      	ands	r3, r2
 8004118:	4a03      	ldr	r2, [pc, #12]	; (8004128 <HAL_ADC_ConfigChannel+0x360>)
 800411a:	0019      	movs	r1, r3
 800411c:	0010      	movs	r0, r2
 800411e:	f7ff fa47 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 8004122:	e01d      	b.n	8004160 <HAL_ADC_ConfigChannel+0x398>
 8004124:	80000004 	.word	0x80000004
 8004128:	40012708 	.word	0x40012708
 800412c:	b0001000 	.word	0xb0001000
 8004130:	20000030 	.word	0x20000030
 8004134:	00030d40 	.word	0x00030d40
 8004138:	b8004000 	.word	0xb8004000
 800413c:	b4002000 	.word	0xb4002000
 8004140:	ff7fffff 	.word	0xff7fffff
 8004144:	feffffff 	.word	0xfeffffff
 8004148:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	2220      	movs	r2, #32
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004158:	2317      	movs	r3, #23
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2254      	movs	r2, #84	; 0x54
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004168:	2317      	movs	r3, #23
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b006      	add	sp, #24
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)

08004178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff fb0b 	bl	80037a4 <LL_ADC_IsEnabled>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d000      	beq.n	8004194 <ADC_Enable+0x1c>
 8004192:	e069      	b.n	8004268 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4a36      	ldr	r2, [pc, #216]	; (8004274 <ADC_Enable+0xfc>)
 800419c:	4013      	ands	r3, r2
 800419e:	d00d      	beq.n	80041bc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	2210      	movs	r2, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	2201      	movs	r2, #1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e056      	b.n	800426a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7ff facb 	bl	800375c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <ADC_Enable+0x100>)
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff fa05 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 80041ce:	0002      	movs	r2, r0
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <ADC_Enable+0x104>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4928      	ldr	r1, [pc, #160]	; (8004280 <ADC_Enable+0x108>)
 80041de:	0018      	movs	r0, r3
 80041e0:	f7fb ff9a 	bl	8000118 <__udivsi3>
 80041e4:	0003      	movs	r3, r0
 80041e6:	3301      	adds	r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041ea:	e002      	b.n	80041f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f9      	bne.n	80041ec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7e5b      	ldrb	r3, [r3, #25]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d033      	beq.n	8004268 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004200:	f7ff f976 	bl	80034f0 <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004208:	e027      	b.n	800425a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fac8 	bl	80037a4 <LL_ADC_IsEnabled>
 8004214:	1e03      	subs	r3, r0, #0
 8004216:	d104      	bne.n	8004222 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0018      	movs	r0, r3
 800421e:	f7ff fa9d 	bl	800375c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004222:	f7ff f965 	bl	80034f0 <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d914      	bls.n	800425a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	2b01      	cmp	r3, #1
 800423c:	d00d      	beq.n	800425a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	2210      	movs	r2, #16
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2201      	movs	r2, #1
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e007      	b.n	800426a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	4013      	ands	r3, r2
 8004264:	2b01      	cmp	r3, #1
 8004266:	d1d0      	bne.n	800420a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	80000017 	.word	0x80000017
 8004278:	40012708 	.word	0x40012708
 800427c:	20000030 	.word	0x20000030
 8004280:	00030d40 	.word	0x00030d40

08004284 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff fa98 	bl	80037c6 <LL_ADC_IsDisableOngoing>
 8004296:	0003      	movs	r3, r0
 8004298:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff fa80 	bl	80037a4 <LL_ADC_IsEnabled>
 80042a4:	1e03      	subs	r3, r0, #0
 80042a6:	d046      	beq.n	8004336 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d143      	bne.n	8004336 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2205      	movs	r2, #5
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10d      	bne.n	80042d8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fa5d 	bl	8003780 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2203      	movs	r2, #3
 80042cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042ce:	f7ff f90f 	bl	80034f0 <HAL_GetTick>
 80042d2:	0003      	movs	r3, r0
 80042d4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042d6:	e028      	b.n	800432a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	2210      	movs	r2, #16
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	2201      	movs	r2, #1
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e021      	b.n	8004338 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042f4:	f7ff f8fc 	bl	80034f0 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d913      	bls.n	800432a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2201      	movs	r2, #1
 800430a:	4013      	ands	r3, r2
 800430c:	d00d      	beq.n	800432a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	2210      	movs	r2, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	2201      	movs	r2, #1
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e006      	b.n	8004338 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2201      	movs	r2, #1
 8004332:	4013      	ands	r3, r2
 8004334:	d1de      	bne.n	80042f4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b004      	add	sp, #16
 800433e:	bd80      	pop	{r7, pc}

08004340 <LL_ADC_IsEnabled>:
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2201      	movs	r2, #1
 800434e:	4013      	ands	r3, r2
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <LL_ADC_IsEnabled+0x18>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <LL_ADC_IsEnabled+0x1a>
 8004358:	2300      	movs	r3, #0
}
 800435a:	0018      	movs	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	b002      	add	sp, #8
 8004360:	bd80      	pop	{r7, pc}

08004362 <LL_ADC_IsCalibrationOnGoing>:
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	0fdb      	lsrs	r3, r3, #31
 8004370:	07da      	lsls	r2, r3, #31
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	429a      	cmp	r2, r3
 8004378:	d101      	bne.n	800437e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b002      	add	sp, #8
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2254      	movs	r2, #84	; 0x54
 8004398:	5c9b      	ldrb	r3, [r3, r2]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_ADCEx_Calibration_Start+0x1a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e06c      	b.n	800447c <HAL_ADCEx_Calibration_Start+0xf4>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2254      	movs	r2, #84	; 0x54
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043aa:	2317      	movs	r3, #23
 80043ac:	18fc      	adds	r4, r7, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7ff ff67 	bl	8004284 <ADC_Disable>
 80043b6:	0003      	movs	r3, r0
 80043b8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0018      	movs	r0, r3
 80043c0:	f7ff ffbe 	bl	8004340 <LL_ADC_IsEnabled>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d14c      	bne.n	8004462 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a2d      	ldr	r2, [pc, #180]	; (8004484 <HAL_ADCEx_Calibration_Start+0xfc>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	2202      	movs	r2, #2
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2203      	movs	r2, #3
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2103      	movs	r1, #3
 80043f0:	438a      	bics	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	0609      	lsls	r1, r1, #24
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004406:	e014      	b.n	8004432 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3301      	adds	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <HAL_ADCEx_Calibration_Start+0x100>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d90d      	bls.n	8004432 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	2212      	movs	r2, #18
 800441c:	4393      	bics	r3, r2
 800441e:	2210      	movs	r2, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2254      	movs	r2, #84	; 0x54
 800442a:	2100      	movs	r1, #0
 800442c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e024      	b.n	800447c <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	0018      	movs	r0, r3
 8004438:	f7ff ff93 	bl	8004362 <LL_ADC_IsCalibrationOnGoing>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d1e3      	bne.n	8004408 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68d9      	ldr	r1, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	430a      	orrs	r2, r1
 800444e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	2203      	movs	r2, #3
 8004456:	4393      	bics	r3, r2
 8004458:	2201      	movs	r2, #1
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	659a      	str	r2, [r3, #88]	; 0x58
 8004460:	e005      	b.n	800446e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004466:	2210      	movs	r2, #16
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2254      	movs	r2, #84	; 0x54
 8004472:	2100      	movs	r1, #0
 8004474:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004476:	2317      	movs	r3, #23
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	781b      	ldrb	r3, [r3, #0]
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b007      	add	sp, #28
 8004482:	bd90      	pop	{r4, r7, pc}
 8004484:	fffffefd 	.word	0xfffffefd
 8004488:	0002f1ff 	.word	0x0002f1ff

0800448c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	0002      	movs	r2, r0
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b7f      	cmp	r3, #127	; 0x7f
 800449e:	d809      	bhi.n	80044b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a0:	1dfb      	adds	r3, r7, #7
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	001a      	movs	r2, r3
 80044a6:	231f      	movs	r3, #31
 80044a8:	401a      	ands	r2, r3
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_EnableIRQ+0x30>)
 80044ac:	2101      	movs	r1, #1
 80044ae:	4091      	lsls	r1, r2
 80044b0:	000a      	movs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000e100 	.word	0xe000e100

080044c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	0002      	movs	r2, r0
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	1dfb      	adds	r3, r7, #7
 80044cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044ce:	1dfb      	adds	r3, r7, #7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b7f      	cmp	r3, #127	; 0x7f
 80044d4:	d828      	bhi.n	8004528 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d6:	4a2f      	ldr	r2, [pc, #188]	; (8004594 <__NVIC_SetPriority+0xd4>)
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	33c0      	adds	r3, #192	; 0xc0
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	589b      	ldr	r3, [r3, r2]
 80044e6:	1dfa      	adds	r2, r7, #7
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	0011      	movs	r1, r2
 80044ec:	2203      	movs	r2, #3
 80044ee:	400a      	ands	r2, r1
 80044f0:	00d2      	lsls	r2, r2, #3
 80044f2:	21ff      	movs	r1, #255	; 0xff
 80044f4:	4091      	lsls	r1, r2
 80044f6:	000a      	movs	r2, r1
 80044f8:	43d2      	mvns	r2, r2
 80044fa:	401a      	ands	r2, r3
 80044fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	22ff      	movs	r2, #255	; 0xff
 8004504:	401a      	ands	r2, r3
 8004506:	1dfb      	adds	r3, r7, #7
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	0018      	movs	r0, r3
 800450c:	2303      	movs	r3, #3
 800450e:	4003      	ands	r3, r0
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004514:	481f      	ldr	r0, [pc, #124]	; (8004594 <__NVIC_SetPriority+0xd4>)
 8004516:	1dfb      	adds	r3, r7, #7
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b25b      	sxtb	r3, r3
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	430a      	orrs	r2, r1
 8004520:	33c0      	adds	r3, #192	; 0xc0
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004526:	e031      	b.n	800458c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004528:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <__NVIC_SetPriority+0xd8>)
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0019      	movs	r1, r3
 8004530:	230f      	movs	r3, #15
 8004532:	400b      	ands	r3, r1
 8004534:	3b08      	subs	r3, #8
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	3306      	adds	r3, #6
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	3304      	adds	r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	1dfa      	adds	r2, r7, #7
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	0011      	movs	r1, r2
 8004548:	2203      	movs	r2, #3
 800454a:	400a      	ands	r2, r1
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	21ff      	movs	r1, #255	; 0xff
 8004550:	4091      	lsls	r1, r2
 8004552:	000a      	movs	r2, r1
 8004554:	43d2      	mvns	r2, r2
 8004556:	401a      	ands	r2, r3
 8004558:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	401a      	ands	r2, r3
 8004562:	1dfb      	adds	r3, r7, #7
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	0018      	movs	r0, r3
 8004568:	2303      	movs	r3, #3
 800456a:	4003      	ands	r3, r0
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004570:	4809      	ldr	r0, [pc, #36]	; (8004598 <__NVIC_SetPriority+0xd8>)
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	001c      	movs	r4, r3
 8004578:	230f      	movs	r3, #15
 800457a:	4023      	ands	r3, r4
 800457c:	3b08      	subs	r3, #8
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	430a      	orrs	r2, r1
 8004582:	3306      	adds	r3, #6
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	18c3      	adds	r3, r0, r3
 8004588:	3304      	adds	r3, #4
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b003      	add	sp, #12
 8004592:	bd90      	pop	{r4, r7, pc}
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	045b      	lsls	r3, r3, #17
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d301      	bcc.n	80045b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b0:	2301      	movs	r3, #1
 80045b2:	e010      	b.n	80045d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b4:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <SysTick_Config+0x44>)
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	3a01      	subs	r2, #1
 80045ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045bc:	2301      	movs	r3, #1
 80045be:	425b      	negs	r3, r3
 80045c0:	2103      	movs	r1, #3
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7ff ff7c 	bl	80044c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <SysTick_Config+0x44>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <SysTick_Config+0x44>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	e000e010 	.word	0xe000e010

080045e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	210f      	movs	r1, #15
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	1c02      	adds	r2, r0, #0
 80045f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	0011      	movs	r1, r2
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff ff5d 	bl	80044c0 <__NVIC_SetPriority>
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	b004      	add	sp, #16
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	0002      	movs	r2, r0
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b25b      	sxtb	r3, r3
 8004620:	0018      	movs	r0, r3
 8004622:	f7ff ff33 	bl	800448c <__NVIC_EnableIRQ>
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff ffaf 	bl	800459c <SysTick_Config>
 800463e:	0003      	movs	r3, r0
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004656:	e147      	b.n	80048e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2101      	movs	r1, #1
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4091      	lsls	r1, r2
 8004662:	000a      	movs	r2, r1
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d100      	bne.n	8004670 <HAL_GPIO_Init+0x28>
 800466e:	e138      	b.n	80048e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	4013      	ands	r3, r2
 8004678:	2b01      	cmp	r3, #1
 800467a:	d005      	beq.n	8004688 <HAL_GPIO_Init+0x40>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2203      	movs	r2, #3
 8004682:	4013      	ands	r3, r2
 8004684:	2b02      	cmp	r3, #2
 8004686:	d130      	bne.n	80046ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	2203      	movs	r2, #3
 8004694:	409a      	lsls	r2, r3
 8004696:	0013      	movs	r3, r2
 8004698:	43da      	mvns	r2, r3
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	409a      	lsls	r2, r3
 80046aa:	0013      	movs	r3, r2
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046be:	2201      	movs	r2, #1
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	409a      	lsls	r2, r3
 80046c4:	0013      	movs	r3, r2
 80046c6:	43da      	mvns	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	2201      	movs	r2, #1
 80046d6:	401a      	ands	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	409a      	lsls	r2, r3
 80046dc:	0013      	movs	r3, r2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2203      	movs	r2, #3
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d017      	beq.n	8004726 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	2203      	movs	r2, #3
 8004702:	409a      	lsls	r2, r3
 8004704:	0013      	movs	r3, r2
 8004706:	43da      	mvns	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	0013      	movs	r3, r2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2203      	movs	r2, #3
 800472c:	4013      	ands	r3, r2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d123      	bne.n	800477a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	08da      	lsrs	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3208      	adds	r2, #8
 800473a:	0092      	lsls	r2, r2, #2
 800473c:	58d3      	ldr	r3, [r2, r3]
 800473e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2207      	movs	r2, #7
 8004744:	4013      	ands	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	220f      	movs	r2, #15
 800474a:	409a      	lsls	r2, r3
 800474c:	0013      	movs	r3, r2
 800474e:	43da      	mvns	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2107      	movs	r1, #7
 800475e:	400b      	ands	r3, r1
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	409a      	lsls	r2, r3
 8004764:	0013      	movs	r3, r2
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	08da      	lsrs	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3208      	adds	r2, #8
 8004774:	0092      	lsls	r2, r2, #2
 8004776:	6939      	ldr	r1, [r7, #16]
 8004778:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	2203      	movs	r2, #3
 8004786:	409a      	lsls	r2, r3
 8004788:	0013      	movs	r3, r2
 800478a:	43da      	mvns	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2203      	movs	r2, #3
 8004798:	401a      	ands	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	0013      	movs	r3, r2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	23c0      	movs	r3, #192	; 0xc0
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	4013      	ands	r3, r2
 80047b8:	d100      	bne.n	80047bc <HAL_GPIO_Init+0x174>
 80047ba:	e092      	b.n	80048e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80047bc:	4a50      	ldr	r2, [pc, #320]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	3318      	adds	r3, #24
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	589b      	ldr	r3, [r3, r2]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2203      	movs	r2, #3
 80047ce:	4013      	ands	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	220f      	movs	r2, #15
 80047d4:	409a      	lsls	r2, r3
 80047d6:	0013      	movs	r3, r2
 80047d8:	43da      	mvns	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	23a0      	movs	r3, #160	; 0xa0
 80047e4:	05db      	lsls	r3, r3, #23
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d013      	beq.n	8004812 <HAL_GPIO_Init+0x1ca>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a45      	ldr	r2, [pc, #276]	; (8004904 <HAL_GPIO_Init+0x2bc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00d      	beq.n	800480e <HAL_GPIO_Init+0x1c6>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a44      	ldr	r2, [pc, #272]	; (8004908 <HAL_GPIO_Init+0x2c0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <HAL_GPIO_Init+0x1c2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a43      	ldr	r2, [pc, #268]	; (800490c <HAL_GPIO_Init+0x2c4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <HAL_GPIO_Init+0x1be>
 8004802:	2303      	movs	r3, #3
 8004804:	e006      	b.n	8004814 <HAL_GPIO_Init+0x1cc>
 8004806:	2305      	movs	r3, #5
 8004808:	e004      	b.n	8004814 <HAL_GPIO_Init+0x1cc>
 800480a:	2302      	movs	r3, #2
 800480c:	e002      	b.n	8004814 <HAL_GPIO_Init+0x1cc>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_GPIO_Init+0x1cc>
 8004812:	2300      	movs	r3, #0
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	2103      	movs	r1, #3
 8004818:	400a      	ands	r2, r1
 800481a:	00d2      	lsls	r2, r2, #3
 800481c:	4093      	lsls	r3, r2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004824:	4936      	ldr	r1, [pc, #216]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	089b      	lsrs	r3, r3, #2
 800482a:	3318      	adds	r3, #24
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004832:	4a33      	ldr	r2, [pc, #204]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	58d3      	ldr	r3, [r2, r3]
 8004838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	43da      	mvns	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	025b      	lsls	r3, r3, #9
 800484c:	4013      	ands	r3, r2
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004858:	4929      	ldr	r1, [pc, #164]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004860:	4a27      	ldr	r2, [pc, #156]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 8004862:	2384      	movs	r3, #132	; 0x84
 8004864:	58d3      	ldr	r3, [r2, r3]
 8004866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	43da      	mvns	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	4013      	ands	r3, r2
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004886:	491e      	ldr	r1, [pc, #120]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 8004888:	2284      	movs	r2, #132	; 0x84
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43da      	mvns	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	035b      	lsls	r3, r3, #13
 80048a6:	4013      	ands	r3, r2
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	039b      	lsls	r3, r3, #14
 80048d0:	4013      	ands	r3, r2
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_GPIO_Init+0x2b8>)
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3301      	adds	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	40da      	lsrs	r2, r3
 80048f0:	1e13      	subs	r3, r2, #0
 80048f2:	d000      	beq.n	80048f6 <HAL_GPIO_Init+0x2ae>
 80048f4:	e6b0      	b.n	8004658 <HAL_GPIO_Init+0x10>
  }
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021800 	.word	0x40021800
 8004904:	50000400 	.word	0x50000400
 8004908:	50000800 	.word	0x50000800
 800490c:	50000c00 	.word	0x50000c00

08004910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	000a      	movs	r2, r1
 800491a:	1cbb      	adds	r3, r7, #2
 800491c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	1cba      	adds	r2, r7, #2
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	4013      	ands	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800492a:	230f      	movs	r3, #15
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e003      	b.n	800493c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004934:	230f      	movs	r3, #15
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800493c:	230f      	movs	r3, #15
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	781b      	ldrb	r3, [r3, #0]
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	0008      	movs	r0, r1
 8004954:	0011      	movs	r1, r2
 8004956:	1cbb      	adds	r3, r7, #2
 8004958:	1c02      	adds	r2, r0, #0
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	1c7b      	adds	r3, r7, #1
 800495e:	1c0a      	adds	r2, r1, #0
 8004960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004962:	1c7b      	adds	r3, r7, #1
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800496a:	1cbb      	adds	r3, r7, #2
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004972:	e003      	b.n	800497c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004974:	1cbb      	adds	r3, r7, #2
 8004976:	881a      	ldrh	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	0002      	movs	r2, r0
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004990:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	1dba      	adds	r2, r7, #6
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	4013      	ands	r3, r2
 800499a:	d008      	beq.n	80049ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800499e:	1dba      	adds	r2, r7, #6
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80049a4:	1dbb      	adds	r3, r7, #6
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 f815 	bl	80049d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	1dba      	adds	r2, r7, #6
 80049b4:	8812      	ldrh	r2, [r2, #0]
 80049b6:	4013      	ands	r3, r2
 80049b8:	d008      	beq.n	80049cc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80049bc:	1dba      	adds	r2, r7, #6
 80049be:	8812      	ldrh	r2, [r2, #0]
 80049c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80049c2:	1dbb      	adds	r3, r7, #6
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f009 ff4c 	bl	800e864 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021800 	.word	0x40021800

080049d8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	0002      	movs	r2, r0
 80049e0:	1dbb      	adds	r3, r7, #6
 80049e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b002      	add	sp, #8
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e082      	b.n	8004b04 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2241      	movs	r2, #65	; 0x41
 8004a02:	5c9b      	ldrb	r3, [r3, r2]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2240      	movs	r2, #64	; 0x40
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f005 f8a1 	bl	8009b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2241      	movs	r2, #65	; 0x41
 8004a1e:	2124      	movs	r1, #36	; 0x24
 8004a20:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	438a      	bics	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4934      	ldr	r1, [pc, #208]	; (8004b0c <HAL_I2C_Init+0x120>)
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4931      	ldr	r1, [pc, #196]	; (8004b10 <HAL_I2C_Init+0x124>)
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d108      	bne.n	8004a6a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2180      	movs	r1, #128	; 0x80
 8004a62:	0209      	lsls	r1, r1, #8
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	e007      	b.n	8004a7a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2184      	movs	r1, #132	; 0x84
 8004a74:	0209      	lsls	r1, r1, #8
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d104      	bne.n	8004a8c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	491f      	ldr	r1, [pc, #124]	; (8004b14 <HAL_I2C_Init+0x128>)
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	491a      	ldr	r1, [pc, #104]	; (8004b10 <HAL_I2C_Init+0x124>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69d9      	ldr	r1, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2241      	movs	r2, #65	; 0x41
 8004af0:	2120      	movs	r1, #32
 8004af2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2242      	movs	r2, #66	; 0x42
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b002      	add	sp, #8
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	f0ffffff 	.word	0xf0ffffff
 8004b10:	ffff7fff 	.word	0xffff7fff
 8004b14:	02008000 	.word	0x02008000

08004b18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b089      	sub	sp, #36	; 0x24
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	000c      	movs	r4, r1
 8004b22:	0010      	movs	r0, r2
 8004b24:	0019      	movs	r1, r3
 8004b26:	230a      	movs	r3, #10
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	1c22      	adds	r2, r4, #0
 8004b2c:	801a      	strh	r2, [r3, #0]
 8004b2e:	2308      	movs	r3, #8
 8004b30:	18fb      	adds	r3, r7, r3
 8004b32:	1c02      	adds	r2, r0, #0
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	1dbb      	adds	r3, r7, #6
 8004b38:	1c0a      	adds	r2, r1, #0
 8004b3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2241      	movs	r2, #65	; 0x41
 8004b40:	5c9b      	ldrb	r3, [r3, r2]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d000      	beq.n	8004b4a <HAL_I2C_Mem_Write+0x32>
 8004b48:	e10c      	b.n	8004d64 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_I2C_Mem_Write+0x42>
 8004b50:	232c      	movs	r3, #44	; 0x2c
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0ff      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	5c9b      	ldrb	r3, [r3, r2]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2C_Mem_Write+0x5c>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0f8      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	2101      	movs	r1, #1
 8004b7a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fe fcb8 	bl	80034f0 <HAL_GetTick>
 8004b80:	0003      	movs	r3, r0
 8004b82:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	0219      	lsls	r1, r3, #8
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2319      	movs	r3, #25
 8004b90:	2201      	movs	r2, #1
 8004b92:	f000 fb0b 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0e3      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2241      	movs	r2, #65	; 0x41
 8004ba2:	2121      	movs	r1, #33	; 0x21
 8004ba4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2242      	movs	r2, #66	; 0x42
 8004baa:	2140      	movs	r1, #64	; 0x40
 8004bac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	222c      	movs	r2, #44	; 0x2c
 8004bbe:	18ba      	adds	r2, r7, r2
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bca:	1dbb      	adds	r3, r7, #6
 8004bcc:	881c      	ldrh	r4, [r3, #0]
 8004bce:	2308      	movs	r3, #8
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	881a      	ldrh	r2, [r3, #0]
 8004bd4:	230a      	movs	r3, #10
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	8819      	ldrh	r1, [r3, #0]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	0023      	movs	r3, r4
 8004be6:	f000 f9f9 	bl	8004fdc <I2C_RequestMemoryWrite>
 8004bea:	1e03      	subs	r3, r0, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0b5      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2bff      	cmp	r3, #255	; 0xff
 8004c02:	d911      	bls.n	8004c28 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	045c      	lsls	r4, r3, #17
 8004c14:	230a      	movs	r3, #10
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	8819      	ldrh	r1, [r3, #0]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	0023      	movs	r3, r4
 8004c22:	f000 fbf7 	bl	8005414 <I2C_TransferConfig>
 8004c26:	e012      	b.n	8004c4e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	049c      	lsls	r4, r3, #18
 8004c3c:	230a      	movs	r3, #10
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	8819      	ldrh	r1, [r3, #0]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	0023      	movs	r3, r4
 8004c4a:	f000 fbe3 	bl	8005414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 fae8 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c5a:	1e03      	subs	r3, r0, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e081      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d03a      	beq.n	8004d12 <HAL_I2C_Mem_Write+0x1fa>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d136      	bne.n	8004d12 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	0013      	movs	r3, r2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	f000 fa7b 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e053      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2bff      	cmp	r3, #255	; 0xff
 8004cc6:	d911      	bls.n	8004cec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	22ff      	movs	r2, #255	; 0xff
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	045c      	lsls	r4, r3, #17
 8004cd8:	230a      	movs	r3, #10
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	8819      	ldrh	r1, [r3, #0]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	0023      	movs	r3, r4
 8004ce6:	f000 fb95 	bl	8005414 <I2C_TransferConfig>
 8004cea:	e012      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	049c      	lsls	r4, r3, #18
 8004d00:	230a      	movs	r3, #10
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	8819      	ldrh	r1, [r3, #0]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	0023      	movs	r3, r4
 8004d0e:	f000 fb81 	bl	8005414 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d198      	bne.n	8004c4e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 fac0 	bl	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d28:	1e03      	subs	r3, r0, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e01a      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2220      	movs	r2, #32
 8004d36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	490b      	ldr	r1, [pc, #44]	; (8004d70 <HAL_I2C_Mem_Write+0x258>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2241      	movs	r2, #65	; 0x41
 8004d4c:	2120      	movs	r1, #32
 8004d4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2242      	movs	r2, #66	; 0x42
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2240      	movs	r2, #64	; 0x40
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b007      	add	sp, #28
 8004d6c:	bd90      	pop	{r4, r7, pc}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	fe00e800 	.word	0xfe00e800

08004d74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	000c      	movs	r4, r1
 8004d7e:	0010      	movs	r0, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	230a      	movs	r3, #10
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	1c22      	adds	r2, r4, #0
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	1c02      	adds	r2, r0, #0
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	1dbb      	adds	r3, r7, #6
 8004d94:	1c0a      	adds	r2, r1, #0
 8004d96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2241      	movs	r2, #65	; 0x41
 8004d9c:	5c9b      	ldrb	r3, [r3, r2]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d000      	beq.n	8004da6 <HAL_I2C_Mem_Read+0x32>
 8004da4:	e110      	b.n	8004fc8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <HAL_I2C_Mem_Read+0x42>
 8004dac:	232c      	movs	r3, #44	; 0x2c
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	0092      	lsls	r2, r2, #2
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e103      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	5c9b      	ldrb	r3, [r3, r2]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_I2C_Mem_Read+0x5c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e0fc      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2240      	movs	r2, #64	; 0x40
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dd8:	f7fe fb8a 	bl	80034f0 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	0219      	lsls	r1, r3, #8
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2319      	movs	r3, #25
 8004dec:	2201      	movs	r2, #1
 8004dee:	f000 f9dd 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0e7      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2241      	movs	r2, #65	; 0x41
 8004dfe:	2122      	movs	r1, #34	; 0x22
 8004e00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2242      	movs	r2, #66	; 0x42
 8004e06:	2140      	movs	r1, #64	; 0x40
 8004e08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	222c      	movs	r2, #44	; 0x2c
 8004e1a:	18ba      	adds	r2, r7, r2
 8004e1c:	8812      	ldrh	r2, [r2, #0]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e26:	1dbb      	adds	r3, r7, #6
 8004e28:	881c      	ldrh	r4, [r3, #0]
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	230a      	movs	r3, #10
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	8819      	ldrh	r1, [r3, #0]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	0023      	movs	r3, r4
 8004e42:	f000 f92f 	bl	80050a4 <I2C_RequestMemoryRead>
 8004e46:	1e03      	subs	r3, r0, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2240      	movs	r2, #64	; 0x40
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0b9      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2bff      	cmp	r3, #255	; 0xff
 8004e5e:	d911      	bls.n	8004e84 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	22ff      	movs	r2, #255	; 0xff
 8004e64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	045c      	lsls	r4, r3, #17
 8004e70:	230a      	movs	r3, #10
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	8819      	ldrh	r1, [r3, #0]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_I2C_Mem_Read+0x260>)
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	0023      	movs	r3, r4
 8004e7e:	f000 fac9 	bl	8005414 <I2C_TransferConfig>
 8004e82:	e012      	b.n	8004eaa <HAL_I2C_Mem_Read+0x136>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	049c      	lsls	r4, r3, #18
 8004e98:	230a      	movs	r3, #10
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	8819      	ldrh	r1, [r3, #0]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	4b4c      	ldr	r3, [pc, #304]	; (8004fd4 <HAL_I2C_Mem_Read+0x260>)
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	0023      	movs	r3, r4
 8004ea6:	f000 fab5 	bl	8005414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	0013      	movs	r3, r2
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	f000 f978 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	1e03      	subs	r3, r0, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e082      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d03a      	beq.n	8004f76 <HAL_I2C_Mem_Read+0x202>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d136      	bne.n	8004f76 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	0013      	movs	r3, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	f000 f949 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	1e03      	subs	r3, r0, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e053      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2bff      	cmp	r3, #255	; 0xff
 8004f2a:	d911      	bls.n	8004f50 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	22ff      	movs	r2, #255	; 0xff
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	045c      	lsls	r4, r3, #17
 8004f3c:	230a      	movs	r3, #10
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	8819      	ldrh	r1, [r3, #0]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	0023      	movs	r3, r4
 8004f4a:	f000 fa63 	bl	8005414 <I2C_TransferConfig>
 8004f4e:	e012      	b.n	8004f76 <HAL_I2C_Mem_Read+0x202>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	049c      	lsls	r4, r3, #18
 8004f64:	230a      	movs	r3, #10
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	8819      	ldrh	r1, [r3, #0]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	0023      	movs	r3, r4
 8004f72:	f000 fa4f 	bl	8005414 <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d194      	bne.n	8004eaa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 f98e 	bl	80052a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e01a      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <HAL_I2C_Mem_Read+0x264>)
 8004fa8:	400a      	ands	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2241      	movs	r2, #65	; 0x41
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2242      	movs	r2, #66	; 0x42
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2240      	movs	r2, #64	; 0x40
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	0018      	movs	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b007      	add	sp, #28
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	80002400 	.word	0x80002400
 8004fd8:	fe00e800 	.word	0xfe00e800

08004fdc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	000c      	movs	r4, r1
 8004fe6:	0010      	movs	r0, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	250a      	movs	r5, #10
 8004fec:	197b      	adds	r3, r7, r5
 8004fee:	1c22      	adds	r2, r4, #0
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	1c02      	adds	r2, r0, #0
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	1dbb      	adds	r3, r7, #6
 8004ffc:	1c0a      	adds	r2, r1, #0
 8004ffe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	045c      	lsls	r4, r3, #17
 800500a:	197b      	adds	r3, r7, r5
 800500c:	8819      	ldrh	r1, [r3, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <I2C_RequestMemoryWrite+0xc4>)
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	0023      	movs	r3, r4
 8005016:	f000 f9fd 	bl	8005414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 f902 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8005026:	1e03      	subs	r3, r0, #0
 8005028:	d001      	beq.n	800502e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e033      	b.n	8005096 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502e:	1dbb      	adds	r3, r7, #6
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005036:	2308      	movs	r3, #8
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
 8005044:	e019      	b.n	800507a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005046:	2308      	movs	r3, #8
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	b29b      	uxth	r3, r3
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505a:	6a39      	ldr	r1, [r7, #32]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 f8e3 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8005064:	1e03      	subs	r3, r0, #0
 8005066:	d001      	beq.n	800506c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e014      	b.n	8005096 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800506c:	2308      	movs	r3, #8
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	0013      	movs	r3, r2
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	f000 f890 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 800508c:	1e03      	subs	r3, r0, #0
 800508e:	d001      	beq.n	8005094 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b004      	add	sp, #16
 800509c:	bdb0      	pop	{r4, r5, r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	80002000 	.word	0x80002000

080050a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 80050a4:	b5b0      	push	{r4, r5, r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	000c      	movs	r4, r1
 80050ae:	0010      	movs	r0, r2
 80050b0:	0019      	movs	r1, r3
 80050b2:	250a      	movs	r5, #10
 80050b4:	197b      	adds	r3, r7, r5
 80050b6:	1c22      	adds	r2, r4, #0
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	2308      	movs	r3, #8
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	1c02      	adds	r2, r0, #0
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	1dbb      	adds	r3, r7, #6
 80050c4:	1c0a      	adds	r2, r1, #0
 80050c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050c8:	1dbb      	adds	r3, r7, #6
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	197b      	adds	r3, r7, r5
 80050d0:	8819      	ldrh	r1, [r3, #0]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <I2C_RequestMemoryRead+0xc0>)
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	f000 f99b 	bl	8005414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	6a39      	ldr	r1, [r7, #32]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 f8a0 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 80050ea:	1e03      	subs	r3, r0, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e033      	b.n	800515a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050f2:	1dbb      	adds	r3, r7, #6
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d107      	bne.n	800510a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050fa:	2308      	movs	r3, #8
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
 8005108:	e019      	b.n	800513e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800510a:	2308      	movs	r3, #8
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	b29b      	uxth	r3, r3
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	6a39      	ldr	r1, [r7, #32]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	0018      	movs	r0, r3
 8005124:	f000 f881 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8005128:	1e03      	subs	r3, r0, #0
 800512a:	d001      	beq.n	8005130 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e014      	b.n	800515a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005130:	2308      	movs	r3, #8
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	0013      	movs	r3, r2
 8005148:	2200      	movs	r2, #0
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	f000 f82e 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d001      	beq.n	8005158 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bdb0      	pop	{r4, r5, r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	80002000 	.word	0x80002000

08005168 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	2b02      	cmp	r3, #2
 800517c:	d103      	bne.n	8005186 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2201      	movs	r2, #1
 800518e:	4013      	ands	r3, r2
 8005190:	2b01      	cmp	r3, #1
 8005192:	d007      	beq.n	80051a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	430a      	orrs	r2, r1
 80051a2:	619a      	str	r2, [r3, #24]
  }
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	1dfb      	adds	r3, r7, #7
 80051ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051bc:	e021      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	d01e      	beq.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c4:	f7fe f994 	bl	80034f0 <HAL_GetTick>
 80051c8:	0002      	movs	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d113      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	2220      	movs	r2, #32
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2241      	movs	r2, #65	; 0x41
 80051ea:	2120      	movs	r1, #32
 80051ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2242      	movs	r2, #66	; 0x42
 80051f2:	2100      	movs	r1, #0
 80051f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2240      	movs	r2, #64	; 0x40
 80051fa:	2100      	movs	r1, #0
 80051fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	425a      	negs	r2, r3
 8005212:	4153      	adcs	r3, r2
 8005214:	b2db      	uxtb	r3, r3
 8005216:	001a      	movs	r2, r3
 8005218:	1dfb      	adds	r3, r7, #7
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0ce      	beq.n	80051be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	0018      	movs	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005236:	e02b      	b.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	0018      	movs	r0, r3
 8005240:	f000 f86e 	bl	8005320 <I2C_IsAcknowledgeFailed>
 8005244:	1e03      	subs	r3, r0, #0
 8005246:	d001      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e029      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	3301      	adds	r3, #1
 8005250:	d01e      	beq.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fe f94d 	bl	80034f0 <HAL_GetTick>
 8005256:	0002      	movs	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d113      	bne.n	8005290 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	2220      	movs	r2, #32
 800526e:	431a      	orrs	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2241      	movs	r2, #65	; 0x41
 8005278:	2120      	movs	r1, #32
 800527a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2242      	movs	r2, #66	; 0x42
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	2100      	movs	r1, #0
 800528a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e007      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2202      	movs	r2, #2
 8005298:	4013      	ands	r3, r2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d1cc      	bne.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b4:	e028      	b.n	8005308 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0018      	movs	r0, r3
 80052be:	f000 f82f 	bl	8005320 <I2C_IsAcknowledgeFailed>
 80052c2:	1e03      	subs	r3, r0, #0
 80052c4:	d001      	beq.n	80052ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e026      	b.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fe f911 	bl	80034f0 <HAL_GetTick>
 80052ce:	0002      	movs	r2, r0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d113      	bne.n	8005308 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	2220      	movs	r2, #32
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2241      	movs	r2, #65	; 0x41
 80052f0:	2120      	movs	r1, #32
 80052f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2242      	movs	r2, #66	; 0x42
 80052f8:	2100      	movs	r1, #0
 80052fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2240      	movs	r2, #64	; 0x40
 8005300:	2100      	movs	r1, #0
 8005302:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e007      	b.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2220      	movs	r2, #32
 8005310:	4013      	ands	r3, r2
 8005312:	2b20      	cmp	r3, #32
 8005314:	d1cf      	bne.n	80052b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	0018      	movs	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	b004      	add	sp, #16
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2210      	movs	r2, #16
 8005334:	4013      	ands	r3, r2
 8005336:	2b10      	cmp	r3, #16
 8005338:	d164      	bne.n	8005404 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	049b      	lsls	r3, r3, #18
 8005344:	401a      	ands	r2, r3
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	049b      	lsls	r3, r3, #18
 800534a:	429a      	cmp	r2, r3
 800534c:	d02b      	beq.n	80053a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	01c9      	lsls	r1, r1, #7
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005360:	e021      	b.n	80053a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3301      	adds	r3, #1
 8005366:	d01e      	beq.n	80053a6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005368:	f7fe f8c2 	bl	80034f0 <HAL_GetTick>
 800536c:	0002      	movs	r2, r0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <I2C_IsAcknowledgeFailed+0x5e>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d113      	bne.n	80053a6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	2220      	movs	r2, #32
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2241      	movs	r2, #65	; 0x41
 800538e:	2120      	movs	r1, #32
 8005390:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2242      	movs	r2, #66	; 0x42
 8005396:	2100      	movs	r1, #0
 8005398:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2240      	movs	r2, #64	; 0x40
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e02f      	b.n	8005406 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2220      	movs	r2, #32
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d1d6      	bne.n	8005362 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2220      	movs	r2, #32
 80053c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	0018      	movs	r0, r3
 80053c8:	f7ff fece 	bl	8005168 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	490e      	ldr	r1, [pc, #56]	; (8005410 <I2C_IsAcknowledgeFailed+0xf0>)
 80053d8:	400a      	ands	r2, r1
 80053da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	2204      	movs	r2, #4
 80053e2:	431a      	orrs	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2241      	movs	r2, #65	; 0x41
 80053ec:	2120      	movs	r1, #32
 80053ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2242      	movs	r2, #66	; 0x42
 80053f4:	2100      	movs	r1, #0
 80053f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	2100      	movs	r1, #0
 80053fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	0018      	movs	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	b004      	add	sp, #16
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	fe00e800 	.word	0xfe00e800

08005414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	0008      	movs	r0, r1
 800541e:	0011      	movs	r1, r2
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	240a      	movs	r4, #10
 8005424:	193b      	adds	r3, r7, r4
 8005426:	1c02      	adds	r2, r0, #0
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	2009      	movs	r0, #9
 800542c:	183b      	adds	r3, r7, r0
 800542e:	1c0a      	adds	r2, r1, #0
 8005430:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	0d51      	lsrs	r1, r2, #21
 800543c:	2280      	movs	r2, #128	; 0x80
 800543e:	00d2      	lsls	r2, r2, #3
 8005440:	400a      	ands	r2, r1
 8005442:	490e      	ldr	r1, [pc, #56]	; (800547c <I2C_TransferConfig+0x68>)
 8005444:	430a      	orrs	r2, r1
 8005446:	43d2      	mvns	r2, r2
 8005448:	401a      	ands	r2, r3
 800544a:	0011      	movs	r1, r2
 800544c:	193b      	adds	r3, r7, r4
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	059b      	lsls	r3, r3, #22
 8005452:	0d9a      	lsrs	r2, r3, #22
 8005454:	183b      	adds	r3, r7, r0
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	0418      	lsls	r0, r3, #16
 800545a:	23ff      	movs	r3, #255	; 0xff
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	4003      	ands	r3, r0
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	431a      	orrs	r2, r3
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b005      	add	sp, #20
 8005478:	bd90      	pop	{r4, r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	03ff63ff 	.word	0x03ff63ff

08005480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2241      	movs	r2, #65	; 0x41
 800548e:	5c9b      	ldrb	r3, [r3, r2]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b20      	cmp	r3, #32
 8005494:	d138      	bne.n	8005508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2240      	movs	r2, #64	; 0x40
 800549a:	5c9b      	ldrb	r3, [r3, r2]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e032      	b.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	2101      	movs	r1, #1
 80054aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2241      	movs	r2, #65	; 0x41
 80054b0:	2124      	movs	r1, #36	; 0x24
 80054b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2101      	movs	r1, #1
 80054c0:	438a      	bics	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4911      	ldr	r1, [pc, #68]	; (8005514 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6819      	ldr	r1, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	430a      	orrs	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2241      	movs	r2, #65	; 0x41
 80054f8:	2120      	movs	r1, #32
 80054fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2240      	movs	r2, #64	; 0x40
 8005500:	2100      	movs	r1, #0
 8005502:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b002      	add	sp, #8
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	ffffefff 	.word	0xffffefff

08005518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2241      	movs	r2, #65	; 0x41
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b20      	cmp	r3, #32
 800552c:	d139      	bne.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	5c9b      	ldrb	r3, [r3, r2]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005538:	2302      	movs	r3, #2
 800553a:	e033      	b.n	80055a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2240      	movs	r2, #64	; 0x40
 8005540:	2101      	movs	r1, #1
 8005542:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2241      	movs	r2, #65	; 0x41
 8005548:	2124      	movs	r1, #36	; 0x24
 800554a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2101      	movs	r1, #1
 8005558:	438a      	bics	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a11      	ldr	r2, [pc, #68]	; (80055ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005568:	4013      	ands	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2101      	movs	r1, #1
 800558a:	430a      	orrs	r2, r1
 800558c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2241      	movs	r2, #65	; 0x41
 8005592:	2120      	movs	r1, #32
 8005594:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2240      	movs	r2, #64	; 0x40
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b004      	add	sp, #16
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	fffff0ff 	.word	0xfffff0ff

080055b0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	0049      	lsls	r1, r1, #1
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40007000 	.word	0x40007000

080055cc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	000a      	movs	r2, r1
 80055d6:	1cfb      	adds	r3, r7, #3
 80055d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80055e0:	4b14      	ldr	r3, [pc, #80]	; (8005634 <HAL_PWR_EnterSTOPMode+0x68>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2207      	movs	r2, #7
 80055e6:	4393      	bics	r3, r2
 80055e8:	001a      	movs	r2, r3
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <HAL_PWR_EnterSTOPMode+0x68>)
 80055ec:	2101      	movs	r1, #1
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e005      	b.n	8005600 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <HAL_PWR_EnterSTOPMode+0x68>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <HAL_PWR_EnterSTOPMode+0x68>)
 80055fa:	2107      	movs	r1, #7
 80055fc:	438a      	bics	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005600:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005606:	2104      	movs	r1, #4
 8005608:	430a      	orrs	r2, r1
 800560a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800560c:	1cfb      	adds	r3, r7, #3
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005614:	bf30      	wfi
 8005616:	e002      	b.n	800561e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005618:	bf40      	sev
    __WFE();
 800561a:	bf20      	wfe
    __WFE();
 800561c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_PWR_EnterSTOPMode+0x6c>)
 8005624:	2104      	movs	r1, #4
 8005626:	438a      	bics	r2, r1
 8005628:	611a      	str	r2, [r3, #16]
}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	46bd      	mov	sp, r7
 800562e:	b002      	add	sp, #8
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	40007000 	.word	0x40007000
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005644:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800564a:	4013      	ands	r3, r2
 800564c:	0019      	movs	r1, r3
 800564e:	4b17      	ldr	r3, [pc, #92]	; (80056ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	429a      	cmp	r2, r3
 800565e:	d11f      	bne.n	80056a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	0013      	movs	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	189b      	adds	r3, r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4912      	ldr	r1, [pc, #72]	; (80056b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800566e:	0018      	movs	r0, r3
 8005670:	f7fa fd52 	bl	8000118 <__udivsi3>
 8005674:	0003      	movs	r3, r0
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800567a:	e008      	b.n	800568e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3b01      	subs	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e001      	b.n	800568e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e009      	b.n	80056a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	2380      	movs	r3, #128	; 0x80
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	401a      	ands	r2, r3
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	429a      	cmp	r2, r3
 800569e:	d0ed      	beq.n	800567c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b004      	add	sp, #16
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	40007000 	.word	0x40007000
 80056b0:	fffff9ff 	.word	0xfffff9ff
 80056b4:	20000030 	.word	0x20000030
 80056b8:	000f4240 	.word	0x000f4240

080056bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e304      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2201      	movs	r2, #1
 80056d4:	4013      	ands	r3, r2
 80056d6:	d100      	bne.n	80056da <HAL_RCC_OscConfig+0x1e>
 80056d8:	e07c      	b.n	80057d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056da:	4bc3      	ldr	r3, [pc, #780]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2238      	movs	r2, #56	; 0x38
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e4:	4bc0      	ldr	r3, [pc, #768]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2203      	movs	r2, #3
 80056ea:	4013      	ands	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d102      	bne.n	80056fa <HAL_RCC_OscConfig+0x3e>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d10b      	bne.n	8005718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005700:	4bb9      	ldr	r3, [pc, #740]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	4013      	ands	r3, r2
 800570a:	d062      	beq.n	80057d2 <HAL_RCC_OscConfig+0x116>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d15e      	bne.n	80057d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e2df      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	025b      	lsls	r3, r3, #9
 8005720:	429a      	cmp	r2, r3
 8005722:	d107      	bne.n	8005734 <HAL_RCC_OscConfig+0x78>
 8005724:	4bb0      	ldr	r3, [pc, #704]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4baf      	ldr	r3, [pc, #700]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800572a:	2180      	movs	r1, #128	; 0x80
 800572c:	0249      	lsls	r1, r1, #9
 800572e:	430a      	orrs	r2, r1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e020      	b.n	8005776 <HAL_RCC_OscConfig+0xba>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	23a0      	movs	r3, #160	; 0xa0
 800573a:	02db      	lsls	r3, r3, #11
 800573c:	429a      	cmp	r2, r3
 800573e:	d10e      	bne.n	800575e <HAL_RCC_OscConfig+0xa2>
 8005740:	4ba9      	ldr	r3, [pc, #676]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4ba8      	ldr	r3, [pc, #672]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	02c9      	lsls	r1, r1, #11
 800574a:	430a      	orrs	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4ba6      	ldr	r3, [pc, #664]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4ba5      	ldr	r3, [pc, #660]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	0249      	lsls	r1, r1, #9
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e00b      	b.n	8005776 <HAL_RCC_OscConfig+0xba>
 800575e:	4ba2      	ldr	r3, [pc, #648]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4ba1      	ldr	r3, [pc, #644]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005764:	49a1      	ldr	r1, [pc, #644]	; (80059ec <HAL_RCC_OscConfig+0x330>)
 8005766:	400a      	ands	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	4b9f      	ldr	r3, [pc, #636]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b9e      	ldr	r3, [pc, #632]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005770:	499f      	ldr	r1, [pc, #636]	; (80059f0 <HAL_RCC_OscConfig+0x334>)
 8005772:	400a      	ands	r2, r1
 8005774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d014      	beq.n	80057a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fd feb7 	bl	80034f0 <HAL_GetTick>
 8005782:	0003      	movs	r3, r0
 8005784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fd feb2 	bl	80034f0 <HAL_GetTick>
 800578c:	0002      	movs	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e29e      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800579a:	4b93      	ldr	r3, [pc, #588]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	4013      	ands	r3, r2
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0xcc>
 80057a6:	e015      	b.n	80057d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fd fea2 	bl	80034f0 <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b2:	f7fd fe9d 	bl	80034f0 <HAL_GetTick>
 80057b6:	0002      	movs	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e289      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057c4:	4b88      	ldr	r3, [pc, #544]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	4013      	ands	r3, r2
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0xf6>
 80057d0:	e000      	b.n	80057d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2202      	movs	r2, #2
 80057da:	4013      	ands	r3, r2
 80057dc:	d100      	bne.n	80057e0 <HAL_RCC_OscConfig+0x124>
 80057de:	e099      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e0:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2238      	movs	r2, #56	; 0x38
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ea:	4b7f      	ldr	r3, [pc, #508]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2203      	movs	r2, #3
 80057f0:	4013      	ands	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d102      	bne.n	8005800 <HAL_RCC_OscConfig+0x144>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d002      	beq.n	8005806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d135      	bne.n	8005872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005806:	4b78      	ldr	r3, [pc, #480]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4013      	ands	r3, r2
 8005810:	d005      	beq.n	800581e <HAL_RCC_OscConfig+0x162>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e25c      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581e:	4b72      	ldr	r3, [pc, #456]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4a74      	ldr	r2, [pc, #464]	; (80059f4 <HAL_RCC_OscConfig+0x338>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	021a      	lsls	r2, r3, #8
 800582e:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d112      	bne.n	8005860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800583a:	4b6b      	ldr	r3, [pc, #428]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6e      	ldr	r2, [pc, #440]	; (80059f8 <HAL_RCC_OscConfig+0x33c>)
 8005840:	4013      	ands	r3, r2
 8005842:	0019      	movs	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800584e:	4b66      	ldr	r3, [pc, #408]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	0adb      	lsrs	r3, r3, #11
 8005854:	2207      	movs	r2, #7
 8005856:	4013      	ands	r3, r2
 8005858:	4a68      	ldr	r2, [pc, #416]	; (80059fc <HAL_RCC_OscConfig+0x340>)
 800585a:	40da      	lsrs	r2, r3
 800585c:	4b68      	ldr	r3, [pc, #416]	; (8005a00 <HAL_RCC_OscConfig+0x344>)
 800585e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005860:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <HAL_RCC_OscConfig+0x348>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0018      	movs	r0, r3
 8005866:	f7fd fde7 	bl	8003438 <HAL_InitTick>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d051      	beq.n	8005912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e232      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d030      	beq.n	80058dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800587a:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <HAL_RCC_OscConfig+0x33c>)
 8005880:	4013      	ands	r3, r2
 8005882:	0019      	movs	r1, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	4b57      	ldr	r3, [pc, #348]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800588e:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b55      	ldr	r3, [pc, #340]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	0049      	lsls	r1, r1, #1
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fd fe28 	bl	80034f0 <HAL_GetTick>
 80058a0:	0003      	movs	r3, r0
 80058a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a6:	f7fd fe23 	bl	80034f0 <HAL_GetTick>
 80058aa:	0002      	movs	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e20f      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b8:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4013      	ands	r3, r2
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a4a      	ldr	r2, [pc, #296]	; (80059f4 <HAL_RCC_OscConfig+0x338>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e01b      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058e2:	4949      	ldr	r1, [pc, #292]	; (8005a08 <HAL_RCC_OscConfig+0x34c>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fd fe02 	bl	80034f0 <HAL_GetTick>
 80058ec:	0003      	movs	r3, r0
 80058ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f2:	f7fd fdfd 	bl	80034f0 <HAL_GetTick>
 80058f6:	0002      	movs	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e1e9      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005904:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4013      	ands	r3, r2
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCC_OscConfig+0x236>
 8005910:	e000      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2208      	movs	r2, #8
 800591a:	4013      	ands	r3, r2
 800591c:	d047      	beq.n	80059ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800591e:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2238      	movs	r2, #56	; 0x38
 8005924:	4013      	ands	r3, r2
 8005926:	2b18      	cmp	r3, #24
 8005928:	d10a      	bne.n	8005940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800592a:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	2202      	movs	r2, #2
 8005930:	4013      	ands	r3, r2
 8005932:	d03c      	beq.n	80059ae <HAL_RCC_OscConfig+0x2f2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d138      	bne.n	80059ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e1cb      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800594a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800594c:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800594e:	2101      	movs	r1, #1
 8005950:	430a      	orrs	r2, r1
 8005952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fd fdcc 	bl	80034f0 <HAL_GetTick>
 8005958:	0003      	movs	r3, r0
 800595a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595e:	f7fd fdc7 	bl	80034f0 <HAL_GetTick>
 8005962:	0002      	movs	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e1b3      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	2202      	movs	r2, #2
 8005976:	4013      	ands	r3, r2
 8005978:	d0f1      	beq.n	800595e <HAL_RCC_OscConfig+0x2a2>
 800597a:	e018      	b.n	80059ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800597e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005982:	2101      	movs	r1, #1
 8005984:	438a      	bics	r2, r1
 8005986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fd fdb2 	bl	80034f0 <HAL_GetTick>
 800598c:	0003      	movs	r3, r0
 800598e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005992:	f7fd fdad 	bl	80034f0 <HAL_GetTick>
 8005996:	0002      	movs	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e199      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059a4:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	2202      	movs	r2, #2
 80059aa:	4013      	ands	r3, r2
 80059ac:	d1f1      	bne.n	8005992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2204      	movs	r2, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d100      	bne.n	80059ba <HAL_RCC_OscConfig+0x2fe>
 80059b8:	e0c6      	b.n	8005b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ba:	231f      	movs	r3, #31
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2238      	movs	r2, #56	; 0x38
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d11e      	bne.n	8005a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	2202      	movs	r2, #2
 80059d4:	4013      	ands	r3, r2
 80059d6:	d100      	bne.n	80059da <HAL_RCC_OscConfig+0x31e>
 80059d8:	e0b6      	b.n	8005b48 <HAL_RCC_OscConfig+0x48c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d000      	beq.n	80059e4 <HAL_RCC_OscConfig+0x328>
 80059e2:	e0b1      	b.n	8005b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e177      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
 80059e8:	40021000 	.word	0x40021000
 80059ec:	fffeffff 	.word	0xfffeffff
 80059f0:	fffbffff 	.word	0xfffbffff
 80059f4:	ffff80ff 	.word	0xffff80ff
 80059f8:	ffffc7ff 	.word	0xffffc7ff
 80059fc:	00f42400 	.word	0x00f42400
 8005a00:	20000030 	.word	0x20000030
 8005a04:	20000000 	.word	0x20000000
 8005a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a0c:	4bb4      	ldr	r3, [pc, #720]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	055b      	lsls	r3, r3, #21
 8005a14:	4013      	ands	r3, r2
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_OscConfig+0x360>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x362>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d011      	beq.n	8005a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	4baf      	ldr	r3, [pc, #700]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a26:	4bae      	ldr	r3, [pc, #696]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	0549      	lsls	r1, r1, #21
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a30:	4bab      	ldr	r3, [pc, #684]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	055b      	lsls	r3, r3, #21
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a3e:	231f      	movs	r3, #31
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a46:	4ba7      	ldr	r3, [pc, #668]	; (8005ce4 <HAL_RCC_OscConfig+0x628>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d11a      	bne.n	8005a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a52:	4ba4      	ldr	r3, [pc, #656]	; (8005ce4 <HAL_RCC_OscConfig+0x628>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4ba3      	ldr	r3, [pc, #652]	; (8005ce4 <HAL_RCC_OscConfig+0x628>)
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	0049      	lsls	r1, r1, #1
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a60:	f7fd fd46 	bl	80034f0 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6a:	f7fd fd41 	bl	80034f0 <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e12d      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a7c:	4b99      	ldr	r3, [pc, #612]	; (8005ce4 <HAL_RCC_OscConfig+0x628>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCC_OscConfig+0x3e2>
 8005a90:	4b93      	ldr	r3, [pc, #588]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a94:	4b92      	ldr	r3, [pc, #584]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005a96:	2101      	movs	r1, #1
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a9c:	e01c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x41c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x404>
 8005aa6:	4b8e      	ldr	r3, [pc, #568]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aaa:	4b8d      	ldr	r3, [pc, #564]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005aac:	2104      	movs	r1, #4
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ab2:	4b8b      	ldr	r3, [pc, #556]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab6:	4b8a      	ldr	r3, [pc, #552]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x41c>
 8005ac0:	4b87      	ldr	r3, [pc, #540]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ac4:	4b86      	ldr	r3, [pc, #536]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	438a      	bics	r2, r1
 8005aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8005acc:	4b84      	ldr	r3, [pc, #528]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ad0:	4b83      	ldr	r3, [pc, #524]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d014      	beq.n	8005b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fd fd06 	bl	80034f0 <HAL_GetTick>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae8:	e009      	b.n	8005afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd fd01 	bl	80034f0 <HAL_GetTick>
 8005aee:	0002      	movs	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	4a7c      	ldr	r2, [pc, #496]	; (8005ce8 <HAL_RCC_OscConfig+0x62c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e0ec      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afe:	4b78      	ldr	r3, [pc, #480]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	2202      	movs	r2, #2
 8005b04:	4013      	ands	r3, r2
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x42e>
 8005b08:	e013      	b.n	8005b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fd fcf1 	bl	80034f0 <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b12:	e009      	b.n	8005b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fd fcec 	bl	80034f0 <HAL_GetTick>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	4a72      	ldr	r2, [pc, #456]	; (8005ce8 <HAL_RCC_OscConfig+0x62c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0d7      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b28:	4b6d      	ldr	r3, [pc, #436]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b32:	231f      	movs	r3, #31
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b3c:	4b68      	ldr	r3, [pc, #416]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b42:	496a      	ldr	r1, [pc, #424]	; (8005cec <HAL_RCC_OscConfig+0x630>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d100      	bne.n	8005b52 <HAL_RCC_OscConfig+0x496>
 8005b50:	e0c1      	b.n	8005cd6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b52:	4b63      	ldr	r3, [pc, #396]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2238      	movs	r2, #56	; 0x38
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d100      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4a4>
 8005b5e:	e081      	b.n	8005c64 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d156      	bne.n	8005c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b5d      	ldr	r3, [pc, #372]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b5c      	ldr	r3, [pc, #368]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b6e:	4960      	ldr	r1, [pc, #384]	; (8005cf0 <HAL_RCC_OscConfig+0x634>)
 8005b70:	400a      	ands	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fd fcbc 	bl	80034f0 <HAL_GetTick>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7e:	f7fd fcb7 	bl	80034f0 <HAL_GetTick>
 8005b82:	0002      	movs	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e0a3      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b90:	4b53      	ldr	r3, [pc, #332]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	049b      	lsls	r3, r3, #18
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d1f0      	bne.n	8005b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b9c:	4b50      	ldr	r3, [pc, #320]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a54      	ldr	r2, [pc, #336]	; (8005cf4 <HAL_RCC_OscConfig+0x638>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	4b45      	ldr	r3, [pc, #276]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd0:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b42      	ldr	r3, [pc, #264]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	0449      	lsls	r1, r1, #17
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005bde:	4b40      	ldr	r3, [pc, #256]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	4b3f      	ldr	r3, [pc, #252]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	0549      	lsls	r1, r1, #21
 8005be8:	430a      	orrs	r2, r1
 8005bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd fc80 	bl	80034f0 <HAL_GetTick>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fd fc7b 	bl	80034f0 <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e067      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c08:	4b35      	ldr	r3, [pc, #212]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	049b      	lsls	r3, r3, #18
 8005c10:	4013      	ands	r3, r2
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x53a>
 8005c14:	e05f      	b.n	8005cd6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c16:	4b32      	ldr	r3, [pc, #200]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c1c:	4934      	ldr	r1, [pc, #208]	; (8005cf0 <HAL_RCC_OscConfig+0x634>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005c22:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	4b2e      	ldr	r3, [pc, #184]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c28:	2103      	movs	r1, #3
 8005c2a:	438a      	bics	r2, r1
 8005c2c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c34:	4930      	ldr	r1, [pc, #192]	; (8005cf8 <HAL_RCC_OscConfig+0x63c>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3a:	f7fd fc59 	bl	80034f0 <HAL_GetTick>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fd fc54 	bl	80034f0 <HAL_GetTick>
 8005c48:	0002      	movs	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e040      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c56:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	049b      	lsls	r3, r3, #18
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x588>
 8005c62:	e038      	b.n	8005cd6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e033      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c70:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	401a      	ands	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d126      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2270      	movs	r2, #112	; 0x70
 8005c88:	401a      	ands	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d11f      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	23fe      	movs	r3, #254	; 0xfe
 8005c96:	01db      	lsls	r3, r3, #7
 8005c98:	401a      	ands	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d116      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	23f8      	movs	r3, #248	; 0xf8
 8005ca8:	039b      	lsls	r3, r3, #14
 8005caa:	401a      	ands	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	23e0      	movs	r3, #224	; 0xe0
 8005cb8:	051b      	lsls	r3, r3, #20
 8005cba:	401a      	ands	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d106      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	0f5b      	lsrs	r3, r3, #29
 8005cc8:	075a      	lsls	r2, r3, #29
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d001      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b008      	add	sp, #32
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40007000 	.word	0x40007000
 8005ce8:	00001388 	.word	0x00001388
 8005cec:	efffffff 	.word	0xefffffff
 8005cf0:	feffffff 	.word	0xfeffffff
 8005cf4:	11c1808c 	.word	0x11c1808c
 8005cf8:	eefeffff 	.word	0xeefeffff

08005cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0e9      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d10:	4b76      	ldr	r3, [pc, #472]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2207      	movs	r2, #7
 8005d16:	4013      	ands	r3, r2
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d91e      	bls.n	8005d5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1e:	4b73      	ldr	r3, [pc, #460]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2207      	movs	r2, #7
 8005d24:	4393      	bics	r3, r2
 8005d26:	0019      	movs	r1, r3
 8005d28:	4b70      	ldr	r3, [pc, #448]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d30:	f7fd fbde 	bl	80034f0 <HAL_GetTick>
 8005d34:	0003      	movs	r3, r0
 8005d36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d38:	e009      	b.n	8005d4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3a:	f7fd fbd9 	bl	80034f0 <HAL_GetTick>
 8005d3e:	0002      	movs	r2, r0
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	4a6a      	ldr	r2, [pc, #424]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0ca      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d4e:	4b67      	ldr	r3, [pc, #412]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2207      	movs	r2, #7
 8005d54:	4013      	ands	r3, r2
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d1ee      	bne.n	8005d3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2202      	movs	r2, #2
 8005d62:	4013      	ands	r3, r2
 8005d64:	d015      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d006      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d70:	4b60      	ldr	r3, [pc, #384]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	4b5f      	ldr	r3, [pc, #380]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d76:	21e0      	movs	r1, #224	; 0xe0
 8005d78:	01c9      	lsls	r1, r1, #7
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7e:	4b5d      	ldr	r3, [pc, #372]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	4a5d      	ldr	r2, [pc, #372]	; (8005ef8 <HAL_RCC_ClockConfig+0x1fc>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	0019      	movs	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	4b59      	ldr	r3, [pc, #356]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d057      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005da4:	4b53      	ldr	r3, [pc, #332]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	4013      	ands	r3, r2
 8005dae:	d12b      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e097      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d107      	bne.n	8005dcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dbc:	4b4d      	ldr	r3, [pc, #308]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	049b      	lsls	r3, r3, #18
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d11f      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e08b      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dd4:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d113      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e07f      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dec:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	d108      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e074      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dfa:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfe:	2202      	movs	r2, #2
 8005e00:	4013      	ands	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e06d      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e08:	4b3a      	ldr	r3, [pc, #232]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	2207      	movs	r2, #7
 8005e0e:	4393      	bics	r3, r2
 8005e10:	0019      	movs	r1, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4b37      	ldr	r3, [pc, #220]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1c:	f7fd fb68 	bl	80034f0 <HAL_GetTick>
 8005e20:	0003      	movs	r3, r0
 8005e22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e24:	e009      	b.n	8005e3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e26:	f7fd fb63 	bl	80034f0 <HAL_GetTick>
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e054      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2238      	movs	r2, #56	; 0x38
 8005e40:	401a      	ands	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1ec      	bne.n	8005e26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b27      	ldr	r3, [pc, #156]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2207      	movs	r2, #7
 8005e52:	4013      	ands	r3, r2
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d21e      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2207      	movs	r2, #7
 8005e60:	4393      	bics	r3, r2
 8005e62:	0019      	movs	r1, r3
 8005e64:	4b21      	ldr	r3, [pc, #132]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e6c:	f7fd fb40 	bl	80034f0 <HAL_GetTick>
 8005e70:	0003      	movs	r3, r0
 8005e72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e74:	e009      	b.n	8005e8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e76:	f7fd fb3b 	bl	80034f0 <HAL_GetTick>
 8005e7a:	0002      	movs	r2, r0
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e02c      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_RCC_ClockConfig+0x1f0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2207      	movs	r2, #7
 8005e90:	4013      	ands	r3, r2
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d1ee      	bne.n	8005e76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea2:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <HAL_RCC_ClockConfig+0x200>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005eb6:	f000 f829 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005eba:	0001      	movs	r1, r0
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	220f      	movs	r2, #15
 8005ec4:	401a      	ands	r2, r3
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <HAL_RCC_ClockConfig+0x204>)
 8005ec8:	0092      	lsls	r2, r2, #2
 8005eca:	58d3      	ldr	r3, [r2, r3]
 8005ecc:	221f      	movs	r2, #31
 8005ece:	4013      	ands	r3, r2
 8005ed0:	000a      	movs	r2, r1
 8005ed2:	40da      	lsrs	r2, r3
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_ClockConfig+0x208>)
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_RCC_ClockConfig+0x20c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7fd faab 	bl	8003438 <HAL_InitTick>
 8005ee2:	0003      	movs	r3, r0
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b004      	add	sp, #16
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40022000 	.word	0x40022000
 8005ef0:	00001388 	.word	0x00001388
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	fffff0ff 	.word	0xfffff0ff
 8005efc:	ffff8fff 	.word	0xffff8fff
 8005f00:	08015798 	.word	0x08015798
 8005f04:	20000030 	.word	0x20000030
 8005f08:	20000000 	.word	0x20000000

08005f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f12:	4b3c      	ldr	r3, [pc, #240]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2238      	movs	r2, #56	; 0x38
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d10f      	bne.n	8005f3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f1c:	4b39      	ldr	r3, [pc, #228]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	0adb      	lsrs	r3, r3, #11
 8005f22:	2207      	movs	r2, #7
 8005f24:	4013      	ands	r3, r2
 8005f26:	2201      	movs	r2, #1
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	0013      	movs	r3, r2
 8005f2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	4835      	ldr	r0, [pc, #212]	; (8006008 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f32:	f7fa f8f1 	bl	8000118 <__udivsi3>
 8005f36:	0003      	movs	r3, r0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e05d      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f3c:	4b31      	ldr	r3, [pc, #196]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2238      	movs	r2, #56	; 0x38
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d102      	bne.n	8005f4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f48:	4b30      	ldr	r3, [pc, #192]	; (800600c <HAL_RCC_GetSysClockFreq+0x100>)
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	e054      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2238      	movs	r2, #56	; 0x38
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d138      	bne.n	8005fcc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f64:	4b27      	ldr	r3, [pc, #156]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	2207      	movs	r2, #7
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4824      	ldr	r0, [pc, #144]	; (800600c <HAL_RCC_GetSysClockFreq+0x100>)
 8005f7c:	f7fa f8cc 	bl	8000118 <__udivsi3>
 8005f80:	0003      	movs	r3, r0
 8005f82:	0019      	movs	r1, r3
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0a1b      	lsrs	r3, r3, #8
 8005f8a:	227f      	movs	r2, #127	; 0x7f
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	434b      	muls	r3, r1
 8005f90:	617b      	str	r3, [r7, #20]
        break;
 8005f92:	e00d      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	481c      	ldr	r0, [pc, #112]	; (8006008 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f98:	f7fa f8be 	bl	8000118 <__udivsi3>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	0019      	movs	r1, r3
 8005fa0:	4b18      	ldr	r3, [pc, #96]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	227f      	movs	r2, #127	; 0x7f
 8005fa8:	4013      	ands	r3, r2
 8005faa:	434b      	muls	r3, r1
 8005fac:	617b      	str	r3, [r7, #20]
        break;
 8005fae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005fb0:	4b14      	ldr	r3, [pc, #80]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	0f5b      	lsrs	r3, r3, #29
 8005fb6:	2207      	movs	r2, #7
 8005fb8:	4013      	ands	r3, r2
 8005fba:	3301      	adds	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	6978      	ldr	r0, [r7, #20]
 8005fc2:	f7fa f8a9 	bl	8000118 <__udivsi3>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e015      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2238      	movs	r2, #56	; 0x38
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d103      	bne.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e00b      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005fe0:	4b08      	ldr	r3, [pc, #32]	; (8006004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2238      	movs	r2, #56	; 0x38
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b18      	cmp	r3, #24
 8005fea:	d103      	bne.n	8005ff4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fec:	23fa      	movs	r3, #250	; 0xfa
 8005fee:	01db      	lsls	r3, r3, #7
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e001      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ff8:	693b      	ldr	r3, [r7, #16]
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b006      	add	sp, #24
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	40021000 	.word	0x40021000
 8006008:	00f42400 	.word	0x00f42400
 800600c:	007a1200 	.word	0x007a1200

08006010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006018:	2313      	movs	r3, #19
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006020:	2312      	movs	r3, #18
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	4013      	ands	r3, r2
 8006032:	d100      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006034:	e0a3      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006036:	2011      	movs	r0, #17
 8006038:	183b      	adds	r3, r7, r0
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603e:	4bc3      	ldr	r3, [pc, #780]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	055b      	lsls	r3, r3, #21
 8006046:	4013      	ands	r3, r2
 8006048:	d110      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800604a:	4bc0      	ldr	r3, [pc, #768]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800604c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800604e:	4bbf      	ldr	r3, [pc, #764]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	0549      	lsls	r1, r1, #21
 8006054:	430a      	orrs	r2, r1
 8006056:	63da      	str	r2, [r3, #60]	; 0x3c
 8006058:	4bbc      	ldr	r3, [pc, #752]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800605a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	055b      	lsls	r3, r3, #21
 8006060:	4013      	ands	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006066:	183b      	adds	r3, r7, r0
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800606c:	4bb8      	ldr	r3, [pc, #736]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4bb7      	ldr	r3, [pc, #732]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	0049      	lsls	r1, r1, #1
 8006076:	430a      	orrs	r2, r1
 8006078:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607a:	f7fd fa39 	bl	80034f0 <HAL_GetTick>
 800607e:	0003      	movs	r3, r0
 8006080:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006082:	e00b      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fd fa34 	bl	80034f0 <HAL_GetTick>
 8006088:	0002      	movs	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d904      	bls.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006092:	2313      	movs	r3, #19
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	2203      	movs	r2, #3
 8006098:	701a      	strb	r2, [r3, #0]
        break;
 800609a:	e005      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800609c:	4bac      	ldr	r3, [pc, #688]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4013      	ands	r3, r2
 80060a6:	d0ed      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80060a8:	2313      	movs	r3, #19
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d154      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060b2:	4ba6      	ldr	r3, [pc, #664]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060b6:	23c0      	movs	r3, #192	; 0xc0
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4013      	ands	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d019      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d014      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060ce:	4b9f      	ldr	r3, [pc, #636]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d2:	4aa0      	ldr	r2, [pc, #640]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d8:	4b9c      	ldr	r3, [pc, #624]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060dc:	4b9b      	ldr	r3, [pc, #620]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	0249      	lsls	r1, r1, #9
 80060e2:	430a      	orrs	r2, r1
 80060e4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e6:	4b99      	ldr	r3, [pc, #612]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060ea:	4b98      	ldr	r3, [pc, #608]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060ec:	499a      	ldr	r1, [pc, #616]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80060ee:	400a      	ands	r2, r1
 80060f0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060f2:	4b96      	ldr	r3, [pc, #600]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2201      	movs	r2, #1
 80060fc:	4013      	ands	r3, r2
 80060fe:	d016      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fd f9f6 	bl	80034f0 <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006108:	e00c      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f7fd f9f1 	bl	80034f0 <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	4a91      	ldr	r2, [pc, #580]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d904      	bls.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800611a:	2313      	movs	r3, #19
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2203      	movs	r2, #3
 8006120:	701a      	strb	r2, [r3, #0]
            break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006124:	4b89      	ldr	r3, [pc, #548]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	2202      	movs	r2, #2
 800612a:	4013      	ands	r3, r2
 800612c:	d0ed      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800612e:	2313      	movs	r3, #19
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006138:	4b84      	ldr	r3, [pc, #528]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	4a85      	ldr	r2, [pc, #532]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800613e:	4013      	ands	r3, r2
 8006140:	0019      	movs	r1, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	4b81      	ldr	r3, [pc, #516]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006148:	430a      	orrs	r2, r1
 800614a:	65da      	str	r2, [r3, #92]	; 0x5c
 800614c:	e00c      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800614e:	2312      	movs	r3, #18
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2213      	movs	r2, #19
 8006154:	18ba      	adds	r2, r7, r2
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e005      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	2312      	movs	r3, #18
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	2213      	movs	r2, #19
 8006162:	18ba      	adds	r2, r7, r2
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006168:	2311      	movs	r3, #17
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d105      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006172:	4b76      	ldr	r3, [pc, #472]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006176:	4b75      	ldr	r3, [pc, #468]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006178:	4979      	ldr	r1, [pc, #484]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800617a:	400a      	ands	r2, r1
 800617c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	4013      	ands	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006188:	4b70      	ldr	r3, [pc, #448]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	2203      	movs	r2, #3
 800618e:	4393      	bics	r3, r2
 8006190:	0019      	movs	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	4b6d      	ldr	r3, [pc, #436]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006198:	430a      	orrs	r2, r1
 800619a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2202      	movs	r2, #2
 80061a2:	4013      	ands	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061a6:	4b69      	ldr	r3, [pc, #420]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	220c      	movs	r2, #12
 80061ac:	4393      	bics	r3, r2
 80061ae:	0019      	movs	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	4b65      	ldr	r3, [pc, #404]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061b6:	430a      	orrs	r2, r1
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2210      	movs	r2, #16
 80061c0:	4013      	ands	r3, r2
 80061c2:	d009      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061c4:	4b61      	ldr	r3, [pc, #388]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	4a66      	ldr	r2, [pc, #408]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	0019      	movs	r1, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	4b5e      	ldr	r3, [pc, #376]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061d4:	430a      	orrs	r2, r1
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4013      	ands	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	4a5f      	ldr	r2, [pc, #380]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	0019      	movs	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	4b56      	ldr	r3, [pc, #344]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061f4:	430a      	orrs	r2, r1
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4013      	ands	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006204:	4b51      	ldr	r3, [pc, #324]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	4a58      	ldr	r2, [pc, #352]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800620a:	4013      	ands	r3, r2
 800620c:	0019      	movs	r1, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	4b4e      	ldr	r3, [pc, #312]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006214:	430a      	orrs	r2, r1
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2220      	movs	r2, #32
 800621e:	4013      	ands	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006222:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	4a52      	ldr	r2, [pc, #328]	; (8006370 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006228:	4013      	ands	r3, r2
 800622a:	0019      	movs	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006232:	430a      	orrs	r2, r1
 8006234:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	01db      	lsls	r3, r3, #7
 800623e:	4013      	ands	r3, r2
 8006240:	d015      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006242:	4b42      	ldr	r3, [pc, #264]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	0899      	lsrs	r1, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006250:	430a      	orrs	r2, r1
 8006252:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	05db      	lsls	r3, r3, #23
 800625c:	429a      	cmp	r2, r3
 800625e:	d106      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006260:	4b3a      	ldr	r3, [pc, #232]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4b39      	ldr	r3, [pc, #228]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	0249      	lsls	r1, r1, #9
 800626a:	430a      	orrs	r2, r1
 800626c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	031b      	lsls	r3, r3, #12
 8006276:	4013      	ands	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800627a:	4b34      	ldr	r3, [pc, #208]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	4393      	bics	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006288:	4b30      	ldr	r3, [pc, #192]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800628a:	430a      	orrs	r2, r1
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	039b      	lsls	r3, r3, #14
 8006296:	4013      	ands	r3, r2
 8006298:	d016      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800629a:	4b2c      	ldr	r3, [pc, #176]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	4a35      	ldr	r2, [pc, #212]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	0019      	movs	r1, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062aa:	430a      	orrs	r2, r1
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	03db      	lsls	r3, r3, #15
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d106      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	4b23      	ldr	r3, [pc, #140]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062c0:	2180      	movs	r1, #128	; 0x80
 80062c2:	0449      	lsls	r1, r1, #17
 80062c4:	430a      	orrs	r2, r1
 80062c6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	03db      	lsls	r3, r3, #15
 80062d0:	4013      	ands	r3, r2
 80062d2:	d016      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80062d4:	4b1d      	ldr	r3, [pc, #116]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	4a27      	ldr	r2, [pc, #156]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80062da:	4013      	ands	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	4b1a      	ldr	r3, [pc, #104]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062e4:	430a      	orrs	r2, r1
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	045b      	lsls	r3, r3, #17
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d106      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80062f4:	4b15      	ldr	r3, [pc, #84]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	0449      	lsls	r1, r1, #17
 80062fe:	430a      	orrs	r2, r1
 8006300:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	4013      	ands	r3, r2
 800630c:	d016      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800630e:	4b0f      	ldr	r3, [pc, #60]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	4a1a      	ldr	r2, [pc, #104]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006314:	4013      	ands	r3, r2
 8006316:	0019      	movs	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800631e:	430a      	orrs	r2, r1
 8006320:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	01db      	lsls	r3, r3, #7
 800632a:	429a      	cmp	r2, r3
 800632c:	d106      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800632e:	4b07      	ldr	r3, [pc, #28]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006334:	2180      	movs	r1, #128	; 0x80
 8006336:	0249      	lsls	r1, r1, #9
 8006338:	430a      	orrs	r2, r1
 800633a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800633c:	2312      	movs	r3, #18
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	781b      	ldrb	r3, [r3, #0]
}
 8006342:	0018      	movs	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	b006      	add	sp, #24
 8006348:	bd80      	pop	{r7, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	40021000 	.word	0x40021000
 8006350:	40007000 	.word	0x40007000
 8006354:	fffffcff 	.word	0xfffffcff
 8006358:	fffeffff 	.word	0xfffeffff
 800635c:	00001388 	.word	0x00001388
 8006360:	efffffff 	.word	0xefffffff
 8006364:	fffff3ff 	.word	0xfffff3ff
 8006368:	fff3ffff 	.word	0xfff3ffff
 800636c:	ffcfffff 	.word	0xffcfffff
 8006370:	ffffcfff 	.word	0xffffcfff
 8006374:	ffbfffff 	.word	0xffbfffff
 8006378:	feffffff 	.word	0xfeffffff
 800637c:	ffff3fff 	.word	0xffff3fff

08006380 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006380:	b5b0      	push	{r4, r5, r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006388:	230f      	movs	r3, #15
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	2201      	movs	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d100      	bne.n	8006398 <HAL_RTC_Init+0x18>
 8006396:	e080      	b.n	800649a <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2229      	movs	r2, #41	; 0x29
 800639c:	5c9b      	ldrb	r3, [r3, r2]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2228      	movs	r2, #40	; 0x28
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2288      	movs	r2, #136	; 0x88
 80063b0:	0212      	lsls	r2, r2, #8
 80063b2:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0018      	movs	r0, r3
 80063b8:	f003 fdc8 	bl	8009f4c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2229      	movs	r2, #41	; 0x29
 80063c0:	2102      	movs	r1, #2
 80063c2:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	22ca      	movs	r2, #202	; 0xca
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2253      	movs	r2, #83	; 0x53
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80063d4:	250f      	movs	r5, #15
 80063d6:	197c      	adds	r4, r7, r5
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0018      	movs	r0, r3
 80063dc:	f000 fa71 	bl	80068c2 <RTC_EnterInitMode>
 80063e0:	0003      	movs	r3, r0
 80063e2:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80063e4:	0028      	movs	r0, r5
 80063e6:	183b      	adds	r3, r7, r0
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d148      	bne.n	8006480 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	492b      	ldr	r1, [pc, #172]	; (80064a8 <HAL_RTC_Init+0x128>)
 80063fa:	400a      	ands	r2, r1
 80063fc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6999      	ldr	r1, [r3, #24]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6912      	ldr	r2, [r2, #16]
 8006424:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6919      	ldr	r1, [r3, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	041a      	lsls	r2, r3, #16
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800643a:	0005      	movs	r5, r0
 800643c:	183c      	adds	r4, r7, r0
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0018      	movs	r0, r3
 8006442:	f000 fa81 	bl	8006948 <RTC_ExitInitMode>
 8006446:	0003      	movs	r3, r0
 8006448:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800644a:	197b      	adds	r3, r7, r5
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	00d2      	lsls	r2, r2, #3
 800645e:	08d2      	lsrs	r2, r2, #3
 8006460:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6999      	ldr	r1, [r3, #24]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006488:	230f      	movs	r3, #15
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2229      	movs	r2, #41	; 0x29
 8006496:	2101      	movs	r1, #1
 8006498:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800649a:	230f      	movs	r3, #15
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	781b      	ldrb	r3, [r3, #0]
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b004      	add	sp, #16
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}
 80064a8:	fb8fffbf 	.word	0xfb8fffbf

080064ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064ac:	b5b0      	push	{r4, r5, r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2228      	movs	r2, #40	; 0x28
 80064bc:	5c9b      	ldrb	r3, [r3, r2]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_RTC_SetTime+0x1a>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e092      	b.n	80065ec <HAL_RTC_SetTime+0x140>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2228      	movs	r2, #40	; 0x28
 80064ca:	2101      	movs	r1, #1
 80064cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2229      	movs	r2, #41	; 0x29
 80064d2:	2102      	movs	r1, #2
 80064d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	22ca      	movs	r2, #202	; 0xca
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2253      	movs	r2, #83	; 0x53
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064e6:	2513      	movs	r5, #19
 80064e8:	197c      	adds	r4, r7, r5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 f9e8 	bl	80068c2 <RTC_EnterInitMode>
 80064f2:	0003      	movs	r3, r0
 80064f4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80064f6:	197b      	adds	r3, r7, r5
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d162      	bne.n	80065c4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d125      	bne.n	8006550 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2240      	movs	r2, #64	; 0x40
 800650c:	4013      	ands	r3, r2
 800650e:	d102      	bne.n	8006516 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 fa58 	bl	80069d0 <RTC_ByteToBcd2>
 8006520:	0003      	movs	r3, r0
 8006522:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 fa51 	bl	80069d0 <RTC_ByteToBcd2>
 800652e:	0003      	movs	r3, r0
 8006530:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006532:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	789b      	ldrb	r3, [r3, #2]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 fa49 	bl	80069d0 <RTC_ByteToBcd2>
 800653e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006540:	0022      	movs	r2, r4
 8006542:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e017      	b.n	8006580 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	4013      	ands	r3, r2
 800655a:	d102      	bne.n	8006562 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800656e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006574:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	78db      	ldrb	r3, [r3, #3]
 800657a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	491b      	ldr	r1, [pc, #108]	; (80065f4 <HAL_RTC_SetTime+0x148>)
 8006588:	400a      	ands	r2, r1
 800658a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4918      	ldr	r1, [pc, #96]	; (80065f8 <HAL_RTC_SetTime+0x14c>)
 8006598:	400a      	ands	r2, r1
 800659a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80065b4:	2313      	movs	r3, #19
 80065b6:	18fc      	adds	r4, r7, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f000 f9c4 	bl	8006948 <RTC_ExitInitMode>
 80065c0:	0003      	movs	r3, r0
 80065c2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80065cc:	2313      	movs	r3, #19
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2229      	movs	r2, #41	; 0x29
 80065da:	2101      	movs	r1, #1
 80065dc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2228      	movs	r2, #40	; 0x28
 80065e2:	2100      	movs	r1, #0
 80065e4:	5499      	strb	r1, [r3, r2]

  return status;
 80065e6:	2313      	movs	r3, #19
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	781b      	ldrb	r3, [r3, #0]
}
 80065ec:	0018      	movs	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b006      	add	sp, #24
 80065f2:	bdb0      	pop	{r4, r5, r7, pc}
 80065f4:	007f7f7f 	.word	0x007f7f7f
 80065f8:	fffbffff 	.word	0xfffbffff

080065fc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	045b      	lsls	r3, r3, #17
 800661a:	0c5a      	lsrs	r2, r3, #17
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_RTC_GetTime+0xb4>)
 8006628:	4013      	ands	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	b2db      	uxtb	r3, r3
 8006632:	223f      	movs	r2, #63	; 0x3f
 8006634:	4013      	ands	r3, r2
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	b2db      	uxtb	r3, r3
 8006642:	227f      	movs	r2, #127	; 0x7f
 8006644:	4013      	ands	r3, r2
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	227f      	movs	r2, #127	; 0x7f
 8006652:	4013      	ands	r3, r2
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	0d9b      	lsrs	r3, r3, #22
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2201      	movs	r2, #1
 8006662:	4013      	ands	r3, r2
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11a      	bne.n	80066a6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f9d3 	bl	8006a20 <RTC_Bcd2ToByte>
 800667a:	0003      	movs	r3, r0
 800667c:	001a      	movs	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	0018      	movs	r0, r3
 8006688:	f000 f9ca 	bl	8006a20 <RTC_Bcd2ToByte>
 800668c:	0003      	movs	r3, r0
 800668e:	001a      	movs	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	789b      	ldrb	r3, [r3, #2]
 8006698:	0018      	movs	r0, r3
 800669a:	f000 f9c1 	bl	8006a20 <RTC_Bcd2ToByte>
 800669e:	0003      	movs	r3, r0
 80066a0:	001a      	movs	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b006      	add	sp, #24
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	007f7f7f 	.word	0x007f7f7f

080066b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80066b4:	b5b0      	push	{r4, r5, r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2228      	movs	r2, #40	; 0x28
 80066c4:	5c9b      	ldrb	r3, [r3, r2]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_RTC_SetDate+0x1a>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e07e      	b.n	80067cc <HAL_RTC_SetDate+0x118>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2228      	movs	r2, #40	; 0x28
 80066d2:	2101      	movs	r1, #1
 80066d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2229      	movs	r2, #41	; 0x29
 80066da:	2102      	movs	r1, #2
 80066dc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10e      	bne.n	8006702 <HAL_RTC_SetDate+0x4e>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	001a      	movs	r2, r3
 80066ea:	2310      	movs	r3, #16
 80066ec:	4013      	ands	r3, r2
 80066ee:	d008      	beq.n	8006702 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2210      	movs	r2, #16
 80066f6:	4393      	bics	r3, r2
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	330a      	adds	r3, #10
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11c      	bne.n	8006742 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 f95f 	bl	80069d0 <RTC_ByteToBcd2>
 8006712:	0003      	movs	r3, r0
 8006714:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	0018      	movs	r0, r3
 800671c:	f000 f958 	bl	80069d0 <RTC_ByteToBcd2>
 8006720:	0003      	movs	r3, r0
 8006722:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006724:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	0018      	movs	r0, r3
 800672c:	f000 f950 	bl	80069d0 <RTC_ByteToBcd2>
 8006730:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006732:	0022      	movs	r2, r4
 8006734:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e00e      	b.n	8006760 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	78db      	ldrb	r3, [r3, #3]
 8006746:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800674e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006754:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	22ca      	movs	r2, #202	; 0xca
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2253      	movs	r2, #83	; 0x53
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006770:	2513      	movs	r5, #19
 8006772:	197c      	adds	r4, r7, r5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	0018      	movs	r0, r3
 8006778:	f000 f8a3 	bl	80068c2 <RTC_EnterInitMode>
 800677c:	0003      	movs	r3, r0
 800677e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006780:	0028      	movs	r0, r5
 8006782:	183b      	adds	r3, r7, r0
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10c      	bne.n	80067a4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4910      	ldr	r1, [pc, #64]	; (80067d4 <HAL_RTC_SetDate+0x120>)
 8006792:	400a      	ands	r2, r1
 8006794:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006796:	183c      	adds	r4, r7, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	0018      	movs	r0, r3
 800679c:	f000 f8d4 	bl	8006948 <RTC_ExitInitMode>
 80067a0:	0003      	movs	r3, r0
 80067a2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80067ac:	2313      	movs	r3, #19
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2229      	movs	r2, #41	; 0x29
 80067ba:	2101      	movs	r1, #1
 80067bc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2228      	movs	r2, #40	; 0x28
 80067c2:	2100      	movs	r1, #0
 80067c4:	5499      	strb	r1, [r3, r2]

  return status;
 80067c6:	2313      	movs	r3, #19
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b006      	add	sp, #24
 80067d2:	bdb0      	pop	{r4, r5, r7, pc}
 80067d4:	00ffff3f 	.word	0x00ffff3f

080067d8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <HAL_RTC_GetDate+0x98>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	0a1b      	lsrs	r3, r3, #8
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	221f      	movs	r2, #31
 8006802:	4013      	ands	r3, r2
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	223f      	movs	r2, #63	; 0x3f
 8006810:	4013      	ands	r3, r2
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	0b5b      	lsrs	r3, r3, #13
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2207      	movs	r2, #7
 8006820:	4013      	ands	r3, r2
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11a      	bne.n	8006864 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	78db      	ldrb	r3, [r3, #3]
 8006832:	0018      	movs	r0, r3
 8006834:	f000 f8f4 	bl	8006a20 <RTC_Bcd2ToByte>
 8006838:	0003      	movs	r3, r0
 800683a:	001a      	movs	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	0018      	movs	r0, r3
 8006846:	f000 f8eb 	bl	8006a20 <RTC_Bcd2ToByte>
 800684a:	0003      	movs	r3, r0
 800684c:	001a      	movs	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	789b      	ldrb	r3, [r3, #2]
 8006856:	0018      	movs	r0, r3
 8006858:	f000 f8e2 	bl	8006a20 <RTC_Bcd2ToByte>
 800685c:	0003      	movs	r3, r0
 800685e:	001a      	movs	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b006      	add	sp, #24
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	00ffff3f 	.word	0x00ffff3f

08006874 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	21a0      	movs	r1, #160	; 0xa0
 8006888:	438a      	bics	r2, r1
 800688a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800688c:	f7fc fe30 	bl	80034f0 <HAL_GetTick>
 8006890:	0003      	movs	r3, r0
 8006892:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006894:	e00a      	b.n	80068ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006896:	f7fc fe2b 	bl	80034f0 <HAL_GetTick>
 800689a:	0002      	movs	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	23fa      	movs	r3, #250	; 0xfa
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d901      	bls.n	80068ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e006      	b.n	80068ba <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	4013      	ands	r3, r2
 80068b6:	d0ee      	beq.n	8006896 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	0018      	movs	r0, r3
 80068bc:	46bd      	mov	sp, r7
 80068be:	b004      	add	sp, #16
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80068ca:	230f      	movs	r3, #15
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2240      	movs	r2, #64	; 0x40
 80068da:	4013      	ands	r3, r2
 80068dc:	d12c      	bne.n	8006938 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2180      	movs	r1, #128	; 0x80
 80068ea:	430a      	orrs	r2, r1
 80068ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80068ee:	f7fc fdff 	bl	80034f0 <HAL_GetTick>
 80068f2:	0003      	movs	r3, r0
 80068f4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068f6:	e014      	b.n	8006922 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80068f8:	f7fc fdfa 	bl	80034f0 <HAL_GetTick>
 80068fc:	0002      	movs	r2, r0
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	1ad2      	subs	r2, r2, r3
 8006902:	200f      	movs	r0, #15
 8006904:	183b      	adds	r3, r7, r0
 8006906:	1839      	adds	r1, r7, r0
 8006908:	7809      	ldrb	r1, [r1, #0]
 800690a:	7019      	strb	r1, [r3, #0]
 800690c:	23fa      	movs	r3, #250	; 0xfa
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	429a      	cmp	r2, r3
 8006912:	d906      	bls.n	8006922 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006914:	183b      	adds	r3, r7, r0
 8006916:	2203      	movs	r2, #3
 8006918:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2229      	movs	r2, #41	; 0x29
 800691e:	2103      	movs	r1, #3
 8006920:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2240      	movs	r2, #64	; 0x40
 800692a:	4013      	ands	r3, r2
 800692c:	d104      	bne.n	8006938 <RTC_EnterInitMode+0x76>
 800692e:	230f      	movs	r3, #15
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d1df      	bne.n	80068f8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006938:	230f      	movs	r3, #15
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	781b      	ldrb	r3, [r3, #0]
}
 800693e:	0018      	movs	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	b004      	add	sp, #16
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006950:	240f      	movs	r4, #15
 8006952:	193b      	adds	r3, r7, r4
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006958:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <RTC_ExitInitMode+0x84>)
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <RTC_ExitInitMode+0x84>)
 800695e:	2180      	movs	r1, #128	; 0x80
 8006960:	438a      	bics	r2, r1
 8006962:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <RTC_ExitInitMode+0x84>)
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2220      	movs	r2, #32
 800696a:	4013      	ands	r3, r2
 800696c:	d10d      	bne.n	800698a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	0018      	movs	r0, r3
 8006972:	f7ff ff7f 	bl	8006874 <HAL_RTC_WaitForSynchro>
 8006976:	1e03      	subs	r3, r0, #0
 8006978:	d021      	beq.n	80069be <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2229      	movs	r2, #41	; 0x29
 800697e:	2103      	movs	r1, #3
 8006980:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006982:	193b      	adds	r3, r7, r4
 8006984:	2203      	movs	r2, #3
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e019      	b.n	80069be <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800698a:	4b10      	ldr	r3, [pc, #64]	; (80069cc <RTC_ExitInitMode+0x84>)
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <RTC_ExitInitMode+0x84>)
 8006990:	2120      	movs	r1, #32
 8006992:	438a      	bics	r2, r1
 8006994:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff ff6b 	bl	8006874 <HAL_RTC_WaitForSynchro>
 800699e:	1e03      	subs	r3, r0, #0
 80069a0:	d007      	beq.n	80069b2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2229      	movs	r2, #41	; 0x29
 80069a6:	2103      	movs	r1, #3
 80069a8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80069aa:	230f      	movs	r3, #15
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	2203      	movs	r2, #3
 80069b0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <RTC_ExitInitMode+0x84>)
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <RTC_ExitInitMode+0x84>)
 80069b8:	2120      	movs	r1, #32
 80069ba:	430a      	orrs	r2, r1
 80069bc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80069be:	230f      	movs	r3, #15
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	781b      	ldrb	r3, [r3, #0]
}
 80069c4:	0018      	movs	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b005      	add	sp, #20
 80069ca:	bd90      	pop	{r4, r7, pc}
 80069cc:	40002800 	.word	0x40002800

080069d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	0002      	movs	r2, r0
 80069d8:	1dfb      	adds	r3, r7, #7
 80069da:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80069e0:	230b      	movs	r3, #11
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	1dfa      	adds	r2, r7, #7
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80069ea:	e008      	b.n	80069fe <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80069f2:	220b      	movs	r2, #11
 80069f4:	18bb      	adds	r3, r7, r2
 80069f6:	18ba      	adds	r2, r7, r2
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	3a0a      	subs	r2, #10
 80069fc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80069fe:	210b      	movs	r1, #11
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d8f1      	bhi.n	80069ec <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	187b      	adds	r3, r7, r1
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	b2db      	uxtb	r3, r3
}
 8006a18:	0018      	movs	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b004      	add	sp, #16
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	0002      	movs	r2, r0
 8006a28:	1dfb      	adds	r3, r7, #7
 8006a2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006a2c:	1dfb      	adds	r3, r7, #7
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	091b      	lsrs	r3, r3, #4
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	001a      	movs	r2, r3
 8006a36:	0013      	movs	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	1dfb      	adds	r3, r7, #7
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	210f      	movs	r1, #15
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	18d3      	adds	r3, r2, r3
 8006a50:	b2db      	uxtb	r3, r3
}
 8006a52:	0018      	movs	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b004      	add	sp, #16
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2228      	movs	r2, #40	; 0x28
 8006a6c:	5c9b      	ldrb	r3, [r3, r2]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006a72:	2302      	movs	r3, #2
 8006a74:	e082      	b.n	8006b7c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2228      	movs	r2, #40	; 0x28
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2229      	movs	r2, #41	; 0x29
 8006a82:	2102      	movs	r1, #2
 8006a84:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	22ca      	movs	r2, #202	; 0xca
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2253      	movs	r2, #83	; 0x53
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4938      	ldr	r1, [pc, #224]	; (8006b84 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8006aa2:	400a      	ands	r2, r1
 8006aa4:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ab6:	4b34      	ldr	r3, [pc, #208]	; (8006b88 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	4013      	ands	r3, r2
 8006abe:	d121      	bne.n	8006b04 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8006ac0:	f7fc fd16 	bl	80034f0 <HAL_GetTick>
 8006ac4:	0003      	movs	r3, r0
 8006ac6:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006ac8:	e016      	b.n	8006af8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006aca:	f7fc fd11 	bl	80034f0 <HAL_GetTick>
 8006ace:	0002      	movs	r2, r0
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	1ad2      	subs	r2, r2, r3
 8006ad4:	23fa      	movs	r3, #250	; 0xfa
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d90d      	bls.n	8006af8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	22ff      	movs	r2, #255	; 0xff
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2229      	movs	r2, #41	; 0x29
 8006ae8:	2103      	movs	r1, #3
 8006aea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2228      	movs	r2, #40	; 0x28
 8006af0:	2100      	movs	r1, #0
 8006af2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e041      	b.n	8006b7c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2204      	movs	r2, #4
 8006b00:	4013      	ands	r3, r2
 8006b02:	d0e2      	beq.n	8006aca <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2107      	movs	r1, #7
 8006b18:	438a      	bics	r2, r1
 8006b1a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6999      	ldr	r1, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006b2c:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006b2e:	2380      	movs	r3, #128	; 0x80
 8006b30:	58d3      	ldr	r3, [r2, r3]
 8006b32:	4916      	ldr	r1, [pc, #88]	; (8006b8c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006b34:	2280      	movs	r2, #128	; 0x80
 8006b36:	0312      	lsls	r2, r2, #12
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	2280      	movs	r2, #128	; 0x80
 8006b3c:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	01c9      	lsls	r1, r1, #7
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2180      	movs	r1, #128	; 0x80
 8006b5c:	00c9      	lsls	r1, r1, #3
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	22ff      	movs	r2, #255	; 0xff
 8006b68:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2229      	movs	r2, #41	; 0x29
 8006b6e:	2101      	movs	r1, #1
 8006b70:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2228      	movs	r2, #40	; 0x28
 8006b76:	2100      	movs	r1, #0
 8006b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b006      	add	sp, #24
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	fffffbff 	.word	0xfffffbff
 8006b88:	40002800 	.word	0x40002800
 8006b8c:	40021800 	.word	0x40021800

08006b90 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2104      	movs	r1, #4
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f000 f808 	bl	8006bcc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2229      	movs	r2, #41	; 0x29
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	5499      	strb	r1, [r3, r2]
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e0a8      	b.n	8006d40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	2382      	movs	r3, #130	; 0x82
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d009      	beq.n	8006c16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	61da      	str	r2, [r3, #28]
 8006c08:	e005      	b.n	8006c16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	225d      	movs	r2, #93	; 0x5d
 8006c20:	5c9b      	ldrb	r3, [r3, r2]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	225c      	movs	r2, #92	; 0x5c
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	0018      	movs	r0, r3
 8006c34:	f003 fa0e 	bl	800a054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	225d      	movs	r2, #93	; 0x5d
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2140      	movs	r1, #64	; 0x40
 8006c4c:	438a      	bics	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	23e0      	movs	r3, #224	; 0xe0
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d902      	bls.n	8006c62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e002      	b.n	8006c68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c62:	2380      	movs	r3, #128	; 0x80
 8006c64:	015b      	lsls	r3, r3, #5
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	23f0      	movs	r3, #240	; 0xf0
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d008      	beq.n	8006c86 <HAL_SPI_Init+0xaa>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	23e0      	movs	r3, #224	; 0xe0
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d002      	beq.n	8006c86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	2382      	movs	r3, #130	; 0x82
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	401a      	ands	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6899      	ldr	r1, [r3, #8]
 8006c94:	2384      	movs	r3, #132	; 0x84
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	400b      	ands	r3, r1
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	400b      	ands	r3, r1
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	2101      	movs	r1, #1
 8006cac:	400b      	ands	r3, r1
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6999      	ldr	r1, [r3, #24]
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	400b      	ands	r3, r1
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	2138      	movs	r1, #56	; 0x38
 8006cc2:	400b      	ands	r3, r1
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	400b      	ands	r3, r1
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	0011      	movs	r1, r2
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cd6:	2380      	movs	r3, #128	; 0x80
 8006cd8:	019b      	lsls	r3, r3, #6
 8006cda:	401a      	ands	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	2204      	movs	r2, #4
 8006cec:	401a      	ands	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	2110      	movs	r1, #16
 8006cf4:	400b      	ands	r3, r1
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	2108      	movs	r1, #8
 8006cfe:	400b      	ands	r3, r1
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68d9      	ldr	r1, [r3, #12]
 8006d06:	23f0      	movs	r3, #240	; 0xf0
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	400b      	ands	r3, r1
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	0011      	movs	r1, r2
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	015b      	lsls	r3, r3, #5
 8006d16:	401a      	ands	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69da      	ldr	r2, [r3, #28]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4907      	ldr	r1, [pc, #28]	; (8006d48 <HAL_SPI_Init+0x16c>)
 8006d2c:	400a      	ands	r2, r1
 8006d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	225d      	movs	r2, #93	; 0x5d
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b004      	add	sp, #16
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	fffff7ff 	.word	0xfffff7ff

08006d4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	1dbb      	adds	r3, r7, #6
 8006d5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d5c:	231f      	movs	r3, #31
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	225c      	movs	r2, #92	; 0x5c
 8006d68:	5c9b      	ldrb	r3, [r3, r2]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_SPI_Transmit+0x26>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e140      	b.n	8006ff4 <HAL_SPI_Transmit+0x2a8>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	225c      	movs	r2, #92	; 0x5c
 8006d76:	2101      	movs	r1, #1
 8006d78:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d7a:	f7fc fbb9 	bl	80034f0 <HAL_GetTick>
 8006d7e:	0003      	movs	r3, r0
 8006d80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d82:	2316      	movs	r3, #22
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	1dba      	adds	r2, r7, #6
 8006d88:	8812      	ldrh	r2, [r2, #0]
 8006d8a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	225d      	movs	r2, #93	; 0x5d
 8006d90:	5c9b      	ldrb	r3, [r3, r2]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d004      	beq.n	8006da2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006d98:	231f      	movs	r3, #31
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006da0:	e11d      	b.n	8006fde <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_SPI_Transmit+0x64>
 8006da8:	1dbb      	adds	r3, r7, #6
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006db0:	231f      	movs	r3, #31
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006db8:	e111      	b.n	8006fde <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	225d      	movs	r2, #93	; 0x5d
 8006dbe:	2103      	movs	r1, #3
 8006dc0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1dba      	adds	r2, r7, #6
 8006dd2:	8812      	ldrh	r2, [r2, #0]
 8006dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1dba      	adds	r2, r7, #6
 8006dda:	8812      	ldrh	r2, [r2, #0]
 8006ddc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2244      	movs	r2, #68	; 0x44
 8006de8:	2100      	movs	r1, #0
 8006dea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2246      	movs	r2, #70	; 0x46
 8006df0:	2100      	movs	r1, #0
 8006df2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d110      	bne.n	8006e2e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2140      	movs	r1, #64	; 0x40
 8006e18:	438a      	bics	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2180      	movs	r1, #128	; 0x80
 8006e28:	01c9      	lsls	r1, r1, #7
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	4013      	ands	r3, r2
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d007      	beq.n	8006e4c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2140      	movs	r1, #64	; 0x40
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	23e0      	movs	r3, #224	; 0xe0
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d94e      	bls.n	8006ef6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <HAL_SPI_Transmit+0x11e>
 8006e60:	2316      	movs	r3, #22
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d13f      	bne.n	8006eea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	881a      	ldrh	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	1c9a      	adds	r2, r3, #2
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e8e:	e02c      	b.n	8006eea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2202      	movs	r2, #2
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d112      	bne.n	8006ec4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ec2:	e012      	b.n	8006eea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec4:	f7fc fb14 	bl	80034f0 <HAL_GetTick>
 8006ec8:	0002      	movs	r2, r0
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d802      	bhi.n	8006eda <HAL_SPI_Transmit+0x18e>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <HAL_SPI_Transmit+0x194>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006ee0:	231f      	movs	r3, #31
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	701a      	strb	r2, [r3, #0]
          goto error;
 8006ee8:	e079      	b.n	8006fde <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1cd      	bne.n	8006e90 <HAL_SPI_Transmit+0x144>
 8006ef4:	e04f      	b.n	8006f96 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <HAL_SPI_Transmit+0x1bc>
 8006efe:	2316      	movs	r3, #22
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d141      	bne.n	8006f8c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	330c      	adds	r3, #12
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006f2e:	e02d      	b.n	8006f8c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2202      	movs	r2, #2
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d113      	bne.n	8006f66 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f64:	e012      	b.n	8006f8c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f66:	f7fc fac3 	bl	80034f0 <HAL_GetTick>
 8006f6a:	0002      	movs	r2, r0
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d802      	bhi.n	8006f7c <HAL_SPI_Transmit+0x230>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	d102      	bne.n	8006f82 <HAL_SPI_Transmit+0x236>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006f82:	231f      	movs	r3, #31
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2203      	movs	r2, #3
 8006f88:	701a      	strb	r2, [r3, #0]
          goto error;
 8006f8a:	e028      	b.n	8006fde <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1cc      	bne.n	8006f30 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 f95d 	bl	800725c <SPI_EndRxTxTransaction>
 8006fa2:	1e03      	subs	r3, r0, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006fd2:	231f      	movs	r3, #31
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e000      	b.n	8006fde <HAL_SPI_Transmit+0x292>
  }

error:
 8006fdc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	225d      	movs	r2, #93	; 0x5d
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	225c      	movs	r2, #92	; 0x5c
 8006fea:	2100      	movs	r1, #0
 8006fec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006fee:	231f      	movs	r3, #31
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	781b      	ldrb	r3, [r3, #0]
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b008      	add	sp, #32
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	1dfb      	adds	r3, r7, #7
 800700a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800700c:	f7fc fa70 	bl	80034f0 <HAL_GetTick>
 8007010:	0002      	movs	r2, r0
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	18d3      	adds	r3, r2, r3
 800701a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800701c:	f7fc fa68 	bl	80034f0 <HAL_GetTick>
 8007020:	0003      	movs	r3, r0
 8007022:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007024:	4b3a      	ldr	r3, [pc, #232]	; (8007110 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	015b      	lsls	r3, r3, #5
 800702a:	0d1b      	lsrs	r3, r3, #20
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	4353      	muls	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007032:	e058      	b.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	3301      	adds	r3, #1
 8007038:	d055      	beq.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800703a:	f7fc fa59 	bl	80034f0 <HAL_GetTick>
 800703e:	0002      	movs	r2, r0
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	429a      	cmp	r2, r3
 8007048:	d902      	bls.n	8007050 <SPI_WaitFlagStateUntilTimeout+0x54>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d142      	bne.n	80070d6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	21e0      	movs	r1, #224	; 0xe0
 800705c:	438a      	bics	r2, r1
 800705e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	2382      	movs	r3, #130	; 0x82
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	d113      	bne.n	8007094 <SPI_WaitFlagStateUntilTimeout+0x98>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	2380      	movs	r3, #128	; 0x80
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	429a      	cmp	r2, r3
 8007076:	d005      	beq.n	8007084 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	429a      	cmp	r2, r3
 8007082:	d107      	bne.n	8007094 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2140      	movs	r1, #64	; 0x40
 8007090:	438a      	bics	r2, r1
 8007092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007098:	2380      	movs	r3, #128	; 0x80
 800709a:	019b      	lsls	r3, r3, #6
 800709c:	429a      	cmp	r2, r3
 800709e:	d110      	bne.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	491a      	ldr	r1, [pc, #104]	; (8007114 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80070ac:	400a      	ands	r2, r1
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	0189      	lsls	r1, r1, #6
 80070be:	430a      	orrs	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	225d      	movs	r2, #93	; 0x5d
 80070c6:	2101      	movs	r1, #1
 80070c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	225c      	movs	r2, #92	; 0x5c
 80070ce:	2100      	movs	r1, #0
 80070d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e017      	b.n	8007106 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	425a      	negs	r2, r3
 80070f6:	4153      	adcs	r3, r2
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	001a      	movs	r2, r3
 80070fc:	1dfb      	adds	r3, r7, #7
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d197      	bne.n	8007034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b008      	add	sp, #32
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	20000030 	.word	0x20000030
 8007114:	ffffdfff 	.word	0xffffdfff

08007118 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007126:	2317      	movs	r3, #23
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800712e:	f7fc f9df 	bl	80034f0 <HAL_GetTick>
 8007132:	0002      	movs	r2, r0
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	18d3      	adds	r3, r2, r3
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800713e:	f7fc f9d7 	bl	80034f0 <HAL_GetTick>
 8007142:	0003      	movs	r3, r0
 8007144:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800714e:	4b41      	ldr	r3, [pc, #260]	; (8007254 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	0013      	movs	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	189b      	adds	r3, r3, r2
 8007158:	00da      	lsls	r2, r3, #3
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	0d1b      	lsrs	r3, r3, #20
 800715e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007160:	4353      	muls	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007164:	e068      	b.n	8007238 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	23c0      	movs	r3, #192	; 0xc0
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	429a      	cmp	r2, r3
 800716e:	d10a      	bne.n	8007186 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d107      	bne.n	8007186 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	2117      	movs	r1, #23
 800717e:	187b      	adds	r3, r7, r1
 8007180:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007182:	187b      	adds	r3, r7, r1
 8007184:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	d055      	beq.n	8007238 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800718c:	f7fc f9b0 	bl	80034f0 <HAL_GetTick>
 8007190:	0002      	movs	r2, r0
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	429a      	cmp	r2, r3
 800719a:	d902      	bls.n	80071a2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d142      	bne.n	8007228 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	21e0      	movs	r1, #224	; 0xe0
 80071ae:	438a      	bics	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	2382      	movs	r3, #130	; 0x82
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d113      	bne.n	80071e6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	2380      	movs	r3, #128	; 0x80
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d005      	beq.n	80071d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d107      	bne.n	80071e6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2140      	movs	r1, #64	; 0x40
 80071e2:	438a      	bics	r2, r1
 80071e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ea:	2380      	movs	r3, #128	; 0x80
 80071ec:	019b      	lsls	r3, r3, #6
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d110      	bne.n	8007214 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4916      	ldr	r1, [pc, #88]	; (8007258 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80071fe:	400a      	ands	r2, r1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	0189      	lsls	r1, r1, #6
 8007210:	430a      	orrs	r2, r1
 8007212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	225d      	movs	r2, #93	; 0x5d
 8007218:	2101      	movs	r1, #1
 800721a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	225c      	movs	r2, #92	; 0x5c
 8007220:	2100      	movs	r1, #0
 8007222:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e010      	b.n	800724a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	3b01      	subs	r3, #1
 8007236:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d18e      	bne.n	8007166 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	0018      	movs	r0, r3
 800724c:	46bd      	mov	sp, r7
 800724e:	b00a      	add	sp, #40	; 0x28
 8007250:	bd80      	pop	{r7, pc}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	20000030 	.word	0x20000030
 8007258:	ffffdfff 	.word	0xffffdfff

0800725c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	23c0      	movs	r3, #192	; 0xc0
 800726c:	0159      	lsls	r1, r3, #5
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	0013      	movs	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	f7ff ff4e 	bl	8007118 <SPI_WaitFifoStateUntilTimeout>
 800727c:	1e03      	subs	r3, r0, #0
 800727e:	d007      	beq.n	8007290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007284:	2220      	movs	r2, #32
 8007286:	431a      	orrs	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e027      	b.n	80072e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	0013      	movs	r3, r2
 800729a:	2200      	movs	r2, #0
 800729c:	2180      	movs	r1, #128	; 0x80
 800729e:	f7ff fead 	bl	8006ffc <SPI_WaitFlagStateUntilTimeout>
 80072a2:	1e03      	subs	r3, r0, #0
 80072a4:	d007      	beq.n	80072b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072aa:	2220      	movs	r2, #32
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e014      	b.n	80072e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	23c0      	movs	r3, #192	; 0xc0
 80072ba:	00d9      	lsls	r1, r3, #3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	0013      	movs	r3, r2
 80072c4:	2200      	movs	r2, #0
 80072c6:	f7ff ff27 	bl	8007118 <SPI_WaitFifoStateUntilTimeout>
 80072ca:	1e03      	subs	r3, r0, #0
 80072cc:	d007      	beq.n	80072de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d2:	2220      	movs	r2, #32
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e000      	b.n	80072e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b004      	add	sp, #16
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e04a      	b.n	8007390 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	223d      	movs	r2, #61	; 0x3d
 80072fe:	5c9b      	ldrb	r3, [r3, r2]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d107      	bne.n	8007316 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	223c      	movs	r2, #60	; 0x3c
 800730a:	2100      	movs	r1, #0
 800730c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	0018      	movs	r0, r3
 8007312:	f003 f8bb 	bl	800a48c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	223d      	movs	r2, #61	; 0x3d
 800731a:	2102      	movs	r1, #2
 800731c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3304      	adds	r3, #4
 8007326:	0019      	movs	r1, r3
 8007328:	0010      	movs	r0, r2
 800732a:	f000 faaf 	bl	800788c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2248      	movs	r2, #72	; 0x48
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223e      	movs	r2, #62	; 0x3e
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	223f      	movs	r2, #63	; 0x3f
 8007342:	2101      	movs	r1, #1
 8007344:	5499      	strb	r1, [r3, r2]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2240      	movs	r2, #64	; 0x40
 800734a:	2101      	movs	r1, #1
 800734c:	5499      	strb	r1, [r3, r2]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2241      	movs	r2, #65	; 0x41
 8007352:	2101      	movs	r1, #1
 8007354:	5499      	strb	r1, [r3, r2]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2242      	movs	r2, #66	; 0x42
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2243      	movs	r2, #67	; 0x43
 8007362:	2101      	movs	r1, #1
 8007364:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2244      	movs	r2, #68	; 0x44
 800736a:	2101      	movs	r1, #1
 800736c:	5499      	strb	r1, [r3, r2]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2245      	movs	r2, #69	; 0x45
 8007372:	2101      	movs	r1, #1
 8007374:	5499      	strb	r1, [r3, r2]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2246      	movs	r2, #70	; 0x46
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2247      	movs	r2, #71	; 0x47
 8007382:	2101      	movs	r1, #1
 8007384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	223d      	movs	r2, #61	; 0x3d
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	0018      	movs	r0, r3
 8007392:	46bd      	mov	sp, r7
 8007394:	b002      	add	sp, #8
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	223d      	movs	r2, #61	; 0x3d
 80073a4:	5c9b      	ldrb	r3, [r3, r2]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e042      	b.n	8007436 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	223d      	movs	r2, #61	; 0x3d
 80073b4:	2102      	movs	r1, #2
 80073b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2101      	movs	r1, #1
 80073c4:	430a      	orrs	r2, r1
 80073c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <HAL_TIM_Base_Start_IT+0xa8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00f      	beq.n	80073f2 <HAL_TIM_Base_Start_IT+0x5a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	2380      	movs	r3, #128	; 0x80
 80073d8:	05db      	lsls	r3, r3, #23
 80073da:	429a      	cmp	r2, r3
 80073dc:	d009      	beq.n	80073f2 <HAL_TIM_Base_Start_IT+0x5a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a18      	ldr	r2, [pc, #96]	; (8007444 <HAL_TIM_Base_Start_IT+0xac>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d004      	beq.n	80073f2 <HAL_TIM_Base_Start_IT+0x5a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <HAL_TIM_Base_Start_IT+0xb0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d116      	bne.n	8007420 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	4a14      	ldr	r2, [pc, #80]	; (800744c <HAL_TIM_Base_Start_IT+0xb4>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b06      	cmp	r3, #6
 8007402:	d016      	beq.n	8007432 <HAL_TIM_Base_Start_IT+0x9a>
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	025b      	lsls	r3, r3, #9
 800740a:	429a      	cmp	r2, r3
 800740c:	d011      	beq.n	8007432 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2101      	movs	r1, #1
 800741a:	430a      	orrs	r2, r1
 800741c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	e008      	b.n	8007432 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2101      	movs	r1, #1
 800742c:	430a      	orrs	r2, r1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e000      	b.n	8007434 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007432:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	0018      	movs	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	b004      	add	sp, #16
 800743c:	bd80      	pop	{r7, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40000400 	.word	0x40000400
 8007448:	40014000 	.word	0x40014000
 800744c:	00010007 	.word	0x00010007

08007450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2202      	movs	r2, #2
 8007460:	4013      	ands	r3, r2
 8007462:	2b02      	cmp	r3, #2
 8007464:	d124      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2202      	movs	r2, #2
 800746e:	4013      	ands	r3, r2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d11d      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2203      	movs	r2, #3
 800747a:	4252      	negs	r2, r2
 800747c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2203      	movs	r2, #3
 800748c:	4013      	ands	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f9e2 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 8007498:	e007      	b.n	80074aa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	0018      	movs	r0, r3
 800749e:	f000 f9d5 	bl	800784c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f000 f9e1 	bl	800786c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2204      	movs	r2, #4
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d125      	bne.n	800750a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2204      	movs	r2, #4
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d11e      	bne.n	800750a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2205      	movs	r2, #5
 80074d2:	4252      	negs	r2, r2
 80074d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	23c0      	movs	r3, #192	; 0xc0
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4013      	ands	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	0018      	movs	r0, r3
 80074ee:	f000 f9b5 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 80074f2:	e007      	b.n	8007504 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f000 f9a8 	bl	800784c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	0018      	movs	r0, r3
 8007500:	f000 f9b4 	bl	800786c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2208      	movs	r2, #8
 8007512:	4013      	ands	r3, r2
 8007514:	2b08      	cmp	r3, #8
 8007516:	d124      	bne.n	8007562 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2208      	movs	r2, #8
 8007520:	4013      	ands	r3, r2
 8007522:	2b08      	cmp	r3, #8
 8007524:	d11d      	bne.n	8007562 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2209      	movs	r2, #9
 800752c:	4252      	negs	r2, r2
 800752e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2204      	movs	r2, #4
 8007534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	2203      	movs	r2, #3
 800753e:	4013      	ands	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	0018      	movs	r0, r3
 8007546:	f000 f989 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 800754a:	e007      	b.n	800755c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0018      	movs	r0, r3
 8007550:	f000 f97c 	bl	800784c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	0018      	movs	r0, r3
 8007558:	f000 f988 	bl	800786c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2210      	movs	r2, #16
 800756a:	4013      	ands	r3, r2
 800756c:	2b10      	cmp	r3, #16
 800756e:	d125      	bne.n	80075bc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2210      	movs	r2, #16
 8007578:	4013      	ands	r3, r2
 800757a:	2b10      	cmp	r3, #16
 800757c:	d11e      	bne.n	80075bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2211      	movs	r2, #17
 8007584:	4252      	negs	r2, r2
 8007586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2208      	movs	r2, #8
 800758c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	23c0      	movs	r3, #192	; 0xc0
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4013      	ands	r3, r2
 800759a:	d004      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	0018      	movs	r0, r3
 80075a0:	f000 f95c 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 80075a4:	e007      	b.n	80075b6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 f94f 	bl	800784c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f95b 	bl	800786c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2201      	movs	r2, #1
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10f      	bne.n	80075ea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	4013      	ands	r3, r2
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d108      	bne.n	80075ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2202      	movs	r2, #2
 80075de:	4252      	negs	r2, r2
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	0018      	movs	r0, r3
 80075e6:	f007 f8f7 	bl	800e7d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b80      	cmp	r3, #128	; 0x80
 80075f6:	d10f      	bne.n	8007618 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2280      	movs	r2, #128	; 0x80
 8007600:	4013      	ands	r3, r2
 8007602:	2b80      	cmp	r3, #128	; 0x80
 8007604:	d108      	bne.n	8007618 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2281      	movs	r2, #129	; 0x81
 800760c:	4252      	negs	r2, r2
 800760e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	0018      	movs	r0, r3
 8007614:	f000 facc 	bl	8007bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	401a      	ands	r2, r3
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	429a      	cmp	r2, r3
 800762a:	d10e      	bne.n	800764a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2280      	movs	r2, #128	; 0x80
 8007634:	4013      	ands	r3, r2
 8007636:	2b80      	cmp	r3, #128	; 0x80
 8007638:	d107      	bne.n	800764a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_TIM_IRQHandler+0x260>)
 8007640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	0018      	movs	r0, r3
 8007646:	f000 fabb 	bl	8007bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2240      	movs	r2, #64	; 0x40
 8007652:	4013      	ands	r3, r2
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	d10f      	bne.n	8007678 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	4013      	ands	r3, r2
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d108      	bne.n	8007678 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2241      	movs	r2, #65	; 0x41
 800766c:	4252      	negs	r2, r2
 800766e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	0018      	movs	r0, r3
 8007674:	f000 f902 	bl	800787c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2220      	movs	r2, #32
 8007680:	4013      	ands	r3, r2
 8007682:	2b20      	cmp	r3, #32
 8007684:	d10f      	bne.n	80076a6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2220      	movs	r2, #32
 800768e:	4013      	ands	r3, r2
 8007690:	2b20      	cmp	r3, #32
 8007692:	d108      	bne.n	80076a6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2221      	movs	r2, #33	; 0x21
 800769a:	4252      	negs	r2, r2
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0018      	movs	r0, r3
 80076a2:	f000 fa7d 	bl	8007ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b002      	add	sp, #8
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	fffffeff 	.word	0xfffffeff

080076b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	223c      	movs	r2, #60	; 0x3c
 80076c2:	5c9b      	ldrb	r3, [r3, r2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIM_ConfigClockSource+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e0b7      	b.n	800783c <HAL_TIM_ConfigClockSource+0x188>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	223c      	movs	r2, #60	; 0x3c
 80076d0:	2101      	movs	r1, #1
 80076d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	223d      	movs	r2, #61	; 0x3d
 80076d8:	2102      	movs	r1, #2
 80076da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a57      	ldr	r2, [pc, #348]	; (8007844 <HAL_TIM_ConfigClockSource+0x190>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a56      	ldr	r2, [pc, #344]	; (8007848 <HAL_TIM_ConfigClockSource+0x194>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2280      	movs	r2, #128	; 0x80
 8007702:	0192      	lsls	r2, r2, #6
 8007704:	4293      	cmp	r3, r2
 8007706:	d040      	beq.n	800778a <HAL_TIM_ConfigClockSource+0xd6>
 8007708:	2280      	movs	r2, #128	; 0x80
 800770a:	0192      	lsls	r2, r2, #6
 800770c:	4293      	cmp	r3, r2
 800770e:	d900      	bls.n	8007712 <HAL_TIM_ConfigClockSource+0x5e>
 8007710:	e088      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 8007712:	2280      	movs	r2, #128	; 0x80
 8007714:	0152      	lsls	r2, r2, #5
 8007716:	4293      	cmp	r3, r2
 8007718:	d100      	bne.n	800771c <HAL_TIM_ConfigClockSource+0x68>
 800771a:	e085      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x174>
 800771c:	2280      	movs	r2, #128	; 0x80
 800771e:	0152      	lsls	r2, r2, #5
 8007720:	4293      	cmp	r3, r2
 8007722:	d900      	bls.n	8007726 <HAL_TIM_ConfigClockSource+0x72>
 8007724:	e07e      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 8007726:	2b70      	cmp	r3, #112	; 0x70
 8007728:	d018      	beq.n	800775c <HAL_TIM_ConfigClockSource+0xa8>
 800772a:	d900      	bls.n	800772e <HAL_TIM_ConfigClockSource+0x7a>
 800772c:	e07a      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 800772e:	2b60      	cmp	r3, #96	; 0x60
 8007730:	d04f      	beq.n	80077d2 <HAL_TIM_ConfigClockSource+0x11e>
 8007732:	d900      	bls.n	8007736 <HAL_TIM_ConfigClockSource+0x82>
 8007734:	e076      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 8007736:	2b50      	cmp	r3, #80	; 0x50
 8007738:	d03b      	beq.n	80077b2 <HAL_TIM_ConfigClockSource+0xfe>
 800773a:	d900      	bls.n	800773e <HAL_TIM_ConfigClockSource+0x8a>
 800773c:	e072      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d057      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x13e>
 8007742:	d900      	bls.n	8007746 <HAL_TIM_ConfigClockSource+0x92>
 8007744:	e06e      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 8007746:	2b30      	cmp	r3, #48	; 0x30
 8007748:	d063      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x15e>
 800774a:	d86b      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d060      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x15e>
 8007750:	d868      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d05d      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x15e>
 8007756:	2b10      	cmp	r3, #16
 8007758:	d05b      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800775a:	e063      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	6899      	ldr	r1, [r3, #8]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f000 f98a 	bl	8007a84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2277      	movs	r2, #119	; 0x77
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e04f      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6899      	ldr	r1, [r3, #8]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f000 f973 	bl	8007a84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2180      	movs	r1, #128	; 0x80
 80077aa:	01c9      	lsls	r1, r1, #7
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
      break;
 80077b0:	e03b      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6859      	ldr	r1, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	001a      	movs	r2, r3
 80077c0:	f000 f8e4 	bl	800798c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2150      	movs	r1, #80	; 0x50
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 f93e 	bl	8007a4c <TIM_ITRx_SetConfig>
      break;
 80077d0:	e02b      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6859      	ldr	r1, [r3, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	001a      	movs	r2, r3
 80077e0:	f000 f902 	bl	80079e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2160      	movs	r1, #96	; 0x60
 80077ea:	0018      	movs	r0, r3
 80077ec:	f000 f92e 	bl	8007a4c <TIM_ITRx_SetConfig>
      break;
 80077f0:	e01b      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	001a      	movs	r2, r3
 8007800:	f000 f8c4 	bl	800798c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2140      	movs	r1, #64	; 0x40
 800780a:	0018      	movs	r0, r3
 800780c:	f000 f91e 	bl	8007a4c <TIM_ITRx_SetConfig>
      break;
 8007810:	e00b      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	0019      	movs	r1, r3
 800781c:	0010      	movs	r0, r2
 800781e:	f000 f915 	bl	8007a4c <TIM_ITRx_SetConfig>
        break;
 8007822:	e002      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	e000      	b.n	800782a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007828:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	223d      	movs	r2, #61	; 0x3d
 800782e:	2101      	movs	r1, #1
 8007830:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	223c      	movs	r2, #60	; 0x3c
 8007836:	2100      	movs	r1, #0
 8007838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	0018      	movs	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	b004      	add	sp, #16
 8007842:	bd80      	pop	{r7, pc}
 8007844:	ffceff88 	.word	0xffceff88
 8007848:	ffff00ff 	.word	0xffff00ff

0800784c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007864:	46c0      	nop			; (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007884:	46c0      	nop			; (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b002      	add	sp, #8
 800788a:	bd80      	pop	{r7, pc}

0800788c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a34      	ldr	r2, [pc, #208]	; (8007970 <TIM_Base_SetConfig+0xe4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d008      	beq.n	80078b6 <TIM_Base_SetConfig+0x2a>
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	2380      	movs	r3, #128	; 0x80
 80078a8:	05db      	lsls	r3, r3, #23
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d003      	beq.n	80078b6 <TIM_Base_SetConfig+0x2a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a30      	ldr	r2, [pc, #192]	; (8007974 <TIM_Base_SetConfig+0xe8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d108      	bne.n	80078c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2270      	movs	r2, #112	; 0x70
 80078ba:	4393      	bics	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a29      	ldr	r2, [pc, #164]	; (8007970 <TIM_Base_SetConfig+0xe4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d018      	beq.n	8007902 <TIM_Base_SetConfig+0x76>
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	2380      	movs	r3, #128	; 0x80
 80078d4:	05db      	lsls	r3, r3, #23
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d013      	beq.n	8007902 <TIM_Base_SetConfig+0x76>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a25      	ldr	r2, [pc, #148]	; (8007974 <TIM_Base_SetConfig+0xe8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_Base_SetConfig+0x76>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a24      	ldr	r2, [pc, #144]	; (8007978 <TIM_Base_SetConfig+0xec>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_Base_SetConfig+0x76>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a23      	ldr	r2, [pc, #140]	; (800797c <TIM_Base_SetConfig+0xf0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_Base_SetConfig+0x76>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a22      	ldr	r2, [pc, #136]	; (8007980 <TIM_Base_SetConfig+0xf4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_Base_SetConfig+0x76>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a21      	ldr	r2, [pc, #132]	; (8007984 <TIM_Base_SetConfig+0xf8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d108      	bne.n	8007914 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a20      	ldr	r2, [pc, #128]	; (8007988 <TIM_Base_SetConfig+0xfc>)
 8007906:	4013      	ands	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2280      	movs	r2, #128	; 0x80
 8007918:	4393      	bics	r3, r2
 800791a:	001a      	movs	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <TIM_Base_SetConfig+0xe4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_Base_SetConfig+0xce>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a0d      	ldr	r2, [pc, #52]	; (800797c <TIM_Base_SetConfig+0xf0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_Base_SetConfig+0xce>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a0c      	ldr	r2, [pc, #48]	; (8007980 <TIM_Base_SetConfig+0xf4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0xce>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <TIM_Base_SetConfig+0xf8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d103      	bne.n	8007962 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	615a      	str	r2, [r3, #20]
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b004      	add	sp, #16
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40000400 	.word	0x40000400
 8007978:	40002000 	.word	0x40002000
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800
 8007988:	fffffcff 	.word	0xfffffcff

0800798c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	2201      	movs	r2, #1
 80079a4:	4393      	bics	r3, r2
 80079a6:	001a      	movs	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	22f0      	movs	r2, #240	; 0xf0
 80079b6:	4393      	bics	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	220a      	movs	r2, #10
 80079c8:	4393      	bics	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	621a      	str	r2, [r3, #32]
}
 80079e0:	46c0      	nop			; (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b006      	add	sp, #24
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	2210      	movs	r2, #16
 80079fa:	4393      	bics	r3, r2
 80079fc:	001a      	movs	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <TIM_TI2_ConfigInputStage+0x60>)
 8007a12:	4013      	ands	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	031b      	lsls	r3, r3, #12
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	22a0      	movs	r2, #160	; 0xa0
 8007a24:	4393      	bics	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b006      	add	sp, #24
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	ffff0fff 	.word	0xffff0fff

08007a4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <TIM_ITRx_SetConfig+0x34>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	2207      	movs	r2, #7
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	609a      	str	r2, [r3, #8]
}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	b004      	add	sp, #16
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	ffcfff8f 	.word	0xffcfff8f

08007a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <TIM_ETR_SetConfig+0x3c>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	021a      	lsls	r2, r3, #8
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	609a      	str	r2, [r3, #8]
}
 8007ab8:	46c0      	nop			; (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b006      	add	sp, #24
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	ffff00ff 	.word	0xffff00ff

08007ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	223c      	movs	r2, #60	; 0x3c
 8007ad2:	5c9b      	ldrb	r3, [r3, r2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e055      	b.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	223c      	movs	r2, #60	; 0x3c
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	223d      	movs	r2, #61	; 0x3d
 8007ae8:	2102      	movs	r1, #2
 8007aea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a23      	ldr	r2, [pc, #140]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d108      	bne.n	8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2270      	movs	r2, #112	; 0x70
 8007b1c:	4393      	bics	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a16      	ldr	r2, [pc, #88]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d00f      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	05db      	lsls	r3, r3, #23
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d009      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d004      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a11      	ldr	r2, [pc, #68]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d10c      	bne.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2280      	movs	r2, #128	; 0x80
 8007b60:	4393      	bics	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	223d      	movs	r2, #61	; 0x3d
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	223c      	movs	r2, #60	; 0x3c
 8007b82:	2100      	movs	r1, #0
 8007b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	0018      	movs	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b004      	add	sp, #16
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	ff0fffff 	.word	0xff0fffff
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40014000 	.word	0x40014000

08007ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bb8:	46c0      	nop			; (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bc8:	46c0      	nop			; (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <DEV_SPI_WriteByte>:
#include "Display_Config/DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	1dfb      	adds	r3, r7, #7
 8007bda:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8007bdc:	23fa      	movs	r3, #250	; 0xfa
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	1df9      	adds	r1, r7, #7
 8007be2:	4804      	ldr	r0, [pc, #16]	; (8007bf4 <DEV_SPI_WriteByte+0x24>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	f7ff f8b1 	bl	8006d4c <HAL_SPI_Transmit>
}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	46bd      	mov	sp, r7
 8007bee:	b002      	add	sp, #8
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	200006f4 	.word	0x200006f4

08007bf8 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	0099      	lsls	r1, r3, #2
 8007c00:	23a0      	movs	r3, #160	; 0xa0
 8007c02:	05db      	lsls	r3, r3, #23
 8007c04:	2200      	movs	r2, #0
 8007c06:	0018      	movs	r0, r3
 8007c08:	f7fc fe9f 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	0059      	lsls	r1, r3, #1
 8007c10:	23a0      	movs	r3, #160	; 0xa0
 8007c12:	05db      	lsls	r3, r3, #23
 8007c14:	2200      	movs	r2, #0
 8007c16:	0018      	movs	r0, r3
 8007c18:	f7fc fe97 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8007c1c:	2380      	movs	r3, #128	; 0x80
 8007c1e:	00d9      	lsls	r1, r3, #3
 8007c20:	23a0      	movs	r3, #160	; 0xa0
 8007c22:	05db      	lsls	r3, r3, #23
 8007c24:	2201      	movs	r2, #1
 8007c26:	0018      	movs	r0, r3
 8007c28:	f7fc fe8f 	bl	800494a <HAL_GPIO_WritePin>
		return 0;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	0018      	movs	r0, r3
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8007c38:	2380      	movs	r3, #128	; 0x80
 8007c3a:	00d9      	lsls	r1, r3, #3
 8007c3c:	23a0      	movs	r3, #160	; 0xa0
 8007c3e:	05db      	lsls	r3, r3, #23
 8007c40:	2201      	movs	r2, #1
 8007c42:	0018      	movs	r0, r3
 8007c44:	f7fc fe81 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8007c48:	20c8      	movs	r0, #200	; 0xc8
 8007c4a:	f7fb fc5b 	bl	8003504 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8007c4e:	2380      	movs	r3, #128	; 0x80
 8007c50:	00d9      	lsls	r1, r3, #3
 8007c52:	23a0      	movs	r3, #160	; 0xa0
 8007c54:	05db      	lsls	r3, r3, #23
 8007c56:	2200      	movs	r2, #0
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f7fc fe76 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8007c5e:	2002      	movs	r0, #2
 8007c60:	f7fb fc50 	bl	8003504 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8007c64:	2380      	movs	r3, #128	; 0x80
 8007c66:	00d9      	lsls	r1, r3, #3
 8007c68:	23a0      	movs	r3, #160	; 0xa0
 8007c6a:	05db      	lsls	r3, r3, #23
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f7fc fe6b 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8007c74:	20c8      	movs	r0, #200	; 0xc8
 8007c76:	f7fb fc45 	bl	8003504 <HAL_Delay>
}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	0002      	movs	r2, r0
 8007c88:	1dfb      	adds	r3, r7, #7
 8007c8a:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	0099      	lsls	r1, r3, #2
 8007c90:	23a0      	movs	r3, #160	; 0xa0
 8007c92:	05db      	lsls	r3, r3, #23
 8007c94:	2200      	movs	r2, #0
 8007c96:	0018      	movs	r0, r3
 8007c98:	f7fc fe57 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8007c9c:	2380      	movs	r3, #128	; 0x80
 8007c9e:	0059      	lsls	r1, r3, #1
 8007ca0:	23a0      	movs	r3, #160	; 0xa0
 8007ca2:	05db      	lsls	r3, r3, #23
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f7fc fe4f 	bl	800494a <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8007cac:	1dfb      	adds	r3, r7, #7
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f7ff ff8d 	bl	8007bd0 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	0059      	lsls	r1, r3, #1
 8007cba:	23a0      	movs	r3, #160	; 0xa0
 8007cbc:	05db      	lsls	r3, r3, #23
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7fc fe42 	bl	800494a <HAL_GPIO_WritePin>
}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	0002      	movs	r2, r0
 8007cd6:	1dfb      	adds	r3, r7, #7
 8007cd8:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8007cda:	2380      	movs	r3, #128	; 0x80
 8007cdc:	0099      	lsls	r1, r3, #2
 8007cde:	23a0      	movs	r3, #160	; 0xa0
 8007ce0:	05db      	lsls	r3, r3, #23
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7fc fe30 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	0059      	lsls	r1, r3, #1
 8007cee:	23a0      	movs	r3, #160	; 0xa0
 8007cf0:	05db      	lsls	r3, r3, #23
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f7fc fe28 	bl	800494a <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8007cfa:	1dfb      	adds	r3, r7, #7
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f7ff ff66 	bl	8007bd0 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	0059      	lsls	r1, r3, #1
 8007d08:	23a0      	movs	r3, #160	; 0xa0
 8007d0a:	05db      	lsls	r3, r3, #23
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f7fc fe1b 	bl	800494a <HAL_GPIO_WritePin>
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8007d20:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <EPD_1IN54_V2_ReadBusy+0x38>)
 8007d22:	0018      	movs	r0, r3
 8007d24:	f007 f898 	bl	800ee58 <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8007d28:	e002      	b.n	8007d30 <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8007d2a:	2064      	movs	r0, #100	; 0x64
 8007d2c:	f7fb fbea 	bl	8003504 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8007d30:	2380      	movs	r3, #128	; 0x80
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	23a0      	movs	r3, #160	; 0xa0
 8007d36:	05db      	lsls	r3, r3, #23
 8007d38:	0011      	movs	r1, r2
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f7fc fde8 	bl	8004910 <HAL_GPIO_ReadPin>
 8007d40:	0003      	movs	r3, r0
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d0f1      	beq.n	8007d2a <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 8007d46:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f007 f885 	bl	800ee58 <puts>
}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	08011538 	.word	0x08011538
 8007d58:	08011550 	.word	0x08011550

08007d5c <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8007d60:	2022      	movs	r0, #34	; 0x22
 8007d62:	f7ff ff8d 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 8007d66:	20f7      	movs	r0, #247	; 0xf7
 8007d68:	f7ff ffb1 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8007d6c:	2020      	movs	r0, #32
 8007d6e:	f7ff ff87 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8007d72:	f7ff ffd3 	bl	8007d1c <EPD_1IN54_V2_ReadBusy>
}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8007d80:	2022      	movs	r0, #34	; 0x22
 8007d82:	f7ff ff7d 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 8007d86:	20ff      	movs	r0, #255	; 0xff
 8007d88:	f7ff ffa1 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8007d8c:	2020      	movs	r0, #32
 8007d8e:	f7ff ff77 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8007d92:	f7ff ffc3 	bl	8007d1c <EPD_1IN54_V2_ReadBusy>
}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 8007da0:	f7ff ff48 	bl	8007c34 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 8007da4:	f7ff ffba 	bl	8007d1c <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 8007da8:	2012      	movs	r0, #18
 8007daa:	f7ff ff69 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8007dae:	f7ff ffb5 	bl	8007d1c <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 8007db2:	2001      	movs	r0, #1
 8007db4:	f7ff ff64 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 8007db8:	20c7      	movs	r0, #199	; 0xc7
 8007dba:	f7ff ff88 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f7ff ff85 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	f7ff ff82 	bl	8007cce <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 8007dca:	2011      	movs	r0, #17
 8007dcc:	f7ff ff58 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	f7ff ff7c 	bl	8007cce <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 8007dd6:	2044      	movs	r0, #68	; 0x44
 8007dd8:	f7ff ff52 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8007ddc:	2000      	movs	r0, #0
 8007dde:	f7ff ff76 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 8007de2:	2018      	movs	r0, #24
 8007de4:	f7ff ff73 	bl	8007cce <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 8007de8:	2045      	movs	r0, #69	; 0x45
 8007dea:	f7ff ff49 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 8007dee:	20c7      	movs	r0, #199	; 0xc7
 8007df0:	f7ff ff6d 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8007df4:	2000      	movs	r0, #0
 8007df6:	f7ff ff6a 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	f7ff ff67 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8007e00:	2000      	movs	r0, #0
 8007e02:	f7ff ff64 	bl	8007cce <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8007e06:	203c      	movs	r0, #60	; 0x3c
 8007e08:	f7ff ff3a 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	f7ff ff5e 	bl	8007cce <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 8007e12:	2018      	movs	r0, #24
 8007e14:	f7ff ff34 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8007e18:	2080      	movs	r0, #128	; 0x80
 8007e1a:	f7ff ff58 	bl	8007cce <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 8007e1e:	2022      	movs	r0, #34	; 0x22
 8007e20:	f7ff ff2e 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 8007e24:	20b1      	movs	r0, #177	; 0xb1
 8007e26:	f7ff ff52 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8007e2a:	2020      	movs	r0, #32
 8007e2c:	f7ff ff28 	bl	8007c80 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 8007e30:	204e      	movs	r0, #78	; 0x4e
 8007e32:	f7ff ff25 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8007e36:	2000      	movs	r0, #0
 8007e38:	f7ff ff49 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 8007e3c:	204f      	movs	r0, #79	; 0x4f
 8007e3e:	f7ff ff1f 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 8007e42:	20c7      	movs	r0, #199	; 0xc7
 8007e44:	f7ff ff43 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f7ff ff40 	bl	8007cce <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 8007e4e:	f7ff ff65 	bl	8007d1c <EPD_1IN54_V2_ReadBusy>
}
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8007e5e:	1cbb      	adds	r3, r7, #2
 8007e60:	2219      	movs	r2, #25
 8007e62:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8007e64:	003b      	movs	r3, r7
 8007e66:	22c8      	movs	r2, #200	; 0xc8
 8007e68:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 8007e6a:	2024      	movs	r0, #36	; 0x24
 8007e6c:	f7ff ff08 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8007e70:	1dbb      	adds	r3, r7, #6
 8007e72:	2200      	movs	r2, #0
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	e016      	b.n	8007ea6 <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 8007e78:	1d3b      	adds	r3, r7, #4
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	e007      	b.n	8007e90 <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 8007e80:	20ff      	movs	r0, #255	; 0xff
 8007e82:	f7ff ff24 	bl	8007cce <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8007e86:	1d3b      	adds	r3, r7, #4
 8007e88:	881a      	ldrh	r2, [r3, #0]
 8007e8a:	1d3b      	adds	r3, r7, #4
 8007e8c:	3201      	adds	r2, #1
 8007e8e:	801a      	strh	r2, [r3, #0]
 8007e90:	1d3a      	adds	r2, r7, #4
 8007e92:	1cbb      	adds	r3, r7, #2
 8007e94:	8812      	ldrh	r2, [r2, #0]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d3f1      	bcc.n	8007e80 <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 8007e9c:	1dbb      	adds	r3, r7, #6
 8007e9e:	881a      	ldrh	r2, [r3, #0]
 8007ea0:	1dbb      	adds	r3, r7, #6
 8007ea2:	3201      	adds	r2, #1
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	1dba      	adds	r2, r7, #6
 8007ea8:	003b      	movs	r3, r7
 8007eaa:	8812      	ldrh	r2, [r2, #0]
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d3e2      	bcc.n	8007e78 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 8007eb2:	f7ff ff53 	bl	8007d5c <EPD_1IN54_V2_TurnOnDisplay>
}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b002      	add	sp, #8
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 8007ebe:	b590      	push	{r4, r7, lr}
 8007ec0:	b087      	sub	sp, #28
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8007ec6:	2312      	movs	r3, #18
 8007ec8:	18fb      	adds	r3, r7, r3
 8007eca:	2219      	movs	r2, #25
 8007ecc:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8007ece:	2310      	movs	r3, #16
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	22c8      	movs	r2, #200	; 0xc8
 8007ed4:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8007eda:	2024      	movs	r0, #36	; 0x24
 8007edc:	f7ff fed0 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8007ee0:	2316      	movs	r3, #22
 8007ee2:	18fb      	adds	r3, r7, r3
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	e02a      	b.n	8007f40 <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8007eea:	2314      	movs	r3, #20
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	2200      	movs	r2, #0
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	e017      	b.n	8007f24 <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 8007ef4:	2414      	movs	r4, #20
 8007ef6:	193b      	adds	r3, r7, r4
 8007ef8:	881a      	ldrh	r2, [r3, #0]
 8007efa:	2316      	movs	r3, #22
 8007efc:	18fb      	adds	r3, r7, r3
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	2112      	movs	r1, #18
 8007f02:	1879      	adds	r1, r7, r1
 8007f04:	8809      	ldrh	r1, [r1, #0]
 8007f06:	434b      	muls	r3, r1
 8007f08:	18d3      	adds	r3, r2, r3
 8007f0a:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	18d3      	adds	r3, r2, r3
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	0018      	movs	r0, r3
 8007f16:	f7ff feda 	bl	8007cce <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8007f1a:	193b      	adds	r3, r7, r4
 8007f1c:	881a      	ldrh	r2, [r3, #0]
 8007f1e:	193b      	adds	r3, r7, r4
 8007f20:	3201      	adds	r2, #1
 8007f22:	801a      	strh	r2, [r3, #0]
 8007f24:	2314      	movs	r3, #20
 8007f26:	18fa      	adds	r2, r7, r3
 8007f28:	2312      	movs	r3, #18
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	8812      	ldrh	r2, [r2, #0]
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d3df      	bcc.n	8007ef4 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8007f34:	2116      	movs	r1, #22
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	881a      	ldrh	r2, [r3, #0]
 8007f3a:	187b      	adds	r3, r7, r1
 8007f3c:	3201      	adds	r2, #1
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	2316      	movs	r3, #22
 8007f42:	18fa      	adds	r2, r7, r3
 8007f44:	2310      	movs	r3, #16
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	8812      	ldrh	r2, [r2, #0]
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d3cc      	bcc.n	8007eea <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 8007f50:	f7ff ff04 	bl	8007d5c <EPD_1IN54_V2_TurnOnDisplay>
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b007      	add	sp, #28
 8007f5a:	bd90      	pop	{r4, r7, pc}

08007f5c <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8007f5c:	b590      	push	{r4, r7, lr}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8007f64:	230e      	movs	r3, #14
 8007f66:	18fb      	adds	r3, r7, r3
 8007f68:	2219      	movs	r2, #25
 8007f6a:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	22c8      	movs	r2, #200	; 0xc8
 8007f72:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 8007f78:	2024      	movs	r0, #36	; 0x24
 8007f7a:	f7ff fe81 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8007f7e:	2316      	movs	r3, #22
 8007f80:	18fb      	adds	r3, r7, r3
 8007f82:	2200      	movs	r2, #0
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	e02a      	b.n	8007fde <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8007f88:	2314      	movs	r3, #20
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e017      	b.n	8007fc2 <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 8007f92:	2414      	movs	r4, #20
 8007f94:	193b      	adds	r3, r7, r4
 8007f96:	881a      	ldrh	r2, [r3, #0]
 8007f98:	2316      	movs	r3, #22
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	210e      	movs	r1, #14
 8007fa0:	1879      	adds	r1, r7, r1
 8007fa2:	8809      	ldrh	r1, [r1, #0]
 8007fa4:	434b      	muls	r3, r1
 8007fa6:	18d3      	adds	r3, r2, r3
 8007fa8:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	18d3      	adds	r3, r2, r3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f7ff fe8b 	bl	8007cce <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8007fb8:	193b      	adds	r3, r7, r4
 8007fba:	881a      	ldrh	r2, [r3, #0]
 8007fbc:	193b      	adds	r3, r7, r4
 8007fbe:	3201      	adds	r2, #1
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	2314      	movs	r3, #20
 8007fc4:	18fa      	adds	r2, r7, r3
 8007fc6:	230e      	movs	r3, #14
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	8812      	ldrh	r2, [r2, #0]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d3df      	bcc.n	8007f92 <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8007fd2:	2116      	movs	r1, #22
 8007fd4:	187b      	adds	r3, r7, r1
 8007fd6:	881a      	ldrh	r2, [r3, #0]
 8007fd8:	187b      	adds	r3, r7, r1
 8007fda:	3201      	adds	r2, #1
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	2316      	movs	r3, #22
 8007fe0:	18fa      	adds	r2, r7, r3
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	8812      	ldrh	r2, [r2, #0]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d3cc      	bcc.n	8007f88 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 8007fee:	2026      	movs	r0, #38	; 0x26
 8007ff0:	f7ff fe46 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8007ff4:	2312      	movs	r3, #18
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e02a      	b.n	8008054 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 8007ffe:	2310      	movs	r3, #16
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	2200      	movs	r2, #0
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e017      	b.n	8008038 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 8008008:	2410      	movs	r4, #16
 800800a:	193b      	adds	r3, r7, r4
 800800c:	881a      	ldrh	r2, [r3, #0]
 800800e:	2312      	movs	r3, #18
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	210e      	movs	r1, #14
 8008016:	1879      	adds	r1, r7, r1
 8008018:	8809      	ldrh	r1, [r1, #0]
 800801a:	434b      	muls	r3, r1
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	18d3      	adds	r3, r2, r3
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	0018      	movs	r0, r3
 800802a:	f7ff fe50 	bl	8007cce <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800802e:	193b      	adds	r3, r7, r4
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	193b      	adds	r3, r7, r4
 8008034:	3201      	adds	r2, #1
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	2310      	movs	r3, #16
 800803a:	18fa      	adds	r2, r7, r3
 800803c:	230e      	movs	r3, #14
 800803e:	18fb      	adds	r3, r7, r3
 8008040:	8812      	ldrh	r2, [r2, #0]
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d3df      	bcc.n	8008008 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 8008048:	2112      	movs	r1, #18
 800804a:	187b      	adds	r3, r7, r1
 800804c:	881a      	ldrh	r2, [r3, #0]
 800804e:	187b      	adds	r3, r7, r1
 8008050:	3201      	adds	r2, #1
 8008052:	801a      	strh	r2, [r3, #0]
 8008054:	2312      	movs	r3, #18
 8008056:	18fa      	adds	r2, r7, r3
 8008058:	230c      	movs	r3, #12
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	8812      	ldrh	r2, [r2, #0]
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	429a      	cmp	r2, r3
 8008062:	d3cc      	bcc.n	8007ffe <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8008064:	f7ff fe8a 	bl	8007d7c <EPD_1IN54_V2_TurnOnDisplayPart>
}
 8008068:	46c0      	nop			; (mov r8, r8)
 800806a:	46bd      	mov	sp, r7
 800806c:	b007      	add	sp, #28
 800806e:	bd90      	pop	{r4, r7, pc}

08008070 <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 8008070:	b590      	push	{r4, r7, lr}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8008078:	2312      	movs	r3, #18
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	2219      	movs	r2, #25
 800807e:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8008080:	2310      	movs	r3, #16
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	22c8      	movs	r2, #200	; 0xc8
 8008086:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 8008088:	2380      	movs	r3, #128	; 0x80
 800808a:	00d9      	lsls	r1, r3, #3
 800808c:	23a0      	movs	r3, #160	; 0xa0
 800808e:	05db      	lsls	r3, r3, #23
 8008090:	2200      	movs	r2, #0
 8008092:	0018      	movs	r0, r3
 8008094:	f7fc fc59 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8008098:	200a      	movs	r0, #10
 800809a:	f7fb fa33 	bl	8003504 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800809e:	2380      	movs	r3, #128	; 0x80
 80080a0:	00d9      	lsls	r1, r3, #3
 80080a2:	23a0      	movs	r3, #160	; 0xa0
 80080a4:	05db      	lsls	r3, r3, #23
 80080a6:	2201      	movs	r2, #1
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7fc fc4e 	bl	800494a <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 80080ae:	200a      	movs	r0, #10
 80080b0:	f7fb fa28 	bl	8003504 <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80080b4:	203c      	movs	r0, #60	; 0x3c
 80080b6:	f7ff fde3 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80080ba:	2080      	movs	r0, #128	; 0x80
 80080bc:	f7ff fe07 	bl	8007cce <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80080c4:	2024      	movs	r0, #36	; 0x24
 80080c6:	f7ff fddb 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80080ca:	2316      	movs	r3, #22
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	2200      	movs	r2, #0
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e02a      	b.n	800812a <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 80080d4:	2314      	movs	r3, #20
 80080d6:	18fb      	adds	r3, r7, r3
 80080d8:	2200      	movs	r2, #0
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e017      	b.n	800810e <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 80080de:	2414      	movs	r4, #20
 80080e0:	193b      	adds	r3, r7, r4
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	2316      	movs	r3, #22
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	2112      	movs	r1, #18
 80080ec:	1879      	adds	r1, r7, r1
 80080ee:	8809      	ldrh	r1, [r1, #0]
 80080f0:	434b      	muls	r3, r1
 80080f2:	18d3      	adds	r3, r2, r3
 80080f4:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	18d3      	adds	r3, r2, r3
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	0018      	movs	r0, r3
 8008100:	f7ff fde5 	bl	8007cce <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008104:	193b      	adds	r3, r7, r4
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	193b      	adds	r3, r7, r4
 800810a:	3201      	adds	r2, #1
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	2314      	movs	r3, #20
 8008110:	18fa      	adds	r2, r7, r3
 8008112:	2312      	movs	r3, #18
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	8812      	ldrh	r2, [r2, #0]
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d3df      	bcc.n	80080de <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 800811e:	2116      	movs	r1, #22
 8008120:	187b      	adds	r3, r7, r1
 8008122:	881a      	ldrh	r2, [r3, #0]
 8008124:	187b      	adds	r3, r7, r1
 8008126:	3201      	adds	r2, #1
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	2316      	movs	r3, #22
 800812c:	18fa      	adds	r2, r7, r3
 800812e:	2310      	movs	r3, #16
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	8812      	ldrh	r2, [r2, #0]
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d3cc      	bcc.n	80080d4 <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800813a:	f7ff fe1f 	bl	8007d7c <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	46bd      	mov	sp, r7
 8008142:	b007      	add	sp, #28
 8008144:	bd90      	pop	{r4, r7, pc}

08008146 <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); //enter deep sleep
 800814a:	2010      	movs	r0, #16
 800814c:	f7ff fd98 	bl	8007c80 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8008150:	2001      	movs	r0, #1
 8008152:	f7ff fdbc 	bl	8007cce <EPD_1IN54_V2_SendData>
    DEV_Delay_ms(100);
 8008156:	2064      	movs	r0, #100	; 0x64
 8008158:	f7fb f9d4 	bl	8003504 <HAL_Delay>
}
 800815c:	46c0      	nop			; (mov r8, r8)
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <Paint_NewImage>:
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate,
		UWORD Color) {
 8008164:	b5b0      	push	{r4, r5, r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	000c      	movs	r4, r1
 800816e:	0010      	movs	r0, r2
 8008170:	0019      	movs	r1, r3
 8008172:	250a      	movs	r5, #10
 8008174:	197b      	adds	r3, r7, r5
 8008176:	1c22      	adds	r2, r4, #0
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	2408      	movs	r4, #8
 800817c:	193b      	adds	r3, r7, r4
 800817e:	1c02      	adds	r2, r0, #0
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	1dbb      	adds	r3, r7, #6
 8008184:	1c0a      	adds	r2, r1, #0
 8008186:	801a      	strh	r2, [r3, #0]
	Paint.Image = NULL;
 8008188:	4b2c      	ldr	r3, [pc, #176]	; (800823c <Paint_NewImage+0xd8>)
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 800818e:	4b2b      	ldr	r3, [pc, #172]	; (800823c <Paint_NewImage+0xd8>)
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

	Paint.WidthMemory = Width;
 8008194:	4b29      	ldr	r3, [pc, #164]	; (800823c <Paint_NewImage+0xd8>)
 8008196:	0029      	movs	r1, r5
 8008198:	187a      	adds	r2, r7, r1
 800819a:	8812      	ldrh	r2, [r2, #0]
 800819c:	811a      	strh	r2, [r3, #8]
	Paint.HeightMemory = Height;
 800819e:	4b27      	ldr	r3, [pc, #156]	; (800823c <Paint_NewImage+0xd8>)
 80081a0:	193a      	adds	r2, r7, r4
 80081a2:	8812      	ldrh	r2, [r2, #0]
 80081a4:	815a      	strh	r2, [r3, #10]
	Paint.Color = Color;
 80081a6:	4a25      	ldr	r2, [pc, #148]	; (800823c <Paint_NewImage+0xd8>)
 80081a8:	2320      	movs	r3, #32
 80081aa:	18fb      	adds	r3, r7, r3
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80081b0:	4b22      	ldr	r3, [pc, #136]	; (800823c <Paint_NewImage+0xd8>)
 80081b2:	2202      	movs	r2, #2
 80081b4:	82da      	strh	r2, [r3, #22]

	Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	2207      	movs	r2, #7
 80081bc:	4013      	ands	r3, r2
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <Paint_NewImage+0x6a>
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	08db      	lsrs	r3, r3, #3
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	e006      	b.n	80081dc <Paint_NewImage+0x78>
 80081ce:	230a      	movs	r3, #10
 80081d0:	18fb      	adds	r3, r7, r3
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	08db      	lsrs	r3, r3, #3
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	3301      	adds	r3, #1
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4a17      	ldr	r2, [pc, #92]	; (800823c <Paint_NewImage+0xd8>)
 80081de:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 80081e0:	4b16      	ldr	r3, [pc, #88]	; (800823c <Paint_NewImage+0xd8>)
 80081e2:	2208      	movs	r2, #8
 80081e4:	18ba      	adds	r2, r7, r2
 80081e6:	8812      	ldrh	r2, [r2, #0]
 80081e8:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 80081ea:	4b14      	ldr	r3, [pc, #80]	; (800823c <Paint_NewImage+0xd8>)
 80081ec:	1dba      	adds	r2, r7, #6
 80081ee:	8812      	ldrh	r2, [r2, #0]
 80081f0:	81da      	strh	r2, [r3, #14]
	Paint.Mirror = MIRROR_NONE;
 80081f2:	4b12      	ldr	r3, [pc, #72]	; (800823c <Paint_NewImage+0xd8>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	821a      	strh	r2, [r3, #16]

	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80081f8:	1dbb      	adds	r3, r7, #6
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <Paint_NewImage+0xa4>
 8008200:	1dbb      	adds	r3, r7, #6
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	2bb4      	cmp	r3, #180	; 0xb4
 8008206:	d10a      	bne.n	800821e <Paint_NewImage+0xba>
		Paint.Width = Width;
 8008208:	4b0c      	ldr	r3, [pc, #48]	; (800823c <Paint_NewImage+0xd8>)
 800820a:	220a      	movs	r2, #10
 800820c:	18ba      	adds	r2, r7, r2
 800820e:	8812      	ldrh	r2, [r2, #0]
 8008210:	809a      	strh	r2, [r3, #4]
		Paint.Height = Height;
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <Paint_NewImage+0xd8>)
 8008214:	2208      	movs	r2, #8
 8008216:	18ba      	adds	r2, r7, r2
 8008218:	8812      	ldrh	r2, [r2, #0]
 800821a:	80da      	strh	r2, [r3, #6]
 800821c:	e00a      	b.n	8008234 <Paint_NewImage+0xd0>
	} else {
		Paint.Width = Height;
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <Paint_NewImage+0xd8>)
 8008220:	2208      	movs	r2, #8
 8008222:	18ba      	adds	r2, r7, r2
 8008224:	8812      	ldrh	r2, [r2, #0]
 8008226:	809a      	strh	r2, [r3, #4]
		Paint.Height = Width;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <Paint_NewImage+0xd8>)
 800822a:	220a      	movs	r2, #10
 800822c:	18ba      	adds	r2, r7, r2
 800822e:	8812      	ldrh	r2, [r2, #0]
 8008230:	80da      	strh	r2, [r3, #6]
	}
}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	b004      	add	sp, #16
 800823a:	bdb0      	pop	{r4, r5, r7, pc}
 800823c:	200005e4 	.word	0x200005e4

08008240 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(UBYTE *image) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <Paint_SelectImage+0x18>)
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	46bd      	mov	sp, r7
 8008252:	b002      	add	sp, #8
 8008254:	bd80      	pop	{r7, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	200005e4 	.word	0x200005e4

0800825c <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color) {
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b08b      	sub	sp, #44	; 0x2c
 8008260:	af00      	add	r7, sp, #0
 8008262:	0004      	movs	r4, r0
 8008264:	0008      	movs	r0, r1
 8008266:	0011      	movs	r1, r2
 8008268:	1dbb      	adds	r3, r7, #6
 800826a:	1c22      	adds	r2, r4, #0
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	1d3b      	adds	r3, r7, #4
 8008270:	1c02      	adds	r2, r0, #0
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	1cbb      	adds	r3, r7, #2
 8008276:	1c0a      	adds	r2, r1, #0
 8008278:	801a      	strh	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800827a:	4bc6      	ldr	r3, [pc, #792]	; (8008594 <Paint_SetPixel+0x338>)
 800827c:	889b      	ldrh	r3, [r3, #4]
 800827e:	1dba      	adds	r2, r7, #6
 8008280:	8812      	ldrh	r2, [r2, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d805      	bhi.n	8008292 <Paint_SetPixel+0x36>
 8008286:	4bc3      	ldr	r3, [pc, #780]	; (8008594 <Paint_SetPixel+0x338>)
 8008288:	88db      	ldrh	r3, [r3, #6]
 800828a:	1d3a      	adds	r2, r7, #4
 800828c:	8812      	ldrh	r2, [r2, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d904      	bls.n	800829c <Paint_SetPixel+0x40>
		Debug("Exceeding display boundaries\r\n");
 8008292:	4bc1      	ldr	r3, [pc, #772]	; (8008598 <Paint_SetPixel+0x33c>)
 8008294:	0018      	movs	r0, r3
 8008296:	f006 fddf 	bl	800ee58 <puts>
		return;
 800829a:	e180      	b.n	800859e <Paint_SetPixel+0x342>
	}
	UWORD X, Y;

	switch (Paint.Rotate) {
 800829c:	4bbd      	ldr	r3, [pc, #756]	; (8008594 <Paint_SetPixel+0x338>)
 800829e:	89db      	ldrh	r3, [r3, #14]
 80082a0:	2287      	movs	r2, #135	; 0x87
 80082a2:	0052      	lsls	r2, r2, #1
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d03d      	beq.n	8008324 <Paint_SetPixel+0xc8>
 80082a8:	2287      	movs	r2, #135	; 0x87
 80082aa:	0052      	lsls	r2, r2, #1
 80082ac:	4293      	cmp	r3, r2
 80082ae:	dd00      	ble.n	80082b2 <Paint_SetPixel+0x56>
 80082b0:	e16e      	b.n	8008590 <Paint_SetPixel+0x334>
 80082b2:	2bb4      	cmp	r3, #180	; 0xb4
 80082b4:	d021      	beq.n	80082fa <Paint_SetPixel+0x9e>
 80082b6:	dd00      	ble.n	80082ba <Paint_SetPixel+0x5e>
 80082b8:	e16a      	b.n	8008590 <Paint_SetPixel+0x334>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <Paint_SetPixel+0x68>
 80082be:	2b5a      	cmp	r3, #90	; 0x5a
 80082c0:	d00b      	beq.n	80082da <Paint_SetPixel+0x7e>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 80082c2:	e165      	b.n	8008590 <Paint_SetPixel+0x334>
		X = Xpoint;
 80082c4:	2326      	movs	r3, #38	; 0x26
 80082c6:	18fb      	adds	r3, r7, r3
 80082c8:	1dba      	adds	r2, r7, #6
 80082ca:	8812      	ldrh	r2, [r2, #0]
 80082cc:	801a      	strh	r2, [r3, #0]
		Y = Ypoint;
 80082ce:	2324      	movs	r3, #36	; 0x24
 80082d0:	18fb      	adds	r3, r7, r3
 80082d2:	1d3a      	adds	r2, r7, #4
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	801a      	strh	r2, [r3, #0]
		break;
 80082d8:	e034      	b.n	8008344 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Ypoint - 1;
 80082da:	4bae      	ldr	r3, [pc, #696]	; (8008594 <Paint_SetPixel+0x338>)
 80082dc:	891a      	ldrh	r2, [r3, #8]
 80082de:	1d3b      	adds	r3, r7, #4
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	2326      	movs	r3, #38	; 0x26
 80082e8:	18fb      	adds	r3, r7, r3
 80082ea:	3a01      	subs	r2, #1
 80082ec:	801a      	strh	r2, [r3, #0]
		Y = Xpoint;
 80082ee:	2324      	movs	r3, #36	; 0x24
 80082f0:	18fb      	adds	r3, r7, r3
 80082f2:	1dba      	adds	r2, r7, #6
 80082f4:	8812      	ldrh	r2, [r2, #0]
 80082f6:	801a      	strh	r2, [r3, #0]
		break;
 80082f8:	e024      	b.n	8008344 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Xpoint - 1;
 80082fa:	4ba6      	ldr	r3, [pc, #664]	; (8008594 <Paint_SetPixel+0x338>)
 80082fc:	891a      	ldrh	r2, [r3, #8]
 80082fe:	1dbb      	adds	r3, r7, #6
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	b29a      	uxth	r2, r3
 8008306:	2326      	movs	r3, #38	; 0x26
 8008308:	18fb      	adds	r3, r7, r3
 800830a:	3a01      	subs	r2, #1
 800830c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Ypoint - 1;
 800830e:	4ba1      	ldr	r3, [pc, #644]	; (8008594 <Paint_SetPixel+0x338>)
 8008310:	895a      	ldrh	r2, [r3, #10]
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	b29a      	uxth	r2, r3
 800831a:	2324      	movs	r3, #36	; 0x24
 800831c:	18fb      	adds	r3, r7, r3
 800831e:	3a01      	subs	r2, #1
 8008320:	801a      	strh	r2, [r3, #0]
		break;
 8008322:	e00f      	b.n	8008344 <Paint_SetPixel+0xe8>
		X = Ypoint;
 8008324:	2326      	movs	r3, #38	; 0x26
 8008326:	18fb      	adds	r3, r7, r3
 8008328:	1d3a      	adds	r2, r7, #4
 800832a:	8812      	ldrh	r2, [r2, #0]
 800832c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Xpoint - 1;
 800832e:	4b99      	ldr	r3, [pc, #612]	; (8008594 <Paint_SetPixel+0x338>)
 8008330:	895a      	ldrh	r2, [r3, #10]
 8008332:	1dbb      	adds	r3, r7, #6
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	b29a      	uxth	r2, r3
 800833a:	2324      	movs	r3, #36	; 0x24
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	3a01      	subs	r2, #1
 8008340:	801a      	strh	r2, [r3, #0]
		break;
 8008342:	46c0      	nop			; (mov r8, r8)
	}

	switch (Paint.Mirror) {
 8008344:	4b93      	ldr	r3, [pc, #588]	; (8008594 <Paint_SetPixel+0x338>)
 8008346:	8a1b      	ldrh	r3, [r3, #16]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d020      	beq.n	800838e <Paint_SetPixel+0x132>
 800834c:	dd00      	ble.n	8008350 <Paint_SetPixel+0xf4>
 800834e:	e125      	b.n	800859c <Paint_SetPixel+0x340>
 8008350:	2b02      	cmp	r3, #2
 8008352:	d011      	beq.n	8008378 <Paint_SetPixel+0x11c>
 8008354:	dd00      	ble.n	8008358 <Paint_SetPixel+0xfc>
 8008356:	e121      	b.n	800859c <Paint_SetPixel+0x340>
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02d      	beq.n	80083b8 <Paint_SetPixel+0x15c>
 800835c:	2b01      	cmp	r3, #1
 800835e:	d000      	beq.n	8008362 <Paint_SetPixel+0x106>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
		Y = Paint.HeightMemory - Y - 1;
		break;
	default:
		return;
 8008360:	e11c      	b.n	800859c <Paint_SetPixel+0x340>
		X = Paint.WidthMemory - X - 1;
 8008362:	4b8c      	ldr	r3, [pc, #560]	; (8008594 <Paint_SetPixel+0x338>)
 8008364:	891a      	ldrh	r2, [r3, #8]
 8008366:	2126      	movs	r1, #38	; 0x26
 8008368:	187b      	adds	r3, r7, r1
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	b29a      	uxth	r2, r3
 8008370:	187b      	adds	r3, r7, r1
 8008372:	3a01      	subs	r2, #1
 8008374:	801a      	strh	r2, [r3, #0]
		break;
 8008376:	e020      	b.n	80083ba <Paint_SetPixel+0x15e>
		Y = Paint.HeightMemory - Y - 1;
 8008378:	4b86      	ldr	r3, [pc, #536]	; (8008594 <Paint_SetPixel+0x338>)
 800837a:	895a      	ldrh	r2, [r3, #10]
 800837c:	2124      	movs	r1, #36	; 0x24
 800837e:	187b      	adds	r3, r7, r1
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	b29a      	uxth	r2, r3
 8008386:	187b      	adds	r3, r7, r1
 8008388:	3a01      	subs	r2, #1
 800838a:	801a      	strh	r2, [r3, #0]
		break;
 800838c:	e015      	b.n	80083ba <Paint_SetPixel+0x15e>
		X = Paint.WidthMemory - X - 1;
 800838e:	4b81      	ldr	r3, [pc, #516]	; (8008594 <Paint_SetPixel+0x338>)
 8008390:	891a      	ldrh	r2, [r3, #8]
 8008392:	2126      	movs	r1, #38	; 0x26
 8008394:	187b      	adds	r3, r7, r1
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	b29a      	uxth	r2, r3
 800839c:	187b      	adds	r3, r7, r1
 800839e:	3a01      	subs	r2, #1
 80083a0:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Y - 1;
 80083a2:	4b7c      	ldr	r3, [pc, #496]	; (8008594 <Paint_SetPixel+0x338>)
 80083a4:	895a      	ldrh	r2, [r3, #10]
 80083a6:	2124      	movs	r1, #36	; 0x24
 80083a8:	187b      	adds	r3, r7, r1
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	187b      	adds	r3, r7, r1
 80083b2:	3a01      	subs	r2, #1
 80083b4:	801a      	strh	r2, [r3, #0]
		break;
 80083b6:	e000      	b.n	80083ba <Paint_SetPixel+0x15e>
		break;
 80083b8:	46c0      	nop			; (mov r8, r8)
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 80083ba:	4b76      	ldr	r3, [pc, #472]	; (8008594 <Paint_SetPixel+0x338>)
 80083bc:	891b      	ldrh	r3, [r3, #8]
 80083be:	2226      	movs	r2, #38	; 0x26
 80083c0:	18ba      	adds	r2, r7, r2
 80083c2:	8812      	ldrh	r2, [r2, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d806      	bhi.n	80083d6 <Paint_SetPixel+0x17a>
 80083c8:	4b72      	ldr	r3, [pc, #456]	; (8008594 <Paint_SetPixel+0x338>)
 80083ca:	895b      	ldrh	r3, [r3, #10]
 80083cc:	2224      	movs	r2, #36	; 0x24
 80083ce:	18ba      	adds	r2, r7, r2
 80083d0:	8812      	ldrh	r2, [r2, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d904      	bls.n	80083e0 <Paint_SetPixel+0x184>
		Debug("Exceeding display boundaries\r\n");
 80083d6:	4b70      	ldr	r3, [pc, #448]	; (8008598 <Paint_SetPixel+0x33c>)
 80083d8:	0018      	movs	r0, r3
 80083da:	f006 fd3d 	bl	800ee58 <puts>
		return;
 80083de:	e0de      	b.n	800859e <Paint_SetPixel+0x342>
	}

	if (Paint.Scale == 2) {
 80083e0:	4b6c      	ldr	r3, [pc, #432]	; (8008594 <Paint_SetPixel+0x338>)
 80083e2:	8adb      	ldrh	r3, [r3, #22]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d145      	bne.n	8008474 <Paint_SetPixel+0x218>
		UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80083e8:	2026      	movs	r0, #38	; 0x26
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	08db      	lsrs	r3, r3, #3
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	0019      	movs	r1, r3
 80083f4:	2324      	movs	r3, #36	; 0x24
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	4a66      	ldr	r2, [pc, #408]	; (8008594 <Paint_SetPixel+0x338>)
 80083fc:	8a52      	ldrh	r2, [r2, #18]
 80083fe:	4353      	muls	r3, r2
 8008400:	18cb      	adds	r3, r1, r3
 8008402:	613b      	str	r3, [r7, #16]
		UBYTE Rdata = Paint.Image[Addr];
 8008404:	4b63      	ldr	r3, [pc, #396]	; (8008594 <Paint_SetPixel+0x338>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	18d2      	adds	r2, r2, r3
 800840c:	210f      	movs	r1, #15
 800840e:	187b      	adds	r3, r7, r1
 8008410:	7812      	ldrb	r2, [r2, #0]
 8008412:	701a      	strb	r2, [r3, #0]
		if (Color == BLACK)
 8008414:	1cbb      	adds	r3, r7, #2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d115      	bne.n	8008448 <Paint_SetPixel+0x1ec>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800841c:	183b      	adds	r3, r7, r0
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	2207      	movs	r2, #7
 8008422:	4013      	ands	r3, r2
 8008424:	2280      	movs	r2, #128	; 0x80
 8008426:	411a      	asrs	r2, r3
 8008428:	0013      	movs	r3, r2
 800842a:	b25b      	sxtb	r3, r3
 800842c:	43db      	mvns	r3, r3
 800842e:	b25b      	sxtb	r3, r3
 8008430:	187a      	adds	r2, r7, r1
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	b252      	sxtb	r2, r2
 8008436:	4013      	ands	r3, r2
 8008438:	b259      	sxtb	r1, r3
 800843a:	4b56      	ldr	r3, [pc, #344]	; (8008594 <Paint_SetPixel+0x338>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	18d3      	adds	r3, r2, r3
 8008442:	b2ca      	uxtb	r2, r1
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e0aa      	b.n	800859e <Paint_SetPixel+0x342>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8008448:	2326      	movs	r3, #38	; 0x26
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	2207      	movs	r2, #7
 8008450:	4013      	ands	r3, r2
 8008452:	2280      	movs	r2, #128	; 0x80
 8008454:	411a      	asrs	r2, r3
 8008456:	0013      	movs	r3, r2
 8008458:	b25a      	sxtb	r2, r3
 800845a:	230f      	movs	r3, #15
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b25b      	sxtb	r3, r3
 8008462:	4313      	orrs	r3, r2
 8008464:	b259      	sxtb	r1, r3
 8008466:	4b4b      	ldr	r3, [pc, #300]	; (8008594 <Paint_SetPixel+0x338>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	18d3      	adds	r3, r2, r3
 800846e:	b2ca      	uxtb	r2, r1
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e094      	b.n	800859e <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 4) {
 8008474:	4b47      	ldr	r3, [pc, #284]	; (8008594 <Paint_SetPixel+0x338>)
 8008476:	8adb      	ldrh	r3, [r3, #22]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d145      	bne.n	8008508 <Paint_SetPixel+0x2ac>
		UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800847c:	2426      	movs	r4, #38	; 0x26
 800847e:	193b      	adds	r3, r7, r4
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	b29b      	uxth	r3, r3
 8008486:	0019      	movs	r1, r3
 8008488:	2324      	movs	r3, #36	; 0x24
 800848a:	18fb      	adds	r3, r7, r3
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	4a41      	ldr	r2, [pc, #260]	; (8008594 <Paint_SetPixel+0x338>)
 8008490:	8a52      	ldrh	r2, [r2, #18]
 8008492:	4353      	muls	r3, r2
 8008494:	18cb      	adds	r3, r1, r3
 8008496:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 8008498:	1cbb      	adds	r3, r7, #2
 800849a:	1cba      	adds	r2, r7, #2
 800849c:	8812      	ldrh	r2, [r2, #0]
 800849e:	2103      	movs	r1, #3
 80084a0:	400a      	ands	r2, r1
 80084a2:	801a      	strh	r2, [r3, #0]
		UBYTE Rdata = Paint.Image[Addr];
 80084a4:	4b3b      	ldr	r3, [pc, #236]	; (8008594 <Paint_SetPixel+0x338>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	18d2      	adds	r2, r2, r3
 80084ac:	2017      	movs	r0, #23
 80084ae:	183b      	adds	r3, r7, r0
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	701a      	strb	r2, [r3, #0]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 80084b4:	0021      	movs	r1, r4
 80084b6:	187b      	adds	r3, r7, r1
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	2203      	movs	r2, #3
 80084bc:	4013      	ands	r3, r2
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	22c0      	movs	r2, #192	; 0xc0
 80084c2:	411a      	asrs	r2, r3
 80084c4:	0013      	movs	r3, r2
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	b25b      	sxtb	r3, r3
 80084cc:	183a      	adds	r2, r7, r0
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	b252      	sxtb	r2, r2
 80084d2:	4013      	ands	r3, r2
 80084d4:	b25a      	sxtb	r2, r3
 80084d6:	183b      	adds	r3, r7, r0
 80084d8:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 80084da:	1cbb      	adds	r3, r7, #2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	019a      	lsls	r2, r3, #6
 80084e0:	187b      	adds	r3, r7, r1
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	2103      	movs	r1, #3
 80084e6:	400b      	ands	r3, r1
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	411a      	asrs	r2, r3
 80084ec:	0013      	movs	r3, r2
 80084ee:	b25a      	sxtb	r2, r3
 80084f0:	183b      	adds	r3, r7, r0
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b259      	sxtb	r1, r3
 80084fa:	4b26      	ldr	r3, [pc, #152]	; (8008594 <Paint_SetPixel+0x338>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	b2ca      	uxtb	r2, r1
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	e04a      	b.n	800859e <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 7) {
 8008508:	4b22      	ldr	r3, [pc, #136]	; (8008594 <Paint_SetPixel+0x338>)
 800850a:	8adb      	ldrh	r3, [r3, #22]
 800850c:	2b07      	cmp	r3, #7
 800850e:	d146      	bne.n	800859e <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8008510:	2426      	movs	r4, #38	; 0x26
 8008512:	193b      	adds	r3, r7, r4
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	0019      	movs	r1, r3
 800851c:	2324      	movs	r3, #36	; 0x24
 800851e:	18fb      	adds	r3, r7, r3
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	4a1c      	ldr	r2, [pc, #112]	; (8008594 <Paint_SetPixel+0x338>)
 8008524:	8a52      	ldrh	r2, [r2, #18]
 8008526:	4353      	muls	r3, r2
 8008528:	18cb      	adds	r3, r1, r3
 800852a:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 800852c:	4b19      	ldr	r3, [pc, #100]	; (8008594 <Paint_SetPixel+0x338>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	18d2      	adds	r2, r2, r3
 8008534:	201f      	movs	r0, #31
 8008536:	183b      	adds	r3, r7, r0
 8008538:	7812      	ldrb	r2, [r2, #0]
 800853a:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 800853c:	0021      	movs	r1, r4
 800853e:	187b      	adds	r3, r7, r1
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	2201      	movs	r2, #1
 8008544:	4013      	ands	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	22f0      	movs	r2, #240	; 0xf0
 800854a:	411a      	asrs	r2, r3
 800854c:	0013      	movs	r3, r2
 800854e:	b25b      	sxtb	r3, r3
 8008550:	43db      	mvns	r3, r3
 8008552:	b25b      	sxtb	r3, r3
 8008554:	183a      	adds	r2, r7, r0
 8008556:	7812      	ldrb	r2, [r2, #0]
 8008558:	b252      	sxtb	r2, r2
 800855a:	4013      	ands	r3, r2
 800855c:	b25a      	sxtb	r2, r3
 800855e:	183b      	adds	r3, r7, r0
 8008560:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8008562:	1cbb      	adds	r3, r7, #2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	011a      	lsls	r2, r3, #4
 8008568:	187b      	adds	r3, r7, r1
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	2101      	movs	r1, #1
 800856e:	400b      	ands	r3, r1
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	411a      	asrs	r2, r3
 8008574:	0013      	movs	r3, r2
 8008576:	b25a      	sxtb	r2, r3
 8008578:	183b      	adds	r3, r7, r0
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b25b      	sxtb	r3, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	b259      	sxtb	r1, r3
 8008582:	4b04      	ldr	r3, [pc, #16]	; (8008594 <Paint_SetPixel+0x338>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	18d3      	adds	r3, r2, r3
 800858a:	b2ca      	uxtb	r2, r1
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e006      	b.n	800859e <Paint_SetPixel+0x342>
		return;
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	e004      	b.n	800859e <Paint_SetPixel+0x342>
 8008594:	200005e4 	.word	0x200005e4
 8008598:	08011698 	.word	0x08011698
		return;
 800859c:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 800859e:	46bd      	mov	sp, r7
 80085a0:	b00b      	add	sp, #44	; 0x2c
 80085a2:	bd90      	pop	{r4, r7, pc}

080085a4 <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(UWORD Color) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	0002      	movs	r2, r0
 80085ac:	1dbb      	adds	r3, r7, #6
 80085ae:	801a      	strh	r2, [r3, #0]
	if (Paint.Scale == 2 || Paint.Scale == 4) {
 80085b0:	4b42      	ldr	r3, [pc, #264]	; (80086bc <Paint_Clear+0x118>)
 80085b2:	8adb      	ldrh	r3, [r3, #22]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d003      	beq.n	80085c0 <Paint_Clear+0x1c>
 80085b8:	4b40      	ldr	r3, [pc, #256]	; (80086bc <Paint_Clear+0x118>)
 80085ba:	8adb      	ldrh	r3, [r3, #22]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d136      	bne.n	800862e <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80085c0:	2316      	movs	r3, #22
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2200      	movs	r2, #0
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e029      	b.n	800861e <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 80085ca:	2314      	movs	r3, #20
 80085cc:	18fb      	adds	r3, r7, r3
 80085ce:	2200      	movs	r2, #0
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e017      	b.n	8008604 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 80085d4:	2014      	movs	r0, #20
 80085d6:	183b      	adds	r3, r7, r0
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	2316      	movs	r3, #22
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	4936      	ldr	r1, [pc, #216]	; (80086bc <Paint_Clear+0x118>)
 80085e2:	8a49      	ldrh	r1, [r1, #18]
 80085e4:	434b      	muls	r3, r1
 80085e6:	18d3      	adds	r3, r2, r3
 80085e8:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 80085ea:	4b34      	ldr	r3, [pc, #208]	; (80086bc <Paint_Clear+0x118>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	18d3      	adds	r3, r2, r3
 80085f2:	1dba      	adds	r2, r7, #6
 80085f4:	8812      	ldrh	r2, [r2, #0]
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 80085fa:	183b      	adds	r3, r7, r0
 80085fc:	881a      	ldrh	r2, [r3, #0]
 80085fe:	183b      	adds	r3, r7, r0
 8008600:	3201      	adds	r2, #1
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	4b2d      	ldr	r3, [pc, #180]	; (80086bc <Paint_Clear+0x118>)
 8008606:	8a5b      	ldrh	r3, [r3, #18]
 8008608:	2214      	movs	r2, #20
 800860a:	18ba      	adds	r2, r7, r2
 800860c:	8812      	ldrh	r2, [r2, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d3e0      	bcc.n	80085d4 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008612:	2116      	movs	r1, #22
 8008614:	187b      	adds	r3, r7, r1
 8008616:	881a      	ldrh	r2, [r3, #0]
 8008618:	187b      	adds	r3, r7, r1
 800861a:	3201      	adds	r2, #1
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	4b27      	ldr	r3, [pc, #156]	; (80086bc <Paint_Clear+0x118>)
 8008620:	8a9b      	ldrh	r3, [r3, #20]
 8008622:	2216      	movs	r2, #22
 8008624:	18ba      	adds	r2, r7, r2
 8008626:	8812      	ldrh	r2, [r2, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d3ce      	bcc.n	80085ca <Paint_Clear+0x26>
 800862c:	e041      	b.n	80086b2 <Paint_Clear+0x10e>
			}
		}
	} else if (Paint.Scale == 7) {
 800862e:	4b23      	ldr	r3, [pc, #140]	; (80086bc <Paint_Clear+0x118>)
 8008630:	8adb      	ldrh	r3, [r3, #22]
 8008632:	2b07      	cmp	r3, #7
 8008634:	d13d      	bne.n	80086b2 <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008636:	2312      	movs	r3, #18
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	2200      	movs	r2, #0
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e030      	b.n	80086a2 <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008640:	2310      	movs	r3, #16
 8008642:	18fb      	adds	r3, r7, r3
 8008644:	2200      	movs	r2, #0
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e01e      	b.n	8008688 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 800864a:	2010      	movs	r0, #16
 800864c:	183b      	adds	r3, r7, r0
 800864e:	881a      	ldrh	r2, [r3, #0]
 8008650:	2312      	movs	r3, #18
 8008652:	18fb      	adds	r3, r7, r3
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	4919      	ldr	r1, [pc, #100]	; (80086bc <Paint_Clear+0x118>)
 8008658:	8a49      	ldrh	r1, [r1, #18]
 800865a:	434b      	muls	r3, r1
 800865c:	18d3      	adds	r3, r2, r3
 800865e:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color << 4) | Color;
 8008660:	1dbb      	adds	r3, r7, #6
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	b25a      	sxtb	r2, r3
 8008668:	1dbb      	adds	r3, r7, #6
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b25b      	sxtb	r3, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	b259      	sxtb	r1, r3
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <Paint_Clear+0x118>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	18d3      	adds	r3, r2, r3
 800867a:	b2ca      	uxtb	r2, r1
 800867c:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 800867e:	183b      	adds	r3, r7, r0
 8008680:	881a      	ldrh	r2, [r3, #0]
 8008682:	183b      	adds	r3, r7, r0
 8008684:	3201      	adds	r2, #1
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <Paint_Clear+0x118>)
 800868a:	8a5b      	ldrh	r3, [r3, #18]
 800868c:	2210      	movs	r2, #16
 800868e:	18ba      	adds	r2, r7, r2
 8008690:	8812      	ldrh	r2, [r2, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d3d9      	bcc.n	800864a <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008696:	2112      	movs	r1, #18
 8008698:	187b      	adds	r3, r7, r1
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	187b      	adds	r3, r7, r1
 800869e:	3201      	adds	r2, #1
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	4b06      	ldr	r3, [pc, #24]	; (80086bc <Paint_Clear+0x118>)
 80086a4:	8a9b      	ldrh	r3, [r3, #20]
 80086a6:	2212      	movs	r2, #18
 80086a8:	18ba      	adds	r2, r7, r2
 80086aa:	8812      	ldrh	r2, [r2, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3c7      	bcc.n	8008640 <Paint_Clear+0x9c>
			}
		}
	}
}
 80086b0:	e7ff      	b.n	80086b2 <Paint_Clear+0x10e>
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b006      	add	sp, #24
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	200005e4 	.word	0x200005e4

080086c0 <Paint_DrawPoint>:
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
		DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 80086c0:	b5b0      	push	{r4, r5, r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	0005      	movs	r5, r0
 80086c8:	000c      	movs	r4, r1
 80086ca:	0010      	movs	r0, r2
 80086cc:	0019      	movs	r1, r3
 80086ce:	1dbb      	adds	r3, r7, #6
 80086d0:	1c2a      	adds	r2, r5, #0
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	1d3b      	adds	r3, r7, #4
 80086d6:	1c22      	adds	r2, r4, #0
 80086d8:	801a      	strh	r2, [r3, #0]
 80086da:	1cbb      	adds	r3, r7, #2
 80086dc:	1c02      	adds	r2, r0, #0
 80086de:	801a      	strh	r2, [r3, #0]
 80086e0:	1c7b      	adds	r3, r7, #1
 80086e2:	1c0a      	adds	r2, r1, #0
 80086e4:	701a      	strb	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80086e6:	4b67      	ldr	r3, [pc, #412]	; (8008884 <Paint_DrawPoint+0x1c4>)
 80086e8:	889b      	ldrh	r3, [r3, #4]
 80086ea:	1dba      	adds	r2, r7, #6
 80086ec:	8812      	ldrh	r2, [r2, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d805      	bhi.n	80086fe <Paint_DrawPoint+0x3e>
 80086f2:	4b64      	ldr	r3, [pc, #400]	; (8008884 <Paint_DrawPoint+0x1c4>)
 80086f4:	88db      	ldrh	r3, [r3, #6]
 80086f6:	1d3a      	adds	r2, r7, #4
 80086f8:	8812      	ldrh	r2, [r2, #0]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d916      	bls.n	800872c <Paint_DrawPoint+0x6c>
		Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 80086fe:	4b62      	ldr	r3, [pc, #392]	; (8008888 <Paint_DrawPoint+0x1c8>)
 8008700:	0018      	movs	r0, r3
 8008702:	f006 fba9 	bl	800ee58 <puts>
		printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 8008706:	1dbb      	adds	r3, r7, #6
 8008708:	8819      	ldrh	r1, [r3, #0]
 800870a:	4b5e      	ldr	r3, [pc, #376]	; (8008884 <Paint_DrawPoint+0x1c4>)
 800870c:	889b      	ldrh	r3, [r3, #4]
 800870e:	001a      	movs	r2, r3
 8008710:	4b5e      	ldr	r3, [pc, #376]	; (800888c <Paint_DrawPoint+0x1cc>)
 8008712:	0018      	movs	r0, r3
 8008714:	f006 fb14 	bl	800ed40 <iprintf>
		printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 8008718:	1d3b      	adds	r3, r7, #4
 800871a:	8819      	ldrh	r1, [r3, #0]
 800871c:	4b59      	ldr	r3, [pc, #356]	; (8008884 <Paint_DrawPoint+0x1c4>)
 800871e:	88db      	ldrh	r3, [r3, #6]
 8008720:	001a      	movs	r2, r3
 8008722:	4b5b      	ldr	r3, [pc, #364]	; (8008890 <Paint_DrawPoint+0x1d0>)
 8008724:	0018      	movs	r0, r3
 8008726:	f006 fb0b 	bl	800ed40 <iprintf>
		return;
 800872a:	e0a8      	b.n	800887e <Paint_DrawPoint+0x1be>
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 800872c:	2320      	movs	r3, #32
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d161      	bne.n	80087fa <Paint_DrawPoint+0x13a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008736:	230e      	movs	r3, #14
 8008738:	18fb      	adds	r3, r7, r3
 800873a:	2200      	movs	r2, #0
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	e051      	b.n	80087e4 <Paint_DrawPoint+0x124>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008740:	230c      	movs	r3, #12
 8008742:	18fb      	adds	r3, r7, r3
 8008744:	2200      	movs	r2, #0
 8008746:	801a      	strh	r2, [r3, #0]
 8008748:	e039      	b.n	80087be <Paint_DrawPoint+0xfe>
				if (Xpoint + XDir_Num - Dot_Pixel < 0
 800874a:	1dbb      	adds	r3, r7, #6
 800874c:	881a      	ldrh	r2, [r3, #0]
 800874e:	200e      	movs	r0, #14
 8008750:	183b      	adds	r3, r7, r0
 8008752:	2100      	movs	r1, #0
 8008754:	5e5b      	ldrsh	r3, [r3, r1]
 8008756:	18d2      	adds	r2, r2, r3
 8008758:	1c7b      	adds	r3, r7, #1
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	d438      	bmi.n	80087d2 <Paint_DrawPoint+0x112>
						|| Ypoint + YDir_Num - Dot_Pixel < 0)
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	881a      	ldrh	r2, [r3, #0]
 8008764:	210c      	movs	r1, #12
 8008766:	187b      	adds	r3, r7, r1
 8008768:	2400      	movs	r4, #0
 800876a:	5f1b      	ldrsh	r3, [r3, r4]
 800876c:	18d2      	adds	r2, r2, r3
 800876e:	1c7b      	adds	r3, r7, #1
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	d42d      	bmi.n	80087d2 <Paint_DrawPoint+0x112>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008776:	183b      	adds	r3, r7, r0
 8008778:	881a      	ldrh	r2, [r3, #0]
 800877a:	1dbb      	adds	r3, r7, #6
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	18d3      	adds	r3, r2, r3
 8008780:	b29a      	uxth	r2, r3
 8008782:	1c7b      	adds	r3, r7, #1
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	b298      	uxth	r0, r3
						Ypoint + YDir_Num - Dot_Pixel, Color);
 800878c:	000c      	movs	r4, r1
 800878e:	187b      	adds	r3, r7, r1
 8008790:	881a      	ldrh	r2, [r3, #0]
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	18d3      	adds	r3, r2, r3
 8008798:	b29a      	uxth	r2, r3
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 800879a:	1c7b      	adds	r3, r7, #1
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	b299      	uxth	r1, r3
 80087a4:	1cbb      	adds	r3, r7, #2
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	001a      	movs	r2, r3
 80087aa:	f7ff fd57 	bl	800825c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80087ae:	193b      	adds	r3, r7, r4
 80087b0:	2200      	movs	r2, #0
 80087b2:	5e9b      	ldrsh	r3, [r3, r2]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3301      	adds	r3, #1
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	193b      	adds	r3, r7, r4
 80087bc:	801a      	strh	r2, [r3, #0]
 80087be:	230c      	movs	r3, #12
 80087c0:	18fb      	adds	r3, r7, r3
 80087c2:	2200      	movs	r2, #0
 80087c4:	5e9a      	ldrsh	r2, [r3, r2]
 80087c6:	1c7b      	adds	r3, r7, #1
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	3b01      	subs	r3, #1
 80087ce:	429a      	cmp	r2, r3
 80087d0:	dbbb      	blt.n	800874a <Paint_DrawPoint+0x8a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80087d2:	210e      	movs	r1, #14
 80087d4:	187b      	adds	r3, r7, r1
 80087d6:	2200      	movs	r2, #0
 80087d8:	5e9b      	ldrsh	r3, [r3, r2]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3301      	adds	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	187b      	adds	r3, r7, r1
 80087e2:	801a      	strh	r2, [r3, #0]
 80087e4:	230e      	movs	r3, #14
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	2200      	movs	r2, #0
 80087ea:	5e9a      	ldrsh	r2, [r3, r2]
 80087ec:	1c7b      	adds	r3, r7, #1
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	3b01      	subs	r3, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	dba3      	blt.n	8008740 <Paint_DrawPoint+0x80>
 80087f8:	e041      	b.n	800887e <Paint_DrawPoint+0x1be>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 80087fa:	230e      	movs	r3, #14
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	2200      	movs	r2, #0
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	e034      	b.n	800886e <Paint_DrawPoint+0x1ae>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008804:	230c      	movs	r3, #12
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	2200      	movs	r2, #0
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	e01e      	b.n	800884c <Paint_DrawPoint+0x18c>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1,
 800880e:	230e      	movs	r3, #14
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	881a      	ldrh	r2, [r3, #0]
 8008814:	1dbb      	adds	r3, r7, #6
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	18d3      	adds	r3, r2, r3
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b298      	uxth	r0, r3
 8008820:	240c      	movs	r4, #12
 8008822:	193b      	adds	r3, r7, r4
 8008824:	881a      	ldrh	r2, [r3, #0]
 8008826:	1d3b      	adds	r3, r7, #4
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	18d3      	adds	r3, r2, r3
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	b299      	uxth	r1, r3
 8008832:	1cbb      	adds	r3, r7, #2
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	001a      	movs	r2, r3
 8008838:	f7ff fd10 	bl	800825c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 800883c:	193b      	adds	r3, r7, r4
 800883e:	2200      	movs	r2, #0
 8008840:	5e9b      	ldrsh	r3, [r3, r2]
 8008842:	b29b      	uxth	r3, r3
 8008844:	3301      	adds	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	193b      	adds	r3, r7, r4
 800884a:	801a      	strh	r2, [r3, #0]
 800884c:	230c      	movs	r3, #12
 800884e:	18fb      	adds	r3, r7, r3
 8008850:	2200      	movs	r2, #0
 8008852:	5e9a      	ldrsh	r2, [r3, r2]
 8008854:	1c7b      	adds	r3, r7, #1
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	dbd8      	blt.n	800880e <Paint_DrawPoint+0x14e>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 800885c:	210e      	movs	r1, #14
 800885e:	187b      	adds	r3, r7, r1
 8008860:	2200      	movs	r2, #0
 8008862:	5e9b      	ldrsh	r3, [r3, r2]
 8008864:	b29b      	uxth	r3, r3
 8008866:	3301      	adds	r3, #1
 8008868:	b29a      	uxth	r2, r3
 800886a:	187b      	adds	r3, r7, r1
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	230e      	movs	r3, #14
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	2200      	movs	r2, #0
 8008874:	5e9a      	ldrsh	r2, [r3, r2]
 8008876:	1c7b      	adds	r3, r7, #1
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	dbc2      	blt.n	8008804 <Paint_DrawPoint+0x144>
						Color);
			}
		}
	}
}
 800887e:	46bd      	mov	sp, r7
 8008880:	b004      	add	sp, #16
 8008882:	bdb0      	pop	{r4, r5, r7, pc}
 8008884:	200005e4 	.word	0x200005e4
 8008888:	080116c0 	.word	0x080116c0
 800888c:	08011700 	.word	0x08011700
 8008890:	08011724 	.word	0x08011724

08008894 <Paint_DrawLine>:
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008894:	b5b0      	push	{r4, r5, r7, lr}
 8008896:	b08c      	sub	sp, #48	; 0x30
 8008898:	af02      	add	r7, sp, #8
 800889a:	0005      	movs	r5, r0
 800889c:	000c      	movs	r4, r1
 800889e:	0010      	movs	r0, r2
 80088a0:	0019      	movs	r1, r3
 80088a2:	1dbb      	adds	r3, r7, #6
 80088a4:	1c2a      	adds	r2, r5, #0
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	1d3b      	adds	r3, r7, #4
 80088aa:	1c22      	adds	r2, r4, #0
 80088ac:	801a      	strh	r2, [r3, #0]
 80088ae:	1cbb      	adds	r3, r7, #2
 80088b0:	1c02      	adds	r2, r0, #0
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	003b      	movs	r3, r7
 80088b6:	1c0a      	adds	r2, r1, #0
 80088b8:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 80088ba:	4b63      	ldr	r3, [pc, #396]	; (8008a48 <Paint_DrawLine+0x1b4>)
 80088bc:	889b      	ldrh	r3, [r3, #4]
 80088be:	1dba      	adds	r2, r7, #6
 80088c0:	8812      	ldrh	r2, [r2, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d811      	bhi.n	80088ea <Paint_DrawLine+0x56>
 80088c6:	4b60      	ldr	r3, [pc, #384]	; (8008a48 <Paint_DrawLine+0x1b4>)
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	1d3a      	adds	r2, r7, #4
 80088cc:	8812      	ldrh	r2, [r2, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d80b      	bhi.n	80088ea <Paint_DrawLine+0x56>
 80088d2:	4b5d      	ldr	r3, [pc, #372]	; (8008a48 <Paint_DrawLine+0x1b4>)
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	1cba      	adds	r2, r7, #2
 80088d8:	8812      	ldrh	r2, [r2, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d805      	bhi.n	80088ea <Paint_DrawLine+0x56>
			|| Yend > Paint.Height) {
 80088de:	4b5a      	ldr	r3, [pc, #360]	; (8008a48 <Paint_DrawLine+0x1b4>)
 80088e0:	88db      	ldrh	r3, [r3, #6]
 80088e2:	003a      	movs	r2, r7
 80088e4:	8812      	ldrh	r2, [r2, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d904      	bls.n	80088f4 <Paint_DrawLine+0x60>
		Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80088ea:	4b58      	ldr	r3, [pc, #352]	; (8008a4c <Paint_DrawLine+0x1b8>)
 80088ec:	0018      	movs	r0, r3
 80088ee:	f006 fab3 	bl	800ee58 <puts>
		return;
 80088f2:	e0a5      	b.n	8008a40 <Paint_DrawLine+0x1ac>
	}

	UWORD Xpoint = Xstart;
 80088f4:	2326      	movs	r3, #38	; 0x26
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	1dba      	adds	r2, r7, #6
 80088fa:	8812      	ldrh	r2, [r2, #0]
 80088fc:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 80088fe:	2324      	movs	r3, #36	; 0x24
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	1d3a      	adds	r2, r7, #4
 8008904:	8812      	ldrh	r2, [r2, #0]
 8008906:	801a      	strh	r2, [r3, #0]
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008908:	1cbb      	adds	r3, r7, #2
 800890a:	881a      	ldrh	r2, [r3, #0]
 800890c:	1dbb      	adds	r3, r7, #6
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	17da      	asrs	r2, r3, #31
 8008914:	189b      	adds	r3, r3, r2
 8008916:	4053      	eors	r3, r2
 8008918:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800891a:	003b      	movs	r3, r7
 800891c:	881a      	ldrh	r2, [r3, #0]
 800891e:	1d3b      	adds	r3, r7, #4
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	17da      	asrs	r2, r3, #31
 8008926:	189b      	adds	r3, r3, r2
 8008928:	4053      	eors	r3, r2
 800892a:	425b      	negs	r3, r3
 800892c:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 800892e:	1dba      	adds	r2, r7, #6
 8008930:	1cbb      	adds	r3, r7, #2
 8008932:	8812      	ldrh	r2, [r2, #0]
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d201      	bcs.n	800893e <Paint_DrawLine+0xaa>
 800893a:	2301      	movs	r3, #1
 800893c:	e001      	b.n	8008942 <Paint_DrawLine+0xae>
 800893e:	2301      	movs	r3, #1
 8008940:	425b      	negs	r3, r3
 8008942:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 8008944:	1d3a      	adds	r2, r7, #4
 8008946:	003b      	movs	r3, r7
 8008948:	8812      	ldrh	r2, [r2, #0]
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d201      	bcs.n	8008954 <Paint_DrawLine+0xc0>
 8008950:	2301      	movs	r3, #1
 8008952:	e001      	b.n	8008958 <Paint_DrawLine+0xc4>
 8008954:	2301      	movs	r3, #1
 8008956:	425b      	negs	r3, r3
 8008958:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	18d3      	adds	r3, r2, r3
 8008960:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 8008962:	231f      	movs	r3, #31
 8008964:	18fb      	adds	r3, r7, r3
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]

	for (;;) {
		Dotted_Len++;
 800896a:	241f      	movs	r4, #31
 800896c:	193b      	adds	r3, r7, r4
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	193b      	adds	r3, r7, r4
 8008972:	3201      	adds	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	18fb      	adds	r3, r7, r3
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d11c      	bne.n	80089ba <Paint_DrawLine+0x126>
 8008980:	193b      	adds	r3, r7, r4
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2103      	movs	r1, #3
 8008986:	0018      	movs	r0, r3
 8008988:	f7f7 fc4c 	bl	8000224 <__aeabi_uidivmod>
 800898c:	000b      	movs	r3, r1
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d112      	bne.n	80089ba <Paint_DrawLine+0x126>
			//Debug("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width,
 8008994:	233c      	movs	r3, #60	; 0x3c
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	2324      	movs	r3, #36	; 0x24
 800899c:	18fb      	adds	r3, r7, r3
 800899e:	8819      	ldrh	r1, [r3, #0]
 80089a0:	2326      	movs	r3, #38	; 0x26
 80089a2:	18fb      	adds	r3, r7, r3
 80089a4:	8818      	ldrh	r0, [r3, #0]
 80089a6:	2301      	movs	r3, #1
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	0013      	movs	r3, r2
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	f7ff fe87 	bl	80086c0 <Paint_DrawPoint>
					DOT_STYLE_DFT);
			Dotted_Len = 0;
 80089b2:	193b      	adds	r3, r7, r4
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e010      	b.n	80089dc <Paint_DrawLine+0x148>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80089ba:	233c      	movs	r3, #60	; 0x3c
 80089bc:	18fb      	adds	r3, r7, r3
 80089be:	781c      	ldrb	r4, [r3, #0]
 80089c0:	2338      	movs	r3, #56	; 0x38
 80089c2:	18fb      	adds	r3, r7, r3
 80089c4:	881a      	ldrh	r2, [r3, #0]
 80089c6:	2324      	movs	r3, #36	; 0x24
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	8819      	ldrh	r1, [r3, #0]
 80089cc:	2326      	movs	r3, #38	; 0x26
 80089ce:	18fb      	adds	r3, r7, r3
 80089d0:	8818      	ldrh	r0, [r3, #0]
 80089d2:	2301      	movs	r3, #1
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	0023      	movs	r3, r4
 80089d8:	f7ff fe72 	bl	80086c0 <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	dc11      	bgt.n	8008a0a <Paint_DrawLine+0x176>
			if (Xpoint == Xend)
 80089e6:	2026      	movs	r0, #38	; 0x26
 80089e8:	183a      	adds	r2, r7, r0
 80089ea:	1cbb      	adds	r3, r7, #2
 80089ec:	8812      	ldrh	r2, [r2, #0]
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d022      	beq.n	8008a3a <Paint_DrawLine+0x1a6>
				break;
			Esp += dy;
 80089f4:	6a3a      	ldr	r2, [r7, #32]
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	18d3      	adds	r3, r2, r3
 80089fa:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	b299      	uxth	r1, r3
 8008a00:	183b      	adds	r3, r7, r0
 8008a02:	183a      	adds	r2, r7, r0
 8008a04:	8812      	ldrh	r2, [r2, #0]
 8008a06:	188a      	adds	r2, r1, r2
 8008a08:	801a      	strh	r2, [r3, #0]
		}
		if (2 * Esp <= dx) {
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	dbaa      	blt.n	800896a <Paint_DrawLine+0xd6>
			if (Ypoint == Yend)
 8008a14:	2024      	movs	r0, #36	; 0x24
 8008a16:	183a      	adds	r2, r7, r0
 8008a18:	003b      	movs	r3, r7
 8008a1a:	8812      	ldrh	r2, [r2, #0]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d00d      	beq.n	8008a3e <Paint_DrawLine+0x1aa>
				break;
			Esp += dx;
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	18d3      	adds	r3, r2, r3
 8008a28:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	b299      	uxth	r1, r3
 8008a2e:	183b      	adds	r3, r7, r0
 8008a30:	183a      	adds	r2, r7, r0
 8008a32:	8812      	ldrh	r2, [r2, #0]
 8008a34:	188a      	adds	r2, r1, r2
 8008a36:	801a      	strh	r2, [r3, #0]
		Dotted_Len++;
 8008a38:	e797      	b.n	800896a <Paint_DrawLine+0xd6>
				break;
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	e000      	b.n	8008a40 <Paint_DrawLine+0x1ac>
				break;
 8008a3e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b00a      	add	sp, #40	; 0x28
 8008a44:	bdb0      	pop	{r4, r5, r7, pc}
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	200005e4 	.word	0x200005e4
 8008a4c:	0801174c 	.word	0x0801174c

08008a50 <Paint_DrawPointer>:
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawPointer(UWORD Xstart, UWORD Ystart, float angle, UWORD length,
		UWORD shift,
		UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a52:	46ce      	mov	lr, r9
 8008a54:	4647      	mov	r7, r8
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b089      	sub	sp, #36	; 0x24
 8008a5a:	af04      	add	r7, sp, #16
 8008a5c:	0004      	movs	r4, r0
 8008a5e:	0008      	movs	r0, r1
 8008a60:	60ba      	str	r2, [r7, #8]
 8008a62:	0019      	movs	r1, r3
 8008a64:	260e      	movs	r6, #14
 8008a66:	19bb      	adds	r3, r7, r6
 8008a68:	1c22      	adds	r2, r4, #0
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	1c02      	adds	r2, r0, #0
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	1dbb      	adds	r3, r7, #6
 8008a76:	1c0a      	adds	r2, r1, #0
 8008a78:	801a      	strh	r2, [r3, #0]

	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7fa f9e4 	bl	8002e48 <__aeabi_f2d>
 8008a80:	0002      	movs	r2, r0
 8008a82:	000b      	movs	r3, r1
 8008a84:	0010      	movs	r0, r2
 8008a86:	0019      	movs	r1, r3
 8008a88:	f007 f8cc 	bl	800fc24 <cos>
 8008a8c:	0004      	movs	r4, r0
 8008a8e:	000d      	movs	r5, r1
 8008a90:	2130      	movs	r1, #48	; 0x30
 8008a92:	187b      	adds	r3, r7, r1
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	0018      	movs	r0, r3
 8008a98:	f7fa f980 	bl	8002d9c <__aeabi_i2d>
 8008a9c:	0002      	movs	r2, r0
 8008a9e:	000b      	movs	r3, r1
 8008aa0:	0020      	movs	r0, r4
 8008aa2:	0029      	movs	r1, r5
 8008aa4:	f7f9 fb28 	bl	80020f8 <__aeabi_dmul>
 8008aa8:	0002      	movs	r2, r0
 8008aaa:	000b      	movs	r3, r1
 8008aac:	0014      	movs	r4, r2
 8008aae:	001d      	movs	r5, r3
 8008ab0:	19bb      	adds	r3, r7, r6
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7fa f971 	bl	8002d9c <__aeabi_i2d>
 8008aba:	0002      	movs	r2, r0
 8008abc:	000b      	movs	r3, r1
 8008abe:	0020      	movs	r0, r4
 8008ac0:	0029      	movs	r1, r5
 8008ac2:	f7f8 fba9 	bl	8001218 <__aeabi_dadd>
 8008ac6:	0002      	movs	r2, r0
 8008ac8:	000b      	movs	r3, r1
 8008aca:	0010      	movs	r0, r2
 8008acc:	0019      	movs	r1, r3
 8008ace:	f7f7 fd3b 	bl	8000548 <__aeabi_d2uiz>
 8008ad2:	0003      	movs	r3, r0
 8008ad4:	b29e      	uxth	r6, r3
			(sin(angle) * shift) + Ystart,
 8008ad6:	68b8      	ldr	r0, [r7, #8]
 8008ad8:	f7fa f9b6 	bl	8002e48 <__aeabi_f2d>
 8008adc:	0002      	movs	r2, r0
 8008ade:	000b      	movs	r3, r1
 8008ae0:	0010      	movs	r0, r2
 8008ae2:	0019      	movs	r1, r3
 8008ae4:	f007 f8e0 	bl	800fca8 <sin>
 8008ae8:	0004      	movs	r4, r0
 8008aea:	000d      	movs	r5, r1
 8008aec:	2130      	movs	r1, #48	; 0x30
 8008aee:	187b      	adds	r3, r7, r1
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	0018      	movs	r0, r3
 8008af4:	f7fa f952 	bl	8002d9c <__aeabi_i2d>
 8008af8:	0002      	movs	r2, r0
 8008afa:	000b      	movs	r3, r1
 8008afc:	0020      	movs	r0, r4
 8008afe:	0029      	movs	r1, r5
 8008b00:	f7f9 fafa 	bl	80020f8 <__aeabi_dmul>
 8008b04:	0002      	movs	r2, r0
 8008b06:	000b      	movs	r3, r1
 8008b08:	0014      	movs	r4, r2
 8008b0a:	001d      	movs	r5, r3
 8008b0c:	220c      	movs	r2, #12
 8008b0e:	18bb      	adds	r3, r7, r2
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	0018      	movs	r0, r3
 8008b14:	f7fa f942 	bl	8002d9c <__aeabi_i2d>
 8008b18:	0002      	movs	r2, r0
 8008b1a:	000b      	movs	r3, r1
 8008b1c:	0020      	movs	r0, r4
 8008b1e:	0029      	movs	r1, r5
 8008b20:	f7f8 fb7a 	bl	8001218 <__aeabi_dadd>
 8008b24:	0002      	movs	r2, r0
 8008b26:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008b28:	0010      	movs	r0, r2
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	f7f7 fd0c 	bl	8000548 <__aeabi_d2uiz>
 8008b30:	0003      	movs	r3, r0
 8008b32:	b299      	uxth	r1, r3
 8008b34:	4688      	mov	r8, r1
			(cos(angle) * length) + Xstart,
 8008b36:	68b8      	ldr	r0, [r7, #8]
 8008b38:	f7fa f986 	bl	8002e48 <__aeabi_f2d>
 8008b3c:	0002      	movs	r2, r0
 8008b3e:	000b      	movs	r3, r1
 8008b40:	0010      	movs	r0, r2
 8008b42:	0019      	movs	r1, r3
 8008b44:	f007 f86e 	bl	800fc24 <cos>
 8008b48:	0004      	movs	r4, r0
 8008b4a:	000d      	movs	r5, r1
 8008b4c:	1dbb      	adds	r3, r7, #6
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7fa f923 	bl	8002d9c <__aeabi_i2d>
 8008b56:	0002      	movs	r2, r0
 8008b58:	000b      	movs	r3, r1
 8008b5a:	0020      	movs	r0, r4
 8008b5c:	0029      	movs	r1, r5
 8008b5e:	f7f9 facb 	bl	80020f8 <__aeabi_dmul>
 8008b62:	0002      	movs	r2, r0
 8008b64:	000b      	movs	r3, r1
 8008b66:	0014      	movs	r4, r2
 8008b68:	001d      	movs	r5, r3
 8008b6a:	230e      	movs	r3, #14
 8008b6c:	18fb      	adds	r3, r7, r3
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7fa f913 	bl	8002d9c <__aeabi_i2d>
 8008b76:	0002      	movs	r2, r0
 8008b78:	000b      	movs	r3, r1
 8008b7a:	0020      	movs	r0, r4
 8008b7c:	0029      	movs	r1, r5
 8008b7e:	f7f8 fb4b 	bl	8001218 <__aeabi_dadd>
 8008b82:	0002      	movs	r2, r0
 8008b84:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008b86:	0010      	movs	r0, r2
 8008b88:	0019      	movs	r1, r3
 8008b8a:	f7f7 fcdd 	bl	8000548 <__aeabi_d2uiz>
 8008b8e:	0003      	movs	r3, r0
 8008b90:	b299      	uxth	r1, r3
 8008b92:	4689      	mov	r9, r1
			(sin(angle) * length) + Ystart,
 8008b94:	68b8      	ldr	r0, [r7, #8]
 8008b96:	f7fa f957 	bl	8002e48 <__aeabi_f2d>
 8008b9a:	0002      	movs	r2, r0
 8008b9c:	000b      	movs	r3, r1
 8008b9e:	0010      	movs	r0, r2
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	f007 f881 	bl	800fca8 <sin>
 8008ba6:	0004      	movs	r4, r0
 8008ba8:	000d      	movs	r5, r1
 8008baa:	1dbb      	adds	r3, r7, #6
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7fa f8f4 	bl	8002d9c <__aeabi_i2d>
 8008bb4:	0002      	movs	r2, r0
 8008bb6:	000b      	movs	r3, r1
 8008bb8:	0020      	movs	r0, r4
 8008bba:	0029      	movs	r1, r5
 8008bbc:	f7f9 fa9c 	bl	80020f8 <__aeabi_dmul>
 8008bc0:	0002      	movs	r2, r0
 8008bc2:	000b      	movs	r3, r1
 8008bc4:	0014      	movs	r4, r2
 8008bc6:	001d      	movs	r5, r3
 8008bc8:	220c      	movs	r2, #12
 8008bca:	18bb      	adds	r3, r7, r2
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7fa f8e4 	bl	8002d9c <__aeabi_i2d>
 8008bd4:	0002      	movs	r2, r0
 8008bd6:	000b      	movs	r3, r1
 8008bd8:	0020      	movs	r0, r4
 8008bda:	0029      	movs	r1, r5
 8008bdc:	f7f8 fb1c 	bl	8001218 <__aeabi_dadd>
 8008be0:	0002      	movs	r2, r0
 8008be2:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008be4:	0010      	movs	r0, r2
 8008be6:	0019      	movs	r1, r3
 8008be8:	f7f7 fcae 	bl	8000548 <__aeabi_d2uiz>
 8008bec:	0003      	movs	r3, r0
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	233c      	movs	r3, #60	; 0x3c
 8008bf2:	18fb      	adds	r3, r7, r3
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	9302      	str	r3, [sp, #8]
 8008bf8:	2338      	movs	r3, #56	; 0x38
 8008bfa:	18fb      	adds	r3, r7, r3
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	2334      	movs	r3, #52	; 0x34
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	0013      	movs	r3, r2
 8008c0a:	464a      	mov	r2, r9
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	0030      	movs	r0, r6
 8008c10:	f7ff fe40 	bl	8008894 <Paint_DrawLine>
			Color, Line_width, Line_Style);
}
 8008c14:	46c0      	nop			; (mov r8, r8)
 8008c16:	46bd      	mov	sp, r7
 8008c18:	b005      	add	sp, #20
 8008c1a:	bcc0      	pop	{r6, r7}
 8008c1c:	46b9      	mov	r9, r7
 8008c1e:	46b0      	mov	r8, r6
 8008c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008c24 <Paint_DrawRectangle>:
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8008c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c26:	b089      	sub	sp, #36	; 0x24
 8008c28:	af04      	add	r7, sp, #16
 8008c2a:	0005      	movs	r5, r0
 8008c2c:	000c      	movs	r4, r1
 8008c2e:	0010      	movs	r0, r2
 8008c30:	0019      	movs	r1, r3
 8008c32:	1dbb      	adds	r3, r7, #6
 8008c34:	1c2a      	adds	r2, r5, #0
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	1d3b      	adds	r3, r7, #4
 8008c3a:	1c22      	adds	r2, r4, #0
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	1cbb      	adds	r3, r7, #2
 8008c40:	1c02      	adds	r2, r0, #0
 8008c42:	801a      	strh	r2, [r3, #0]
 8008c44:	003b      	movs	r3, r7
 8008c46:	1c0a      	adds	r2, r1, #0
 8008c48:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8008c4a:	4b5a      	ldr	r3, [pc, #360]	; (8008db4 <Paint_DrawRectangle+0x190>)
 8008c4c:	889b      	ldrh	r3, [r3, #4]
 8008c4e:	1dba      	adds	r2, r7, #6
 8008c50:	8812      	ldrh	r2, [r2, #0]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d811      	bhi.n	8008c7a <Paint_DrawRectangle+0x56>
 8008c56:	4b57      	ldr	r3, [pc, #348]	; (8008db4 <Paint_DrawRectangle+0x190>)
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	1d3a      	adds	r2, r7, #4
 8008c5c:	8812      	ldrh	r2, [r2, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d80b      	bhi.n	8008c7a <Paint_DrawRectangle+0x56>
 8008c62:	4b54      	ldr	r3, [pc, #336]	; (8008db4 <Paint_DrawRectangle+0x190>)
 8008c64:	889b      	ldrh	r3, [r3, #4]
 8008c66:	1cba      	adds	r2, r7, #2
 8008c68:	8812      	ldrh	r2, [r2, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d805      	bhi.n	8008c7a <Paint_DrawRectangle+0x56>
			|| Yend > Paint.Height) {
 8008c6e:	4b51      	ldr	r3, [pc, #324]	; (8008db4 <Paint_DrawRectangle+0x190>)
 8008c70:	88db      	ldrh	r3, [r3, #6]
 8008c72:	003a      	movs	r2, r7
 8008c74:	8812      	ldrh	r2, [r2, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d904      	bls.n	8008c84 <Paint_DrawRectangle+0x60>
		Debug("Input exceeds the normal display range\r\n");
 8008c7a:	4b4f      	ldr	r3, [pc, #316]	; (8008db8 <Paint_DrawRectangle+0x194>)
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f006 f8eb 	bl	800ee58 <puts>
		return;
 8008c82:	e094      	b.n	8008dae <Paint_DrawRectangle+0x18a>
	}

	if (Draw_Fill) {
 8008c84:	2328      	movs	r3, #40	; 0x28
 8008c86:	2208      	movs	r2, #8
 8008c88:	4694      	mov	ip, r2
 8008c8a:	44bc      	add	ip, r7
 8008c8c:	4463      	add	r3, ip
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d02e      	beq.n	8008cf2 <Paint_DrawRectangle+0xce>
		UWORD Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8008c94:	230e      	movs	r3, #14
 8008c96:	18fb      	adds	r3, r7, r3
 8008c98:	1d3a      	adds	r2, r7, #4
 8008c9a:	8812      	ldrh	r2, [r2, #0]
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e020      	b.n	8008ce2 <Paint_DrawRectangle+0xbe>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width,
 8008ca0:	250e      	movs	r5, #14
 8008ca2:	197b      	adds	r3, r7, r5
 8008ca4:	881c      	ldrh	r4, [r3, #0]
 8008ca6:	1cbb      	adds	r3, r7, #2
 8008ca8:	881a      	ldrh	r2, [r3, #0]
 8008caa:	197b      	adds	r3, r7, r5
 8008cac:	8819      	ldrh	r1, [r3, #0]
 8008cae:	1dbb      	adds	r3, r7, #6
 8008cb0:	8818      	ldrh	r0, [r3, #0]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	2324      	movs	r3, #36	; 0x24
 8008cb8:	2608      	movs	r6, #8
 8008cba:	46b4      	mov	ip, r6
 8008cbc:	44bc      	add	ip, r7
 8008cbe:	4463      	add	r3, ip
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	2608      	movs	r6, #8
 8008cc8:	46b4      	mov	ip, r6
 8008cca:	44bc      	add	ip, r7
 8008ccc:	4463      	add	r3, ip
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	0023      	movs	r3, r4
 8008cd4:	f7ff fdde 	bl	8008894 <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8008cd8:	197b      	adds	r3, r7, r5
 8008cda:	881a      	ldrh	r2, [r3, #0]
 8008cdc:	197b      	adds	r3, r7, r5
 8008cde:	3201      	adds	r2, #1
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	230e      	movs	r3, #14
 8008ce4:	18fa      	adds	r2, r7, r3
 8008ce6:	003b      	movs	r3, r7
 8008ce8:	8812      	ldrh	r2, [r2, #0]
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d3d7      	bcc.n	8008ca0 <Paint_DrawRectangle+0x7c>
 8008cf0:	e05d      	b.n	8008dae <Paint_DrawRectangle+0x18a>
					LINE_STYLE_SOLID);
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width,
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	881c      	ldrh	r4, [r3, #0]
 8008cf6:	1cbb      	adds	r3, r7, #2
 8008cf8:	881a      	ldrh	r2, [r3, #0]
 8008cfa:	1d3b      	adds	r3, r7, #4
 8008cfc:	8819      	ldrh	r1, [r3, #0]
 8008cfe:	1dbb      	adds	r3, r7, #6
 8008d00:	8818      	ldrh	r0, [r3, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9302      	str	r3, [sp, #8]
 8008d06:	2524      	movs	r5, #36	; 0x24
 8008d08:	2308      	movs	r3, #8
 8008d0a:	18fe      	adds	r6, r7, r3
 8008d0c:	1973      	adds	r3, r6, r5
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	2620      	movs	r6, #32
 8008d14:	2308      	movs	r3, #8
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	199b      	adds	r3, r3, r6
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	0023      	movs	r3, r4
 8008d20:	f7ff fdb8 	bl	8008894 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width,
 8008d24:	003b      	movs	r3, r7
 8008d26:	881c      	ldrh	r4, [r3, #0]
 8008d28:	1dbb      	adds	r3, r7, #6
 8008d2a:	881a      	ldrh	r2, [r3, #0]
 8008d2c:	1d3b      	adds	r3, r7, #4
 8008d2e:	8819      	ldrh	r1, [r3, #0]
 8008d30:	1dbb      	adds	r3, r7, #6
 8008d32:	8818      	ldrh	r0, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	9302      	str	r3, [sp, #8]
 8008d38:	2308      	movs	r3, #8
 8008d3a:	18fb      	adds	r3, r7, r3
 8008d3c:	195b      	adds	r3, r3, r5
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	2308      	movs	r3, #8
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	199b      	adds	r3, r3, r6
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	0023      	movs	r3, r4
 8008d4e:	f7ff fda1 	bl	8008894 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width,
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	881c      	ldrh	r4, [r3, #0]
 8008d56:	1cbb      	adds	r3, r7, #2
 8008d58:	881a      	ldrh	r2, [r3, #0]
 8008d5a:	003b      	movs	r3, r7
 8008d5c:	8819      	ldrh	r1, [r3, #0]
 8008d5e:	1cbb      	adds	r3, r7, #2
 8008d60:	8818      	ldrh	r0, [r3, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	2308      	movs	r3, #8
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	195b      	adds	r3, r3, r5
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	2308      	movs	r3, #8
 8008d72:	18fb      	adds	r3, r7, r3
 8008d74:	199b      	adds	r3, r3, r6
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	0023      	movs	r3, r4
 8008d7c:	f7ff fd8a 	bl	8008894 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width,
 8008d80:	003b      	movs	r3, r7
 8008d82:	881c      	ldrh	r4, [r3, #0]
 8008d84:	1dbb      	adds	r3, r7, #6
 8008d86:	881a      	ldrh	r2, [r3, #0]
 8008d88:	003b      	movs	r3, r7
 8008d8a:	8819      	ldrh	r1, [r3, #0]
 8008d8c:	1cbb      	adds	r3, r7, #2
 8008d8e:	8818      	ldrh	r0, [r3, #0]
 8008d90:	2300      	movs	r3, #0
 8008d92:	9302      	str	r3, [sp, #8]
 8008d94:	2308      	movs	r3, #8
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	195b      	adds	r3, r3, r5
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	2308      	movs	r3, #8
 8008da0:	18fb      	adds	r3, r7, r3
 8008da2:	199b      	adds	r3, r3, r6
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	0023      	movs	r3, r4
 8008daa:	f7ff fd73 	bl	8008894 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}
}
 8008dae:	46bd      	mov	sp, r7
 8008db0:	b005      	add	sp, #20
 8008db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db4:	200005e4 	.word	0x200005e4
 8008db8:	0801178c 	.word	0x0801178c

08008dbc <Paint_DrawCircle>:
 Color     ：The color of the ：circle segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the Circle
 ******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8008dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	0005      	movs	r5, r0
 8008dc4:	000c      	movs	r4, r1
 8008dc6:	0010      	movs	r0, r2
 8008dc8:	0019      	movs	r1, r3
 8008dca:	1dbb      	adds	r3, r7, #6
 8008dcc:	1c2a      	adds	r2, r5, #0
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	1d3b      	adds	r3, r7, #4
 8008dd2:	1c22      	adds	r2, r4, #0
 8008dd4:	801a      	strh	r2, [r3, #0]
 8008dd6:	1cbb      	adds	r3, r7, #2
 8008dd8:	1c02      	adds	r2, r0, #0
 8008dda:	801a      	strh	r2, [r3, #0]
 8008ddc:	003b      	movs	r3, r7
 8008dde:	1c0a      	adds	r2, r1, #0
 8008de0:	801a      	strh	r2, [r3, #0]
	if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8008de2:	4b94      	ldr	r3, [pc, #592]	; (8009034 <Paint_DrawCircle+0x278>)
 8008de4:	889b      	ldrh	r3, [r3, #4]
 8008de6:	1dba      	adds	r2, r7, #6
 8008de8:	8812      	ldrh	r2, [r2, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d805      	bhi.n	8008dfa <Paint_DrawCircle+0x3e>
 8008dee:	4b91      	ldr	r3, [pc, #580]	; (8009034 <Paint_DrawCircle+0x278>)
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	1d3a      	adds	r2, r7, #4
 8008df4:	8812      	ldrh	r2, [r2, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d304      	bcc.n	8008e04 <Paint_DrawCircle+0x48>
		Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8008dfa:	4b8f      	ldr	r3, [pc, #572]	; (8009038 <Paint_DrawCircle+0x27c>)
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f006 f82b 	bl	800ee58 <puts>
		return;
 8008e02:	e229      	b.n	8009258 <Paint_DrawCircle+0x49c>
	}

	//Draw a circle from(0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0;
 8008e04:	230e      	movs	r3, #14
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	2200      	movs	r2, #0
 8008e0a:	801a      	strh	r2, [r3, #0]
	YCurrent = Radius;
 8008e0c:	230c      	movs	r3, #12
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	1cba      	adds	r2, r7, #2
 8008e12:	8812      	ldrh	r2, [r2, #0]
 8008e14:	801a      	strh	r2, [r3, #0]

	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - (Radius << 1);
 8008e16:	1cbb      	adds	r3, r7, #2
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	18db      	adds	r3, r3, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2203      	movs	r2, #3
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	230a      	movs	r3, #10
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	801a      	strh	r2, [r3, #0]

	int16_t sCountY;
	if (Draw_Fill == DRAW_FILL_FULL) {
 8008e2a:	2324      	movs	r3, #36	; 0x24
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	4694      	mov	ip, r2
 8008e30:	44bc      	add	ip, r7
 8008e32:	4463      	add	r3, ip
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d000      	beq.n	8008e3c <Paint_DrawCircle+0x80>
 8008e3a:	e202      	b.n	8009242 <Paint_DrawCircle+0x486>
		while (XCurrent <= YCurrent) { //Realistic circles
 8008e3c:	e0ed      	b.n	800901a <Paint_DrawCircle+0x25e>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8008e3e:	2308      	movs	r3, #8
 8008e40:	18fb      	adds	r3, r7, r3
 8008e42:	220e      	movs	r2, #14
 8008e44:	18ba      	adds	r2, r7, r2
 8008e46:	8812      	ldrh	r2, [r2, #0]
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	e0a1      	b.n	8008f90 <Paint_DrawCircle+0x1d4>
				Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color,
 8008e4c:	250e      	movs	r5, #14
 8008e4e:	197b      	adds	r3, r7, r5
 8008e50:	881a      	ldrh	r2, [r3, #0]
 8008e52:	1dbb      	adds	r3, r7, #6
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	18d3      	adds	r3, r2, r3
 8008e58:	b298      	uxth	r0, r3
 8008e5a:	2408      	movs	r4, #8
 8008e5c:	193b      	adds	r3, r7, r4
 8008e5e:	881a      	ldrh	r2, [r3, #0]
 8008e60:	1d3b      	adds	r3, r7, #4
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	18d3      	adds	r3, r2, r3
 8008e66:	b299      	uxth	r1, r3
 8008e68:	003b      	movs	r3, r7
 8008e6a:	881a      	ldrh	r2, [r3, #0]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	2301      	movs	r3, #1
 8008e72:	f7ff fc25 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //1
				Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color,
 8008e76:	197b      	adds	r3, r7, r5
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	1dba      	adds	r2, r7, #6
 8008e7c:	8812      	ldrh	r2, [r2, #0]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	b298      	uxth	r0, r3
 8008e82:	193b      	adds	r3, r7, r4
 8008e84:	881a      	ldrh	r2, [r3, #0]
 8008e86:	1d3b      	adds	r3, r7, #4
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	18d3      	adds	r3, r2, r3
 8008e8c:	b299      	uxth	r1, r3
 8008e8e:	003b      	movs	r3, r7
 8008e90:	881a      	ldrh	r2, [r3, #0]
 8008e92:	2301      	movs	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2301      	movs	r3, #1
 8008e98:	f7ff fc12 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //2
				Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color,
 8008e9c:	193b      	adds	r3, r7, r4
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	1dba      	adds	r2, r7, #6
 8008ea2:	8812      	ldrh	r2, [r2, #0]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	b298      	uxth	r0, r3
 8008ea8:	197b      	adds	r3, r7, r5
 8008eaa:	881a      	ldrh	r2, [r3, #0]
 8008eac:	1d3b      	adds	r3, r7, #4
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	18d3      	adds	r3, r2, r3
 8008eb2:	b299      	uxth	r1, r3
 8008eb4:	003b      	movs	r3, r7
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f7ff fbff 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //3
				Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color,
 8008ec2:	193b      	adds	r3, r7, r4
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	1dba      	adds	r2, r7, #6
 8008ec8:	8812      	ldrh	r2, [r2, #0]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	b298      	uxth	r0, r3
 8008ece:	197b      	adds	r3, r7, r5
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	1d3a      	adds	r2, r7, #4
 8008ed4:	8812      	ldrh	r2, [r2, #0]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	b299      	uxth	r1, r3
 8008eda:	003b      	movs	r3, r7
 8008edc:	881a      	ldrh	r2, [r3, #0]
 8008ede:	2301      	movs	r3, #1
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f7ff fbec 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //4
				Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color,
 8008ee8:	197b      	adds	r3, r7, r5
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	1dba      	adds	r2, r7, #6
 8008eee:	8812      	ldrh	r2, [r2, #0]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	b298      	uxth	r0, r3
 8008ef4:	193b      	adds	r3, r7, r4
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	1d3a      	adds	r2, r7, #4
 8008efa:	8812      	ldrh	r2, [r2, #0]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	b299      	uxth	r1, r3
 8008f00:	003b      	movs	r3, r7
 8008f02:	881a      	ldrh	r2, [r3, #0]
 8008f04:	2301      	movs	r3, #1
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f7ff fbd9 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //5
				Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color,
 8008f0e:	197b      	adds	r3, r7, r5
 8008f10:	881a      	ldrh	r2, [r3, #0]
 8008f12:	1dbb      	adds	r3, r7, #6
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	18d3      	adds	r3, r2, r3
 8008f18:	b298      	uxth	r0, r3
 8008f1a:	193b      	adds	r3, r7, r4
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	1d3a      	adds	r2, r7, #4
 8008f20:	8812      	ldrh	r2, [r2, #0]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	b299      	uxth	r1, r3
 8008f26:	003b      	movs	r3, r7
 8008f28:	881a      	ldrh	r2, [r3, #0]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f7ff fbc6 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //6
				Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color,
 8008f34:	193b      	adds	r3, r7, r4
 8008f36:	881a      	ldrh	r2, [r3, #0]
 8008f38:	1dbb      	adds	r3, r7, #6
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	b298      	uxth	r0, r3
 8008f40:	197b      	adds	r3, r7, r5
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	1d3a      	adds	r2, r7, #4
 8008f46:	8812      	ldrh	r2, [r2, #0]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	b299      	uxth	r1, r3
 8008f4c:	003b      	movs	r3, r7
 8008f4e:	881a      	ldrh	r2, [r3, #0]
 8008f50:	2301      	movs	r3, #1
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	2301      	movs	r3, #1
 8008f56:	f7ff fbb3 	bl	80086c0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //7
				Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color,
 8008f5a:	193b      	adds	r3, r7, r4
 8008f5c:	881a      	ldrh	r2, [r3, #0]
 8008f5e:	1dbb      	adds	r3, r7, #6
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	18d3      	adds	r3, r2, r3
 8008f64:	b298      	uxth	r0, r3
 8008f66:	197b      	adds	r3, r7, r5
 8008f68:	881a      	ldrh	r2, [r3, #0]
 8008f6a:	1d3b      	adds	r3, r7, #4
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	18d3      	adds	r3, r2, r3
 8008f70:	b299      	uxth	r1, r3
 8008f72:	003b      	movs	r3, r7
 8008f74:	881a      	ldrh	r2, [r3, #0]
 8008f76:	2301      	movs	r3, #1
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f7ff fba0 	bl	80086c0 <Paint_DrawPoint>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 8008f80:	193b      	adds	r3, r7, r4
 8008f82:	2200      	movs	r2, #0
 8008f84:	5e9b      	ldrsh	r3, [r3, r2]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3301      	adds	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	193b      	adds	r3, r7, r4
 8008f8e:	801a      	strh	r2, [r3, #0]
 8008f90:	2308      	movs	r3, #8
 8008f92:	18fa      	adds	r2, r7, r3
 8008f94:	230c      	movs	r3, #12
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	2100      	movs	r1, #0
 8008f9a:	5e52      	ldrsh	r2, [r2, r1]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	5e5b      	ldrsh	r3, [r3, r1]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	dc00      	bgt.n	8008fa6 <Paint_DrawCircle+0x1ea>
 8008fa4:	e752      	b.n	8008e4c <Paint_DrawCircle+0x90>
						DOT_PIXEL_DFT, DOT_STYLE_DFT);
			}
			if (Esp < 0)
 8008fa6:	210a      	movs	r1, #10
 8008fa8:	187b      	adds	r3, r7, r1
 8008faa:	2200      	movs	r2, #0
 8008fac:	5e9b      	ldrsh	r3, [r3, r2]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da0d      	bge.n	8008fce <Paint_DrawCircle+0x212>
				Esp += 4 * XCurrent + 6;
 8008fb2:	230e      	movs	r3, #14
 8008fb4:	18fb      	adds	r3, r7, r3
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	187b      	adds	r3, r7, r1
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	18d3      	adds	r3, r2, r3
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3306      	adds	r3, #6
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	187b      	adds	r3, r7, r1
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	e01c      	b.n	8009008 <Paint_DrawCircle+0x24c>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 8008fce:	230e      	movs	r3, #14
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	5e9a      	ldrsh	r2, [r3, r2]
 8008fd6:	210c      	movs	r1, #12
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	2000      	movs	r0, #0
 8008fdc:	5e1b      	ldrsh	r3, [r3, r0]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	200a      	movs	r0, #10
 8008fe8:	183b      	adds	r3, r7, r0
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	18d3      	adds	r3, r2, r3
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	330a      	adds	r3, #10
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	183b      	adds	r3, r7, r0
 8008ff6:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8008ff8:	187b      	adds	r3, r7, r1
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	5e9b      	ldrsh	r3, [r3, r2]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	187b      	adds	r3, r7, r1
 8009006:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009008:	210e      	movs	r1, #14
 800900a:	187b      	adds	r3, r7, r1
 800900c:	2200      	movs	r2, #0
 800900e:	5e9b      	ldrsh	r3, [r3, r2]
 8009010:	b29b      	uxth	r3, r3
 8009012:	3301      	adds	r3, #1
 8009014:	b29a      	uxth	r2, r3
 8009016:	187b      	adds	r3, r7, r1
 8009018:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) { //Realistic circles
 800901a:	230e      	movs	r3, #14
 800901c:	18fa      	adds	r2, r7, r3
 800901e:	230c      	movs	r3, #12
 8009020:	18fb      	adds	r3, r7, r3
 8009022:	2100      	movs	r1, #0
 8009024:	5e52      	ldrsh	r2, [r2, r1]
 8009026:	2100      	movs	r1, #0
 8009028:	5e5b      	ldrsh	r3, [r3, r1]
 800902a:	429a      	cmp	r2, r3
 800902c:	dc00      	bgt.n	8009030 <Paint_DrawCircle+0x274>
 800902e:	e706      	b.n	8008e3e <Paint_DrawCircle+0x82>
 8009030:	e112      	b.n	8009258 <Paint_DrawCircle+0x49c>
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	200005e4 	.word	0x200005e4
 8009038:	080117bc 	.word	0x080117bc
		}
	} else { //Draw a hollow circle
		while (XCurrent <= YCurrent) {
			Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color,
 800903c:	250e      	movs	r5, #14
 800903e:	197b      	adds	r3, r7, r5
 8009040:	881a      	ldrh	r2, [r3, #0]
 8009042:	1dbb      	adds	r3, r7, #6
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	18d3      	adds	r3, r2, r3
 8009048:	b298      	uxth	r0, r3
 800904a:	260c      	movs	r6, #12
 800904c:	19bb      	adds	r3, r7, r6
 800904e:	881a      	ldrh	r2, [r3, #0]
 8009050:	1d3b      	adds	r3, r7, #4
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	18d3      	adds	r3, r2, r3
 8009056:	b299      	uxth	r1, r3
 8009058:	2320      	movs	r3, #32
 800905a:	2208      	movs	r2, #8
 800905c:	4694      	mov	ip, r2
 800905e:	44bc      	add	ip, r7
 8009060:	4463      	add	r3, ip
 8009062:	781c      	ldrb	r4, [r3, #0]
 8009064:	003b      	movs	r3, r7
 8009066:	881a      	ldrh	r2, [r3, #0]
 8009068:	2301      	movs	r3, #1
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	0023      	movs	r3, r4
 800906e:	f7ff fb27 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //1
			Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color,
 8009072:	197b      	adds	r3, r7, r5
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	1dba      	adds	r2, r7, #6
 8009078:	8812      	ldrh	r2, [r2, #0]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	b298      	uxth	r0, r3
 800907e:	19bb      	adds	r3, r7, r6
 8009080:	881a      	ldrh	r2, [r3, #0]
 8009082:	1d3b      	adds	r3, r7, #4
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	18d3      	adds	r3, r2, r3
 8009088:	b299      	uxth	r1, r3
 800908a:	2320      	movs	r3, #32
 800908c:	2208      	movs	r2, #8
 800908e:	4694      	mov	ip, r2
 8009090:	44bc      	add	ip, r7
 8009092:	4463      	add	r3, ip
 8009094:	781c      	ldrb	r4, [r3, #0]
 8009096:	003b      	movs	r3, r7
 8009098:	881a      	ldrh	r2, [r3, #0]
 800909a:	2301      	movs	r3, #1
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	0023      	movs	r3, r4
 80090a0:	f7ff fb0e 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //2
			Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color,
 80090a4:	19bb      	adds	r3, r7, r6
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	1dba      	adds	r2, r7, #6
 80090aa:	8812      	ldrh	r2, [r2, #0]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	b298      	uxth	r0, r3
 80090b0:	197b      	adds	r3, r7, r5
 80090b2:	881a      	ldrh	r2, [r3, #0]
 80090b4:	1d3b      	adds	r3, r7, #4
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	18d3      	adds	r3, r2, r3
 80090ba:	b299      	uxth	r1, r3
 80090bc:	2320      	movs	r3, #32
 80090be:	2208      	movs	r2, #8
 80090c0:	4694      	mov	ip, r2
 80090c2:	44bc      	add	ip, r7
 80090c4:	4463      	add	r3, ip
 80090c6:	781c      	ldrb	r4, [r3, #0]
 80090c8:	003b      	movs	r3, r7
 80090ca:	881a      	ldrh	r2, [r3, #0]
 80090cc:	2301      	movs	r3, #1
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	0023      	movs	r3, r4
 80090d2:	f7ff faf5 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //3
			Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color,
 80090d6:	19bb      	adds	r3, r7, r6
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	1dba      	adds	r2, r7, #6
 80090dc:	8812      	ldrh	r2, [r2, #0]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	b298      	uxth	r0, r3
 80090e2:	197b      	adds	r3, r7, r5
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	1d3a      	adds	r2, r7, #4
 80090e8:	8812      	ldrh	r2, [r2, #0]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	b299      	uxth	r1, r3
 80090ee:	2320      	movs	r3, #32
 80090f0:	2208      	movs	r2, #8
 80090f2:	4694      	mov	ip, r2
 80090f4:	44bc      	add	ip, r7
 80090f6:	4463      	add	r3, ip
 80090f8:	781c      	ldrb	r4, [r3, #0]
 80090fa:	003b      	movs	r3, r7
 80090fc:	881a      	ldrh	r2, [r3, #0]
 80090fe:	2301      	movs	r3, #1
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	0023      	movs	r3, r4
 8009104:	f7ff fadc 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //4
			Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color,
 8009108:	197b      	adds	r3, r7, r5
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	1dba      	adds	r2, r7, #6
 800910e:	8812      	ldrh	r2, [r2, #0]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	b298      	uxth	r0, r3
 8009114:	19bb      	adds	r3, r7, r6
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	1d3a      	adds	r2, r7, #4
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	b299      	uxth	r1, r3
 8009120:	2320      	movs	r3, #32
 8009122:	2208      	movs	r2, #8
 8009124:	4694      	mov	ip, r2
 8009126:	44bc      	add	ip, r7
 8009128:	4463      	add	r3, ip
 800912a:	781c      	ldrb	r4, [r3, #0]
 800912c:	003b      	movs	r3, r7
 800912e:	881a      	ldrh	r2, [r3, #0]
 8009130:	2301      	movs	r3, #1
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	0023      	movs	r3, r4
 8009136:	f7ff fac3 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //5
			Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color,
 800913a:	197b      	adds	r3, r7, r5
 800913c:	881a      	ldrh	r2, [r3, #0]
 800913e:	1dbb      	adds	r3, r7, #6
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	18d3      	adds	r3, r2, r3
 8009144:	b298      	uxth	r0, r3
 8009146:	19bb      	adds	r3, r7, r6
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	1d3a      	adds	r2, r7, #4
 800914c:	8812      	ldrh	r2, [r2, #0]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	b299      	uxth	r1, r3
 8009152:	2320      	movs	r3, #32
 8009154:	2208      	movs	r2, #8
 8009156:	4694      	mov	ip, r2
 8009158:	44bc      	add	ip, r7
 800915a:	4463      	add	r3, ip
 800915c:	781c      	ldrb	r4, [r3, #0]
 800915e:	003b      	movs	r3, r7
 8009160:	881a      	ldrh	r2, [r3, #0]
 8009162:	2301      	movs	r3, #1
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	0023      	movs	r3, r4
 8009168:	f7ff faaa 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //6
			Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color,
 800916c:	19bb      	adds	r3, r7, r6
 800916e:	881a      	ldrh	r2, [r3, #0]
 8009170:	1dbb      	adds	r3, r7, #6
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	18d3      	adds	r3, r2, r3
 8009176:	b298      	uxth	r0, r3
 8009178:	197b      	adds	r3, r7, r5
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	1d3a      	adds	r2, r7, #4
 800917e:	8812      	ldrh	r2, [r2, #0]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	b299      	uxth	r1, r3
 8009184:	2320      	movs	r3, #32
 8009186:	2208      	movs	r2, #8
 8009188:	4694      	mov	ip, r2
 800918a:	44bc      	add	ip, r7
 800918c:	4463      	add	r3, ip
 800918e:	781c      	ldrb	r4, [r3, #0]
 8009190:	003b      	movs	r3, r7
 8009192:	881a      	ldrh	r2, [r3, #0]
 8009194:	2301      	movs	r3, #1
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	0023      	movs	r3, r4
 800919a:	f7ff fa91 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //7
			Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color,
 800919e:	19bb      	adds	r3, r7, r6
 80091a0:	881a      	ldrh	r2, [r3, #0]
 80091a2:	1dbb      	adds	r3, r7, #6
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	18d3      	adds	r3, r2, r3
 80091a8:	b298      	uxth	r0, r3
 80091aa:	197b      	adds	r3, r7, r5
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	1d3b      	adds	r3, r7, #4
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	18d3      	adds	r3, r2, r3
 80091b4:	b299      	uxth	r1, r3
 80091b6:	2320      	movs	r3, #32
 80091b8:	2208      	movs	r2, #8
 80091ba:	4694      	mov	ip, r2
 80091bc:	44bc      	add	ip, r7
 80091be:	4463      	add	r3, ip
 80091c0:	781c      	ldrb	r4, [r3, #0]
 80091c2:	003b      	movs	r3, r7
 80091c4:	881a      	ldrh	r2, [r3, #0]
 80091c6:	2301      	movs	r3, #1
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	0023      	movs	r3, r4
 80091cc:	f7ff fa78 	bl	80086c0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //0

			if (Esp < 0)
 80091d0:	210a      	movs	r1, #10
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	2200      	movs	r2, #0
 80091d6:	5e9b      	ldrsh	r3, [r3, r2]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da0c      	bge.n	80091f6 <Paint_DrawCircle+0x43a>
				Esp += 4 * XCurrent + 6;
 80091dc:	197b      	adds	r3, r7, r5
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	187b      	adds	r3, r7, r1
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	18d3      	adds	r3, r2, r3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3306      	adds	r3, #6
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	187b      	adds	r3, r7, r1
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	e01c      	b.n	8009230 <Paint_DrawCircle+0x474>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 80091f6:	230e      	movs	r3, #14
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	2200      	movs	r2, #0
 80091fc:	5e9a      	ldrsh	r2, [r3, r2]
 80091fe:	210c      	movs	r1, #12
 8009200:	187b      	adds	r3, r7, r1
 8009202:	2000      	movs	r0, #0
 8009204:	5e1b      	ldrsh	r3, [r3, r0]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	b29b      	uxth	r3, r3
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	b29a      	uxth	r2, r3
 800920e:	200a      	movs	r0, #10
 8009210:	183b      	adds	r3, r7, r0
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	18d3      	adds	r3, r2, r3
 8009216:	b29b      	uxth	r3, r3
 8009218:	330a      	adds	r3, #10
 800921a:	b29a      	uxth	r2, r3
 800921c:	183b      	adds	r3, r7, r0
 800921e:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8009220:	187b      	adds	r3, r7, r1
 8009222:	2200      	movs	r2, #0
 8009224:	5e9b      	ldrsh	r3, [r3, r2]
 8009226:	b29b      	uxth	r3, r3
 8009228:	3b01      	subs	r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	187b      	adds	r3, r7, r1
 800922e:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009230:	210e      	movs	r1, #14
 8009232:	187b      	adds	r3, r7, r1
 8009234:	2200      	movs	r2, #0
 8009236:	5e9b      	ldrsh	r3, [r3, r2]
 8009238:	b29b      	uxth	r3, r3
 800923a:	3301      	adds	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	187b      	adds	r3, r7, r1
 8009240:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) {
 8009242:	230e      	movs	r3, #14
 8009244:	18fa      	adds	r2, r7, r3
 8009246:	230c      	movs	r3, #12
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	2100      	movs	r1, #0
 800924c:	5e52      	ldrsh	r2, [r2, r1]
 800924e:	2100      	movs	r1, #0
 8009250:	5e5b      	ldrsh	r3, [r3, r1]
 8009252:	429a      	cmp	r2, r3
 8009254:	dc00      	bgt.n	8009258 <Paint_DrawCircle+0x49c>
 8009256:	e6f1      	b.n	800903c <Paint_DrawCircle+0x280>
		}
	}
}
 8009258:	46bd      	mov	sp, r7
 800925a:	b005      	add	sp, #20
 800925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925e:	46c0      	nop			; (mov r8, r8)

08009260 <Paint_DrawChar>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009260:	b5b0      	push	{r4, r5, r7, lr}
 8009262:	b088      	sub	sp, #32
 8009264:	af00      	add	r7, sp, #0
 8009266:	0004      	movs	r4, r0
 8009268:	0008      	movs	r0, r1
 800926a:	0011      	movs	r1, r2
 800926c:	607b      	str	r3, [r7, #4]
 800926e:	250e      	movs	r5, #14
 8009270:	197b      	adds	r3, r7, r5
 8009272:	1c22      	adds	r2, r4, #0
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	240c      	movs	r4, #12
 8009278:	193b      	adds	r3, r7, r4
 800927a:	1c02      	adds	r2, r0, #0
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	230b      	movs	r3, #11
 8009280:	18fb      	adds	r3, r7, r3
 8009282:	1c0a      	adds	r2, r1, #0
 8009284:	701a      	strb	r2, [r3, #0]
	UWORD Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8009286:	4b66      	ldr	r3, [pc, #408]	; (8009420 <Paint_DrawChar+0x1c0>)
 8009288:	889b      	ldrh	r3, [r3, #4]
 800928a:	197a      	adds	r2, r7, r5
 800928c:	8812      	ldrh	r2, [r2, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d805      	bhi.n	800929e <Paint_DrawChar+0x3e>
 8009292:	4b63      	ldr	r3, [pc, #396]	; (8009420 <Paint_DrawChar+0x1c0>)
 8009294:	88db      	ldrh	r3, [r3, #6]
 8009296:	193a      	adds	r2, r7, r4
 8009298:	8812      	ldrh	r2, [r2, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d904      	bls.n	80092a8 <Paint_DrawChar+0x48>
		Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800929e:	4b61      	ldr	r3, [pc, #388]	; (8009424 <Paint_DrawChar+0x1c4>)
 80092a0:	0018      	movs	r0, r3
 80092a2:	f005 fdd9 	bl	800ee58 <puts>
		return;
 80092a6:	e0b7      	b.n	8009418 <Paint_DrawChar+0x1b8>
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80092a8:	230b      	movs	r3, #11
 80092aa:	18fb      	adds	r3, r7, r3
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	3b20      	subs	r3, #32
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	88d2      	ldrh	r2, [r2, #6]
 80092b4:	4353      	muls	r3, r2
			* (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	8892      	ldrh	r2, [r2, #4]
 80092ba:	08d2      	lsrs	r2, r2, #3
 80092bc:	b292      	uxth	r2, r2
 80092be:	0010      	movs	r0, r2
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	8892      	ldrh	r2, [r2, #4]
 80092c4:	2107      	movs	r1, #7
 80092c6:	400a      	ands	r2, r1
 80092c8:	b292      	uxth	r2, r2
 80092ca:	1e51      	subs	r1, r2, #1
 80092cc:	418a      	sbcs	r2, r1
 80092ce:	b2d2      	uxtb	r2, r2
 80092d0:	1882      	adds	r2, r0, r2
 80092d2:	4353      	muls	r3, r2
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80092d4:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	18d3      	adds	r3, r2, r3
 80092de:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 80092e0:	231e      	movs	r3, #30
 80092e2:	18fb      	adds	r3, r7, r3
 80092e4:	2200      	movs	r2, #0
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	e08e      	b.n	8009408 <Paint_DrawChar+0x1a8>
		for (Column = 0; Column < Font->Width; Column++) {
 80092ea:	231c      	movs	r3, #28
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	2200      	movs	r2, #0
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e071      	b.n	80093d8 <Paint_DrawChar+0x178>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80092f4:	2334      	movs	r3, #52	; 0x34
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	2bff      	cmp	r3, #255	; 0xff
 80092fc:	d122      	bne.n	8009344 <Paint_DrawChar+0xe4>
				if (*ptr & (0x80 >> (Column % 8)))
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	0019      	movs	r1, r3
 8009304:	201c      	movs	r0, #28
 8009306:	183b      	adds	r3, r7, r0
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	2207      	movs	r2, #7
 800930c:	4013      	ands	r3, r2
 800930e:	2280      	movs	r2, #128	; 0x80
 8009310:	411a      	asrs	r2, r3
 8009312:	0013      	movs	r3, r2
 8009314:	400b      	ands	r3, r1
 8009316:	d04e      	beq.n	80093b6 <Paint_DrawChar+0x156>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8009318:	230e      	movs	r3, #14
 800931a:	18fa      	adds	r2, r7, r3
 800931c:	183b      	adds	r3, r7, r0
 800931e:	8812      	ldrh	r2, [r2, #0]
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	18d3      	adds	r3, r2, r3
 8009324:	b298      	uxth	r0, r3
 8009326:	230c      	movs	r3, #12
 8009328:	18fa      	adds	r2, r7, r3
 800932a:	231e      	movs	r3, #30
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	8812      	ldrh	r2, [r2, #0]
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	18d3      	adds	r3, r2, r3
 8009334:	b299      	uxth	r1, r3
 8009336:	2330      	movs	r3, #48	; 0x30
 8009338:	18fb      	adds	r3, r7, r3
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	001a      	movs	r2, r3
 800933e:	f7fe ff8d 	bl	800825c <Paint_SetPixel>
 8009342:	e038      	b.n	80093b6 <Paint_DrawChar+0x156>
							Color_Foreground);
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	0019      	movs	r1, r3
 800934a:	201c      	movs	r0, #28
 800934c:	183b      	adds	r3, r7, r0
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	2207      	movs	r2, #7
 8009352:	4013      	ands	r3, r2
 8009354:	2280      	movs	r2, #128	; 0x80
 8009356:	411a      	asrs	r2, r3
 8009358:	0013      	movs	r3, r2
 800935a:	400b      	ands	r3, r1
 800935c:	d015      	beq.n	800938a <Paint_DrawChar+0x12a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800935e:	230e      	movs	r3, #14
 8009360:	18fa      	adds	r2, r7, r3
 8009362:	183b      	adds	r3, r7, r0
 8009364:	8812      	ldrh	r2, [r2, #0]
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	18d3      	adds	r3, r2, r3
 800936a:	b298      	uxth	r0, r3
 800936c:	230c      	movs	r3, #12
 800936e:	18fa      	adds	r2, r7, r3
 8009370:	231e      	movs	r3, #30
 8009372:	18fb      	adds	r3, r7, r3
 8009374:	8812      	ldrh	r2, [r2, #0]
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	18d3      	adds	r3, r2, r3
 800937a:	b299      	uxth	r1, r3
 800937c:	2330      	movs	r3, #48	; 0x30
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	001a      	movs	r2, r3
 8009384:	f7fe ff6a 	bl	800825c <Paint_SetPixel>
 8009388:	e015      	b.n	80093b6 <Paint_DrawChar+0x156>
							Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800938a:	230e      	movs	r3, #14
 800938c:	18fa      	adds	r2, r7, r3
 800938e:	231c      	movs	r3, #28
 8009390:	18fb      	adds	r3, r7, r3
 8009392:	8812      	ldrh	r2, [r2, #0]
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	b298      	uxth	r0, r3
 800939a:	230c      	movs	r3, #12
 800939c:	18fa      	adds	r2, r7, r3
 800939e:	231e      	movs	r3, #30
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	8812      	ldrh	r2, [r2, #0]
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	18d3      	adds	r3, r2, r3
 80093a8:	b299      	uxth	r1, r3
 80093aa:	2334      	movs	r3, #52	; 0x34
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	001a      	movs	r2, r3
 80093b2:	f7fe ff53 	bl	800825c <Paint_SetPixel>
							Color_Background);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 80093b6:	231c      	movs	r3, #28
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	2207      	movs	r2, #7
 80093be:	4013      	ands	r3, r2
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b07      	cmp	r3, #7
 80093c4:	d102      	bne.n	80093cc <Paint_DrawChar+0x16c>
				ptr++;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	3301      	adds	r3, #1
 80093ca:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 80093cc:	211c      	movs	r1, #28
 80093ce:	187b      	adds	r3, r7, r1
 80093d0:	881a      	ldrh	r2, [r3, #0]
 80093d2:	187b      	adds	r3, r7, r1
 80093d4:	3201      	adds	r2, #1
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	889b      	ldrh	r3, [r3, #4]
 80093dc:	221c      	movs	r2, #28
 80093de:	18ba      	adds	r2, r7, r2
 80093e0:	8812      	ldrh	r2, [r2, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d200      	bcs.n	80093e8 <Paint_DrawChar+0x188>
 80093e6:	e785      	b.n	80092f4 <Paint_DrawChar+0x94>
		} // Write a line
		if (Font->Width % 8 != 0)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	889b      	ldrh	r3, [r3, #4]
 80093ec:	2207      	movs	r2, #7
 80093ee:	4013      	ands	r3, r2
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <Paint_DrawChar+0x19c>
			ptr++;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	3301      	adds	r3, #1
 80093fa:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 80093fc:	211e      	movs	r1, #30
 80093fe:	187b      	adds	r3, r7, r1
 8009400:	881a      	ldrh	r2, [r3, #0]
 8009402:	187b      	adds	r3, r7, r1
 8009404:	3201      	adds	r2, #1
 8009406:	801a      	strh	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	88db      	ldrh	r3, [r3, #6]
 800940c:	221e      	movs	r2, #30
 800940e:	18ba      	adds	r2, r7, r2
 8009410:	8812      	ldrh	r2, [r2, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d200      	bcs.n	8009418 <Paint_DrawChar+0x1b8>
 8009416:	e768      	b.n	80092ea <Paint_DrawChar+0x8a>
	} // Write all
}
 8009418:	46bd      	mov	sp, r7
 800941a:	b008      	add	sp, #32
 800941c:	bdb0      	pop	{r4, r5, r7, pc}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	200005e4 	.word	0x200005e4
 8009424:	080117fc 	.word	0x080117fc

08009428 <Paint_DrawString_EN>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009428:	b5b0      	push	{r4, r5, r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af02      	add	r7, sp, #8
 800942e:	60ba      	str	r2, [r7, #8]
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	240e      	movs	r4, #14
 8009434:	193b      	adds	r3, r7, r4
 8009436:	1c02      	adds	r2, r0, #0
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	200c      	movs	r0, #12
 800943c:	183b      	adds	r3, r7, r0
 800943e:	1c0a      	adds	r2, r1, #0
 8009440:	801a      	strh	r2, [r3, #0]
	UWORD Xpoint = Xstart;
 8009442:	2316      	movs	r3, #22
 8009444:	18fb      	adds	r3, r7, r3
 8009446:	0021      	movs	r1, r4
 8009448:	187a      	adds	r2, r7, r1
 800944a:	8812      	ldrh	r2, [r2, #0]
 800944c:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 800944e:	2314      	movs	r3, #20
 8009450:	18fb      	adds	r3, r7, r3
 8009452:	183a      	adds	r2, r7, r0
 8009454:	8812      	ldrh	r2, [r2, #0]
 8009456:	801a      	strh	r2, [r3, #0]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8009458:	4b30      	ldr	r3, [pc, #192]	; (800951c <Paint_DrawString_EN+0xf4>)
 800945a:	889b      	ldrh	r3, [r3, #4]
 800945c:	187a      	adds	r2, r7, r1
 800945e:	8812      	ldrh	r2, [r2, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d805      	bhi.n	8009470 <Paint_DrawString_EN+0x48>
 8009464:	4b2d      	ldr	r3, [pc, #180]	; (800951c <Paint_DrawString_EN+0xf4>)
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	183a      	adds	r2, r7, r0
 800946a:	8812      	ldrh	r2, [r2, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d94e      	bls.n	800950e <Paint_DrawString_EN+0xe6>
		Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8009470:	4b2b      	ldr	r3, [pc, #172]	; (8009520 <Paint_DrawString_EN+0xf8>)
 8009472:	0018      	movs	r0, r3
 8009474:	f005 fcf0 	bl	800ee58 <puts>
		return;
 8009478:	e04d      	b.n	8009516 <Paint_DrawString_EN+0xee>
	}

	while (*pString != '\0') {
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 800947a:	2116      	movs	r1, #22
 800947c:	187b      	adds	r3, r7, r1
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	8892      	ldrh	r2, [r2, #4]
 8009484:	189b      	adds	r3, r3, r2
 8009486:	4a25      	ldr	r2, [pc, #148]	; (800951c <Paint_DrawString_EN+0xf4>)
 8009488:	8892      	ldrh	r2, [r2, #4]
 800948a:	4293      	cmp	r3, r2
 800948c:	dd0c      	ble.n	80094a8 <Paint_DrawString_EN+0x80>
			Xpoint = Xstart;
 800948e:	187b      	adds	r3, r7, r1
 8009490:	220e      	movs	r2, #14
 8009492:	18ba      	adds	r2, r7, r2
 8009494:	8812      	ldrh	r2, [r2, #0]
 8009496:	801a      	strh	r2, [r3, #0]
			Ypoint += Font->Height;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	88d9      	ldrh	r1, [r3, #6]
 800949c:	2214      	movs	r2, #20
 800949e:	18bb      	adds	r3, r7, r2
 80094a0:	18ba      	adds	r2, r7, r2
 80094a2:	8812      	ldrh	r2, [r2, #0]
 80094a4:	188a      	adds	r2, r1, r2
 80094a6:	801a      	strh	r2, [r3, #0]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 80094a8:	2114      	movs	r1, #20
 80094aa:	187b      	adds	r3, r7, r1
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	88d2      	ldrh	r2, [r2, #6]
 80094b2:	189b      	adds	r3, r3, r2
 80094b4:	4a19      	ldr	r2, [pc, #100]	; (800951c <Paint_DrawString_EN+0xf4>)
 80094b6:	88d2      	ldrh	r2, [r2, #6]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	dd0a      	ble.n	80094d2 <Paint_DrawString_EN+0xaa>
			Xpoint = Xstart;
 80094bc:	2316      	movs	r3, #22
 80094be:	18fb      	adds	r3, r7, r3
 80094c0:	220e      	movs	r2, #14
 80094c2:	18ba      	adds	r2, r7, r2
 80094c4:	8812      	ldrh	r2, [r2, #0]
 80094c6:	801a      	strh	r2, [r3, #0]
			Ypoint = Ystart;
 80094c8:	187b      	adds	r3, r7, r1
 80094ca:	220c      	movs	r2, #12
 80094cc:	18ba      	adds	r2, r7, r2
 80094ce:	8812      	ldrh	r2, [r2, #0]
 80094d0:	801a      	strh	r2, [r3, #0]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground,
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	781a      	ldrb	r2, [r3, #0]
 80094d6:	687c      	ldr	r4, [r7, #4]
 80094d8:	2314      	movs	r3, #20
 80094da:	18fb      	adds	r3, r7, r3
 80094dc:	8819      	ldrh	r1, [r3, #0]
 80094de:	2516      	movs	r5, #22
 80094e0:	197b      	adds	r3, r7, r5
 80094e2:	8818      	ldrh	r0, [r3, #0]
 80094e4:	232c      	movs	r3, #44	; 0x2c
 80094e6:	18fb      	adds	r3, r7, r3
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	2328      	movs	r3, #40	; 0x28
 80094ee:	18fb      	adds	r3, r7, r3
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	0023      	movs	r3, r4
 80094f6:	f7ff feb3 	bl	8009260 <Paint_DrawChar>
				Color_Background); //edited by Bart

		//The next character of the address
		pString++;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	3301      	adds	r3, #1
 80094fe:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	8899      	ldrh	r1, [r3, #4]
 8009504:	197b      	adds	r3, r7, r5
 8009506:	197a      	adds	r2, r7, r5
 8009508:	8812      	ldrh	r2, [r2, #0]
 800950a:	188a      	adds	r2, r1, r2
 800950c:	801a      	strh	r2, [r3, #0]
	while (*pString != '\0') {
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1b1      	bne.n	800947a <Paint_DrawString_EN+0x52>
	}
}
 8009516:	46bd      	mov	sp, r7
 8009518:	b006      	add	sp, #24
 800951a:	bdb0      	pop	{r4, r5, r7, pc}
 800951c:	200005e4 	.word	0x200005e4
 8009520:	0801183c 	.word	0x0801183c

08009524 <Paint_DrawNum>:
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber, sFONT *Font,
		UWORD Color_Foreground, UWORD Color_Background) {
 8009524:	b5b0      	push	{r4, r5, r7, lr}
 8009526:	4c6b      	ldr	r4, [pc, #428]	; (80096d4 <Paint_DrawNum+0x1b0>)
 8009528:	44a5      	add	sp, r4
 800952a:	af02      	add	r7, sp, #8
 800952c:	60ba      	str	r2, [r7, #8]
 800952e:	607b      	str	r3, [r7, #4]
 8009530:	4b69      	ldr	r3, [pc, #420]	; (80096d8 <Paint_DrawNum+0x1b4>)
 8009532:	2286      	movs	r2, #134	; 0x86
 8009534:	0092      	lsls	r2, r2, #2
 8009536:	4694      	mov	ip, r2
 8009538:	44bc      	add	ip, r7
 800953a:	4463      	add	r3, ip
 800953c:	1c02      	adds	r2, r0, #0
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	4b66      	ldr	r3, [pc, #408]	; (80096dc <Paint_DrawNum+0x1b8>)
 8009542:	2286      	movs	r2, #134	; 0x86
 8009544:	0092      	lsls	r2, r2, #2
 8009546:	4694      	mov	ip, r2
 8009548:	44bc      	add	ip, r7
 800954a:	4463      	add	r3, ip
 800954c:	1c0a      	adds	r2, r1, #0
 800954e:	801a      	strh	r2, [r3, #0]

	int16_t Num_Bit = 0, Str_Bit = 0;
 8009550:	4b63      	ldr	r3, [pc, #396]	; (80096e0 <Paint_DrawNum+0x1bc>)
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	2200      	movs	r2, #0
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	2385      	movs	r3, #133	; 0x85
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	2200      	movs	r2, #0
 8009560:	801a      	strh	r2, [r3, #0]
	uint8_t Str_Array[ARRAY_LEN] = { 0 }, Num_Array[ARRAY_LEN] = { 0 };
 8009562:	4b60      	ldr	r3, [pc, #384]	; (80096e4 <Paint_DrawNum+0x1c0>)
 8009564:	2286      	movs	r2, #134	; 0x86
 8009566:	0092      	lsls	r2, r2, #2
 8009568:	4694      	mov	ip, r2
 800956a:	44bc      	add	ip, r7
 800956c:	4463      	add	r3, ip
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	22fb      	movs	r2, #251	; 0xfb
 8009576:	2100      	movs	r1, #0
 8009578:	0018      	movs	r0, r3
 800957a:	f005 fb30 	bl	800ebde <memset>
 800957e:	4b5a      	ldr	r3, [pc, #360]	; (80096e8 <Paint_DrawNum+0x1c4>)
 8009580:	2286      	movs	r2, #134	; 0x86
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	4694      	mov	ip, r2
 8009586:	44bc      	add	ip, r7
 8009588:	4463      	add	r3, ip
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	3304      	adds	r3, #4
 8009590:	22fb      	movs	r2, #251	; 0xfb
 8009592:	2100      	movs	r1, #0
 8009594:	0018      	movs	r0, r3
 8009596:	f005 fb22 	bl	800ebde <memset>
	uint8_t *pStr = Str_Array;
 800959a:	2388      	movs	r3, #136	; 0x88
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	2284      	movs	r2, #132	; 0x84
 80095a2:	0092      	lsls	r2, r2, #2
 80095a4:	18ba      	adds	r2, r7, r2
 80095a6:	6013      	str	r3, [r2, #0]

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80095a8:	4b50      	ldr	r3, [pc, #320]	; (80096ec <Paint_DrawNum+0x1c8>)
 80095aa:	889b      	ldrh	r3, [r3, #4]
 80095ac:	4a4a      	ldr	r2, [pc, #296]	; (80096d8 <Paint_DrawNum+0x1b4>)
 80095ae:	2186      	movs	r1, #134	; 0x86
 80095b0:	0089      	lsls	r1, r1, #2
 80095b2:	468c      	mov	ip, r1
 80095b4:	44bc      	add	ip, r7
 80095b6:	4462      	add	r2, ip
 80095b8:	8812      	ldrh	r2, [r2, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d80a      	bhi.n	80095d4 <Paint_DrawNum+0xb0>
 80095be:	4b4b      	ldr	r3, [pc, #300]	; (80096ec <Paint_DrawNum+0x1c8>)
 80095c0:	88db      	ldrh	r3, [r3, #6]
 80095c2:	4a46      	ldr	r2, [pc, #280]	; (80096dc <Paint_DrawNum+0x1b8>)
 80095c4:	2186      	movs	r1, #134	; 0x86
 80095c6:	0089      	lsls	r1, r1, #2
 80095c8:	468c      	mov	ip, r1
 80095ca:	44bc      	add	ip, r7
 80095cc:	4462      	add	r2, ip
 80095ce:	8812      	ldrh	r2, [r2, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d927      	bls.n	8009624 <Paint_DrawNum+0x100>
		Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 80095d4:	4b46      	ldr	r3, [pc, #280]	; (80096f0 <Paint_DrawNum+0x1cc>)
 80095d6:	0018      	movs	r0, r3
 80095d8:	f005 fc3e 	bl	800ee58 <puts>
 80095dc:	e074      	b.n	80096c8 <Paint_DrawNum+0x1a4>
		return;
	}

	//Converts a number to a string
	while (Nummber) {
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	210a      	movs	r1, #10
 80095e2:	0018      	movs	r0, r3
 80095e4:	f7f6 ff08 	bl	80003f8 <__aeabi_idivmod>
 80095e8:	000b      	movs	r3, r1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	483c      	ldr	r0, [pc, #240]	; (80096e0 <Paint_DrawNum+0x1bc>)
 80095ee:	183b      	adds	r3, r7, r0
 80095f0:	2100      	movs	r1, #0
 80095f2:	5e5b      	ldrsh	r3, [r3, r1]
 80095f4:	3230      	adds	r2, #48	; 0x30
 80095f6:	b2d1      	uxtb	r1, r2
 80095f8:	4a3b      	ldr	r2, [pc, #236]	; (80096e8 <Paint_DrawNum+0x1c4>)
 80095fa:	2486      	movs	r4, #134	; 0x86
 80095fc:	00a4      	lsls	r4, r4, #2
 80095fe:	46a4      	mov	ip, r4
 8009600:	44bc      	add	ip, r7
 8009602:	4462      	add	r2, ip
 8009604:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8009606:	183b      	adds	r3, r7, r0
 8009608:	2200      	movs	r2, #0
 800960a:	5e9b      	ldrsh	r3, [r3, r2]
 800960c:	b29b      	uxth	r3, r3
 800960e:	3301      	adds	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	183b      	adds	r3, r7, r0
 8009614:	801a      	strh	r2, [r3, #0]
		Nummber /= 10;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	210a      	movs	r1, #10
 800961a:	0018      	movs	r0, r3
 800961c:	f7f6 fe06 	bl	800022c <__divsi3>
 8009620:	0003      	movs	r3, r0
 8009622:	60bb      	str	r3, [r7, #8]
	while (Nummber) {
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1d9      	bne.n	80095de <Paint_DrawNum+0xba>
	}

	//The string is inverted
	while (Num_Bit > 0) {
 800962a:	e027      	b.n	800967c <Paint_DrawNum+0x158>
		Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800962c:	482c      	ldr	r0, [pc, #176]	; (80096e0 <Paint_DrawNum+0x1bc>)
 800962e:	183b      	adds	r3, r7, r0
 8009630:	2200      	movs	r2, #0
 8009632:	5e9b      	ldrsh	r3, [r3, r2]
 8009634:	1e5a      	subs	r2, r3, #1
 8009636:	2485      	movs	r4, #133	; 0x85
 8009638:	00a4      	lsls	r4, r4, #2
 800963a:	193b      	adds	r3, r7, r4
 800963c:	2100      	movs	r1, #0
 800963e:	5e5b      	ldrsh	r3, [r3, r1]
 8009640:	4929      	ldr	r1, [pc, #164]	; (80096e8 <Paint_DrawNum+0x1c4>)
 8009642:	2586      	movs	r5, #134	; 0x86
 8009644:	00ad      	lsls	r5, r5, #2
 8009646:	46ac      	mov	ip, r5
 8009648:	44bc      	add	ip, r7
 800964a:	4461      	add	r1, ip
 800964c:	5c89      	ldrb	r1, [r1, r2]
 800964e:	4a25      	ldr	r2, [pc, #148]	; (80096e4 <Paint_DrawNum+0x1c0>)
 8009650:	2586      	movs	r5, #134	; 0x86
 8009652:	00ad      	lsls	r5, r5, #2
 8009654:	46ac      	mov	ip, r5
 8009656:	44bc      	add	ip, r7
 8009658:	4462      	add	r2, ip
 800965a:	54d1      	strb	r1, [r2, r3]
		Str_Bit++;
 800965c:	193b      	adds	r3, r7, r4
 800965e:	2200      	movs	r2, #0
 8009660:	5e9b      	ldrsh	r3, [r3, r2]
 8009662:	b29b      	uxth	r3, r3
 8009664:	3301      	adds	r3, #1
 8009666:	b29a      	uxth	r2, r3
 8009668:	193b      	adds	r3, r7, r4
 800966a:	801a      	strh	r2, [r3, #0]
		Num_Bit--;
 800966c:	183b      	adds	r3, r7, r0
 800966e:	2200      	movs	r2, #0
 8009670:	5e9b      	ldrsh	r3, [r3, r2]
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	183b      	adds	r3, r7, r0
 800967a:	801a      	strh	r2, [r3, #0]
	while (Num_Bit > 0) {
 800967c:	4b18      	ldr	r3, [pc, #96]	; (80096e0 <Paint_DrawNum+0x1bc>)
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	2200      	movs	r2, #0
 8009682:	5e9b      	ldrsh	r3, [r3, r2]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dcd1      	bgt.n	800962c <Paint_DrawNum+0x108>
	}

	//show
	Paint_DrawString_EN(Xpoint, Ypoint, (const char*) pStr, Font,
 8009688:	687c      	ldr	r4, [r7, #4]
 800968a:	2384      	movs	r3, #132	; 0x84
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b12      	ldr	r3, [pc, #72]	; (80096dc <Paint_DrawNum+0x1b8>)
 8009694:	2186      	movs	r1, #134	; 0x86
 8009696:	0089      	lsls	r1, r1, #2
 8009698:	468c      	mov	ip, r1
 800969a:	44bc      	add	ip, r7
 800969c:	4463      	add	r3, ip
 800969e:	8819      	ldrh	r1, [r3, #0]
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <Paint_DrawNum+0x1b4>)
 80096a2:	2086      	movs	r0, #134	; 0x86
 80096a4:	0080      	lsls	r0, r0, #2
 80096a6:	4684      	mov	ip, r0
 80096a8:	44bc      	add	ip, r7
 80096aa:	4463      	add	r3, ip
 80096ac:	8818      	ldrh	r0, [r3, #0]
 80096ae:	238b      	movs	r3, #139	; 0x8b
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	238a      	movs	r3, #138	; 0x8a
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	0023      	movs	r3, r4
 80096c4:	f7ff feb0 	bl	8009428 <Paint_DrawString_EN>
			Color_Foreground, Color_Background); //edited by Bart
}
 80096c8:	46bd      	mov	sp, r7
 80096ca:	2386      	movs	r3, #134	; 0x86
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	449d      	add	sp, r3
 80096d0:	bdb0      	pop	{r4, r5, r7, pc}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	fffffde0 	.word	0xfffffde0
 80096d8:	fffffdf6 	.word	0xfffffdf6
 80096dc:	fffffdf4 	.word	0xfffffdf4
 80096e0:	00000216 	.word	0x00000216
 80096e4:	fffffef8 	.word	0xfffffef8
 80096e8:	fffffdf8 	.word	0xfffffdf8
 80096ec:	200005e4 	.word	0x200005e4
 80096f0:	08011880 	.word	0x08011880

080096f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80096fa:	1d3b      	adds	r3, r7, #4
 80096fc:	0018      	movs	r0, r3
 80096fe:	230c      	movs	r3, #12
 8009700:	001a      	movs	r2, r3
 8009702:	2100      	movs	r1, #0
 8009704:	f005 fa6b 	bl	800ebde <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009708:	4b2c      	ldr	r3, [pc, #176]	; (80097bc <MX_ADC1_Init+0xc8>)
 800970a:	4a2d      	ldr	r2, [pc, #180]	; (80097c0 <MX_ADC1_Init+0xcc>)
 800970c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800970e:	4b2b      	ldr	r3, [pc, #172]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009710:	2280      	movs	r2, #128	; 0x80
 8009712:	05d2      	lsls	r2, r2, #23
 8009714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009718:	2200      	movs	r2, #0
 800971a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800971c:	4b27      	ldr	r3, [pc, #156]	; (80097bc <MX_ADC1_Init+0xc8>)
 800971e:	2200      	movs	r2, #0
 8009720:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009722:	4b26      	ldr	r3, [pc, #152]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009724:	2200      	movs	r2, #0
 8009726:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009728:	4b24      	ldr	r3, [pc, #144]	; (80097bc <MX_ADC1_Init+0xc8>)
 800972a:	2204      	movs	r2, #4
 800972c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800972e:	4b23      	ldr	r3, [pc, #140]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009730:	2200      	movs	r2, #0
 8009732:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8009734:	4b21      	ldr	r3, [pc, #132]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009736:	2200      	movs	r2, #0
 8009738:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800973a:	4b20      	ldr	r3, [pc, #128]	; (80097bc <MX_ADC1_Init+0xc8>)
 800973c:	2200      	movs	r2, #0
 800973e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009742:	2201      	movs	r2, #1
 8009744:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009746:	4b1d      	ldr	r3, [pc, #116]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009748:	2200      	movs	r2, #0
 800974a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800974c:	4b1b      	ldr	r3, [pc, #108]	; (80097bc <MX_ADC1_Init+0xc8>)
 800974e:	2200      	movs	r2, #0
 8009750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009752:	4b1a      	ldr	r3, [pc, #104]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009754:	222c      	movs	r2, #44	; 0x2c
 8009756:	2100      	movs	r1, #0
 8009758:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800975a:	4b18      	ldr	r3, [pc, #96]	; (80097bc <MX_ADC1_Init+0xc8>)
 800975c:	2280      	movs	r2, #128	; 0x80
 800975e:	0152      	lsls	r2, r2, #5
 8009760:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009762:	4b16      	ldr	r3, [pc, #88]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009764:	2200      	movs	r2, #0
 8009766:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8009768:	4b14      	ldr	r3, [pc, #80]	; (80097bc <MX_ADC1_Init+0xc8>)
 800976a:	2200      	movs	r2, #0
 800976c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009770:	223c      	movs	r2, #60	; 0x3c
 8009772:	2100      	movs	r1, #0
 8009774:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <MX_ADC1_Init+0xc8>)
 8009778:	2200      	movs	r2, #0
 800977a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800977c:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <MX_ADC1_Init+0xc8>)
 800977e:	0018      	movs	r0, r3
 8009780:	f7fa f856 	bl	8003830 <HAL_ADC_Init>
 8009784:	1e03      	subs	r3, r0, #0
 8009786:	d001      	beq.n	800978c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8009788:	f000 fb64 	bl	8009e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800978c:	1d3b      	adds	r3, r7, #4
 800978e:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <MX_ADC1_Init+0xd0>)
 8009790:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	2200      	movs	r2, #0
 8009796:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8009798:	1d3b      	adds	r3, r7, #4
 800979a:	2200      	movs	r2, #0
 800979c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800979e:	1d3a      	adds	r2, r7, #4
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <MX_ADC1_Init+0xc8>)
 80097a2:	0011      	movs	r1, r2
 80097a4:	0018      	movs	r0, r3
 80097a6:	f7fa fb0f 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 80097aa:	1e03      	subs	r3, r0, #0
 80097ac:	d001      	beq.n	80097b2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80097ae:	f000 fb51 	bl	8009e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b004      	add	sp, #16
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	200005fc 	.word	0x200005fc
 80097c0:	40012400 	.word	0x40012400
 80097c4:	04000002 	.word	0x04000002

080097c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b097      	sub	sp, #92	; 0x5c
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097d0:	2344      	movs	r3, #68	; 0x44
 80097d2:	18fb      	adds	r3, r7, r3
 80097d4:	0018      	movs	r0, r3
 80097d6:	2314      	movs	r3, #20
 80097d8:	001a      	movs	r2, r3
 80097da:	2100      	movs	r1, #0
 80097dc:	f005 f9ff 	bl	800ebde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80097e0:	2410      	movs	r4, #16
 80097e2:	193b      	adds	r3, r7, r4
 80097e4:	0018      	movs	r0, r3
 80097e6:	2334      	movs	r3, #52	; 0x34
 80097e8:	001a      	movs	r2, r3
 80097ea:	2100      	movs	r1, #0
 80097ec:	f005 f9f7 	bl	800ebde <memset>
  if(adcHandle->Instance==ADC1)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a20      	ldr	r2, [pc, #128]	; (8009878 <HAL_ADC_MspInit+0xb0>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d139      	bne.n	800986e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80097fa:	193b      	adds	r3, r7, r4
 80097fc:	2280      	movs	r2, #128	; 0x80
 80097fe:	01d2      	lsls	r2, r2, #7
 8009800:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8009802:	193b      	adds	r3, r7, r4
 8009804:	2200      	movs	r2, #0
 8009806:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009808:	193b      	adds	r3, r7, r4
 800980a:	0018      	movs	r0, r3
 800980c:	f7fc fc00 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8009810:	1e03      	subs	r3, r0, #0
 8009812:	d001      	beq.n	8009818 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8009814:	f000 fb1e 	bl	8009e54 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009818:	4b18      	ldr	r3, [pc, #96]	; (800987c <HAL_ADC_MspInit+0xb4>)
 800981a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800981c:	4b17      	ldr	r3, [pc, #92]	; (800987c <HAL_ADC_MspInit+0xb4>)
 800981e:	2180      	movs	r1, #128	; 0x80
 8009820:	0349      	lsls	r1, r1, #13
 8009822:	430a      	orrs	r2, r1
 8009824:	641a      	str	r2, [r3, #64]	; 0x40
 8009826:	4b15      	ldr	r3, [pc, #84]	; (800987c <HAL_ADC_MspInit+0xb4>)
 8009828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800982a:	2380      	movs	r3, #128	; 0x80
 800982c:	035b      	lsls	r3, r3, #13
 800982e:	4013      	ands	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009834:	4b11      	ldr	r3, [pc, #68]	; (800987c <HAL_ADC_MspInit+0xb4>)
 8009836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009838:	4b10      	ldr	r3, [pc, #64]	; (800987c <HAL_ADC_MspInit+0xb4>)
 800983a:	2101      	movs	r1, #1
 800983c:	430a      	orrs	r2, r1
 800983e:	635a      	str	r2, [r3, #52]	; 0x34
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <HAL_ADC_MspInit+0xb4>)
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	2201      	movs	r2, #1
 8009846:	4013      	ands	r3, r2
 8009848:	60bb      	str	r3, [r7, #8]
 800984a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 800984c:	2144      	movs	r1, #68	; 0x44
 800984e:	187b      	adds	r3, r7, r1
 8009850:	2202      	movs	r2, #2
 8009852:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009854:	187b      	adds	r3, r7, r1
 8009856:	2203      	movs	r2, #3
 8009858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985a:	187b      	adds	r3, r7, r1
 800985c:	2200      	movs	r2, #0
 800985e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 8009860:	187a      	adds	r2, r7, r1
 8009862:	23a0      	movs	r3, #160	; 0xa0
 8009864:	05db      	lsls	r3, r3, #23
 8009866:	0011      	movs	r1, r2
 8009868:	0018      	movs	r0, r3
 800986a:	f7fa feed 	bl	8004648 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	46bd      	mov	sp, r7
 8009872:	b017      	add	sp, #92	; 0x5c
 8009874:	bd90      	pop	{r4, r7, pc}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	40012400 	.word	0x40012400
 800987c:	40021000 	.word	0x40021000

08009880 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2218      	movs	r2, #24
 8009890:	4393      	bics	r3, r2
 8009892:	001a      	movs	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	609a      	str	r2, [r3, #8]
}
 800989c:	46c0      	nop			; (mov r8, r8)
 800989e:	46bd      	mov	sp, r7
 80098a0:	b002      	add	sp, #8
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2260      	movs	r2, #96	; 0x60
 80098b4:	4393      	bics	r3, r2
 80098b6:	001a      	movs	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	431a      	orrs	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	609a      	str	r2, [r3, #8]
}
 80098c0:	46c0      	nop			; (mov r8, r8)
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b002      	add	sp, #8
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2280      	movs	r2, #128	; 0x80
 80098d8:	4393      	bics	r3, r2
 80098da:	001a      	movs	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	46c0      	nop			; (mov r8, r8)
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b002      	add	sp, #8
 80098ea:	bd80      	pop	{r7, pc}

080098ec <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	611a      	str	r2, [r3, #16]
}
 80098fc:	46c0      	nop			; (mov r8, r8)
 80098fe:	46bd      	mov	sp, r7
 8009900:	b002      	add	sp, #8
 8009902:	bd80      	pop	{r7, pc}

08009904 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	615a      	str	r2, [r3, #20]
}
 8009914:	46c0      	nop			; (mov r8, r8)
 8009916:	46bd      	mov	sp, r7
 8009918:	b002      	add	sp, #8
 800991a:	bd80      	pop	{r7, pc}

0800991c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8009924:	4b07      	ldr	r3, [pc, #28]	; (8009944 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009926:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <LL_AHB1_GRP1_EnableClock+0x28>)
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	430a      	orrs	r2, r1
 800992e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8009930:	4b04      	ldr	r3, [pc, #16]	; (8009944 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	4013      	ands	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800993a:	68fb      	ldr	r3, [r7, #12]
}
 800993c:	46c0      	nop			; (mov r8, r8)
 800993e:	46bd      	mov	sp, r7
 8009940:	b004      	add	sp, #16
 8009942:	bd80      	pop	{r7, pc}
 8009944:	40021000 	.word	0x40021000

08009948 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800994c:	2380      	movs	r3, #128	; 0x80
 800994e:	015b      	lsls	r3, r3, #5
 8009950:	0018      	movs	r0, r3
 8009952:	f7ff ffe3 	bl	800991c <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 8009956:	4b0f      	ldr	r3, [pc, #60]	; (8009994 <MX_CRC_Init+0x4c>)
 8009958:	2100      	movs	r1, #0
 800995a:	0018      	movs	r0, r3
 800995c:	f7ff ffa2 	bl	80098a4 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <MX_CRC_Init+0x4c>)
 8009962:	2100      	movs	r1, #0
 8009964:	0018      	movs	r0, r3
 8009966:	f7ff ffaf 	bl	80098c8 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 800996a:	4a0b      	ldr	r2, [pc, #44]	; (8009998 <MX_CRC_Init+0x50>)
 800996c:	4b09      	ldr	r3, [pc, #36]	; (8009994 <MX_CRC_Init+0x4c>)
 800996e:	0011      	movs	r1, r2
 8009970:	0018      	movs	r0, r3
 8009972:	f7ff ffc7 	bl	8009904 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 8009976:	4b07      	ldr	r3, [pc, #28]	; (8009994 <MX_CRC_Init+0x4c>)
 8009978:	2100      	movs	r1, #0
 800997a:	0018      	movs	r0, r3
 800997c:	f7ff ff80 	bl	8009880 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 8009980:	2301      	movs	r3, #1
 8009982:	425b      	negs	r3, r3
 8009984:	4a03      	ldr	r2, [pc, #12]	; (8009994 <MX_CRC_Init+0x4c>)
 8009986:	0019      	movs	r1, r3
 8009988:	0010      	movs	r0, r2
 800998a:	f7ff ffaf 	bl	80098ec <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40023000 	.word	0x40023000
 8009998:	04c11db7 	.word	0x04c11db7

0800999c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b089      	sub	sp, #36	; 0x24
 80099a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099a2:	240c      	movs	r4, #12
 80099a4:	193b      	adds	r3, r7, r4
 80099a6:	0018      	movs	r0, r3
 80099a8:	2314      	movs	r3, #20
 80099aa:	001a      	movs	r2, r3
 80099ac:	2100      	movs	r1, #0
 80099ae:	f005 f916 	bl	800ebde <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80099b2:	4b48      	ldr	r3, [pc, #288]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b6:	4b47      	ldr	r3, [pc, #284]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099b8:	2104      	movs	r1, #4
 80099ba:	430a      	orrs	r2, r1
 80099bc:	635a      	str	r2, [r3, #52]	; 0x34
 80099be:	4b45      	ldr	r3, [pc, #276]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c2:	2204      	movs	r2, #4
 80099c4:	4013      	ands	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]
 80099c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ca:	4b42      	ldr	r3, [pc, #264]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099ce:	4b41      	ldr	r3, [pc, #260]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099d0:	2101      	movs	r1, #1
 80099d2:	430a      	orrs	r2, r1
 80099d4:	635a      	str	r2, [r3, #52]	; 0x34
 80099d6:	4b3f      	ldr	r3, [pc, #252]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099da:	2201      	movs	r2, #1
 80099dc:	4013      	ands	r3, r2
 80099de:	607b      	str	r3, [r7, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80099e2:	4b3c      	ldr	r3, [pc, #240]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e6:	4b3b      	ldr	r3, [pc, #236]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099e8:	2102      	movs	r1, #2
 80099ea:	430a      	orrs	r2, r1
 80099ec:	635a      	str	r2, [r3, #52]	; 0x34
 80099ee:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <MX_GPIO_Init+0x138>)
 80099f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f2:	2202      	movs	r2, #2
 80099f4:	4013      	ands	r3, r2
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80099fa:	23e0      	movs	r3, #224	; 0xe0
 80099fc:	00d9      	lsls	r1, r3, #3
 80099fe:	23a0      	movs	r3, #160	; 0xa0
 8009a00:	05db      	lsls	r3, r3, #23
 8009a02:	2200      	movs	r2, #0
 8009a04:	0018      	movs	r0, r3
 8009a06:	f7fa ffa0 	bl	800494a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, GPIO_PIN_RESET);
 8009a0a:	4b33      	ldr	r3, [pc, #204]	; (8009ad8 <MX_GPIO_Init+0x13c>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2140      	movs	r1, #64	; 0x40
 8009a10:	0018      	movs	r0, r3
 8009a12:	f7fa ff9a 	bl	800494a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_START_Pin|BUTTON_SET_Pin|BUTTON_RESET_Pin;
 8009a16:	193b      	adds	r3, r7, r4
 8009a18:	221c      	movs	r2, #28
 8009a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009a1c:	193b      	adds	r3, r7, r4
 8009a1e:	2284      	movs	r2, #132	; 0x84
 8009a20:	0392      	lsls	r2, r2, #14
 8009a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a24:	193b      	adds	r3, r7, r4
 8009a26:	2200      	movs	r2, #0
 8009a28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a2a:	193a      	adds	r2, r7, r4
 8009a2c:	23a0      	movs	r3, #160	; 0xa0
 8009a2e:	05db      	lsls	r3, r3, #23
 8009a30:	0011      	movs	r1, r2
 8009a32:	0018      	movs	r0, r3
 8009a34:	f7fa fe08 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DC_Pin|RST_Pin;
 8009a38:	0021      	movs	r1, r4
 8009a3a:	187b      	adds	r3, r7, r1
 8009a3c:	22e0      	movs	r2, #224	; 0xe0
 8009a3e:	00d2      	lsls	r2, r2, #3
 8009a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a42:	000c      	movs	r4, r1
 8009a44:	193b      	adds	r3, r7, r4
 8009a46:	2201      	movs	r2, #1
 8009a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4a:	193b      	adds	r3, r7, r4
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a50:	193b      	adds	r3, r7, r4
 8009a52:	2200      	movs	r2, #0
 8009a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a56:	193a      	adds	r2, r7, r4
 8009a58:	23a0      	movs	r3, #160	; 0xa0
 8009a5a:	05db      	lsls	r3, r3, #23
 8009a5c:	0011      	movs	r1, r2
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f7fa fdf2 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8009a64:	193b      	adds	r3, r7, r4
 8009a66:	2280      	movs	r2, #128	; 0x80
 8009a68:	0152      	lsls	r2, r2, #5
 8009a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a6c:	193b      	adds	r3, r7, r4
 8009a6e:	2200      	movs	r2, #0
 8009a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a72:	193b      	adds	r3, r7, r4
 8009a74:	2200      	movs	r2, #0
 8009a76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8009a78:	193a      	adds	r2, r7, r4
 8009a7a:	23a0      	movs	r3, #160	; 0xa0
 8009a7c:	05db      	lsls	r3, r3, #23
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f7fa fde1 	bl	8004648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WKUP_Pin;
 8009a86:	0021      	movs	r1, r4
 8009a88:	187b      	adds	r3, r7, r1
 8009a8a:	2240      	movs	r2, #64	; 0x40
 8009a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a8e:	187b      	adds	r3, r7, r1
 8009a90:	2201      	movs	r2, #1
 8009a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a94:	187b      	adds	r3, r7, r1
 8009a96:	2200      	movs	r2, #0
 8009a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a9a:	187b      	adds	r3, r7, r1
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_WKUP_GPIO_Port, &GPIO_InitStruct);
 8009aa0:	187b      	adds	r3, r7, r1
 8009aa2:	4a0d      	ldr	r2, [pc, #52]	; (8009ad8 <MX_GPIO_Init+0x13c>)
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	0010      	movs	r0, r2
 8009aa8:	f7fa fdce 	bl	8004648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	2006      	movs	r0, #6
 8009ab2:	f7fa fd97 	bl	80045e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8009ab6:	2006      	movs	r0, #6
 8009ab8:	f7fa fda9 	bl	800460e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	2100      	movs	r1, #0
 8009ac0:	2007      	movs	r0, #7
 8009ac2:	f7fa fd8f 	bl	80045e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009ac6:	2007      	movs	r0, #7
 8009ac8:	f7fa fda1 	bl	800460e <HAL_NVIC_EnableIRQ>

}
 8009acc:	46c0      	nop			; (mov r8, r8)
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b009      	add	sp, #36	; 0x24
 8009ad2:	bd90      	pop	{r4, r7, pc}
 8009ad4:	40021000 	.word	0x40021000
 8009ad8:	50000400 	.word	0x50000400

08009adc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009ae2:	4a1c      	ldr	r2, [pc, #112]	; (8009b54 <MX_I2C1_Init+0x78>)
 8009ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009ae8:	4a1b      	ldr	r2, [pc, #108]	; (8009b58 <MX_I2C1_Init+0x7c>)
 8009aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009aec:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009af2:	4b17      	ldr	r3, [pc, #92]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009af8:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009afe:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009b04:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009b0a:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009b10:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f7fa ff67 	bl	80049ec <HAL_I2C_Init>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d001      	beq.n	8009b26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009b22:	f000 f997 	bl	8009e54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009b26:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b28:	2100      	movs	r1, #0
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	f7fb fca8 	bl	8005480 <HAL_I2CEx_ConfigAnalogFilter>
 8009b30:	1e03      	subs	r3, r0, #0
 8009b32:	d001      	beq.n	8009b38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009b34:	f000 f98e 	bl	8009e54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009b38:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <MX_I2C1_Init+0x74>)
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	f7fb fceb 	bl	8005518 <HAL_I2CEx_ConfigDigitalFilter>
 8009b42:	1e03      	subs	r3, r0, #0
 8009b44:	d001      	beq.n	8009b4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009b46:	f000 f985 	bl	8009e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20000660 	.word	0x20000660
 8009b54:	40005400 	.word	0x40005400
 8009b58:	00602173 	.word	0x00602173

08009b5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009b5c:	b590      	push	{r4, r7, lr}
 8009b5e:	b097      	sub	sp, #92	; 0x5c
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b64:	2344      	movs	r3, #68	; 0x44
 8009b66:	18fb      	adds	r3, r7, r3
 8009b68:	0018      	movs	r0, r3
 8009b6a:	2314      	movs	r3, #20
 8009b6c:	001a      	movs	r2, r3
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f005 f835 	bl	800ebde <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009b74:	2410      	movs	r4, #16
 8009b76:	193b      	adds	r3, r7, r4
 8009b78:	0018      	movs	r0, r3
 8009b7a:	2334      	movs	r3, #52	; 0x34
 8009b7c:	001a      	movs	r2, r3
 8009b7e:	2100      	movs	r1, #0
 8009b80:	f005 f82d 	bl	800ebde <memset>
  if(i2cHandle->Instance==I2C1)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <HAL_I2C_MspInit+0xb8>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d13e      	bne.n	8009c0c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009b8e:	193b      	adds	r3, r7, r4
 8009b90:	2220      	movs	r2, #32
 8009b92:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009b94:	193b      	adds	r3, r7, r4
 8009b96:	2200      	movs	r2, #0
 8009b98:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009b9a:	193b      	adds	r3, r7, r4
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f7fc fa37 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8009ba2:	1e03      	subs	r3, r0, #0
 8009ba4:	d001      	beq.n	8009baa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8009ba6:	f000 f955 	bl	8009e54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009baa:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <HAL_I2C_MspInit+0xbc>)
 8009bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bae:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <HAL_I2C_MspInit+0xbc>)
 8009bb0:	2102      	movs	r1, #2
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8009bb6:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <HAL_I2C_MspInit+0xbc>)
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bba:	2202      	movs	r2, #2
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009bc2:	2144      	movs	r1, #68	; 0x44
 8009bc4:	187b      	adds	r3, r7, r1
 8009bc6:	22c0      	movs	r2, #192	; 0xc0
 8009bc8:	0052      	lsls	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009bcc:	187b      	adds	r3, r7, r1
 8009bce:	2212      	movs	r2, #18
 8009bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd2:	187b      	adds	r3, r7, r1
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	2200      	movs	r2, #0
 8009bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8009bde:	187b      	adds	r3, r7, r1
 8009be0:	2206      	movs	r2, #6
 8009be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009be4:	187b      	adds	r3, r7, r1
 8009be6:	4a0d      	ldr	r2, [pc, #52]	; (8009c1c <HAL_I2C_MspInit+0xc0>)
 8009be8:	0019      	movs	r1, r3
 8009bea:	0010      	movs	r0, r2
 8009bec:	f7fa fd2c 	bl	8004648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009bf0:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <HAL_I2C_MspInit+0xbc>)
 8009bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf4:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <HAL_I2C_MspInit+0xbc>)
 8009bf6:	2180      	movs	r1, #128	; 0x80
 8009bf8:	0389      	lsls	r1, r1, #14
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <HAL_I2C_MspInit+0xbc>)
 8009c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c02:	2380      	movs	r3, #128	; 0x80
 8009c04:	039b      	lsls	r3, r3, #14
 8009c06:	4013      	ands	r3, r2
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8009c0c:	46c0      	nop			; (mov r8, r8)
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	b017      	add	sp, #92	; 0x5c
 8009c12:	bd90      	pop	{r4, r7, pc}
 8009c14:	40005400 	.word	0x40005400
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	50000400 	.word	0x50000400

08009c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c20:	b590      	push	{r4, r7, lr}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c26:	f7f9 fbe7 	bl	80033f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c2a:	f000 f8a7 	bl	8009d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c2e:	f7ff feb5 	bl	800999c <MX_GPIO_Init>
  MX_ADC1_Init();
 8009c32:	f7ff fd5f 	bl	80096f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009c36:	f7ff ff51 	bl	8009adc <MX_I2C1_Init>
  MX_RTC_Init();
 8009c3a:	f000 f911 	bl	8009e60 <MX_RTC_Init>
  MX_SPI1_Init();
 8009c3e:	f000 f9cb 	bl	8009fd8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8009c42:	f000 fb8f 	bl	800a364 <MX_TIM3_Init>
  MX_CRC_Init();
 8009c46:	f7ff fe7f 	bl	8009948 <MX_CRC_Init>
  MX_TIM6_Init();
 8009c4a:	f000 fbe3 	bl	800a414 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	rtcInit(&chrono);
 8009c4e:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <main+0x138>)
 8009c50:	0018      	movs	r0, r3
 8009c52:	f001 fc2b 	bl	800b4ac <rtcInit>
	lis3mdlInit(&magnetometer, &hi2c1);
 8009c56:	4a41      	ldr	r2, [pc, #260]	; (8009d5c <main+0x13c>)
 8009c58:	4b41      	ldr	r3, [pc, #260]	; (8009d60 <main+0x140>)
 8009c5a:	0011      	movs	r1, r2
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f001 f9d4 	bl	800b00a <lis3mdlInit>
	bme280Init(&atmospherical, &hi2c1);
 8009c62:	4a3e      	ldr	r2, [pc, #248]	; (8009d5c <main+0x13c>)
 8009c64:	4b3f      	ldr	r3, [pc, #252]	; (8009d64 <main+0x144>)
 8009c66:	0011      	movs	r1, r2
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f000 fc51 	bl	800a510 <bme280Init>
	interfaceInit(&interface);
 8009c6e:	4b3e      	ldr	r3, [pc, #248]	; (8009d68 <main+0x148>)
 8009c70:	0018      	movs	r0, r3
 8009c72:	f002 f963 	bl	800bf3c <interfaceInit>
	interfaceSettingsInit(&settings);
 8009c76:	4b3d      	ldr	r3, [pc, #244]	; (8009d6c <main+0x14c>)
 8009c78:	0018      	movs	r0, r3
 8009c7a:	f002 fa47 	bl	800c10c <interfaceSettingsInit>
	watchInit(&watch);
 8009c7e:	4b3c      	ldr	r3, [pc, #240]	; (8009d70 <main+0x150>)
 8009c80:	0018      	movs	r0, r3
 8009c82:	f004 ff0a 	bl	800ea9a <watchInit>
	timersInit();
 8009c86:	f004 fde1 	bl	800e84c <timersInit>
	batteryCheckInit();
 8009c8a:	f002 f921 	bl	800bed0 <batteryCheckInit>
	forecastInit(&forecast);
 8009c8e:	4b39      	ldr	r3, [pc, #228]	; (8009d74 <main+0x154>)
 8009c90:	0018      	movs	r0, r3
 8009c92:	f001 f941 	bl	800af18 <forecastInit>



	interfaceClear(&interface);
 8009c96:	4b34      	ldr	r3, [pc, #208]	; (8009d68 <main+0x148>)
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f002 fae9 	bl	800c270 <interfaceClear>
	interfaceUpdateModeSwitch(&interface, INTERFACE_UPDATE_MODE_PARTIAL);
 8009c9e:	4b32      	ldr	r3, [pc, #200]	; (8009d68 <main+0x148>)
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f002 fa8a 	bl	800c1bc <interfaceUpdateModeSwitch>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		rtcGetTime(&chrono);
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <main+0x138>)
 8009caa:	0018      	movs	r0, r3
 8009cac:	f001 fc26 	bl	800b4fc <rtcGetTime>
		lis3mdlRead(&magnetometer);
 8009cb0:	4b2b      	ldr	r3, [pc, #172]	; (8009d60 <main+0x140>)
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f001 f9e8 	bl	800b088 <lis3mdlRead>
		lis3mdlGetCalibrationSample(&magnetometer);
 8009cb8:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <main+0x140>)
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f001 fb50 	bl	800b360 <lis3mdlGetCalibrationSample>
		bme280Read(&atmospherical);
 8009cc0:	4b28      	ldr	r3, [pc, #160]	; (8009d64 <main+0x144>)
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f000 fd7a 	bl	800a7bc <bme280Read>
		batteryReadState();
 8009cc8:	f002 f90e 	bl	800bee8 <batteryReadState>
		forecastAppendActual(&forecast, &atmospherical, &chrono);
 8009ccc:	4a22      	ldr	r2, [pc, #136]	; (8009d58 <main+0x138>)
 8009cce:	4925      	ldr	r1, [pc, #148]	; (8009d64 <main+0x144>)
 8009cd0:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <main+0x154>)
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f001 f942 	bl	800af5c <forecastAppendActual>

		if (watch.mode == WATCH_MODE_NORMAL) {
 8009cd8:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <main+0x150>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d11b      	bne.n	8009d18 <main+0xf8>
			interfaceClear(&interface);
 8009ce0:	4b21      	ldr	r3, [pc, #132]	; (8009d68 <main+0x148>)
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f002 fac4 	bl	800c270 <interfaceClear>

			HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, 0);
 8009ce8:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <main+0x158>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	2140      	movs	r1, #64	; 0x40
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7fa fe2b 	bl	800494a <HAL_GPIO_WritePin>

			interfaceDrawMain(&interface, &chrono, &magnetometer, &atmospherical,
 8009cf4:	4c1b      	ldr	r4, [pc, #108]	; (8009d64 <main+0x144>)
 8009cf6:	4a1a      	ldr	r2, [pc, #104]	; (8009d60 <main+0x140>)
 8009cf8:	4917      	ldr	r1, [pc, #92]	; (8009d58 <main+0x138>)
 8009cfa:	481b      	ldr	r0, [pc, #108]	; (8009d68 <main+0x148>)
 8009cfc:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <main+0x154>)
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	4b1b      	ldr	r3, [pc, #108]	; (8009d70 <main+0x150>)
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	0023      	movs	r3, r4
 8009d06:	f002 fad3 	bl	800c2b0 <interfaceDrawMain>
					&watch, &forecast);

			HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, 1);
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <main+0x158>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	2140      	movs	r1, #64	; 0x40
 8009d10:	0018      	movs	r0, r3
 8009d12:	f7fa fe1a 	bl	800494a <HAL_GPIO_WritePin>
 8009d16:	e010      	b.n	8009d3a <main+0x11a>


		} else if (watch.mode == WATCH_MODE_SETTINGS) {
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <main+0x150>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d10c      	bne.n	8009d3a <main+0x11a>
			interfaceSettingsClear(&settings);
 8009d20:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <main+0x14c>)
 8009d22:	0018      	movs	r0, r3
 8009d24:	f002 fab4 	bl	800c290 <interfaceSettingsClear>
			interfaceSettingsDraw(&settings, &chrono, &magnetometer,
 8009d28:	4c0e      	ldr	r4, [pc, #56]	; (8009d64 <main+0x144>)
 8009d2a:	4a0d      	ldr	r2, [pc, #52]	; (8009d60 <main+0x140>)
 8009d2c:	490a      	ldr	r1, [pc, #40]	; (8009d58 <main+0x138>)
 8009d2e:	480f      	ldr	r0, [pc, #60]	; (8009d6c <main+0x14c>)
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <main+0x150>)
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	0023      	movs	r3, r4
 8009d36:	f003 fcc9 	bl	800d6cc <interfaceSettingsDraw>
					&atmospherical, &watch);
		}

		interfaceBurn(&interface);
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <main+0x148>)
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f002 fa74 	bl	800c22a <interfaceBurn>

		if (watch.mode == WATCH_MODE_NORMAL
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <main+0x150>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1ae      	bne.n	8009ca8 <main+0x88>
				&& watch.counterDontSleepTimer >= WATCH_TIME_DONT_SLEEP) {
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <main+0x150>)
 8009d4c:	789b      	ldrb	r3, [r3, #2]
 8009d4e:	2b31      	cmp	r3, #49	; 0x31
 8009d50:	d9aa      	bls.n	8009ca8 <main+0x88>
			goodNight();
 8009d52:	f004 fd1f 	bl	800e794 <goodNight>
		rtcGetTime(&chrono);
 8009d56:	e7a7      	b.n	8009ca8 <main+0x88>
 8009d58:	200000b8 	.word	0x200000b8
 8009d5c:	20000660 	.word	0x20000660
 8009d60:	200000e0 	.word	0x200000e0
 8009d64:	20000368 	.word	0x20000368
 8009d68:	200003b8 	.word	0x200003b8
 8009d6c:	200004e8 	.word	0x200004e8
 8009d70:	2000050c 	.word	0x2000050c
 8009d74:	20000514 	.word	0x20000514
 8009d78:	50000400 	.word	0x50000400

08009d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b093      	sub	sp, #76	; 0x4c
 8009d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d82:	2410      	movs	r4, #16
 8009d84:	193b      	adds	r3, r7, r4
 8009d86:	0018      	movs	r0, r3
 8009d88:	2338      	movs	r3, #56	; 0x38
 8009d8a:	001a      	movs	r2, r3
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	f004 ff26 	bl	800ebde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d92:	003b      	movs	r3, r7
 8009d94:	0018      	movs	r0, r3
 8009d96:	2310      	movs	r3, #16
 8009d98:	001a      	movs	r2, r3
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	f004 ff1f 	bl	800ebde <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009da0:	2380      	movs	r3, #128	; 0x80
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7fb fc49 	bl	800563c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8009daa:	f7fb fc01 	bl	80055b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009dae:	4b28      	ldr	r3, [pc, #160]	; (8009e50 <SystemClock_Config+0xd4>)
 8009db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009db2:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <SystemClock_Config+0xd4>)
 8009db4:	2118      	movs	r1, #24
 8009db6:	438a      	bics	r2, r1
 8009db8:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8009dba:	193b      	adds	r3, r7, r4
 8009dbc:	2206      	movs	r2, #6
 8009dbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009dc0:	193b      	adds	r3, r7, r4
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009dc6:	193b      	adds	r3, r7, r4
 8009dc8:	2280      	movs	r2, #128	; 0x80
 8009dca:	0052      	lsls	r2, r2, #1
 8009dcc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8009dce:	0021      	movs	r1, r4
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009dd6:	187b      	adds	r3, r7, r1
 8009dd8:	2240      	movs	r2, #64	; 0x40
 8009dda:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ddc:	187b      	adds	r3, r7, r1
 8009dde:	2202      	movs	r2, #2
 8009de0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009de2:	187b      	adds	r3, r7, r1
 8009de4:	2202      	movs	r2, #2
 8009de6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009de8:	187b      	adds	r3, r7, r1
 8009dea:	2200      	movs	r2, #0
 8009dec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8009dee:	187b      	adds	r3, r7, r1
 8009df0:	2208      	movs	r2, #8
 8009df2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009df4:	187b      	adds	r3, r7, r1
 8009df6:	2280      	movs	r2, #128	; 0x80
 8009df8:	0292      	lsls	r2, r2, #10
 8009dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009dfc:	187b      	adds	r3, r7, r1
 8009dfe:	2280      	movs	r2, #128	; 0x80
 8009e00:	0492      	lsls	r2, r2, #18
 8009e02:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009e04:	187b      	adds	r3, r7, r1
 8009e06:	2280      	movs	r2, #128	; 0x80
 8009e08:	0592      	lsls	r2, r2, #22
 8009e0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e0c:	187b      	adds	r3, r7, r1
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f7fb fc54 	bl	80056bc <HAL_RCC_OscConfig>
 8009e14:	1e03      	subs	r3, r0, #0
 8009e16:	d001      	beq.n	8009e1c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8009e18:	f000 f81c 	bl	8009e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e1c:	003b      	movs	r3, r7
 8009e1e:	2207      	movs	r2, #7
 8009e20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e22:	003b      	movs	r3, r7
 8009e24:	2202      	movs	r2, #2
 8009e26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e28:	003b      	movs	r3, r7
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009e2e:	003b      	movs	r3, r7
 8009e30:	2200      	movs	r2, #0
 8009e32:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009e34:	003b      	movs	r3, r7
 8009e36:	2102      	movs	r1, #2
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f7fb ff5f 	bl	8005cfc <HAL_RCC_ClockConfig>
 8009e3e:	1e03      	subs	r3, r0, #0
 8009e40:	d001      	beq.n	8009e46 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8009e42:	f000 f807 	bl	8009e54 <Error_Handler>
  }
}
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b013      	add	sp, #76	; 0x4c
 8009e4c:	bd90      	pop	{r4, r7, pc}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	40021000 	.word	0x40021000

08009e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009e58:	b672      	cpsid	i
}
 8009e5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009e5c:	e7fe      	b.n	8009e5c <Error_Handler+0x8>
	...

08009e60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009e66:	1d3b      	adds	r3, r7, #4
 8009e68:	0018      	movs	r0, r3
 8009e6a:	2314      	movs	r3, #20
 8009e6c:	001a      	movs	r2, r3
 8009e6e:	2100      	movs	r1, #0
 8009e70:	f004 feb5 	bl	800ebde <memset>
  RTC_DateTypeDef sDate = {0};
 8009e74:	003b      	movs	r3, r7
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009e7a:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009e7c:	4a32      	ldr	r2, [pc, #200]	; (8009f48 <MX_RTC_Init+0xe8>)
 8009e7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009e80:	4b30      	ldr	r3, [pc, #192]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8009e86:	4b2f      	ldr	r3, [pc, #188]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009e88:	227f      	movs	r2, #127	; 0x7f
 8009e8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8009e8c:	4b2d      	ldr	r3, [pc, #180]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009e8e:	22ff      	movs	r2, #255	; 0xff
 8009e90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009e92:	4b2c      	ldr	r3, [pc, #176]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009e98:	4b2a      	ldr	r3, [pc, #168]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009e9e:	4b29      	ldr	r3, [pc, #164]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009ea4:	4b27      	ldr	r3, [pc, #156]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009ea6:	2280      	movs	r2, #128	; 0x80
 8009ea8:	05d2      	lsls	r2, r2, #23
 8009eaa:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009eb2:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f7fc fa63 	bl	8006380 <HAL_RTC_Init>
 8009eba:	1e03      	subs	r3, r0, #0
 8009ebc:	d001      	beq.n	8009ec2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8009ebe:	f7ff ffc9 	bl	8009e54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8009ec2:	1d3b      	adds	r3, r7, #4
 8009ec4:	220a      	movs	r2, #10
 8009ec6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 8009ec8:	1d3b      	adds	r3, r7, #4
 8009eca:	220a      	movs	r2, #10
 8009ecc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8009ece:	1d3b      	adds	r3, r7, #4
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8009ed4:	1d3b      	adds	r3, r7, #4
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009eda:	1d3b      	adds	r3, r7, #4
 8009edc:	2200      	movs	r2, #0
 8009ede:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009ee0:	1d3b      	adds	r3, r7, #4
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8009ee6:	1d39      	adds	r1, r7, #4
 8009ee8:	4b16      	ldr	r3, [pc, #88]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	0018      	movs	r0, r3
 8009eee:	f7fc fadd 	bl	80064ac <HAL_RTC_SetTime>
 8009ef2:	1e03      	subs	r3, r0, #0
 8009ef4:	d001      	beq.n	8009efa <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8009ef6:	f7ff ffad 	bl	8009e54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8009efa:	003b      	movs	r3, r7
 8009efc:	2206      	movs	r2, #6
 8009efe:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8009f00:	003b      	movs	r3, r7
 8009f02:	2211      	movs	r2, #17
 8009f04:	705a      	strb	r2, [r3, #1]
  sDate.Date = 12;
 8009f06:	003b      	movs	r3, r7
 8009f08:	220c      	movs	r2, #12
 8009f0a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 22;
 8009f0c:	003b      	movs	r3, r7
 8009f0e:	2216      	movs	r2, #22
 8009f10:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009f12:	0039      	movs	r1, r7
 8009f14:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f7fc fbcb 	bl	80066b4 <HAL_RTC_SetDate>
 8009f1e:	1e03      	subs	r3, r0, #0
 8009f20:	d001      	beq.n	8009f26 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8009f22:	f7ff ff97 	bl	8009e54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8009f26:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <MX_RTC_Init+0xe4>)
 8009f28:	2204      	movs	r2, #4
 8009f2a:	213c      	movs	r1, #60	; 0x3c
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7fc fd95 	bl	8006a5c <HAL_RTCEx_SetWakeUpTimer_IT>
 8009f32:	1e03      	subs	r3, r0, #0
 8009f34:	d001      	beq.n	8009f3a <MX_RTC_Init+0xda>
  {
    Error_Handler();
 8009f36:	f7ff ff8d 	bl	8009e54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009f3a:	46c0      	nop			; (mov r8, r8)
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	b006      	add	sp, #24
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	200006c8 	.word	0x200006c8
 8009f48:	40002800 	.word	0x40002800

08009f4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b091      	sub	sp, #68	; 0x44
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f54:	240c      	movs	r4, #12
 8009f56:	193b      	adds	r3, r7, r4
 8009f58:	0018      	movs	r0, r3
 8009f5a:	2334      	movs	r3, #52	; 0x34
 8009f5c:	001a      	movs	r2, r3
 8009f5e:	2100      	movs	r1, #0
 8009f60:	f004 fe3d 	bl	800ebde <memset>
  if(rtcHandle->Instance==RTC)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a19      	ldr	r2, [pc, #100]	; (8009fd0 <HAL_RTC_MspInit+0x84>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d12c      	bne.n	8009fc8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009f6e:	193b      	adds	r3, r7, r4
 8009f70:	2280      	movs	r2, #128	; 0x80
 8009f72:	0292      	lsls	r2, r2, #10
 8009f74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009f76:	193b      	adds	r3, r7, r4
 8009f78:	2280      	movs	r2, #128	; 0x80
 8009f7a:	0052      	lsls	r2, r2, #1
 8009f7c:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f7e:	193b      	adds	r3, r7, r4
 8009f80:	0018      	movs	r0, r3
 8009f82:	f7fc f845 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8009f86:	1e03      	subs	r3, r0, #0
 8009f88:	d001      	beq.n	8009f8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8009f8a:	f7ff ff63 	bl	8009e54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <HAL_RTC_MspInit+0x88>)
 8009f90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <HAL_RTC_MspInit+0x88>)
 8009f94:	2180      	movs	r1, #128	; 0x80
 8009f96:	0209      	lsls	r1, r1, #8
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	; (8009fd4 <HAL_RTC_MspInit+0x88>)
 8009f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <HAL_RTC_MspInit+0x88>)
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	00c9      	lsls	r1, r1, #3
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <HAL_RTC_MspInit+0x88>)
 8009fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fae:	2380      	movs	r3, #128	; 0x80
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2100      	movs	r1, #0
 8009fbc:	2002      	movs	r0, #2
 8009fbe:	f7fa fb11 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8009fc2:	2002      	movs	r0, #2
 8009fc4:	f7fa fb23 	bl	800460e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009fc8:	46c0      	nop			; (mov r8, r8)
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	b011      	add	sp, #68	; 0x44
 8009fce:	bd90      	pop	{r4, r7, pc}
 8009fd0:	40002800 	.word	0x40002800
 8009fd4:	40021000 	.word	0x40021000

08009fd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009fdc:	4b1b      	ldr	r3, [pc, #108]	; (800a04c <MX_SPI1_Init+0x74>)
 8009fde:	4a1c      	ldr	r2, [pc, #112]	; (800a050 <MX_SPI1_Init+0x78>)
 8009fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009fe2:	4b1a      	ldr	r3, [pc, #104]	; (800a04c <MX_SPI1_Init+0x74>)
 8009fe4:	2282      	movs	r2, #130	; 0x82
 8009fe6:	0052      	lsls	r2, r2, #1
 8009fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009fea:	4b18      	ldr	r3, [pc, #96]	; (800a04c <MX_SPI1_Init+0x74>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009ff0:	4b16      	ldr	r3, [pc, #88]	; (800a04c <MX_SPI1_Init+0x74>)
 8009ff2:	22e0      	movs	r2, #224	; 0xe0
 8009ff4:	00d2      	lsls	r2, r2, #3
 8009ff6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ff8:	4b14      	ldr	r3, [pc, #80]	; (800a04c <MX_SPI1_Init+0x74>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <MX_SPI1_Init+0x74>)
 800a000:	2200      	movs	r2, #0
 800a002:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a004:	4b11      	ldr	r3, [pc, #68]	; (800a04c <MX_SPI1_Init+0x74>)
 800a006:	2280      	movs	r2, #128	; 0x80
 800a008:	0092      	lsls	r2, r2, #2
 800a00a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a00c:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <MX_SPI1_Init+0x74>)
 800a00e:	2208      	movs	r2, #8
 800a010:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a012:	4b0e      	ldr	r3, [pc, #56]	; (800a04c <MX_SPI1_Init+0x74>)
 800a014:	2200      	movs	r2, #0
 800a016:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a018:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <MX_SPI1_Init+0x74>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <MX_SPI1_Init+0x74>)
 800a020:	2200      	movs	r2, #0
 800a022:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a024:	4b09      	ldr	r3, [pc, #36]	; (800a04c <MX_SPI1_Init+0x74>)
 800a026:	2207      	movs	r2, #7
 800a028:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a02a:	4b08      	ldr	r3, [pc, #32]	; (800a04c <MX_SPI1_Init+0x74>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <MX_SPI1_Init+0x74>)
 800a032:	2208      	movs	r2, #8
 800a034:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <MX_SPI1_Init+0x74>)
 800a038:	0018      	movs	r0, r3
 800a03a:	f7fc fdcf 	bl	8006bdc <HAL_SPI_Init>
 800a03e:	1e03      	subs	r3, r0, #0
 800a040:	d001      	beq.n	800a046 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a042:	f7ff ff07 	bl	8009e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	200006f4 	.word	0x200006f4
 800a050:	40013000 	.word	0x40013000

0800a054 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a054:	b590      	push	{r4, r7, lr}
 800a056:	b08b      	sub	sp, #44	; 0x2c
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a05c:	2414      	movs	r4, #20
 800a05e:	193b      	adds	r3, r7, r4
 800a060:	0018      	movs	r0, r3
 800a062:	2314      	movs	r3, #20
 800a064:	001a      	movs	r2, r3
 800a066:	2100      	movs	r1, #0
 800a068:	f004 fdb9 	bl	800ebde <memset>
  if(spiHandle->Instance==SPI1)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a2c      	ldr	r2, [pc, #176]	; (800a124 <HAL_SPI_MspInit+0xd0>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d151      	bne.n	800a11a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a076:	4b2c      	ldr	r3, [pc, #176]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a07a:	4b2b      	ldr	r3, [pc, #172]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a07c:	2180      	movs	r1, #128	; 0x80
 800a07e:	0149      	lsls	r1, r1, #5
 800a080:	430a      	orrs	r2, r1
 800a082:	641a      	str	r2, [r3, #64]	; 0x40
 800a084:	4b28      	ldr	r3, [pc, #160]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a088:	2380      	movs	r3, #128	; 0x80
 800a08a:	015b      	lsls	r3, r3, #5
 800a08c:	4013      	ands	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a092:	4b25      	ldr	r3, [pc, #148]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a096:	4b24      	ldr	r3, [pc, #144]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a098:	2101      	movs	r1, #1
 800a09a:	430a      	orrs	r2, r1
 800a09c:	635a      	str	r2, [r3, #52]	; 0x34
 800a09e:	4b22      	ldr	r3, [pc, #136]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0aa:	4b1f      	ldr	r3, [pc, #124]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a0ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0ae:	4b1e      	ldr	r3, [pc, #120]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a0b0:	2102      	movs	r1, #2
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	635a      	str	r2, [r3, #52]	; 0x34
 800a0b6:	4b1c      	ldr	r3, [pc, #112]	; (800a128 <HAL_SPI_MspInit+0xd4>)
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60bb      	str	r3, [r7, #8]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a0c2:	193b      	adds	r3, r7, r4
 800a0c4:	2280      	movs	r2, #128	; 0x80
 800a0c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c8:	193b      	adds	r3, r7, r4
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ce:	193b      	adds	r3, r7, r4
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0d4:	193b      	adds	r3, r7, r4
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a0da:	193b      	adds	r3, r7, r4
 800a0dc:	2200      	movs	r2, #0
 800a0de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e0:	193a      	adds	r2, r7, r4
 800a0e2:	23a0      	movs	r3, #160	; 0xa0
 800a0e4:	05db      	lsls	r3, r3, #23
 800a0e6:	0011      	movs	r1, r2
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f7fa faad 	bl	8004648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a0ee:	0021      	movs	r1, r4
 800a0f0:	187b      	adds	r3, r7, r1
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0f6:	187b      	adds	r3, r7, r1
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fc:	187b      	adds	r3, r7, r1
 800a0fe:	2200      	movs	r2, #0
 800a100:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a102:	187b      	adds	r3, r7, r1
 800a104:	2200      	movs	r2, #0
 800a106:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a108:	187b      	adds	r3, r7, r1
 800a10a:	2200      	movs	r2, #0
 800a10c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a10e:	187b      	adds	r3, r7, r1
 800a110:	4a06      	ldr	r2, [pc, #24]	; (800a12c <HAL_SPI_MspInit+0xd8>)
 800a112:	0019      	movs	r1, r3
 800a114:	0010      	movs	r0, r2
 800a116:	f7fa fa97 	bl	8004648 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a11a:	46c0      	nop			; (mov r8, r8)
 800a11c:	46bd      	mov	sp, r7
 800a11e:	b00b      	add	sp, #44	; 0x2c
 800a120:	bd90      	pop	{r4, r7, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	40013000 	.word	0x40013000
 800a128:	40021000 	.word	0x40021000
 800a12c:	50000400 	.word	0x50000400

0800a130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a136:	4b11      	ldr	r3, [pc, #68]	; (800a17c <HAL_MspInit+0x4c>)
 800a138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a13a:	4b10      	ldr	r3, [pc, #64]	; (800a17c <HAL_MspInit+0x4c>)
 800a13c:	2101      	movs	r1, #1
 800a13e:	430a      	orrs	r2, r1
 800a140:	641a      	str	r2, [r3, #64]	; 0x40
 800a142:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <HAL_MspInit+0x4c>)
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	2201      	movs	r2, #1
 800a148:	4013      	ands	r3, r2
 800a14a:	607b      	str	r3, [r7, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a14e:	4b0b      	ldr	r3, [pc, #44]	; (800a17c <HAL_MspInit+0x4c>)
 800a150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a152:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <HAL_MspInit+0x4c>)
 800a154:	2180      	movs	r1, #128	; 0x80
 800a156:	0549      	lsls	r1, r1, #21
 800a158:	430a      	orrs	r2, r1
 800a15a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a15c:	4b07      	ldr	r3, [pc, #28]	; (800a17c <HAL_MspInit+0x4c>)
 800a15e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a160:	2380      	movs	r3, #128	; 0x80
 800a162:	055b      	lsls	r3, r3, #21
 800a164:	4013      	ands	r3, r2
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800a16a:	2380      	movs	r3, #128	; 0x80
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	0018      	movs	r0, r3
 800a170:	f7f9 fa08 	bl	8003584 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a174:	46c0      	nop			; (mov r8, r8)
 800a176:	46bd      	mov	sp, r7
 800a178:	b002      	add	sp, #8
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40021000 	.word	0x40021000

0800a180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a184:	e7fe      	b.n	800a184 <NMI_Handler+0x4>

0800a186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a18a:	e7fe      	b.n	800a18a <HardFault_Handler+0x4>

0800a18c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a190:	46c0      	nop			; (mov r8, r8)
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a19a:	46c0      	nop			; (mov r8, r8)
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a1a4:	f7f9 f992 	bl	80034cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a1a8:	46c0      	nop			; (mov r8, r8)
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a1b4:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <RTC_TAMP_IRQHandler+0x14>)
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7fc fcea 	bl	8006b90 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800a1bc:	46c0      	nop			; (mov r8, r8)
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	46c0      	nop			; (mov r8, r8)
 800a1c4:	200006c8 	.word	0x200006c8

0800a1c8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_START_Pin);
 800a1cc:	2004      	movs	r0, #4
 800a1ce:	f7fa fbd9 	bl	8004984 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SET_Pin);
 800a1d2:	2008      	movs	r0, #8
 800a1d4:	f7fa fbd6 	bl	8004984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800a1d8:	46c0      	nop			; (mov r8, r8)
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RESET_Pin);
 800a1e2:	2010      	movs	r0, #16
 800a1e4:	f7fa fbce 	bl	8004984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800a1e8:	46c0      	nop			; (mov r8, r8)
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a1f4:	4b03      	ldr	r3, [pc, #12]	; (800a204 <TIM3_IRQHandler+0x14>)
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f7fd f92a 	bl	8007450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a1fc:	46c0      	nop			; (mov r8, r8)
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	46c0      	nop			; (mov r8, r8)
 800a204:	20000758 	.word	0x20000758

0800a208 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a20c:	4b03      	ldr	r3, [pc, #12]	; (800a21c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800a20e:	0018      	movs	r0, r3
 800a210:	f7fd f91e 	bl	8007450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800a214:	46c0      	nop			; (mov r8, r8)
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	46c0      	nop			; (mov r8, r8)
 800a21c:	200007a4 	.word	0x200007a4

0800a220 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a22c:	2300      	movs	r3, #0
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	e00a      	b.n	800a248 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a232:	e000      	b.n	800a236 <_read+0x16>
 800a234:	bf00      	nop
 800a236:	0001      	movs	r1, r0
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	60ba      	str	r2, [r7, #8]
 800a23e:	b2ca      	uxtb	r2, r1
 800a240:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	3301      	adds	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	dbf0      	blt.n	800a232 <_read+0x12>
	}

return len;
 800a250:	687b      	ldr	r3, [r7, #4]
}
 800a252:	0018      	movs	r0, r3
 800a254:	46bd      	mov	sp, r7
 800a256:	b006      	add	sp, #24
 800a258:	bd80      	pop	{r7, pc}

0800a25a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b086      	sub	sp, #24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	e009      	b.n	800a280 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	60ba      	str	r2, [r7, #8]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	0018      	movs	r0, r3
 800a276:	e000      	b.n	800a27a <_write+0x20>
 800a278:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	3301      	adds	r3, #1
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	429a      	cmp	r2, r3
 800a286:	dbf1      	blt.n	800a26c <_write+0x12>
	}
	return len;
 800a288:	687b      	ldr	r3, [r7, #4]
}
 800a28a:	0018      	movs	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b006      	add	sp, #24
 800a290:	bd80      	pop	{r7, pc}

0800a292 <_close>:

int _close(int file)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
	return -1;
 800a29a:	2301      	movs	r3, #1
 800a29c:	425b      	negs	r3, r3
}
 800a29e:	0018      	movs	r0, r3
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b002      	add	sp, #8
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2280      	movs	r2, #128	; 0x80
 800a2b4:	0192      	lsls	r2, r2, #6
 800a2b6:	605a      	str	r2, [r3, #4]
	return 0;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	b002      	add	sp, #8
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <_isatty>:

int _isatty(int file)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
	return 1;
 800a2ca:	2301      	movs	r3, #1
}
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	b002      	add	sp, #8
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
	return 0;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b004      	add	sp, #16
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a2f4:	4a14      	ldr	r2, [pc, #80]	; (800a348 <_sbrk+0x5c>)
 800a2f6:	4b15      	ldr	r3, [pc, #84]	; (800a34c <_sbrk+0x60>)
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a300:	4b13      	ldr	r3, [pc, #76]	; (800a350 <_sbrk+0x64>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a308:	4b11      	ldr	r3, [pc, #68]	; (800a350 <_sbrk+0x64>)
 800a30a:	4a12      	ldr	r2, [pc, #72]	; (800a354 <_sbrk+0x68>)
 800a30c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a30e:	4b10      	ldr	r3, [pc, #64]	; (800a350 <_sbrk+0x64>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	18d3      	adds	r3, r2, r3
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d207      	bcs.n	800a32c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a31c:	f004 fc22 	bl	800eb64 <__errno>
 800a320:	0003      	movs	r3, r0
 800a322:	220c      	movs	r2, #12
 800a324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a326:	2301      	movs	r3, #1
 800a328:	425b      	negs	r3, r3
 800a32a:	e009      	b.n	800a340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a32c:	4b08      	ldr	r3, [pc, #32]	; (800a350 <_sbrk+0x64>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <_sbrk+0x64>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	18d2      	adds	r2, r2, r3
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <_sbrk+0x64>)
 800a33c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800a33e:	68fb      	ldr	r3, [r7, #12]
}
 800a340:	0018      	movs	r0, r3
 800a342:	46bd      	mov	sp, r7
 800a344:	b006      	add	sp, #24
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20009000 	.word	0x20009000
 800a34c:	00000400 	.word	0x00000400
 800a350:	200005d4 	.word	0x200005d4
 800a354:	20000800 	.word	0x20000800

0800a358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a35c:	46c0      	nop			; (mov r8, r8)
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a36a:	2310      	movs	r3, #16
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	0018      	movs	r0, r3
 800a370:	2310      	movs	r3, #16
 800a372:	001a      	movs	r2, r3
 800a374:	2100      	movs	r1, #0
 800a376:	f004 fc32 	bl	800ebde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a37a:	1d3b      	adds	r3, r7, #4
 800a37c:	0018      	movs	r0, r3
 800a37e:	230c      	movs	r3, #12
 800a380:	001a      	movs	r2, r3
 800a382:	2100      	movs	r1, #0
 800a384:	f004 fc2b 	bl	800ebde <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a388:	4b1e      	ldr	r3, [pc, #120]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a38a:	4a1f      	ldr	r2, [pc, #124]	; (800a408 <MX_TIM3_Init+0xa4>)
 800a38c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3199;
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a390:	4a1e      	ldr	r2, [pc, #120]	; (800a40c <MX_TIM3_Init+0xa8>)
 800a392:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a394:	4b1b      	ldr	r3, [pc, #108]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a396:	2200      	movs	r2, #0
 800a398:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800a39a:	4b1a      	ldr	r3, [pc, #104]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a39c:	4a1c      	ldr	r2, [pc, #112]	; (800a410 <MX_TIM3_Init+0xac>)
 800a39e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3a0:	4b18      	ldr	r3, [pc, #96]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3a6:	4b17      	ldr	r3, [pc, #92]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a3ac:	4b15      	ldr	r3, [pc, #84]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f7fc ff9a 	bl	80072e8 <HAL_TIM_Base_Init>
 800a3b4:	1e03      	subs	r3, r0, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800a3b8:	f7ff fd4c 	bl	8009e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a3bc:	2110      	movs	r1, #16
 800a3be:	187b      	adds	r3, r7, r1
 800a3c0:	2280      	movs	r2, #128	; 0x80
 800a3c2:	0152      	lsls	r2, r2, #5
 800a3c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a3c6:	187a      	adds	r2, r7, r1
 800a3c8:	4b0e      	ldr	r3, [pc, #56]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a3ca:	0011      	movs	r1, r2
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f7fd f971 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 800a3d2:	1e03      	subs	r3, r0, #0
 800a3d4:	d001      	beq.n	800a3da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800a3d6:	f7ff fd3d 	bl	8009e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3da:	1d3b      	adds	r3, r7, #4
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3e0:	1d3b      	adds	r3, r7, #4
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a3e6:	1d3a      	adds	r2, r7, #4
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <MX_TIM3_Init+0xa0>)
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f7fd fb69 	bl	8007ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800a3f2:	1e03      	subs	r3, r0, #0
 800a3f4:	d001      	beq.n	800a3fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800a3f6:	f7ff fd2d 	bl	8009e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	b008      	add	sp, #32
 800a400:	bd80      	pop	{r7, pc}
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	20000758 	.word	0x20000758
 800a408:	40000400 	.word	0x40000400
 800a40c:	00000c7f 	.word	0x00000c7f
 800a410:	00004e1f 	.word	0x00004e1f

0800a414 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a41a:	1d3b      	adds	r3, r7, #4
 800a41c:	0018      	movs	r0, r3
 800a41e:	230c      	movs	r3, #12
 800a420:	001a      	movs	r2, r3
 800a422:	2100      	movs	r1, #0
 800a424:	f004 fbdb 	bl	800ebde <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a42a:	4a16      	ldr	r2, [pc, #88]	; (800a484 <MX_TIM6_Init+0x70>)
 800a42c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 800a42e:	4b14      	ldr	r3, [pc, #80]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a430:	4a15      	ldr	r2, [pc, #84]	; (800a488 <MX_TIM6_Init+0x74>)
 800a432:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a434:	4b12      	ldr	r3, [pc, #72]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a436:	2200      	movs	r2, #0
 800a438:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 800a43a:	4b11      	ldr	r3, [pc, #68]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a43c:	22c7      	movs	r2, #199	; 0xc7
 800a43e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a440:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a442:	2200      	movs	r2, #0
 800a444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a446:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a448:	0018      	movs	r0, r3
 800a44a:	f7fc ff4d 	bl	80072e8 <HAL_TIM_Base_Init>
 800a44e:	1e03      	subs	r3, r0, #0
 800a450:	d001      	beq.n	800a456 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800a452:	f7ff fcff 	bl	8009e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a456:	1d3b      	adds	r3, r7, #4
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a45c:	1d3b      	adds	r3, r7, #4
 800a45e:	2200      	movs	r2, #0
 800a460:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a462:	1d3a      	adds	r2, r7, #4
 800a464:	4b06      	ldr	r3, [pc, #24]	; (800a480 <MX_TIM6_Init+0x6c>)
 800a466:	0011      	movs	r1, r2
 800a468:	0018      	movs	r0, r3
 800a46a:	f7fd fb2b 	bl	8007ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800a46e:	1e03      	subs	r3, r0, #0
 800a470:	d001      	beq.n	800a476 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800a472:	f7ff fcef 	bl	8009e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	46bd      	mov	sp, r7
 800a47a:	b004      	add	sp, #16
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	200007a4 	.word	0x200007a4
 800a484:	40001000 	.word	0x40001000
 800a488:	00000c7f 	.word	0x00000c7f

0800a48c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a1a      	ldr	r2, [pc, #104]	; (800a504 <HAL_TIM_Base_MspInit+0x78>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d114      	bne.n	800a4c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a49e:	4b1a      	ldr	r3, [pc, #104]	; (800a508 <HAL_TIM_Base_MspInit+0x7c>)
 800a4a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4a2:	4b19      	ldr	r3, [pc, #100]	; (800a508 <HAL_TIM_Base_MspInit+0x7c>)
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4aa:	4b17      	ldr	r3, [pc, #92]	; (800a508 <HAL_TIM_Base_MspInit+0x7c>)
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	2010      	movs	r0, #16
 800a4bc:	f7fa f892 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a4c0:	2010      	movs	r0, #16
 800a4c2:	f7fa f8a4 	bl	800460e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800a4c6:	e018      	b.n	800a4fa <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a0f      	ldr	r2, [pc, #60]	; (800a50c <HAL_TIM_Base_MspInit+0x80>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d113      	bne.n	800a4fa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <HAL_TIM_Base_MspInit+0x7c>)
 800a4d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <HAL_TIM_Base_MspInit+0x7c>)
 800a4d8:	2110      	movs	r1, #16
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4de:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <HAL_TIM_Base_MspInit+0x7c>)
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	2210      	movs	r2, #16
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	60bb      	str	r3, [r7, #8]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	2011      	movs	r0, #17
 800a4f0:	f7fa f878 	bl	80045e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800a4f4:	2011      	movs	r0, #17
 800a4f6:	f7fa f88a 	bl	800460e <HAL_NVIC_EnableIRQ>
}
 800a4fa:	46c0      	nop			; (mov r8, r8)
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	b004      	add	sp, #16
 800a500:	bd80      	pop	{r7, pc}
 800a502:	46c0      	nop			; (mov r8, r8)
 800a504:	40000400 	.word	0x40000400
 800a508:	40021000 	.word	0x40021000
 800a50c:	40001000 	.word	0x40001000

0800a510 <bme280Init>:
 *
 * @param  i2C handler
 *
 * @retval None
 */
void bme280Init(bme280TypeDef *bme280, I2C_HandleTypeDef *I2Chandler) {
 800a510:	b590      	push	{r4, r7, lr}
 800a512:	b091      	sub	sp, #68	; 0x44
 800a514:	af04      	add	r7, sp, #16
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]

	bme280->pressureReference = 1013;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4aa6      	ldr	r2, [pc, #664]	; (800a7b8 <bme280Init+0x2a8>)
 800a51e:	615a      	str	r2, [r3, #20]
	bme280->temperatureOffset = -7;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2207      	movs	r2, #7
 800a524:	4252      	negs	r2, r2
 800a526:	619a      	str	r2, [r3, #24]

	bme280->I2Chandler = I2Chandler;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	64da      	str	r2, [r3, #76]	; 0x4c

	bme280->i2cTimeout = BME280_I2C_TIMEOUT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2223      	movs	r2, #35	; 0x23
 800a532:	2164      	movs	r1, #100	; 0x64
 800a534:	5499      	strb	r1, [r3, r2]
//	bme280->ctrlHum = 0x01; //oversampling for humidity disabled
////	bme280->ctrlMeas = 0x24; //oversampling for temp, pressure disabled
//	bme280->ctrlMeas = 0x34; //pressure oversampling x16

//set oversampling
	bme280->ctrlMeas = (BME280_OVERSAMPLING_TEM << 5)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2220      	movs	r2, #32
 800a53a:	21b4      	movs	r1, #180	; 0xb4
 800a53c:	5499      	strb	r1, [r3, r2]
			| (BME280_OVERSAMPLING_PRE << 2);
	bme280->ctrlHum = BME280_OVERSAMPLING_HUM;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2221      	movs	r2, #33	; 0x21
 800a542:	2105      	movs	r1, #5
 800a544:	5499      	strb	r1, [r3, r2]
	bme280->config = BME280_IIR_FILTER << 2;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2222      	movs	r2, #34	; 0x22
 800a54a:	2108      	movs	r1, #8
 800a54c:	5499      	strb	r1, [r3, r2]
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								READING CALIBRATION DATA

	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			dig_T, 6, bme280->i2cTimeout) != HAL_OK) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2223      	movs	r2, #35	; 0x23
 800a556:	5c9b      	ldrb	r3, [r3, r2]
	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 800a558:	9302      	str	r3, [sp, #8]
 800a55a:	2306      	movs	r3, #6
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	2428      	movs	r4, #40	; 0x28
 800a560:	193b      	adds	r3, r7, r4
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	2301      	movs	r3, #1
 800a566:	2288      	movs	r2, #136	; 0x88
 800a568:	21ee      	movs	r1, #238	; 0xee
 800a56a:	f7fa fc03 	bl	8004d74 <HAL_I2C_Mem_Read>

	}
	bme280->dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 800a56e:	0021      	movs	r1, r4
 800a570:	187b      	adds	r3, r7, r1
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b21a      	sxth	r2, r3
 800a576:	187b      	adds	r3, r7, r1
 800a578:	785b      	ldrb	r3, [r3, #1]
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	b21b      	sxth	r3, r3
 800a57e:	4313      	orrs	r3, r2
 800a580:	b21b      	sxth	r3, r3
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280->dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 800a588:	187b      	adds	r3, r7, r1
 800a58a:	789b      	ldrb	r3, [r3, #2]
 800a58c:	b21a      	sxth	r2, r3
 800a58e:	187b      	adds	r3, r7, r1
 800a590:	78db      	ldrb	r3, [r3, #3]
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	b21b      	sxth	r3, r3
 800a596:	4313      	orrs	r3, r2
 800a598:	b21a      	sxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280->dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 800a59e:	187b      	adds	r3, r7, r1
 800a5a0:	791b      	ldrb	r3, [r3, #4]
 800a5a2:	b21a      	sxth	r2, r3
 800a5a4:	187b      	adds	r3, r7, r1
 800a5a6:	791b      	ldrb	r3, [r3, #4]
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	b21b      	sxth	r3, r3
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	b21a      	sxth	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	851a      	strh	r2, [r3, #40]	; 0x28

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			dig_P, 18, bme280->i2cTimeout);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2223      	movs	r2, #35	; 0x23
 800a5bc:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 800a5be:	9302      	str	r3, [sp, #8]
 800a5c0:	2312      	movs	r3, #18
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	2414      	movs	r4, #20
 800a5c6:	193b      	adds	r3, r7, r4
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	228e      	movs	r2, #142	; 0x8e
 800a5ce:	21ee      	movs	r1, #238	; 0xee
 800a5d0:	f7fa fbd0 	bl	8004d74 <HAL_I2C_Mem_Read>
	bme280->dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 800a5d4:	0021      	movs	r1, r4
 800a5d6:	187b      	adds	r3, r7, r1
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	b21a      	sxth	r2, r3
 800a5dc:	187b      	adds	r3, r7, r1
 800a5de:	785b      	ldrb	r3, [r3, #1]
 800a5e0:	021b      	lsls	r3, r3, #8
 800a5e2:	b21b      	sxth	r3, r3
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280->dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 800a5ee:	187b      	adds	r3, r7, r1
 800a5f0:	789b      	ldrb	r3, [r3, #2]
 800a5f2:	b21a      	sxth	r2, r3
 800a5f4:	187b      	adds	r3, r7, r1
 800a5f6:	78db      	ldrb	r3, [r3, #3]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	b21b      	sxth	r3, r3
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	b21a      	sxth	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280->dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800a604:	187b      	adds	r3, r7, r1
 800a606:	791b      	ldrb	r3, [r3, #4]
 800a608:	b21a      	sxth	r2, r3
 800a60a:	187b      	adds	r3, r7, r1
 800a60c:	795b      	ldrb	r3, [r3, #5]
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	b21b      	sxth	r3, r3
 800a612:	4313      	orrs	r3, r2
 800a614:	b21a      	sxth	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	85da      	strh	r2, [r3, #46]	; 0x2e
	bme280->dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 800a61a:	187b      	adds	r3, r7, r1
 800a61c:	799b      	ldrb	r3, [r3, #6]
 800a61e:	b21a      	sxth	r2, r3
 800a620:	187b      	adds	r3, r7, r1
 800a622:	79db      	ldrb	r3, [r3, #7]
 800a624:	021b      	lsls	r3, r3, #8
 800a626:	b21b      	sxth	r3, r3
 800a628:	4313      	orrs	r3, r2
 800a62a:	b21a      	sxth	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	861a      	strh	r2, [r3, #48]	; 0x30
	bme280->dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 800a630:	187b      	adds	r3, r7, r1
 800a632:	7a1b      	ldrb	r3, [r3, #8]
 800a634:	b21a      	sxth	r2, r3
 800a636:	187b      	adds	r3, r7, r1
 800a638:	7a5b      	ldrb	r3, [r3, #9]
 800a63a:	021b      	lsls	r3, r3, #8
 800a63c:	b21b      	sxth	r3, r3
 800a63e:	4313      	orrs	r3, r2
 800a640:	b21a      	sxth	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	865a      	strh	r2, [r3, #50]	; 0x32
	bme280->dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 800a646:	187b      	adds	r3, r7, r1
 800a648:	7a9b      	ldrb	r3, [r3, #10]
 800a64a:	b21a      	sxth	r2, r3
 800a64c:	187b      	adds	r3, r7, r1
 800a64e:	7adb      	ldrb	r3, [r3, #11]
 800a650:	021b      	lsls	r3, r3, #8
 800a652:	b21b      	sxth	r3, r3
 800a654:	4313      	orrs	r3, r2
 800a656:	b21a      	sxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	869a      	strh	r2, [r3, #52]	; 0x34
	bme280->dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 800a65c:	187b      	adds	r3, r7, r1
 800a65e:	7b1b      	ldrb	r3, [r3, #12]
 800a660:	b21a      	sxth	r2, r3
 800a662:	187b      	adds	r3, r7, r1
 800a664:	7b5b      	ldrb	r3, [r3, #13]
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	b21b      	sxth	r3, r3
 800a66a:	4313      	orrs	r3, r2
 800a66c:	b21a      	sxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	86da      	strh	r2, [r3, #54]	; 0x36
	bme280->dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 800a672:	187b      	adds	r3, r7, r1
 800a674:	7b9b      	ldrb	r3, [r3, #14]
 800a676:	b21a      	sxth	r2, r3
 800a678:	187b      	adds	r3, r7, r1
 800a67a:	7bdb      	ldrb	r3, [r3, #15]
 800a67c:	021b      	lsls	r3, r3, #8
 800a67e:	b21b      	sxth	r3, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	b21a      	sxth	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	871a      	strh	r2, [r3, #56]	; 0x38
	bme280->dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 800a688:	187b      	adds	r3, r7, r1
 800a68a:	7c1b      	ldrb	r3, [r3, #16]
 800a68c:	b21a      	sxth	r2, r3
 800a68e:	187b      	adds	r3, r7, r1
 800a690:	7c5b      	ldrb	r3, [r3, #17]
 800a692:	021b      	lsls	r3, r3, #8
 800a694:	b21b      	sxth	r3, r3
 800a696:	4313      	orrs	r3, r2
 800a698:	b21a      	sxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	875a      	strh	r2, [r3, #58]	; 0x3a

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			&dig_H_1, 1, bme280->i2cTimeout);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2223      	movs	r2, #35	; 0x23
 800a6a6:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 800a6a8:	9302      	str	r3, [sp, #8]
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	2413      	movs	r4, #19
 800a6b0:	193b      	adds	r3, r7, r4
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	22a1      	movs	r2, #161	; 0xa1
 800a6b8:	21ee      	movs	r1, #238	; 0xee
 800a6ba:	f7fa fb5b 	bl	8004d74 <HAL_I2C_Mem_Read>
	bme280->dig_H1 = ((unsigned char) dig_H_1);
 800a6be:	193b      	adds	r3, r7, r4
 800a6c0:	7819      	ldrb	r1, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	223c      	movs	r2, #60	; 0x3c
 800a6c6:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			dig_H_2_6, 7, bme280->i2cTimeout);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2223      	movs	r2, #35	; 0x23
 800a6d0:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 800a6d2:	9302      	str	r3, [sp, #8]
 800a6d4:	2307      	movs	r3, #7
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	240c      	movs	r4, #12
 800a6da:	193b      	adds	r3, r7, r4
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	22e1      	movs	r2, #225	; 0xe1
 800a6e2:	21ee      	movs	r1, #238	; 0xee
 800a6e4:	f7fa fb46 	bl	8004d74 <HAL_I2C_Mem_Read>
	bme280->dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 800a6e8:	0020      	movs	r0, r4
 800a6ea:	183b      	adds	r3, r7, r0
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b21a      	sxth	r2, r3
 800a6f0:	183b      	adds	r3, r7, r0
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	021b      	lsls	r3, r3, #8
 800a6f6:	b21b      	sxth	r3, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	b21a      	sxth	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	87da      	strh	r2, [r3, #62]	; 0x3e
	bme280->dig_H3 = ((unsigned char) dig_H_2_6[2]);
 800a700:	183b      	adds	r3, r7, r0
 800a702:	7899      	ldrb	r1, [r3, #2]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2240      	movs	r2, #64	; 0x40
 800a708:	5499      	strb	r1, [r3, r2]

	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 800a70a:	183b      	adds	r3, r7, r0
 800a70c:	78db      	ldrb	r3, [r3, #3]
 800a70e:	011b      	lsls	r3, r3, #4
			| (((int16_t) dig_H_2_6[4]) & 0x0f));
 800a710:	b21a      	sxth	r2, r3
 800a712:	183b      	adds	r3, r7, r0
 800a714:	791b      	ldrb	r3, [r3, #4]
 800a716:	b21b      	sxth	r3, r3
 800a718:	210f      	movs	r1, #15
 800a71a:	400b      	ands	r3, r1
 800a71c:	b21b      	sxth	r3, r3
 800a71e:	4313      	orrs	r3, r2
 800a720:	b219      	sxth	r1, r3
	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2242      	movs	r2, #66	; 0x42
 800a726:	5299      	strh	r1, [r3, r2]
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 800a728:	183b      	adds	r3, r7, r0
 800a72a:	791b      	ldrb	r3, [r3, #4]
			| ((int16_t) dig_H_2_6[5]) << 4);
 800a72c:	091b      	lsrs	r3, r3, #4
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	b21a      	sxth	r2, r3
 800a732:	183b      	adds	r3, r7, r0
 800a734:	795b      	ldrb	r3, [r3, #5]
 800a736:	011b      	lsls	r3, r3, #4
 800a738:	b21b      	sxth	r3, r3
 800a73a:	4313      	orrs	r3, r2
 800a73c:	b219      	sxth	r1, r3
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2244      	movs	r2, #68	; 0x44
 800a742:	5299      	strh	r1, [r3, r2]
	bme280->dig_H6 = ((unsigned char) dig_H_2_6[6]);
 800a744:	183b      	adds	r3, r7, r0
 800a746:	7999      	ldrb	r1, [r3, #6]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2246      	movs	r2, #70	; 0x46
 800a74c:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3320      	adds	r3, #32
			&bme280->ctrlMeas, 1, bme280->i2cTimeout); //write temp and press oversampling
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	2123      	movs	r1, #35	; 0x23
 800a75a:	5c52      	ldrb	r2, [r2, r1]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a75c:	9202      	str	r2, [sp, #8]
 800a75e:	2201      	movs	r2, #1
 800a760:	9201      	str	r2, [sp, #4]
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	2301      	movs	r3, #1
 800a766:	22f4      	movs	r2, #244	; 0xf4
 800a768:	21ee      	movs	r1, #238	; 0xee
 800a76a:	f7fa f9d5 	bl	8004b18 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3321      	adds	r3, #33	; 0x21
			&bme280->ctrlHum, 1, bme280->i2cTimeout); //write humidity oversampling
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	2123      	movs	r1, #35	; 0x23
 800a77a:	5c52      	ldrb	r2, [r2, r1]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800a77c:	9202      	str	r2, [sp, #8]
 800a77e:	2201      	movs	r2, #1
 800a780:	9201      	str	r2, [sp, #4]
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	2301      	movs	r3, #1
 800a786:	22f2      	movs	r2, #242	; 0xf2
 800a788:	21ee      	movs	r1, #238	; 0xee
 800a78a:	f7fa f9c5 	bl	8004b18 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3322      	adds	r3, #34	; 0x22
			&bme280->config, 1, bme280->i2cTimeout); //write iir filter config
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	2123      	movs	r1, #35	; 0x23
 800a79a:	5c52      	ldrb	r2, [r2, r1]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 800a79c:	9202      	str	r2, [sp, #8]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	9201      	str	r2, [sp, #4]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	22f5      	movs	r2, #245	; 0xf5
 800a7a8:	21ee      	movs	r1, #238	; 0xee
 800a7aa:	f7fa f9b5 	bl	8004b18 <HAL_I2C_Mem_Write>

}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b00d      	add	sp, #52	; 0x34
 800a7b4:	bd90      	pop	{r4, r7, pc}
 800a7b6:	46c0      	nop			; (mov r8, r8)
 800a7b8:	000003f5 	.word	0x000003f5

0800a7bc <bme280Read>:
 *
 * @param  BME280 handler
 *
 * @retval None
 */
void bme280Read(bme280TypeDef *bme280) {
 800a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7be:	b08d      	sub	sp, #52	; 0x34
 800a7c0:	af04      	add	r7, sp, #16
 800a7c2:	6078      	str	r0, [r7, #4]

	uint8_t readings[8] = { 0 };
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	18fb      	adds	r3, r7, r3
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	605a      	str	r2, [r3, #4]

	//adc data
	int32_t temperatureADC = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61fb      	str	r3, [r7, #28]
	int32_t pressureADC = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
	int32_t humidityADC = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]

	//start measure by setting las bit of ctrlMeas register
	uint8_t startConversion = (bme280->ctrlMeas) + 1;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	5c9b      	ldrb	r3, [r3, r2]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	210b      	movs	r1, #11
 800a7e8:	187b      	adds	r3, r7, r1
 800a7ea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			&startConversion, 1, bme280->i2cTimeout);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2223      	movs	r2, #35	; 0x23
 800a7f4:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a7f6:	9302      	str	r3, [sp, #8]
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	187b      	adds	r3, r7, r1
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2301      	movs	r3, #1
 800a802:	22f4      	movs	r2, #244	; 0xf4
 800a804:	21ee      	movs	r1, #238	; 0xee
 800a806:	f7fa f987 	bl	8004b18 <HAL_I2C_Mem_Write>

	//wait for measurement
	uint8_t status = 0;
 800a80a:	230a      	movs	r3, #10
 800a80c:	18fb      	adds	r3, r7, r3
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
	do {
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
				&status, 1, bme280->i2cTimeout);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2223      	movs	r2, #35	; 0x23
 800a81a:	5c9b      	ldrb	r3, [r3, r2]
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 800a81c:	9302      	str	r3, [sp, #8]
 800a81e:	2301      	movs	r3, #1
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	260a      	movs	r6, #10
 800a824:	19bb      	adds	r3, r7, r6
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2301      	movs	r3, #1
 800a82a:	22f3      	movs	r2, #243	; 0xf3
 800a82c:	21ee      	movs	r1, #238	; 0xee
 800a82e:	f7fa faa1 	bl	8004d74 <HAL_I2C_Mem_Read>
	} while (((status >> 3) & 1) == 1);
 800a832:	19bb      	adds	r3, r7, r6
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	08db      	lsrs	r3, r3, #3
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	001a      	movs	r2, r3
 800a83c:	2301      	movs	r3, #1
 800a83e:	4013      	ands	r3, r2
 800a840:	d1e7      	bne.n	800a812 <bme280Read+0x56>

	//read output registers
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			readings, 8, bme280->i2cTimeout);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2223      	movs	r2, #35	; 0x23
 800a84a:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 800a84c:	9302      	str	r3, [sp, #8]
 800a84e:	2308      	movs	r3, #8
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	260c      	movs	r6, #12
 800a854:	19bb      	adds	r3, r7, r6
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2301      	movs	r3, #1
 800a85a:	22f7      	movs	r2, #247	; 0xf7
 800a85c:	21ee      	movs	r1, #238	; 0xee
 800a85e:	f7fa fa89 	bl	8004d74 <HAL_I2C_Mem_Read>

	//TEMPERATURE
	temperatureADC = ((((int32_t) readings[3] << 12)
 800a862:	19bb      	adds	r3, r7, r6
 800a864:	78db      	ldrb	r3, [r3, #3]
 800a866:	031a      	lsls	r2, r3, #12
			| ((int32_t) readings[4] << 4) | ((int32_t) readings[5] >> 4)));
 800a868:	19bb      	adds	r3, r7, r6
 800a86a:	791b      	ldrb	r3, [r3, #4]
 800a86c:	011b      	lsls	r3, r3, #4
 800a86e:	4313      	orrs	r3, r2
 800a870:	19ba      	adds	r2, r7, r6
 800a872:	7952      	ldrb	r2, [r2, #5]
 800a874:	0912      	lsrs	r2, r2, #4
 800a876:	b2d2      	uxtb	r2, r2
	temperatureADC = ((((int32_t) readings[3] << 12)
 800a878:	4313      	orrs	r3, r2
 800a87a:	61fb      	str	r3, [r7, #28]

	bme280->temperatureValue = (_BME280_compensate_T_int32(bme280,
 800a87c:	69fa      	ldr	r2, [r7, #28]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	0011      	movs	r1, r2
 800a882:	0018      	movs	r0, r3
 800a884:	f000 f8fe 	bl	800aa84 <_BME280_compensate_T_int32>
 800a888:	0002      	movs	r2, r0
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	605a      	str	r2, [r3, #4]
			temperatureADC));
	bme280->temperatureValueCompensated = bme280->temperatureValue
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685a      	ldr	r2, [r3, #4]
			+ (bme280->temperatureOffset * 100);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	2164      	movs	r1, #100	; 0x64
 800a898:	434b      	muls	r3, r1
 800a89a:	18d2      	adds	r2, r2, r3
	bme280->temperatureValueCompensated = bme280->temperatureValue
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	61da      	str	r2, [r3, #28]

	//PRESSURE
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 800a8a0:	19bb      	adds	r3, r7, r6
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	031a      	lsls	r2, r3, #12
 800a8a6:	19bb      	adds	r3, r7, r6
 800a8a8:	785b      	ldrb	r3, [r3, #1]
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	4313      	orrs	r3, r2
			| ((int32_t) readings[2] >> 4)));
 800a8ae:	19ba      	adds	r2, r7, r6
 800a8b0:	7892      	ldrb	r2, [r2, #2]
 800a8b2:	0912      	lsrs	r2, r2, #4
 800a8b4:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	61bb      	str	r3, [r7, #24]

	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	0011      	movs	r1, r2
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f000 f915 	bl	800aaf0 <_BME280_compensate_P_int64>
 800a8c6:	0003      	movs	r3, r0
			/ 256;
 800a8c8:	0a1a      	lsrs	r2, r3, #8
	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	609a      	str	r2, [r3, #8]

	//HUMIDITY
	humidityADC = (((int32_t) readings[6] << 8) | (int32_t) readings[7]);
 800a8ce:	19bb      	adds	r3, r7, r6
 800a8d0:	799b      	ldrb	r3, [r3, #6]
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	19ba      	adds	r2, r7, r6
 800a8d6:	79d2      	ldrb	r2, [r2, #7]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]

	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	0011      	movs	r1, r2
 800a8e2:	0018      	movs	r0, r3
 800a8e4:	f000 fab4 	bl	800ae50 <_BME280_compensate_H_int32>
 800a8e8:	0003      	movs	r3, r0
			/ 1024;
 800a8ea:	0a9a      	lsrs	r2, r3, #10
	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60da      	str	r2, [r3, #12]
	 * T- air temperature[K]
	 *
	 */

	bme280->altitudeValue = (-((8.314
			* ((((float) bme280->temperatureValue) / 100) + 273.15))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f7f6 fc0d 	bl	8001114 <__aeabi_i2f>
 800a8fa:	1c03      	adds	r3, r0, #0
 800a8fc:	492e      	ldr	r1, [pc, #184]	; (800a9b8 <bme280Read+0x1fc>)
 800a8fe:	1c18      	adds	r0, r3, #0
 800a900:	f7f5 fffa 	bl	80008f8 <__aeabi_fdiv>
 800a904:	1c03      	adds	r3, r0, #0
 800a906:	1c18      	adds	r0, r3, #0
 800a908:	f7f8 fa9e 	bl	8002e48 <__aeabi_f2d>
 800a90c:	4a2b      	ldr	r2, [pc, #172]	; (800a9bc <bme280Read+0x200>)
 800a90e:	4b2c      	ldr	r3, [pc, #176]	; (800a9c0 <bme280Read+0x204>)
 800a910:	f7f6 fc82 	bl	8001218 <__aeabi_dadd>
 800a914:	0002      	movs	r2, r0
 800a916:	000b      	movs	r3, r1
 800a918:	0010      	movs	r0, r2
 800a91a:	0019      	movs	r1, r3
 800a91c:	4a29      	ldr	r2, [pc, #164]	; (800a9c4 <bme280Read+0x208>)
 800a91e:	4b2a      	ldr	r3, [pc, #168]	; (800a9c8 <bme280Read+0x20c>)
 800a920:	f7f7 fbea 	bl	80020f8 <__aeabi_dmul>
 800a924:	0002      	movs	r2, r0
 800a926:	000b      	movs	r3, r1
 800a928:	0010      	movs	r0, r2
 800a92a:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 800a92c:	4a27      	ldr	r2, [pc, #156]	; (800a9cc <bme280Read+0x210>)
 800a92e:	4b28      	ldr	r3, [pc, #160]	; (800a9d0 <bme280Read+0x214>)
 800a930:	f7f6 ffdc 	bl	80018ec <__aeabi_ddiv>
 800a934:	0002      	movs	r2, r0
 800a936:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 800a938:	0011      	movs	r1, r2
 800a93a:	000c      	movs	r4, r1
 800a93c:	2180      	movs	r1, #128	; 0x80
 800a93e:	0609      	lsls	r1, r1, #24
 800a940:	4059      	eors	r1, r3
 800a942:	000d      	movs	r5, r1
			* log(
					(float) bme280->pressureValue
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	0018      	movs	r0, r3
 800a94a:	f7f6 fc29 	bl	80011a0 <__aeabi_ui2f>
 800a94e:	1c06      	adds	r6, r0, #0
							/ (((float) bme280->pressureReference) * 100)))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	0018      	movs	r0, r3
 800a956:	f7f6 fc23 	bl	80011a0 <__aeabi_ui2f>
 800a95a:	1c03      	adds	r3, r0, #0
 800a95c:	4916      	ldr	r1, [pc, #88]	; (800a9b8 <bme280Read+0x1fc>)
 800a95e:	1c18      	adds	r0, r3, #0
 800a960:	f7f6 f8d6 	bl	8000b10 <__aeabi_fmul>
 800a964:	1c03      	adds	r3, r0, #0
 800a966:	1c19      	adds	r1, r3, #0
 800a968:	1c30      	adds	r0, r6, #0
 800a96a:	f7f5 ffc5 	bl	80008f8 <__aeabi_fdiv>
 800a96e:	1c03      	adds	r3, r0, #0
			* log(
 800a970:	1c18      	adds	r0, r3, #0
 800a972:	f7f8 fa69 	bl	8002e48 <__aeabi_f2d>
 800a976:	0002      	movs	r2, r0
 800a978:	000b      	movs	r3, r1
 800a97a:	0010      	movs	r0, r2
 800a97c:	0019      	movs	r1, r3
 800a97e:	f005 f9dd 	bl	800fd3c <log>
 800a982:	0002      	movs	r2, r0
 800a984:	000b      	movs	r3, r1
 800a986:	0020      	movs	r0, r4
 800a988:	0029      	movs	r1, r5
 800a98a:	f7f7 fbb5 	bl	80020f8 <__aeabi_dmul>
 800a98e:	0002      	movs	r2, r0
 800a990:	000b      	movs	r3, r1
 800a992:	0010      	movs	r0, r2
 800a994:	0019      	movs	r1, r3
			* 100;
 800a996:	2200      	movs	r2, #0
 800a998:	4b0e      	ldr	r3, [pc, #56]	; (800a9d4 <bme280Read+0x218>)
 800a99a:	f7f7 fbad 	bl	80020f8 <__aeabi_dmul>
 800a99e:	0002      	movs	r2, r0
 800a9a0:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 800a9a2:	0010      	movs	r0, r2
 800a9a4:	0019      	movs	r1, r3
 800a9a6:	f7f8 f9c3 	bl	8002d30 <__aeabi_d2iz>
 800a9aa:	0002      	movs	r2, r0
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	611a      	str	r2, [r3, #16]
}
 800a9b0:	46c0      	nop			; (mov r8, r8)
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	b009      	add	sp, #36	; 0x24
 800a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b8:	42c80000 	.word	0x42c80000
 800a9bc:	66666666 	.word	0x66666666
 800a9c0:	40711266 	.word	0x40711266
 800a9c4:	9ba5e354 	.word	0x9ba5e354
 800a9c8:	4020a0c4 	.word	0x4020a0c4
 800a9cc:	db22d0e5 	.word	0xdb22d0e5
 800a9d0:	3fd27ef9 	.word	0x3fd27ef9
 800a9d4:	40590000 	.word	0x40590000

0800a9d8 <bme280ChangeValue>:

void bme280ChangeValue(bme280TypeDef *bme280, uint8_t value, uint8_t direction) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	0008      	movs	r0, r1
 800a9e2:	0011      	movs	r1, r2
 800a9e4:	1cfb      	adds	r3, r7, #3
 800a9e6:	1c02      	adds	r2, r0, #0
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	1cbb      	adds	r3, r7, #2
 800a9ec:	1c0a      	adds	r2, r1, #0
 800a9ee:	701a      	strb	r2, [r3, #0]

	if (value == BME280_CHANGE_PREF) {
 800a9f0:	1cfb      	adds	r3, r7, #3
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d11e      	bne.n	800aa36 <bme280ChangeValue+0x5e>

		if (direction == BME280_CHANGE_DIR_UP && bme280->pressureReference < 1100) {
 800a9f8:	1cbb      	adds	r3, r7, #2
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <bme280ChangeValue+0x3e>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	4a1e      	ldr	r2, [pc, #120]	; (800aa80 <bme280ChangeValue+0xa8>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d805      	bhi.n	800aa16 <bme280ChangeValue+0x3e>
			bme280->pressureReference++;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	615a      	str	r2, [r3, #20]
 800aa14:	e02f      	b.n	800aa76 <bme280ChangeValue+0x9e>
		} else if (direction == BME280_CHANGE_DIR_DOWN && bme280->pressureReference > 900) {
 800aa16:	1cbb      	adds	r3, r7, #2
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d12b      	bne.n	800aa76 <bme280ChangeValue+0x9e>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	695a      	ldr	r2, [r3, #20]
 800aa22:	23e1      	movs	r3, #225	; 0xe1
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d925      	bls.n	800aa76 <bme280ChangeValue+0x9e>
			bme280->pressureReference--;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	1e5a      	subs	r2, r3, #1
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	615a      	str	r2, [r3, #20]
		} else if (direction == BME280_CHANGE_DIR_DOWN && bme280->temperatureOffset > -20) {
			bme280->temperatureOffset--;
		}
	}

}
 800aa34:	e01f      	b.n	800aa76 <bme280ChangeValue+0x9e>
	} else if (value == BME280_CHANGE_TOFFSET) {
 800aa36:	1cfb      	adds	r3, r7, #3
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d11b      	bne.n	800aa76 <bme280ChangeValue+0x9e>
		if (direction == BME280_CHANGE_DIR_UP && bme280->temperatureOffset < 20) {
 800aa3e:	1cbb      	adds	r3, r7, #2
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d109      	bne.n	800aa5a <bme280ChangeValue+0x82>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	2b13      	cmp	r3, #19
 800aa4c:	dc05      	bgt.n	800aa5a <bme280ChangeValue+0x82>
			bme280->temperatureOffset++;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	619a      	str	r2, [r3, #24]
 800aa58:	e00d      	b.n	800aa76 <bme280ChangeValue+0x9e>
		} else if (direction == BME280_CHANGE_DIR_DOWN && bme280->temperatureOffset > -20) {
 800aa5a:	1cbb      	adds	r3, r7, #2
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d109      	bne.n	800aa76 <bme280ChangeValue+0x9e>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	3313      	adds	r3, #19
 800aa68:	db05      	blt.n	800aa76 <bme280ChangeValue+0x9e>
			bme280->temperatureOffset--;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	1e5a      	subs	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	619a      	str	r2, [r3, #24]
}
 800aa74:	e7ff      	b.n	800aa76 <bme280ChangeValue+0x9e>
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	b002      	add	sp, #8
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	0000044b 	.word	0x0000044b

0800aa84 <_BME280_compensate_T_int32>:
//									COMP FUNCTIONS DEFINITIONS

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T) {
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	10da      	asrs	r2, r3, #3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	1ad3      	subs	r3, r2, r3
			* ((int32_t) bme280->dig_T2)) >> 11;
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	2126      	movs	r1, #38	; 0x26
 800aa9e:	5e52      	ldrsh	r2, [r2, r1]
 800aaa0:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 800aaa2:	12db      	asrs	r3, r3, #11
 800aaa4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	111b      	asrs	r3, r3, #4
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800aaae:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((int32_t) bme280->dig_T1))) >> 12)
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	1112      	asrs	r2, r2, #4
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 800aab8:	1a52      	subs	r2, r2, r1
 800aaba:	4353      	muls	r3, r2
 800aabc:	131b      	asrs	r3, r3, #12
			* ((int32_t) bme280->dig_T3)) >> 14;
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	2128      	movs	r1, #40	; 0x28
 800aac2:	5e52      	ldrsh	r2, [r2, r1]
 800aac4:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 800aac6:	139b      	asrs	r3, r3, #14
 800aac8:	613b      	str	r3, [r7, #16]
	bme280->t_fine = var1 + var2;
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	18d2      	adds	r2, r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	649a      	str	r2, [r3, #72]	; 0x48
	T = (bme280->t_fine * 5 + 128) >> 8;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aad8:	0013      	movs	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	189b      	adds	r3, r3, r2
 800aade:	3380      	adds	r3, #128	; 0x80
 800aae0:	121b      	asrs	r3, r3, #8
 800aae2:	60fb      	str	r3, [r7, #12]
	return T;
 800aae4:	68fb      	ldr	r3, [r7, #12]
}
 800aae6:	0018      	movs	r0, r3
 800aae8:	46bd      	mov	sp, r7
 800aaea:	b006      	add	sp, #24
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <_BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P) {
 800aaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf2:	b0ad      	sub	sp, #180	; 0xb4
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	2394      	movs	r3, #148	; 0x94
 800aaf8:	18fa      	adds	r2, r7, r3
 800aafa:	6010      	str	r0, [r2, #0]
 800aafc:	2290      	movs	r2, #144	; 0x90
 800aafe:	18ba      	adds	r2, r7, r2
 800ab00:	6011      	str	r1, [r2, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t) bme280->t_fine) - 128000;
 800ab02:	18fa      	adds	r2, r7, r3
 800ab04:	6813      	ldr	r3, [r2, #0]
 800ab06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab08:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab0a:	17db      	asrs	r3, r3, #31
 800ab0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab0e:	4ace      	ldr	r2, [pc, #824]	; (800ae48 <_BME280_compensate_P_int64+0x358>)
 800ab10:	2301      	movs	r3, #1
 800ab12:	425b      	negs	r3, r3
 800ab14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ab16:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ab18:	1880      	adds	r0, r0, r2
 800ab1a:	4159      	adcs	r1, r3
 800ab1c:	0002      	movs	r2, r0
 800ab1e:	000b      	movs	r3, r1
 800ab20:	26a8      	movs	r6, #168	; 0xa8
 800ab22:	19b9      	adds	r1, r7, r6
 800ab24:	600a      	str	r2, [r1, #0]
 800ab26:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) bme280->dig_P6;
 800ab28:	19ba      	adds	r2, r7, r6
 800ab2a:	6853      	ldr	r3, [r2, #4]
 800ab2c:	6812      	ldr	r2, [r2, #0]
 800ab2e:	19b9      	adds	r1, r7, r6
 800ab30:	6808      	ldr	r0, [r1, #0]
 800ab32:	6849      	ldr	r1, [r1, #4]
 800ab34:	f7f5 fcc8 	bl	80004c8 <__aeabi_lmul>
 800ab38:	0002      	movs	r2, r0
 800ab3a:	000b      	movs	r3, r1
 800ab3c:	0010      	movs	r0, r2
 800ab3e:	0019      	movs	r1, r3
 800ab40:	2394      	movs	r3, #148	; 0x94
 800ab42:	18fa      	adds	r2, r7, r3
 800ab44:	6813      	ldr	r3, [r2, #0]
 800ab46:	2234      	movs	r2, #52	; 0x34
 800ab48:	5e9b      	ldrsh	r3, [r3, r2]
 800ab4a:	653b      	str	r3, [r7, #80]	; 0x50
 800ab4c:	17db      	asrs	r3, r3, #31
 800ab4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab54:	f7f5 fcb8 	bl	80004c8 <__aeabi_lmul>
 800ab58:	0002      	movs	r2, r0
 800ab5a:	000b      	movs	r3, r1
 800ab5c:	21a0      	movs	r1, #160	; 0xa0
 800ab5e:	1878      	adds	r0, r7, r1
 800ab60:	6002      	str	r2, [r0, #0]
 800ab62:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) bme280->dig_P5) << 17);
 800ab64:	2394      	movs	r3, #148	; 0x94
 800ab66:	18fa      	adds	r2, r7, r3
 800ab68:	6813      	ldr	r3, [r2, #0]
 800ab6a:	2232      	movs	r2, #50	; 0x32
 800ab6c:	5e9b      	ldrsh	r3, [r3, r2]
 800ab6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab70:	17db      	asrs	r3, r3, #31
 800ab72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab74:	19ba      	adds	r2, r7, r6
 800ab76:	6853      	ldr	r3, [r2, #4]
 800ab78:	6812      	ldr	r2, [r2, #0]
 800ab7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ab7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ab7e:	f7f5 fca3 	bl	80004c8 <__aeabi_lmul>
 800ab82:	0002      	movs	r2, r0
 800ab84:	000b      	movs	r3, r1
 800ab86:	0bd1      	lsrs	r1, r2, #15
 800ab88:	045d      	lsls	r5, r3, #17
 800ab8a:	430d      	orrs	r5, r1
 800ab8c:	0454      	lsls	r4, r2, #17
 800ab8e:	21a0      	movs	r1, #160	; 0xa0
 800ab90:	187a      	adds	r2, r7, r1
 800ab92:	6853      	ldr	r3, [r2, #4]
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	1912      	adds	r2, r2, r4
 800ab98:	416b      	adcs	r3, r5
 800ab9a:	1878      	adds	r0, r7, r1
 800ab9c:	6002      	str	r2, [r0, #0]
 800ab9e:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) bme280->dig_P4) << 35);
 800aba0:	2594      	movs	r5, #148	; 0x94
 800aba2:	197b      	adds	r3, r7, r5
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2230      	movs	r2, #48	; 0x30
 800aba8:	5e9b      	ldrsh	r3, [r3, r2]
 800abaa:	643b      	str	r3, [r7, #64]	; 0x40
 800abac:	17db      	asrs	r3, r3, #31
 800abae:	647b      	str	r3, [r7, #68]	; 0x44
 800abb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb2:	00db      	lsls	r3, r3, #3
 800abb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abb6:	2300      	movs	r3, #0
 800abb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abba:	000c      	movs	r4, r1
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abc6:	1812      	adds	r2, r2, r0
 800abc8:	414b      	adcs	r3, r1
 800abca:	1939      	adds	r1, r7, r4
 800abcc:	600a      	str	r2, [r1, #0]
 800abce:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 800abd0:	0034      	movs	r4, r6
 800abd2:	193b      	adds	r3, r7, r4
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	1939      	adds	r1, r7, r4
 800abda:	6808      	ldr	r0, [r1, #0]
 800abdc:	6849      	ldr	r1, [r1, #4]
 800abde:	f7f5 fc73 	bl	80004c8 <__aeabi_lmul>
 800abe2:	0002      	movs	r2, r0
 800abe4:	000b      	movs	r3, r1
 800abe6:	0010      	movs	r0, r2
 800abe8:	0019      	movs	r1, r3
 800abea:	197b      	adds	r3, r7, r5
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	222e      	movs	r2, #46	; 0x2e
 800abf0:	5e9b      	ldrsh	r3, [r3, r2]
 800abf2:	633b      	str	r3, [r7, #48]	; 0x30
 800abf4:	17db      	asrs	r3, r3, #31
 800abf6:	637b      	str	r3, [r7, #52]	; 0x34
 800abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	f7f5 fc64 	bl	80004c8 <__aeabi_lmul>
 800ac00:	0002      	movs	r2, r0
 800ac02:	000b      	movs	r3, r1
 800ac04:	0619      	lsls	r1, r3, #24
 800ac06:	468c      	mov	ip, r1
 800ac08:	0a10      	lsrs	r0, r2, #8
 800ac0a:	2688      	movs	r6, #136	; 0x88
 800ac0c:	19b9      	adds	r1, r7, r6
 800ac0e:	6008      	str	r0, [r1, #0]
 800ac10:	19b8      	adds	r0, r7, r6
 800ac12:	6800      	ldr	r0, [r0, #0]
 800ac14:	4661      	mov	r1, ip
 800ac16:	4308      	orrs	r0, r1
 800ac18:	19b9      	adds	r1, r7, r6
 800ac1a:	6008      	str	r0, [r1, #0]
 800ac1c:	121b      	asrs	r3, r3, #8
 800ac1e:	228c      	movs	r2, #140	; 0x8c
 800ac20:	18ba      	adds	r2, r7, r2
 800ac22:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) bme280->dig_P2) << 12);
 800ac24:	197b      	adds	r3, r7, r5
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	222c      	movs	r2, #44	; 0x2c
 800ac2a:	5e9b      	ldrsh	r3, [r3, r2]
 800ac2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac2e:	17db      	asrs	r3, r3, #31
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac32:	193b      	adds	r3, r7, r4
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac3c:	f7f5 fc44 	bl	80004c8 <__aeabi_lmul>
 800ac40:	0002      	movs	r2, r0
 800ac42:	000b      	movs	r3, r1
 800ac44:	0d11      	lsrs	r1, r2, #20
 800ac46:	468c      	mov	ip, r1
 800ac48:	0318      	lsls	r0, r3, #12
 800ac4a:	2184      	movs	r1, #132	; 0x84
 800ac4c:	1879      	adds	r1, r7, r1
 800ac4e:	6008      	str	r0, [r1, #0]
 800ac50:	2084      	movs	r0, #132	; 0x84
 800ac52:	1839      	adds	r1, r7, r0
 800ac54:	6808      	ldr	r0, [r1, #0]
 800ac56:	4661      	mov	r1, ip
 800ac58:	4308      	orrs	r0, r1
 800ac5a:	2184      	movs	r1, #132	; 0x84
 800ac5c:	1879      	adds	r1, r7, r1
 800ac5e:	6008      	str	r0, [r1, #0]
 800ac60:	0313      	lsls	r3, r2, #12
 800ac62:	2180      	movs	r1, #128	; 0x80
 800ac64:	187a      	adds	r2, r7, r1
 800ac66:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 800ac68:	19bb      	adds	r3, r7, r6
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	1879      	adds	r1, r7, r1
 800ac70:	6808      	ldr	r0, [r1, #0]
 800ac72:	6849      	ldr	r1, [r1, #4]
 800ac74:	1812      	adds	r2, r2, r0
 800ac76:	414b      	adcs	r3, r1
 800ac78:	1939      	adds	r1, r7, r4
 800ac7a:	600a      	str	r2, [r1, #0]
 800ac7c:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) bme280->dig_P1) >> 33;
 800ac7e:	193b      	adds	r3, r7, r4
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	6859      	ldr	r1, [r3, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	2380      	movs	r3, #128	; 0x80
 800ac88:	021b      	lsls	r3, r3, #8
 800ac8a:	1880      	adds	r0, r0, r2
 800ac8c:	4159      	adcs	r1, r3
 800ac8e:	197b      	adds	r3, r7, r5
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac94:	623b      	str	r3, [r7, #32]
 800ac96:	2300      	movs	r3, #0
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9a:	6a3a      	ldr	r2, [r7, #32]
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	f7f5 fc13 	bl	80004c8 <__aeabi_lmul>
 800aca2:	0002      	movs	r2, r0
 800aca4:	000b      	movs	r3, r1
 800aca6:	1059      	asrs	r1, r3, #1
 800aca8:	1938      	adds	r0, r7, r4
 800acaa:	6001      	str	r1, [r0, #0]
 800acac:	17db      	asrs	r3, r3, #31
 800acae:	21ac      	movs	r1, #172	; 0xac
 800acb0:	187a      	adds	r2, r7, r1
 800acb2:	6013      	str	r3, [r2, #0]
	if (var1 == 0) {
 800acb4:	193b      	adds	r3, r7, r4
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	187b      	adds	r3, r7, r1
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	431a      	orrs	r2, r3
 800acbe:	d101      	bne.n	800acc4 <_BME280_compensate_P_int64+0x1d4>
		return 0; // avoid exception caused by division by zero
 800acc0:	2300      	movs	r3, #0
 800acc2:	e0bc      	b.n	800ae3e <_BME280_compensate_P_int64+0x34e>
	}
	p = 1048576 - adc_P;
 800acc4:	2390      	movs	r3, #144	; 0x90
 800acc6:	18fb      	adds	r3, r7, r3
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	2380      	movs	r3, #128	; 0x80
 800accc:	035b      	lsls	r3, r3, #13
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	2498      	movs	r4, #152	; 0x98
 800acd2:	193a      	adds	r2, r7, r4
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	17db      	asrs	r3, r3, #31
 800acd8:	259c      	movs	r5, #156	; 0x9c
 800acda:	197a      	adds	r2, r7, r5
 800acdc:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 800acde:	193b      	adds	r3, r7, r4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	105b      	asrs	r3, r3, #1
 800ace4:	61fb      	str	r3, [r7, #28]
 800ace6:	193b      	adds	r3, r7, r4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	07db      	lsls	r3, r3, #31
 800acec:	61bb      	str	r3, [r7, #24]
 800acee:	20a0      	movs	r0, #160	; 0xa0
 800acf0:	183a      	adds	r2, r7, r0
 800acf2:	6853      	ldr	r3, [r2, #4]
 800acf4:	6812      	ldr	r2, [r2, #0]
 800acf6:	69b8      	ldr	r0, [r7, #24]
 800acf8:	69f9      	ldr	r1, [r7, #28]
 800acfa:	1a80      	subs	r0, r0, r2
 800acfc:	4199      	sbcs	r1, r3
 800acfe:	4a53      	ldr	r2, [pc, #332]	; (800ae4c <_BME280_compensate_P_int64+0x35c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	f7f5 fbe1 	bl	80004c8 <__aeabi_lmul>
 800ad06:	0002      	movs	r2, r0
 800ad08:	000b      	movs	r3, r1
 800ad0a:	0010      	movs	r0, r2
 800ad0c:	0019      	movs	r1, r3
 800ad0e:	23a8      	movs	r3, #168	; 0xa8
 800ad10:	18fa      	adds	r2, r7, r3
 800ad12:	6853      	ldr	r3, [r2, #4]
 800ad14:	6812      	ldr	r2, [r2, #0]
 800ad16:	f7f5 fbb3 	bl	8000480 <__aeabi_ldivmod>
 800ad1a:	0002      	movs	r2, r0
 800ad1c:	000b      	movs	r3, r1
 800ad1e:	1939      	adds	r1, r7, r4
 800ad20:	600a      	str	r2, [r1, #0]
 800ad22:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) bme280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800ad24:	2694      	movs	r6, #148	; 0x94
 800ad26:	19ba      	adds	r2, r7, r6
 800ad28:	6813      	ldr	r3, [r2, #0]
 800ad2a:	223a      	movs	r2, #58	; 0x3a
 800ad2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ad2e:	613b      	str	r3, [r7, #16]
 800ad30:	17db      	asrs	r3, r3, #31
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	197a      	adds	r2, r7, r5
 800ad36:	6813      	ldr	r3, [r2, #0]
 800ad38:	04da      	lsls	r2, r3, #19
 800ad3a:	1939      	adds	r1, r7, r4
 800ad3c:	680b      	ldr	r3, [r1, #0]
 800ad3e:	0b5b      	lsrs	r3, r3, #13
 800ad40:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad44:	4313      	orrs	r3, r2
 800ad46:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad48:	197a      	adds	r2, r7, r5
 800ad4a:	6813      	ldr	r3, [r2, #0]
 800ad4c:	135b      	asrs	r3, r3, #13
 800ad4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad54:	6938      	ldr	r0, [r7, #16]
 800ad56:	6979      	ldr	r1, [r7, #20]
 800ad58:	f7f5 fbb6 	bl	80004c8 <__aeabi_lmul>
 800ad5c:	0002      	movs	r2, r0
 800ad5e:	000b      	movs	r3, r1
 800ad60:	0010      	movs	r0, r2
 800ad62:	0019      	movs	r1, r3
 800ad64:	197a      	adds	r2, r7, r5
 800ad66:	6813      	ldr	r3, [r2, #0]
 800ad68:	04da      	lsls	r2, r3, #19
 800ad6a:	193b      	adds	r3, r7, r4
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	0b5b      	lsrs	r3, r3, #13
 800ad70:	673b      	str	r3, [r7, #112]	; 0x70
 800ad72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad74:	4313      	orrs	r3, r2
 800ad76:	673b      	str	r3, [r7, #112]	; 0x70
 800ad78:	197a      	adds	r2, r7, r5
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	135b      	asrs	r3, r3, #13
 800ad7e:	677b      	str	r3, [r7, #116]	; 0x74
 800ad80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ad82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad84:	f7f5 fba0 	bl	80004c8 <__aeabi_lmul>
 800ad88:	0002      	movs	r2, r0
 800ad8a:	000b      	movs	r3, r1
 800ad8c:	01d9      	lsls	r1, r3, #7
 800ad8e:	0e50      	lsrs	r0, r2, #25
 800ad90:	4301      	orrs	r1, r0
 800ad92:	25a8      	movs	r5, #168	; 0xa8
 800ad94:	1978      	adds	r0, r7, r5
 800ad96:	6001      	str	r1, [r0, #0]
 800ad98:	165b      	asrs	r3, r3, #25
 800ad9a:	22ac      	movs	r2, #172	; 0xac
 800ad9c:	18ba      	adds	r2, r7, r2
 800ad9e:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) bme280->dig_P8) * p) >> 19;
 800ada0:	19ba      	adds	r2, r7, r6
 800ada2:	6813      	ldr	r3, [r2, #0]
 800ada4:	2238      	movs	r2, #56	; 0x38
 800ada6:	5e9b      	ldrsh	r3, [r3, r2]
 800ada8:	60bb      	str	r3, [r7, #8]
 800adaa:	17db      	asrs	r3, r3, #31
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	193a      	adds	r2, r7, r4
 800adb0:	6853      	ldr	r3, [r2, #4]
 800adb2:	6812      	ldr	r2, [r2, #0]
 800adb4:	68b8      	ldr	r0, [r7, #8]
 800adb6:	68f9      	ldr	r1, [r7, #12]
 800adb8:	f7f5 fb86 	bl	80004c8 <__aeabi_lmul>
 800adbc:	0002      	movs	r2, r0
 800adbe:	000b      	movs	r3, r1
 800adc0:	0359      	lsls	r1, r3, #13
 800adc2:	0cd0      	lsrs	r0, r2, #19
 800adc4:	4301      	orrs	r1, r0
 800adc6:	20a0      	movs	r0, #160	; 0xa0
 800adc8:	1838      	adds	r0, r7, r0
 800adca:	6001      	str	r1, [r0, #0]
 800adcc:	14db      	asrs	r3, r3, #19
 800adce:	22a4      	movs	r2, #164	; 0xa4
 800add0:	18ba      	adds	r2, r7, r2
 800add2:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t) bme280->dig_P7) << 4);
 800add4:	193a      	adds	r2, r7, r4
 800add6:	6810      	ldr	r0, [r2, #0]
 800add8:	6851      	ldr	r1, [r2, #4]
 800adda:	197a      	adds	r2, r7, r5
 800addc:	6853      	ldr	r3, [r2, #4]
 800adde:	6812      	ldr	r2, [r2, #0]
 800ade0:	1880      	adds	r0, r0, r2
 800ade2:	4159      	adcs	r1, r3
 800ade4:	23a0      	movs	r3, #160	; 0xa0
 800ade6:	18fb      	adds	r3, r7, r3
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	1812      	adds	r2, r2, r0
 800adee:	414b      	adcs	r3, r1
 800adf0:	0619      	lsls	r1, r3, #24
 800adf2:	0a10      	lsrs	r0, r2, #8
 800adf4:	66b8      	str	r0, [r7, #104]	; 0x68
 800adf6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800adf8:	4308      	orrs	r0, r1
 800adfa:	66b8      	str	r0, [r7, #104]	; 0x68
 800adfc:	121b      	asrs	r3, r3, #8
 800adfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae00:	19bb      	adds	r3, r7, r6
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2236      	movs	r2, #54	; 0x36
 800ae06:	5e9b      	ldrsh	r3, [r3, r2]
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	17db      	asrs	r3, r3, #31
 800ae0c:	607b      	str	r3, [r7, #4]
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	000b      	movs	r3, r1
 800ae14:	0f1b      	lsrs	r3, r3, #28
 800ae16:	0010      	movs	r0, r2
 800ae18:	0100      	lsls	r0, r0, #4
 800ae1a:	6678      	str	r0, [r7, #100]	; 0x64
 800ae1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ae1e:	4318      	orrs	r0, r3
 800ae20:	6678      	str	r0, [r7, #100]	; 0x64
 800ae22:	000b      	movs	r3, r1
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	663b      	str	r3, [r7, #96]	; 0x60
 800ae28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ae2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ae30:	1812      	adds	r2, r2, r0
 800ae32:	414b      	adcs	r3, r1
 800ae34:	1939      	adds	r1, r7, r4
 800ae36:	600a      	str	r2, [r1, #0]
 800ae38:	604b      	str	r3, [r1, #4]
	return (uint32_t) p;
 800ae3a:	193b      	adds	r3, r7, r4
 800ae3c:	681b      	ldr	r3, [r3, #0]
}
 800ae3e:	0018      	movs	r0, r3
 800ae40:	46bd      	mov	sp, r7
 800ae42:	b02d      	add	sp, #180	; 0xb4
 800ae44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae46:	46c0      	nop			; (mov r8, r8)
 800ae48:	fffe0c00 	.word	0xfffe0c00
 800ae4c:	00000c35 	.word	0x00000c35

0800ae50 <_BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H) {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;
	v_x1_u32r = (bme280->t_fine - ((int32_t) 76800));
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae5e:	4a2d      	ldr	r2, [pc, #180]	; (800af14 <_BME280_compensate_H_int32+0xc4>)
 800ae60:	4694      	mov	ip, r2
 800ae62:	4463      	add	r3, ip
 800ae64:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	039a      	lsls	r2, r3, #14
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2142      	movs	r1, #66	; 0x42
 800ae6e:	5e5b      	ldrsh	r3, [r3, r1]
 800ae70:	051b      	lsls	r3, r3, #20
 800ae72:	1ad2      	subs	r2, r2, r3
			- (((int32_t) bme280->dig_H5) * v_x1_u32r)) + ((int32_t) 16384))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2144      	movs	r1, #68	; 0x44
 800ae78:	5e5b      	ldrsh	r3, [r3, r1]
 800ae7a:	0019      	movs	r1, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	434b      	muls	r3, r1
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	2280      	movs	r2, #128	; 0x80
 800ae84:	01d2      	lsls	r2, r2, #7
 800ae86:	4694      	mov	ip, r2
 800ae88:	4463      	add	r3, ip
			>> 15)
 800ae8a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * ((int32_t) bme280->dig_H6)) >> 10)
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	2146      	movs	r1, #70	; 0x46
 800ae90:	5c52      	ldrb	r2, [r2, r1]
 800ae92:	0011      	movs	r1, r2
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	434a      	muls	r2, r1
 800ae98:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	2040      	movs	r0, #64	; 0x40
 800ae9e:	5c09      	ldrb	r1, [r1, r0]
 800aea0:	0008      	movs	r0, r1
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	4341      	muls	r1, r0
 800aea6:	12c9      	asrs	r1, r1, #11
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 800aea8:	2080      	movs	r0, #128	; 0x80
 800aeaa:	0200      	lsls	r0, r0, #8
 800aeac:	4684      	mov	ip, r0
 800aeae:	4461      	add	r1, ip
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 800aeb0:	434a      	muls	r2, r1
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 800aeb2:	1292      	asrs	r2, r2, #10
 800aeb4:	2180      	movs	r1, #128	; 0x80
 800aeb6:	0389      	lsls	r1, r1, #14
 800aeb8:	468c      	mov	ip, r1
 800aeba:	4462      	add	r2, ip
					* ((int32_t) bme280->dig_H2) + 8192) >> 14));
 800aebc:	6879      	ldr	r1, [r7, #4]
 800aebe:	203e      	movs	r0, #62	; 0x3e
 800aec0:	5e09      	ldrsh	r1, [r1, r0]
 800aec2:	434a      	muls	r2, r1
 800aec4:	2180      	movs	r1, #128	; 0x80
 800aec6:	0189      	lsls	r1, r1, #6
 800aec8:	468c      	mov	ip, r1
 800aeca:	4462      	add	r2, ip
 800aecc:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 800aece:	4353      	muls	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	13db      	asrs	r3, r3, #15
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	13d2      	asrs	r2, r2, #15
 800aeda:	4353      	muls	r3, r2
 800aedc:	11db      	asrs	r3, r3, #7
					* ((int32_t) bme280->dig_H1)) >> 4));
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	213c      	movs	r1, #60	; 0x3c
 800aee2:	5c52      	ldrb	r2, [r2, r1]
 800aee4:	4353      	muls	r3, r2
 800aee6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da00      	bge.n	800aef6 <_BME280_compensate_H_int32+0xa6>
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	22c8      	movs	r2, #200	; 0xc8
 800aefc:	0552      	lsls	r2, r2, #21
 800aefe:	4293      	cmp	r3, r2
 800af00:	dd01      	ble.n	800af06 <_BME280_compensate_H_int32+0xb6>
 800af02:	23c8      	movs	r3, #200	; 0xc8
 800af04:	055b      	lsls	r3, r3, #21
 800af06:	60fb      	str	r3, [r7, #12]
	return (uint32_t) (v_x1_u32r >> 12);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	131b      	asrs	r3, r3, #12
}
 800af0c:	0018      	movs	r0, r3
 800af0e:	46bd      	mov	sp, r7
 800af10:	b004      	add	sp, #16
 800af12:	bd80      	pop	{r7, pc}
 800af14:	fffed400 	.word	0xfffed400

0800af18 <forecastInit>:
 *      Author: bartosz
 */

#include "bd_libs/forecast_bd.h"

void forecastInit(forecastTypeDef *forecast) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
//	memset(forecast->pressureDatabase, 1013, sizeof(forecast->pressureDatabase));

	for (uint8_t i = 0; i < 24; i++) {
 800af20:	230f      	movs	r3, #15
 800af22:	18fb      	adds	r3, r7, r3
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
 800af28:	e00b      	b.n	800af42 <forecastInit+0x2a>
		forecast->pressureDatabase[i] = 1013;
 800af2a:	200f      	movs	r0, #15
 800af2c:	183b      	adds	r3, r7, r0
 800af2e:	781a      	ldrb	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	0092      	lsls	r2, r2, #2
 800af34:	4908      	ldr	r1, [pc, #32]	; (800af58 <forecastInit+0x40>)
 800af36:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 24; i++) {
 800af38:	183b      	adds	r3, r7, r0
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	183b      	adds	r3, r7, r0
 800af3e:	3201      	adds	r2, #1
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	230f      	movs	r3, #15
 800af44:	18fb      	adds	r3, r7, r3
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b17      	cmp	r3, #23
 800af4a:	d9ee      	bls.n	800af2a <forecastInit+0x12>
	}

}
 800af4c:	46c0      	nop			; (mov r8, r8)
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	46bd      	mov	sp, r7
 800af52:	b004      	add	sp, #16
 800af54:	bd80      	pop	{r7, pc}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	000003f5 	.word	0x000003f5

0800af5c <forecastAppendActual>:

/*
 * brief: add pressure measurement, refresh tables od pressures
 */
void forecastAppendActual(forecastTypeDef *forecast, bme280TypeDef *bme280,
		RTCChronoTypeDef *chrono) {
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
	forecast->pressureDatabase[chrono->actual.hour] = bme280->pressureValue
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	78db      	ldrb	r3, [r3, #3]
 800af70:	b25b      	sxtb	r3, r3
 800af72:	001c      	movs	r4, r3
			/ 100;
 800af74:	2164      	movs	r1, #100	; 0x64
 800af76:	0010      	movs	r0, r2
 800af78:	f7f5 f8ce 	bl	8000118 <__udivsi3>
 800af7c:	0003      	movs	r3, r0
 800af7e:	0019      	movs	r1, r3
	forecast->pressureDatabase[chrono->actual.hour] = bme280->pressureValue
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	00a2      	lsls	r2, r4, #2
 800af84:	50d1      	str	r1, [r2, r3]
//		forecast->pressureDatabase[i] = 1000+i;
//	}

	//enf of debug

	for (uint8_t i = 0; i < 24; i++) {
 800af86:	2317      	movs	r3, #23
 800af88:	18fb      	adds	r3, r7, r3
 800af8a:	2200      	movs	r2, #0
 800af8c:	701a      	strb	r2, [r3, #0]
 800af8e:	e032      	b.n	800aff6 <forecastAppendActual+0x9a>
		if (chrono->actual.hour >= i) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	78db      	ldrb	r3, [r3, #3]
 800af94:	b25b      	sxtb	r3, r3
 800af96:	001a      	movs	r2, r3
 800af98:	2117      	movs	r1, #23
 800af9a:	187b      	adds	r3, r7, r1
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	db11      	blt.n	800afc6 <forecastAppendActual+0x6a>
			forecast->pastPressureReadings[i] =
					forecast->pressureDatabase[chrono->actual.hour - i];
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	78db      	ldrb	r3, [r3, #3]
 800afa6:	b25b      	sxtb	r3, r3
 800afa8:	001a      	movs	r2, r3
 800afaa:	0008      	movs	r0, r1
 800afac:	187b      	adds	r3, r7, r1
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	1ad1      	subs	r1, r2, r3
			forecast->pastPressureReadings[i] =
 800afb2:	183b      	adds	r3, r7, r0
 800afb4:	781a      	ldrb	r2, [r3, #0]
					forecast->pressureDatabase[chrono->actual.hour - i];
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	0089      	lsls	r1, r1, #2
 800afba:	58c9      	ldr	r1, [r1, r3]
			forecast->pastPressureReadings[i] =
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3218      	adds	r2, #24
 800afc0:	0092      	lsls	r2, r2, #2
 800afc2:	50d1      	str	r1, [r2, r3]
 800afc4:	e011      	b.n	800afea <forecastAppendActual+0x8e>
		} else {
			forecast->pastPressureReadings[i] = forecast->pressureDatabase[24-i+chrono->actual.hour];
 800afc6:	2017      	movs	r0, #23
 800afc8:	183b      	adds	r3, r7, r0
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2218      	movs	r2, #24
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	78d2      	ldrb	r2, [r2, #3]
 800afd4:	b252      	sxtb	r2, r2
 800afd6:	1899      	adds	r1, r3, r2
 800afd8:	183b      	adds	r3, r7, r0
 800afda:	781a      	ldrb	r2, [r3, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	0089      	lsls	r1, r1, #2
 800afe0:	58c9      	ldr	r1, [r1, r3]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3218      	adds	r2, #24
 800afe6:	0092      	lsls	r2, r2, #2
 800afe8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < 24; i++) {
 800afea:	2117      	movs	r1, #23
 800afec:	187b      	adds	r3, r7, r1
 800afee:	781a      	ldrb	r2, [r3, #0]
 800aff0:	187b      	adds	r3, r7, r1
 800aff2:	3201      	adds	r2, #1
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	2317      	movs	r3, #23
 800aff8:	18fb      	adds	r3, r7, r3
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b17      	cmp	r3, #23
 800affe:	d9c7      	bls.n	800af90 <forecastAppendActual+0x34>
		}
	}

}
 800b000:	46c0      	nop			; (mov r8, r8)
 800b002:	46c0      	nop			; (mov r8, r8)
 800b004:	46bd      	mov	sp, r7
 800b006:	b007      	add	sp, #28
 800b008:	bd90      	pop	{r4, r7, pc}

0800b00a <lis3mdlInit>:
 *
 * @param  I2C handler
 *
 * @retval None
 */
void lis3mdlInit(lis3mdlTypeDef *lis3mdl, I2C_HandleTypeDef *I2Chandler) {
 800b00a:	b5b0      	push	{r4, r5, r7, lr}
 800b00c:	b088      	sub	sp, #32
 800b00e:	af04      	add	r7, sp, #16
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
	uint8_t ctrl1 = LIS3MDL_CTRL1_REG_OM << 6 | LIS3MDL_CTRL1_REG_ODR << 4;
 800b014:	210f      	movs	r1, #15
 800b016:	187b      	adds	r3, r7, r1
 800b018:	2240      	movs	r2, #64	; 0x40
 800b01a:	701a      	strb	r2, [r3, #0]
	uint8_t ctrl2 = LIS3MDL_CTRL2_REG_FS << 6;
 800b01c:	240e      	movs	r4, #14
 800b01e:	193b      	adds	r3, r7, r4
 800b020:	2200      	movs	r2, #0
 800b022:	701a      	strb	r2, [r3, #0]
	uint8_t ctrl3 = LIS3MDL_CTRL3_REG_MODE_POWERDOWN;
 800b024:	250d      	movs	r5, #13
 800b026:	197b      	adds	r3, r7, r5
 800b028:	2202      	movs	r2, #2
 800b02a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG1, 1, &ctrl1, 1,
 800b02c:	6838      	ldr	r0, [r7, #0]
 800b02e:	2364      	movs	r3, #100	; 0x64
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	2301      	movs	r3, #1
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	187b      	adds	r3, r7, r1
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	2301      	movs	r3, #1
 800b03c:	2220      	movs	r2, #32
 800b03e:	2138      	movs	r1, #56	; 0x38
 800b040:	f7f9 fd6a 	bl	8004b18 <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG2, 1, &ctrl2, 1,
 800b044:	6838      	ldr	r0, [r7, #0]
 800b046:	2364      	movs	r3, #100	; 0x64
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	2301      	movs	r3, #1
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	193b      	adds	r3, r7, r4
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	2301      	movs	r3, #1
 800b054:	2221      	movs	r2, #33	; 0x21
 800b056:	2138      	movs	r1, #56	; 0x38
 800b058:	f7f9 fd5e 	bl	8004b18 <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1, &ctrl3, 1,
 800b05c:	6838      	ldr	r0, [r7, #0]
 800b05e:	2364      	movs	r3, #100	; 0x64
 800b060:	9302      	str	r3, [sp, #8]
 800b062:	2301      	movs	r3, #1
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	197b      	adds	r3, r7, r5
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	2301      	movs	r3, #1
 800b06c:	2222      	movs	r2, #34	; 0x22
 800b06e:	2138      	movs	r1, #56	; 0x38
 800b070:	f7f9 fd52 	bl	8004b18 <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	lis3mdl->I2Chandler = I2Chandler;
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	23a1      	movs	r3, #161	; 0xa1
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	50d1      	str	r1, [r2, r3]
}
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	46bd      	mov	sp, r7
 800b082:	b004      	add	sp, #16
 800b084:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b088 <lis3mdlRead>:
 *
 * @param  LIS3MDL handler
 *
 * @retval None
 */
void lis3mdlRead(lis3mdlTypeDef *lis3mdl) {
 800b088:	b5b0      	push	{r4, r5, r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	6078      	str	r0, [r7, #4]

	uint8_t ctrl3 = LIS3MDL_CTRL3_REG_MODE_SINGLE; //set single
 800b090:	250f      	movs	r5, #15
 800b092:	197b      	adds	r3, r7, r5
 800b094:	2201      	movs	r2, #1
 800b096:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1,
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	23a1      	movs	r3, #161	; 0xa1
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	58d0      	ldr	r0, [r2, r3]
 800b0a0:	2364      	movs	r3, #100	; 0x64
 800b0a2:	9302      	str	r3, [sp, #8]
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	197b      	adds	r3, r7, r5
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	2222      	movs	r2, #34	; 0x22
 800b0b0:	2138      	movs	r1, #56	; 0x38
 800b0b2:	f7f9 fd31 	bl	8004b18 <HAL_I2C_Mem_Write>
			&ctrl3, 1, LIS3MDL_I2C_TIMEOUT); //turn on
	HAL_Delay(10);
 800b0b6:	200a      	movs	r0, #10
 800b0b8:	f7f8 fa24 	bl	8003504 <HAL_Delay>
	uint8_t readings[6];

	HAL_I2C_Mem_Read(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1,
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	23a1      	movs	r3, #161	; 0xa1
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	58d0      	ldr	r0, [r2, r3]
 800b0c4:	2364      	movs	r3, #100	; 0x64
 800b0c6:	9302      	str	r3, [sp, #8]
 800b0c8:	2306      	movs	r3, #6
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	2408      	movs	r4, #8
 800b0ce:	193b      	adds	r3, r7, r4
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	2229      	movs	r2, #41	; 0x29
 800b0d6:	2138      	movs	r1, #56	; 0x38
 800b0d8:	f7f9 fe4c 	bl	8004d74 <HAL_I2C_Mem_Read>
			readings, 6, LIS3MDL_I2C_TIMEOUT); //read

	ctrl3 = LIS3MDL_CTRL3_REG_MODE_POWERDOWN; //set power down
 800b0dc:	197b      	adds	r3, r7, r5
 800b0de:	2202      	movs	r2, #2
 800b0e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1,
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	23a1      	movs	r3, #161	; 0xa1
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	58d0      	ldr	r0, [r2, r3]
 800b0ea:	2364      	movs	r3, #100	; 0x64
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	197b      	adds	r3, r7, r5
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	2222      	movs	r2, #34	; 0x22
 800b0fa:	2138      	movs	r1, #56	; 0x38
 800b0fc:	f7f9 fd0c 	bl	8004b18 <HAL_I2C_Mem_Write>
			&ctrl3, 1, LIS3MDL_I2C_TIMEOUT); //turn off

	lis3mdl->xValue = (uint16_t) readings[0] << 8 | readings[1];
 800b100:	0021      	movs	r1, r4
 800b102:	187b      	adds	r3, r7, r1
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	b21a      	sxth	r2, r3
 800b10a:	187b      	adds	r3, r7, r1
 800b10c:	785b      	ldrb	r3, [r3, #1]
 800b10e:	b21b      	sxth	r3, r3
 800b110:	4313      	orrs	r3, r2
 800b112:	b21a      	sxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	801a      	strh	r2, [r3, #0]
	lis3mdl->yValue = (uint16_t) readings[2] << 8 | readings[3];
 800b118:	187b      	adds	r3, r7, r1
 800b11a:	789b      	ldrb	r3, [r3, #2]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	b21a      	sxth	r2, r3
 800b120:	187b      	adds	r3, r7, r1
 800b122:	78db      	ldrb	r3, [r3, #3]
 800b124:	b21b      	sxth	r3, r3
 800b126:	4313      	orrs	r3, r2
 800b128:	b21a      	sxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	805a      	strh	r2, [r3, #2]
	lis3mdl->zValue = (uint16_t) readings[4] << 8 | readings[5];
 800b12e:	187b      	adds	r3, r7, r1
 800b130:	791b      	ldrb	r3, [r3, #4]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	b21a      	sxth	r2, r3
 800b136:	187b      	adds	r3, r7, r1
 800b138:	795b      	ldrb	r3, [r3, #5]
 800b13a:	b21b      	sxth	r3, r3
 800b13c:	4313      	orrs	r3, r2
 800b13e:	b21a      	sxth	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	809a      	strh	r2, [r3, #4]

	//search for max and min values in conatainer
	lis3mdl->xMax = findMax(lis3mdl->xValueContainter,
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	330e      	adds	r3, #14
 800b148:	2164      	movs	r1, #100	; 0x64
 800b14a:	0018      	movs	r0, r3
 800b14c:	f000 f946 	bl	800b3dc <findMax>
 800b150:	0003      	movs	r3, r0
 800b152:	0019      	movs	r1, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a7d      	ldr	r2, [pc, #500]	; (800b34c <lis3mdlRead+0x2c4>)
 800b158:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->yMax = findMax(lis3mdl->yValueContainter,
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	33d6      	adds	r3, #214	; 0xd6
 800b15e:	2164      	movs	r1, #100	; 0x64
 800b160:	0018      	movs	r0, r3
 800b162:	f000 f93b 	bl	800b3dc <findMax>
 800b166:	0003      	movs	r3, r0
 800b168:	0019      	movs	r1, r3
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	239a      	movs	r3, #154	; 0x9a
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->zMax = findMax(lis3mdl->zValueContainter,
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	339f      	adds	r3, #159	; 0x9f
 800b176:	33ff      	adds	r3, #255	; 0xff
 800b178:	2164      	movs	r1, #100	; 0x64
 800b17a:	0018      	movs	r0, r3
 800b17c:	f000 f92e 	bl	800b3dc <findMax>
 800b180:	0003      	movs	r3, r0
 800b182:	0019      	movs	r1, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a72      	ldr	r2, [pc, #456]	; (800b350 <lis3mdlRead+0x2c8>)
 800b188:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);

	lis3mdl->xMin = findMin(lis3mdl->xValueContainter,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	330e      	adds	r3, #14
 800b18e:	2164      	movs	r1, #100	; 0x64
 800b190:	0018      	movs	r0, r3
 800b192:	f000 f957 	bl	800b444 <findMin>
 800b196:	0003      	movs	r3, r0
 800b198:	0019      	movs	r1, r3
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	239b      	movs	r3, #155	; 0x9b
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->yMin = findMin(lis3mdl->yValueContainter,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	33d6      	adds	r3, #214	; 0xd6
 800b1a6:	2164      	movs	r1, #100	; 0x64
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f000 f94b 	bl	800b444 <findMin>
 800b1ae:	0003      	movs	r3, r0
 800b1b0:	0019      	movs	r1, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a67      	ldr	r2, [pc, #412]	; (800b354 <lis3mdlRead+0x2cc>)
 800b1b6:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->zMin = findMin(lis3mdl->zValueContainter,
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	339f      	adds	r3, #159	; 0x9f
 800b1bc:	33ff      	adds	r3, #255	; 0xff
 800b1be:	2164      	movs	r1, #100	; 0x64
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f000 f93f 	bl	800b444 <findMin>
 800b1c6:	0003      	movs	r3, r0
 800b1c8:	0019      	movs	r1, r3
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	239c      	movs	r3, #156	; 0x9c
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);

	//count mid values
	lis3mdl->xMid = (lis3mdl->xMax + lis3mdl->xMin) / 2;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a5d      	ldr	r2, [pc, #372]	; (800b34c <lis3mdlRead+0x2c4>)
 800b1d6:	5e9b      	ldrsh	r3, [r3, r2]
 800b1d8:	0019      	movs	r1, r3
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	239b      	movs	r3, #155	; 0x9b
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	5ed3      	ldrsh	r3, [r2, r3]
 800b1e2:	18cb      	adds	r3, r1, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da00      	bge.n	800b1ea <lis3mdlRead+0x162>
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	105b      	asrs	r3, r3, #1
 800b1ec:	b219      	sxth	r1, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a59      	ldr	r2, [pc, #356]	; (800b358 <lis3mdlRead+0x2d0>)
 800b1f2:	5299      	strh	r1, [r3, r2]
	lis3mdl->yMid = (lis3mdl->yMax + lis3mdl->yMin) / 2;
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	239a      	movs	r3, #154	; 0x9a
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	5ed3      	ldrsh	r3, [r2, r3]
 800b1fc:	0019      	movs	r1, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a54      	ldr	r2, [pc, #336]	; (800b354 <lis3mdlRead+0x2cc>)
 800b202:	5e9b      	ldrsh	r3, [r3, r2]
 800b204:	18cb      	adds	r3, r1, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	da00      	bge.n	800b20c <lis3mdlRead+0x184>
 800b20a:	3301      	adds	r3, #1
 800b20c:	105b      	asrs	r3, r3, #1
 800b20e:	b219      	sxth	r1, r3
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	239d      	movs	r3, #157	; 0x9d
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	52d1      	strh	r1, [r2, r3]
	lis3mdl->zMid = (lis3mdl->zMax + lis3mdl->zMin) / 2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a4d      	ldr	r2, [pc, #308]	; (800b350 <lis3mdlRead+0x2c8>)
 800b21c:	5e9b      	ldrsh	r3, [r3, r2]
 800b21e:	0019      	movs	r1, r3
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	239c      	movs	r3, #156	; 0x9c
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	5ed3      	ldrsh	r3, [r2, r3]
 800b228:	18cb      	adds	r3, r1, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	da00      	bge.n	800b230 <lis3mdlRead+0x1a8>
 800b22e:	3301      	adds	r3, #1
 800b230:	105b      	asrs	r3, r3, #1
 800b232:	b219      	sxth	r1, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a49      	ldr	r2, [pc, #292]	; (800b35c <lis3mdlRead+0x2d4>)
 800b238:	5299      	strh	r1, [r3, r2]

	//correct measurement with calibration data
	lis3mdl->xCalibrated = lis3mdl->xValue - lis3mdl->xMid;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	5e9b      	ldrsh	r3, [r3, r2]
 800b240:	b29a      	uxth	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4944      	ldr	r1, [pc, #272]	; (800b358 <lis3mdlRead+0x2d0>)
 800b246:	5e5b      	ldrsh	r3, [r3, r1]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	b21a      	sxth	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	80da      	strh	r2, [r3, #6]
	lis3mdl->yCalibrated = lis3mdl->yValue - lis3mdl->yMid;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	5e9b      	ldrsh	r3, [r3, r2]
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	239d      	movs	r3, #157	; 0x9d
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	5ecb      	ldrsh	r3, [r1, r3]
 800b264:	b29b      	uxth	r3, r3
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	b29b      	uxth	r3, r3
 800b26a:	b21a      	sxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	811a      	strh	r2, [r3, #8]
	lis3mdl->zCalibrated = lis3mdl->zValue - lis3mdl->zMid;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2204      	movs	r2, #4
 800b274:	5e9b      	ldrsh	r3, [r3, r2]
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4938      	ldr	r1, [pc, #224]	; (800b35c <lis3mdlRead+0x2d4>)
 800b27c:	5e5b      	ldrsh	r3, [r3, r1]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	b29b      	uxth	r3, r3
 800b284:	b21a      	sxth	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	815a      	strh	r2, [r3, #10]

	lis3mdl->compassAngleXY = atan2((double) lis3mdl->yCalibrated,
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2208      	movs	r2, #8
 800b28e:	5e9b      	ldrsh	r3, [r3, r2]
 800b290:	0018      	movs	r0, r3
 800b292:	f7f7 fd83 	bl	8002d9c <__aeabi_i2d>
 800b296:	0004      	movs	r4, r0
 800b298:	000d      	movs	r5, r1
			(double) lis3mdl->xCalibrated);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2206      	movs	r2, #6
 800b29e:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleXY = atan2((double) lis3mdl->yCalibrated,
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	f7f7 fd7b 	bl	8002d9c <__aeabi_i2d>
 800b2a6:	0002      	movs	r2, r0
 800b2a8:	000b      	movs	r3, r1
 800b2aa:	0020      	movs	r0, r4
 800b2ac:	0029      	movs	r1, r5
 800b2ae:	f004 fd41 	bl	800fd34 <atan2>
 800b2b2:	0002      	movs	r2, r0
 800b2b4:	000b      	movs	r3, r1
 800b2b6:	0010      	movs	r0, r2
 800b2b8:	0019      	movs	r1, r3
 800b2ba:	f7f7 fe0d 	bl	8002ed8 <__aeabi_d2f>
 800b2be:	1c01      	adds	r1, r0, #0
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	239e      	movs	r3, #158	; 0x9e
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	50d1      	str	r1, [r2, r3]
	lis3mdl->compassAngleXZ = atan2((double) lis3mdl->zCalibrated,
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	220a      	movs	r2, #10
 800b2cc:	5e9b      	ldrsh	r3, [r3, r2]
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f7f7 fd64 	bl	8002d9c <__aeabi_i2d>
 800b2d4:	0004      	movs	r4, r0
 800b2d6:	000d      	movs	r5, r1
			(double) lis3mdl->xCalibrated);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2206      	movs	r2, #6
 800b2dc:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleXZ = atan2((double) lis3mdl->zCalibrated,
 800b2de:	0018      	movs	r0, r3
 800b2e0:	f7f7 fd5c 	bl	8002d9c <__aeabi_i2d>
 800b2e4:	0002      	movs	r2, r0
 800b2e6:	000b      	movs	r3, r1
 800b2e8:	0020      	movs	r0, r4
 800b2ea:	0029      	movs	r1, r5
 800b2ec:	f004 fd22 	bl	800fd34 <atan2>
 800b2f0:	0002      	movs	r2, r0
 800b2f2:	000b      	movs	r3, r1
 800b2f4:	0010      	movs	r0, r2
 800b2f6:	0019      	movs	r1, r3
 800b2f8:	f7f7 fdee 	bl	8002ed8 <__aeabi_d2f>
 800b2fc:	1c01      	adds	r1, r0, #0
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	239f      	movs	r3, #159	; 0x9f
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	50d1      	str	r1, [r2, r3]
	lis3mdl->compassAngleYZ = atan2((double) lis3mdl->zCalibrated,
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	220a      	movs	r2, #10
 800b30a:	5e9b      	ldrsh	r3, [r3, r2]
 800b30c:	0018      	movs	r0, r3
 800b30e:	f7f7 fd45 	bl	8002d9c <__aeabi_i2d>
 800b312:	0004      	movs	r4, r0
 800b314:	000d      	movs	r5, r1
			(double) lis3mdl->yCalibrated);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2208      	movs	r2, #8
 800b31a:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleYZ = atan2((double) lis3mdl->zCalibrated,
 800b31c:	0018      	movs	r0, r3
 800b31e:	f7f7 fd3d 	bl	8002d9c <__aeabi_i2d>
 800b322:	0002      	movs	r2, r0
 800b324:	000b      	movs	r3, r1
 800b326:	0020      	movs	r0, r4
 800b328:	0029      	movs	r1, r5
 800b32a:	f004 fd03 	bl	800fd34 <atan2>
 800b32e:	0002      	movs	r2, r0
 800b330:	000b      	movs	r3, r1
 800b332:	0010      	movs	r0, r2
 800b334:	0019      	movs	r1, r3
 800b336:	f7f7 fdcf 	bl	8002ed8 <__aeabi_d2f>
 800b33a:	1c01      	adds	r1, r0, #0
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	23a0      	movs	r3, #160	; 0xa0
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	50d1      	str	r1, [r2, r3]

}
 800b344:	46c0      	nop			; (mov r8, r8)
 800b346:	46bd      	mov	sp, r7
 800b348:	b004      	add	sp, #16
 800b34a:	bdb0      	pop	{r4, r5, r7, pc}
 800b34c:	00000266 	.word	0x00000266
 800b350:	0000026a 	.word	0x0000026a
 800b354:	0000026e 	.word	0x0000026e
 800b358:	00000272 	.word	0x00000272
 800b35c:	00000276 	.word	0x00000276

0800b360 <lis3mdlGetCalibrationSample>:
 *
 * @param  LIS3MDL handler
 *
 * @retval None
 */
void lis3mdlGetCalibrationSample(lis3mdlTypeDef *lis3mdl) {
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]

	//store actual values into calibration containter
	lis3mdl->xValueContainter[lis3mdl->measurementCounter] = lis3mdl->xValue;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	899b      	ldrh	r3, [r3, #12]
 800b36c:	0018      	movs	r0, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2100      	movs	r1, #0
 800b372:	5e59      	ldrsh	r1, [r3, r1]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	1d03      	adds	r3, r0, #4
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	18d3      	adds	r3, r2, r3
 800b37c:	3306      	adds	r3, #6
 800b37e:	1c0a      	adds	r2, r1, #0
 800b380:	801a      	strh	r2, [r3, #0]
	lis3mdl->yValueContainter[lis3mdl->measurementCounter] = lis3mdl->yValue;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	899b      	ldrh	r3, [r3, #12]
 800b386:	0018      	movs	r0, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2102      	movs	r1, #2
 800b38c:	5e59      	ldrsh	r1, [r3, r1]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	0003      	movs	r3, r0
 800b392:	3368      	adds	r3, #104	; 0x68
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	18d3      	adds	r3, r2, r3
 800b398:	3306      	adds	r3, #6
 800b39a:	1c0a      	adds	r2, r1, #0
 800b39c:	801a      	strh	r2, [r3, #0]
	lis3mdl->zValueContainter[lis3mdl->measurementCounter] = lis3mdl->zValue;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	899b      	ldrh	r3, [r3, #12]
 800b3a2:	0018      	movs	r0, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2104      	movs	r1, #4
 800b3a8:	5e59      	ldrsh	r1, [r3, r1]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	0003      	movs	r3, r0
 800b3ae:	33cc      	adds	r3, #204	; 0xcc
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	18d3      	adds	r3, r2, r3
 800b3b4:	3306      	adds	r3, #6
 800b3b6:	1c0a      	adds	r2, r1, #0
 800b3b8:	801a      	strh	r2, [r3, #0]

	//increment counter of actually readed value
	lis3mdl->measurementCounter++;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	899b      	ldrh	r3, [r3, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	819a      	strh	r2, [r3, #12]
	if (lis3mdl->measurementCounter > (LIS3MDL_CONTAINER_SIZE - 1))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	899b      	ldrh	r3, [r3, #12]
 800b3ca:	2b63      	cmp	r3, #99	; 0x63
 800b3cc:	d902      	bls.n	800b3d4 <lis3mdlGetCalibrationSample+0x74>
		lis3mdl->measurementCounter = 0;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	819a      	strh	r2, [r3, #12]
}
 800b3d4:	46c0      	nop			; (mov r8, r8)
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b002      	add	sp, #8
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	000a      	movs	r2, r1
 800b3e6:	1cbb      	adds	r3, r7, #2
 800b3e8:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 800b3ea:	230e      	movs	r3, #14
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	4a14      	ldr	r2, [pc, #80]	; (800b440 <findMax+0x64>)
 800b3f0:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
 800b3f6:	e015      	b.n	800b424 <findMax+0x48>
		if (data[i] > max)
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	18d3      	adds	r3, r2, r3
 800b400:	2200      	movs	r2, #0
 800b402:	5e9b      	ldrsh	r3, [r3, r2]
 800b404:	210e      	movs	r1, #14
 800b406:	187a      	adds	r2, r7, r1
 800b408:	2000      	movs	r0, #0
 800b40a:	5e12      	ldrsh	r2, [r2, r0]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	da06      	bge.n	800b41e <findMax+0x42>
			max = data[i];
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	18d2      	adds	r2, r2, r3
 800b418:	187b      	adds	r3, r7, r1
 800b41a:	8812      	ldrh	r2, [r2, #0]
 800b41c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	3301      	adds	r3, #1
 800b422:	60bb      	str	r3, [r7, #8]
 800b424:	1cbb      	adds	r3, r7, #2
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d3e4      	bcc.n	800b3f8 <findMax+0x1c>
	}

	return max;
 800b42e:	230e      	movs	r3, #14
 800b430:	18fb      	adds	r3, r7, r3
 800b432:	2200      	movs	r2, #0
 800b434:	5e9b      	ldrsh	r3, [r3, r2]

}
 800b436:	0018      	movs	r0, r3
 800b438:	46bd      	mov	sp, r7
 800b43a:	b004      	add	sp, #16
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	46c0      	nop			; (mov r8, r8)
 800b440:	ffff8000 	.word	0xffff8000

0800b444 <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	000a      	movs	r2, r1
 800b44e:	1cbb      	adds	r3, r7, #2
 800b450:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 800b452:	230e      	movs	r3, #14
 800b454:	18fb      	adds	r3, r7, r3
 800b456:	4a14      	ldr	r2, [pc, #80]	; (800b4a8 <findMin+0x64>)
 800b458:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b45a:	2300      	movs	r3, #0
 800b45c:	60bb      	str	r3, [r7, #8]
 800b45e:	e015      	b.n	800b48c <findMin+0x48>
		if (data[i] < min)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	18d3      	adds	r3, r2, r3
 800b468:	2200      	movs	r2, #0
 800b46a:	5e9b      	ldrsh	r3, [r3, r2]
 800b46c:	210e      	movs	r1, #14
 800b46e:	187a      	adds	r2, r7, r1
 800b470:	2000      	movs	r0, #0
 800b472:	5e12      	ldrsh	r2, [r2, r0]
 800b474:	429a      	cmp	r2, r3
 800b476:	dd06      	ble.n	800b486 <findMin+0x42>
			min = data[i];
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	18d2      	adds	r2, r2, r3
 800b480:	187b      	adds	r3, r7, r1
 800b482:	8812      	ldrh	r2, [r2, #0]
 800b484:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	3301      	adds	r3, #1
 800b48a:	60bb      	str	r3, [r7, #8]
 800b48c:	1cbb      	adds	r3, r7, #2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	429a      	cmp	r2, r3
 800b494:	d3e4      	bcc.n	800b460 <findMin+0x1c>
	}

	return min;
 800b496:	230e      	movs	r3, #14
 800b498:	18fb      	adds	r3, r7, r3
 800b49a:	2200      	movs	r2, #0
 800b49c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b49e:	0018      	movs	r0, r3
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	b004      	add	sp, #16
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	00007fff 	.word	0x00007fff

0800b4ac <rtcInit>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcInit(RTCChronoTypeDef *chrono) {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	HAL_RTC_Init(&hrtc);
 800b4b4:	4b10      	ldr	r3, [pc, #64]	; (800b4f8 <rtcInit+0x4c>)
 800b4b6:	0018      	movs	r0, r3
 800b4b8:	f7fa ff62 	bl	8006380 <HAL_RTC_Init>
	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2224      	movs	r2, #36	; 0x24
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	5499      	strb	r1, [r3, r2]

	chrono->chrono.year = 0;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	761a      	strb	r2, [r3, #24]
	chrono->chrono.month = 0;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	765a      	strb	r2, [r3, #25]
	chrono->chrono.day = 0;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	769a      	strb	r2, [r3, #26]
	chrono->chrono.hour = 0;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	76da      	strb	r2, [r3, #27]
	chrono->chrono.minute = 0;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hundredth = 0;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	779a      	strb	r2, [r3, #30]

}
 800b4ee:	46c0      	nop			; (mov r8, r8)
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	b002      	add	sp, #8
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	46c0      	nop			; (mov r8, r8)
 800b4f8:	200006c8 	.word	0x200006c8

0800b4fc <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800b4fc:	b5b0      	push	{r4, r5, r7, lr}
 800b4fe:	b090      	sub	sp, #64	; 0x40
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800b504:	49ee      	ldr	r1, [pc, #952]	; (800b8c0 <rtcGetTime+0x3c4>)
 800b506:	4bef      	ldr	r3, [pc, #956]	; (800b8c4 <rtcGetTime+0x3c8>)
 800b508:	2200      	movs	r2, #0
 800b50a:	0018      	movs	r0, r3
 800b50c:	f7fb f876 	bl	80065fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800b510:	49ed      	ldr	r1, [pc, #948]	; (800b8c8 <rtcGetTime+0x3cc>)
 800b512:	4bec      	ldr	r3, [pc, #944]	; (800b8c4 <rtcGetTime+0x3c8>)
 800b514:	2200      	movs	r2, #0
 800b516:	0018      	movs	r0, r3
 800b518:	f7fb f95e 	bl	80067d8 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800b51c:	4be8      	ldr	r3, [pc, #928]	; (800b8c0 <rtcGetTime+0x3c4>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	b25a      	sxtb	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 800b526:	4be6      	ldr	r3, [pc, #920]	; (800b8c0 <rtcGetTime+0x3c4>)
 800b528:	785b      	ldrb	r3, [r3, #1]
 800b52a:	b25a      	sxtb	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800b530:	4be3      	ldr	r3, [pc, #908]	; (800b8c0 <rtcGetTime+0x3c4>)
 800b532:	789b      	ldrb	r3, [r3, #2]
 800b534:	b25a      	sxtb	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800b53a:	4be1      	ldr	r3, [pc, #900]	; (800b8c0 <rtcGetTime+0x3c4>)
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	0013      	movs	r3, r2
 800b540:	065b      	lsls	r3, r3, #25
 800b542:	1a9b      	subs	r3, r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	189b      	adds	r3, r3, r2
 800b548:	00db      	lsls	r3, r3, #3
 800b54a:	1a9b      	subs	r3, r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4adf      	ldr	r2, [pc, #892]	; (800b8cc <rtcGetTime+0x3d0>)
 800b550:	4694      	mov	ip, r2
 800b552:	4463      	add	r3, ip
 800b554:	21ff      	movs	r1, #255	; 0xff
 800b556:	0018      	movs	r0, r3
 800b558:	f7f4 fdde 	bl	8000118 <__udivsi3>
 800b55c:	0003      	movs	r3, r0
 800b55e:	b25a      	sxtb	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800b564:	4bd8      	ldr	r3, [pc, #864]	; (800b8c8 <rtcGetTime+0x3cc>)
 800b566:	789b      	ldrb	r3, [r3, #2]
 800b568:	b25a      	sxtb	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800b56e:	4bd6      	ldr	r3, [pc, #856]	; (800b8c8 <rtcGetTime+0x3cc>)
 800b570:	785b      	ldrb	r3, [r3, #1]
 800b572:	b25a      	sxtb	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800b578:	4bd3      	ldr	r3, [pc, #844]	; (800b8c8 <rtcGetTime+0x3cc>)
 800b57a:	78db      	ldrb	r3, [r3, #3]
 800b57c:	b25a      	sxtb	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	b25b      	sxtb	r3, r3
 800b588:	3309      	adds	r3, #9
 800b58a:	210c      	movs	r1, #12
 800b58c:	0018      	movs	r0, r3
 800b58e:	f7f4 fe4d 	bl	800022c <__divsi3>
 800b592:	0003      	movs	r3, r0
 800b594:	0018      	movs	r0, r3
 800b596:	f7f5 fdbd 	bl	8001114 <__aeabi_i2f>
 800b59a:	1c03      	adds	r3, r0, #0
 800b59c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	001c      	movs	r4, r3
 800b5a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5a8:	f7f4 ffb6 	bl	8000518 <__aeabi_f2uiz>
 800b5ac:	0003      	movs	r3, r0
 800b5ae:	18e3      	adds	r3, r4, r3
 800b5b0:	4ac7      	ldr	r2, [pc, #796]	; (800b8d0 <rtcGetTime+0x3d4>)
 800b5b2:	4694      	mov	ip, r2
 800b5b4:	4463      	add	r3, ip
 800b5b6:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	785b      	ldrb	r3, [r3, #1]
 800b5bc:	b25b      	sxtb	r3, r3
 800b5be:	001a      	movs	r2, r3
 800b5c0:	0013      	movs	r3, r2
 800b5c2:	00db      	lsls	r3, r3, #3
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	00db      	lsls	r3, r3, #3
 800b5c8:	1a9b      	subs	r3, r3, r2
 800b5ca:	009a      	lsls	r2, r3, #2
 800b5cc:	189b      	adds	r3, r3, r2
 800b5ce:	2109      	movs	r1, #9
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f7f4 fe2b 	bl	800022c <__divsi3>
 800b5d6:	0003      	movs	r3, r0
 800b5d8:	0018      	movs	r0, r3
 800b5da:	f7f5 fd9b 	bl	8001114 <__aeabi_i2f>
 800b5de:	1c03      	adds	r3, r0, #0
 800b5e0:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 800b5e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5e4:	0013      	movs	r3, r2
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	1a9b      	subs	r3, r3, r2
 800b5ea:	089b      	lsrs	r3, r3, #2
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	f7f5 fdd7 	bl	80011a0 <__aeabi_ui2f>
 800b5f2:	1c03      	adds	r3, r0, #0
 800b5f4:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	22fa      	movs	r2, #250	; 0xfa
 800b5fe:	00d2      	lsls	r2, r2, #3
 800b600:	189a      	adds	r2, r3, r2
 800b602:	0013      	movs	r3, r2
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	189b      	adds	r3, r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	1a9b      	subs	r3, r3, r2
 800b60c:	011b      	lsls	r3, r3, #4
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	0018      	movs	r0, r3
 800b612:	f7f7 fbc3 	bl	8002d9c <__aeabi_i2d>
 800b616:	2280      	movs	r2, #128	; 0x80
 800b618:	0612      	lsls	r2, r2, #24
 800b61a:	4bae      	ldr	r3, [pc, #696]	; (800b8d4 <rtcGetTime+0x3d8>)
 800b61c:	f7f5 fdfc 	bl	8001218 <__aeabi_dadd>
 800b620:	0002      	movs	r2, r0
 800b622:	000b      	movs	r3, r1
 800b624:	0014      	movs	r4, r2
 800b626:	001d      	movs	r5, r3
 800b628:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b62a:	f7f4 ff75 	bl	8000518 <__aeabi_f2uiz>
 800b62e:	0003      	movs	r3, r0
 800b630:	0018      	movs	r0, r3
 800b632:	f7f7 fbe3 	bl	8002dfc <__aeabi_ui2d>
 800b636:	0002      	movs	r2, r0
 800b638:	000b      	movs	r3, r1
 800b63a:	0020      	movs	r0, r4
 800b63c:	0029      	movs	r1, r5
 800b63e:	f7f5 fdeb 	bl	8001218 <__aeabi_dadd>
 800b642:	0002      	movs	r2, r0
 800b644:	000b      	movs	r3, r1
 800b646:	0014      	movs	r4, r2
 800b648:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800b64a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b64c:	f7f4 ff64 	bl	8000518 <__aeabi_f2uiz>
 800b650:	0003      	movs	r3, r0
 800b652:	0018      	movs	r0, r3
 800b654:	f7f7 fbd2 	bl	8002dfc <__aeabi_ui2d>
 800b658:	0002      	movs	r2, r0
 800b65a:	000b      	movs	r3, r1
 800b65c:	0020      	movs	r0, r4
 800b65e:	0029      	movs	r1, r5
 800b660:	f7f6 ffb6 	bl	80025d0 <__aeabi_dsub>
 800b664:	0002      	movs	r2, r0
 800b666:	000b      	movs	r3, r1
 800b668:	0014      	movs	r4, r2
 800b66a:	001d      	movs	r5, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	789b      	ldrb	r3, [r3, #2]
 800b670:	b25b      	sxtb	r3, r3
 800b672:	0018      	movs	r0, r3
 800b674:	f7f7 fb92 	bl	8002d9c <__aeabi_i2d>
 800b678:	0002      	movs	r2, r0
 800b67a:	000b      	movs	r3, r1
 800b67c:	0020      	movs	r0, r4
 800b67e:	0029      	movs	r1, r5
 800b680:	f7f5 fdca 	bl	8001218 <__aeabi_dadd>
 800b684:	0002      	movs	r2, r0
 800b686:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800b688:	0010      	movs	r0, r2
 800b68a:	0019      	movs	r1, r3
 800b68c:	f7f7 fc24 	bl	8002ed8 <__aeabi_d2f>
 800b690:	1c03      	adds	r3, r0, #0
 800b692:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	3353      	adds	r3, #83	; 0x53
 800b698:	2164      	movs	r1, #100	; 0x64
 800b69a:	0018      	movs	r0, r3
 800b69c:	f7f4 fd3c 	bl	8000118 <__udivsi3>
 800b6a0:	0003      	movs	r3, r0
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f7f5 fd7c 	bl	80011a0 <__aeabi_ui2f>
 800b6a8:	1c03      	adds	r3, r0, #0
 800b6aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 800b6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ae:	f7f4 ff33 	bl	8000518 <__aeabi_f2uiz>
 800b6b2:	0003      	movs	r3, r0
 800b6b4:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	0013      	movs	r3, r2
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	189b      	adds	r3, r3, r2
 800b6c0:	089b      	lsrs	r3, r3, #2
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7f5 fd6c 	bl	80011a0 <__aeabi_ui2f>
 800b6c8:	1c03      	adds	r3, r0, #0
 800b6ca:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800b6cc:	6a38      	ldr	r0, [r7, #32]
 800b6ce:	f7f4 ff23 	bl	8000518 <__aeabi_f2uiz>
 800b6d2:	0003      	movs	r3, r0
 800b6d4:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 800b6d6:	4980      	ldr	r1, [pc, #512]	; (800b8d8 <rtcGetTime+0x3dc>)
 800b6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6da:	f7f4 ff71 	bl	80005c0 <__aeabi_fadd>
 800b6de:	1c03      	adds	r3, r0, #0
 800b6e0:	1c1c      	adds	r4, r3, #0
 800b6e2:	69f8      	ldr	r0, [r7, #28]
 800b6e4:	f7f5 fd5c 	bl	80011a0 <__aeabi_ui2f>
 800b6e8:	1c03      	adds	r3, r0, #0
 800b6ea:	1c19      	adds	r1, r3, #0
 800b6ec:	1c20      	adds	r0, r4, #0
 800b6ee:	f7f5 fb29 	bl	8000d44 <__aeabi_fsub>
 800b6f2:	1c03      	adds	r3, r0, #0
 800b6f4:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 800b6f6:	4b79      	ldr	r3, [pc, #484]	; (800b8dc <rtcGetTime+0x3e0>)
 800b6f8:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800b6fa:	6979      	ldr	r1, [r7, #20]
 800b6fc:	69b8      	ldr	r0, [r7, #24]
 800b6fe:	f7f5 f8fb 	bl	80008f8 <__aeabi_fdiv>
 800b702:	1c03      	adds	r3, r0, #0
 800b704:	1c18      	adds	r0, r3, #0
 800b706:	f7f7 fb9f 	bl	8002e48 <__aeabi_f2d>
 800b70a:	4a75      	ldr	r2, [pc, #468]	; (800b8e0 <rtcGetTime+0x3e4>)
 800b70c:	4b75      	ldr	r3, [pc, #468]	; (800b8e4 <rtcGetTime+0x3e8>)
 800b70e:	f7f6 ff5f 	bl	80025d0 <__aeabi_dsub>
 800b712:	0002      	movs	r2, r0
 800b714:	000b      	movs	r3, r1
 800b716:	0010      	movs	r0, r2
 800b718:	0019      	movs	r1, r3
 800b71a:	f7f7 fbdd 	bl	8002ed8 <__aeabi_d2f>
 800b71e:	1c03      	adds	r3, r0, #0
 800b720:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800b722:	6938      	ldr	r0, [r7, #16]
 800b724:	f7f4 fef8 	bl	8000518 <__aeabi_f2uiz>
 800b728:	0003      	movs	r3, r0
 800b72a:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7f5 fd37 	bl	80011a0 <__aeabi_ui2f>
 800b732:	1c03      	adds	r3, r0, #0
 800b734:	1c19      	adds	r1, r3, #0
 800b736:	6938      	ldr	r0, [r7, #16]
 800b738:	f7f5 fb04 	bl	8000d44 <__aeabi_fsub>
 800b73c:	1c03      	adds	r3, r0, #0
 800b73e:	496a      	ldr	r1, [pc, #424]	; (800b8e8 <rtcGetTime+0x3ec>)
 800b740:	1c18      	adds	r0, r3, #0
 800b742:	f7f5 f9e5 	bl	8000b10 <__aeabi_fmul>
 800b746:	1c03      	adds	r3, r0, #0
 800b748:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800b74a:	68b8      	ldr	r0, [r7, #8]
 800b74c:	f7f4 fee4 	bl	8000518 <__aeabi_f2uiz>
 800b750:	0002      	movs	r2, r0
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2224      	movs	r2, #36	; 0x24
 800b75a:	5c9b      	ldrb	r3, [r3, r2]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d114      	bne.n	800b78a <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2224      	movs	r2, #36	; 0x24
 800b78e:	5c9b      	ldrb	r3, [r3, r2]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d000      	beq.n	800b796 <rtcGetTime+0x29a>
 800b794:	e0ef      	b.n	800b976 <rtcGetTime+0x47a>

		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	799b      	ldrb	r3, [r3, #6]
 800b79a:	b25b      	sxtb	r3, r3
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7c9b      	ldrb	r3, [r3, #18]
 800b7a2:	b25b      	sxtb	r3, r3
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	b25a      	sxtb	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	779a      	strb	r2, [r3, #30]

		chrono->chrono.second = chrono->actual.second
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	795b      	ldrb	r3, [r3, #5]
 800b7b4:	b25b      	sxtb	r3, r3
 800b7b6:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	7c5b      	ldrb	r3, [r3, #17]
 800b7bc:	b25b      	sxtb	r3, r3
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	791b      	ldrb	r3, [r3, #4]
 800b7ce:	b25b      	sxtb	r3, r3
 800b7d0:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7c1b      	ldrb	r3, [r3, #16]
 800b7d6:	b25b      	sxtb	r3, r3
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	78db      	ldrb	r3, [r3, #3]
 800b7e8:	b25b      	sxtb	r3, r3
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	7bdb      	ldrb	r3, [r3, #15]
 800b7f0:	b25b      	sxtb	r3, r3
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	b25a      	sxtb	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	789b      	ldrb	r3, [r3, #2]
 800b802:	b25b      	sxtb	r3, r3
 800b804:	b2da      	uxtb	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	7b9b      	ldrb	r3, [r3, #14]
 800b80a:	b25b      	sxtb	r3, r3
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	b2db      	uxtb	r3, r3
 800b812:	b25a      	sxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	785b      	ldrb	r3, [r3, #1]
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	7b5b      	ldrb	r3, [r3, #13]
 800b824:	b25b      	sxtb	r3, r3
 800b826:	b2db      	uxtb	r3, r3
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	b25a      	sxtb	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	7f9b      	ldrb	r3, [r3, #30]
 800b836:	b25b      	sxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	da11      	bge.n	800b860 <rtcGetTime+0x364>
			chrono->chrono.second--;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7f5b      	ldrb	r3, [r3, #29]
 800b840:	b25b      	sxtb	r3, r3
 800b842:	b2db      	uxtb	r3, r3
 800b844:	3b01      	subs	r3, #1
 800b846:	b2db      	uxtb	r3, r3
 800b848:	b25a      	sxtb	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	7f9b      	ldrb	r3, [r3, #30]
 800b852:	b25b      	sxtb	r3, r3
 800b854:	b2db      	uxtb	r3, r3
 800b856:	3364      	adds	r3, #100	; 0x64
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	b25a      	sxtb	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	7f5b      	ldrb	r3, [r3, #29]
 800b864:	b25b      	sxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	da11      	bge.n	800b88e <rtcGetTime+0x392>
			chrono->chrono.minute--;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	7f1b      	ldrb	r3, [r3, #28]
 800b86e:	b25b      	sxtb	r3, r3
 800b870:	b2db      	uxtb	r3, r3
 800b872:	3b01      	subs	r3, #1
 800b874:	b2db      	uxtb	r3, r3
 800b876:	b25a      	sxtb	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	7f5b      	ldrb	r3, [r3, #29]
 800b880:	b25b      	sxtb	r3, r3
 800b882:	b2db      	uxtb	r3, r3
 800b884:	333c      	adds	r3, #60	; 0x3c
 800b886:	b2db      	uxtb	r3, r3
 800b888:	b25a      	sxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	7f1b      	ldrb	r3, [r3, #28]
 800b892:	b25b      	sxtb	r3, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	da29      	bge.n	800b8ec <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7edb      	ldrb	r3, [r3, #27]
 800b89c:	b25b      	sxtb	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	b25a      	sxtb	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	7f1b      	ldrb	r3, [r3, #28]
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	333c      	adds	r3, #60	; 0x3c
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	b25a      	sxtb	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	771a      	strb	r2, [r3, #28]
 800b8bc:	e016      	b.n	800b8ec <rtcGetTime+0x3f0>
 800b8be:	46c0      	nop			; (mov r8, r8)
 800b8c0:	200006b0 	.word	0x200006b0
 800b8c4:	200006c8 	.word	0x200006c8
 800b8c8:	200006ac 	.word	0x200006ac
 800b8cc:	0000639c 	.word	0x0000639c
 800b8d0:	00001a3c 	.word	0x00001a3c
 800b8d4:	413a62ff 	.word	0x413a62ff
 800b8d8:	42180000 	.word	0x42180000
 800b8dc:	41ec3ea6 	.word	0x41ec3ea6
 800b8e0:	67381d7e 	.word	0x67381d7e
 800b8e4:	3fd36944 	.word	0x3fd36944
 800b8e8:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	7edb      	ldrb	r3, [r3, #27]
 800b8f0:	b25b      	sxtb	r3, r3
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	da11      	bge.n	800b91a <rtcGetTime+0x41e>
			chrono->chrono.day--;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	7e9b      	ldrb	r3, [r3, #26]
 800b8fa:	b25b      	sxtb	r3, r3
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b2db      	uxtb	r3, r3
 800b902:	b25a      	sxtb	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	7edb      	ldrb	r3, [r3, #27]
 800b90c:	b25b      	sxtb	r3, r3
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	3318      	adds	r3, #24
 800b912:	b2db      	uxtb	r3, r3
 800b914:	b25a      	sxtb	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7e9b      	ldrb	r3, [r3, #26]
 800b91e:	b25b      	sxtb	r3, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	da11      	bge.n	800b948 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7e5b      	ldrb	r3, [r3, #25]
 800b928:	b25b      	sxtb	r3, r3
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	3b01      	subs	r3, #1
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	b25a      	sxtb	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	7e9b      	ldrb	r3, [r3, #26]
 800b93a:	b25b      	sxtb	r3, r3
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	331e      	adds	r3, #30
 800b940:	b2db      	uxtb	r3, r3
 800b942:	b25a      	sxtb	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	7e5b      	ldrb	r3, [r3, #25]
 800b94c:	b25b      	sxtb	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	da11      	bge.n	800b976 <rtcGetTime+0x47a>
			chrono->chrono.year--;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	7e1b      	ldrb	r3, [r3, #24]
 800b956:	b25b      	sxtb	r3, r3
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	3b01      	subs	r3, #1
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	b25a      	sxtb	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	7e5b      	ldrb	r3, [r3, #25]
 800b968:	b25b      	sxtb	r3, r3
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	330c      	adds	r3, #12
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	b25a      	sxtb	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	765a      	strb	r2, [r3, #25]
		}

	}

}
 800b976:	46c0      	nop			; (mov r8, r8)
 800b978:	46bd      	mov	sp, r7
 800b97a:	b010      	add	sp, #64	; 0x40
 800b97c:	bdb0      	pop	{r4, r5, r7, pc}
 800b97e:	46c0      	nop			; (mov r8, r8)

0800b980 <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	78db      	ldrb	r3, [r3, #3]
 800b98c:	b25b      	sxtb	r3, r3
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <rtcSetTime+0x70>)
 800b992:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	791b      	ldrb	r3, [r3, #4]
 800b998:	b25b      	sxtb	r3, r3
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	4b14      	ldr	r3, [pc, #80]	; (800b9f0 <rtcSetTime+0x70>)
 800b99e:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	795b      	ldrb	r3, [r3, #5]
 800b9a4:	b25b      	sxtb	r3, r3
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <rtcSetTime+0x70>)
 800b9aa:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	789b      	ldrb	r3, [r3, #2]
 800b9b0:	b25b      	sxtb	r3, r3
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <rtcSetTime+0x74>)
 800b9b6:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	785b      	ldrb	r3, [r3, #1]
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <rtcSetTime+0x74>)
 800b9c2:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	b25b      	sxtb	r3, r3
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <rtcSetTime+0x74>)
 800b9ce:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800b9d0:	4907      	ldr	r1, [pc, #28]	; (800b9f0 <rtcSetTime+0x70>)
 800b9d2:	4b09      	ldr	r3, [pc, #36]	; (800b9f8 <rtcSetTime+0x78>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	0018      	movs	r0, r3
 800b9d8:	f7fa fd68 	bl	80064ac <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800b9dc:	4905      	ldr	r1, [pc, #20]	; (800b9f4 <rtcSetTime+0x74>)
 800b9de:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <rtcSetTime+0x78>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	f7fa fe66 	bl	80066b4 <HAL_RTC_SetDate>

}
 800b9e8:	46c0      	nop			; (mov r8, r8)
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	b002      	add	sp, #8
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	200006b0 	.word	0x200006b0
 800b9f4:	200006ac 	.word	0x200006ac
 800b9f8:	200006c8 	.word	0x200006c8

0800b9fc <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800ba04:	4923      	ldr	r1, [pc, #140]	; (800ba94 <rtcStartChrono+0x98>)
 800ba06:	4b24      	ldr	r3, [pc, #144]	; (800ba98 <rtcStartChrono+0x9c>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f7fa fdf6 	bl	80065fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800ba10:	4922      	ldr	r1, [pc, #136]	; (800ba9c <rtcStartChrono+0xa0>)
 800ba12:	4b21      	ldr	r3, [pc, #132]	; (800ba98 <rtcStartChrono+0x9c>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	0018      	movs	r0, r3
 800ba18:	f7fa fede 	bl	80067d8 <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800ba1c:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <rtcStartChrono+0x98>)
 800ba1e:	789b      	ldrb	r3, [r3, #2]
 800ba20:	b25a      	sxtb	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 800ba26:	4b1b      	ldr	r3, [pc, #108]	; (800ba94 <rtcStartChrono+0x98>)
 800ba28:	785b      	ldrb	r3, [r3, #1]
 800ba2a:	b25a      	sxtb	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800ba30:	4b18      	ldr	r3, [pc, #96]	; (800ba94 <rtcStartChrono+0x98>)
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	0013      	movs	r3, r2
 800ba36:	065b      	lsls	r3, r3, #25
 800ba38:	1a9b      	subs	r3, r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	189b      	adds	r3, r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	1a9b      	subs	r3, r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4a16      	ldr	r2, [pc, #88]	; (800baa0 <rtcStartChrono+0xa4>)
 800ba46:	4694      	mov	ip, r2
 800ba48:	4463      	add	r3, ip
 800ba4a:	21ff      	movs	r1, #255	; 0xff
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f7f4 fb63 	bl	8000118 <__udivsi3>
 800ba52:	0003      	movs	r3, r0
 800ba54:	b25a      	sxtb	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <rtcStartChrono+0x98>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b25a      	sxtb	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 800ba64:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <rtcStartChrono+0xa0>)
 800ba66:	789b      	ldrb	r3, [r3, #2]
 800ba68:	b25a      	sxtb	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 800ba6e:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <rtcStartChrono+0xa0>)
 800ba70:	785b      	ldrb	r3, [r3, #1]
 800ba72:	b25a      	sxtb	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 800ba78:	4b08      	ldr	r3, [pc, #32]	; (800ba9c <rtcStartChrono+0xa0>)
 800ba7a:	78db      	ldrb	r3, [r3, #3]
 800ba7c:	b25a      	sxtb	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2224      	movs	r2, #36	; 0x24
 800ba86:	2101      	movs	r1, #1
 800ba88:	5499      	strb	r1, [r3, r2]
}
 800ba8a:	46c0      	nop			; (mov r8, r8)
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	b002      	add	sp, #8
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	46c0      	nop			; (mov r8, r8)
 800ba94:	200006b0 	.word	0x200006b0
 800ba98:	200006c8 	.word	0x200006c8
 800ba9c:	200006ac 	.word	0x200006ac
 800baa0:	0000639c 	.word	0x0000639c

0800baa4 <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800baac:	4952      	ldr	r1, [pc, #328]	; (800bbf8 <rtcStopChrono+0x154>)
 800baae:	4b53      	ldr	r3, [pc, #332]	; (800bbfc <rtcStopChrono+0x158>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	0018      	movs	r0, r3
 800bab4:	f7fa fda2 	bl	80065fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bab8:	4951      	ldr	r1, [pc, #324]	; (800bc00 <rtcStopChrono+0x15c>)
 800baba:	4b50      	ldr	r3, [pc, #320]	; (800bbfc <rtcStopChrono+0x158>)
 800babc:	2200      	movs	r2, #0
 800babe:	0018      	movs	r0, r3
 800bac0:	f7fa fe8a 	bl	80067d8 <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 800bac4:	4b4c      	ldr	r3, [pc, #304]	; (800bbf8 <rtcStopChrono+0x154>)
 800bac6:	785b      	ldrb	r3, [r3, #1]
 800bac8:	b25a      	sxtb	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800bace:	4b4a      	ldr	r3, [pc, #296]	; (800bbf8 <rtcStopChrono+0x154>)
 800bad0:	789b      	ldrb	r3, [r3, #2]
 800bad2:	b25a      	sxtb	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800bad8:	4b47      	ldr	r3, [pc, #284]	; (800bbf8 <rtcStopChrono+0x154>)
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	0013      	movs	r3, r2
 800bade:	065b      	lsls	r3, r3, #25
 800bae0:	1a9b      	subs	r3, r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	189b      	adds	r3, r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	1a9b      	subs	r3, r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4a45      	ldr	r2, [pc, #276]	; (800bc04 <rtcStopChrono+0x160>)
 800baee:	4694      	mov	ip, r2
 800baf0:	4463      	add	r3, ip
 800baf2:	21ff      	movs	r1, #255	; 0xff
 800baf4:	0018      	movs	r0, r3
 800baf6:	f7f4 fb0f 	bl	8000118 <__udivsi3>
 800bafa:	0003      	movs	r3, r0
 800bafc:	b25a      	sxtb	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 800bb02:	4b3d      	ldr	r3, [pc, #244]	; (800bbf8 <rtcStopChrono+0x154>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	b25a      	sxtb	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800bb0c:	4b3c      	ldr	r3, [pc, #240]	; (800bc00 <rtcStopChrono+0x15c>)
 800bb0e:	789b      	ldrb	r3, [r3, #2]
 800bb10:	b25a      	sxtb	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800bb16:	4b3a      	ldr	r3, [pc, #232]	; (800bc00 <rtcStopChrono+0x15c>)
 800bb18:	785b      	ldrb	r3, [r3, #1]
 800bb1a:	b25a      	sxtb	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800bb20:	4b37      	ldr	r3, [pc, #220]	; (800bc00 <rtcStopChrono+0x15c>)
 800bb22:	78db      	ldrb	r3, [r3, #3]
 800bb24:	b25a      	sxtb	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	799b      	ldrb	r3, [r3, #6]
 800bb2e:	b25b      	sxtb	r3, r3
 800bb30:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7c9b      	ldrb	r3, [r3, #18]
 800bb36:	b25b      	sxtb	r3, r3
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	795b      	ldrb	r3, [r3, #5]
 800bb48:	b25b      	sxtb	r3, r3
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7c5b      	ldrb	r3, [r3, #17]
 800bb50:	b25b      	sxtb	r3, r3
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	b25a      	sxtb	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	791b      	ldrb	r3, [r3, #4]
 800bb62:	b25b      	sxtb	r3, r3
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	7c1b      	ldrb	r3, [r3, #16]
 800bb6a:	b25b      	sxtb	r3, r3
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	b25a      	sxtb	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	78db      	ldrb	r3, [r3, #3]
 800bb7c:	b25b      	sxtb	r3, r3
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	7bdb      	ldrb	r3, [r3, #15]
 800bb84:	b25b      	sxtb	r3, r3
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	b25a      	sxtb	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	789b      	ldrb	r3, [r3, #2]
 800bb96:	b25b      	sxtb	r3, r3
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7b9b      	ldrb	r3, [r3, #14]
 800bb9e:	b25b      	sxtb	r3, r3
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	b25a      	sxtb	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	b25b      	sxtb	r3, r3
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7b5b      	ldrb	r3, [r3, #13]
 800bbb8:	b25b      	sxtb	r3, r3
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	b25a      	sxtb	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	b25b      	sxtb	r3, r3
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	7b1b      	ldrb	r3, [r3, #12]
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	b25a      	sxtb	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	f7ff fc8a 	bl	800b4fc <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2224      	movs	r2, #36	; 0x24
 800bbec:	2102      	movs	r1, #2
 800bbee:	5499      	strb	r1, [r3, r2]


}
 800bbf0:	46c0      	nop			; (mov r8, r8)
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	b002      	add	sp, #8
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	200006b0 	.word	0x200006b0
 800bbfc:	200006c8 	.word	0x200006c8
 800bc00:	200006ac 	.word	0x200006ac
 800bc04:	0000639c 	.word	0x0000639c

0800bc08 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2224      	movs	r2, #36	; 0x24
 800bc14:	2101      	movs	r1, #1
 800bc16:	5499      	strb	r1, [r3, r2]
}
 800bc18:	46c0      	nop			; (mov r8, r8)
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	b002      	add	sp, #8
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2224      	movs	r2, #36	; 0x24
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	5499      	strb	r1, [r3, r2]

}
 800bc60:	46c0      	nop			; (mov r8, r8)
 800bc62:	46bd      	mov	sp, r7
 800bc64:	b002      	add	sp, #8
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	0008      	movs	r0, r1
 800bc72:	0011      	movs	r1, r2
 800bc74:	1cfb      	adds	r3, r7, #3
 800bc76:	1c02      	adds	r2, r0, #0
 800bc78:	701a      	strb	r2, [r3, #0]
 800bc7a:	1cbb      	adds	r3, r7, #2
 800bc7c:	1c0a      	adds	r2, r1, #0
 800bc7e:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 800bc80:	1cbb      	adds	r3, r7, #2
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d000      	beq.n	800bc8a <rtcChangeValue+0x22>
 800bc88:	e08a      	b.n	800bda0 <rtcChangeValue+0x138>
		switch (element) {
 800bc8a:	1cfb      	adds	r3, r7, #3
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	2b05      	cmp	r3, #5
 800bc90:	d900      	bls.n	800bc94 <rtcChangeValue+0x2c>
 800bc92:	e080      	b.n	800bd96 <rtcChangeValue+0x12e>
 800bc94:	009a      	lsls	r2, r3, #2
 800bc96:	4b8c      	ldr	r3, [pc, #560]	; (800bec8 <rtcChangeValue+0x260>)
 800bc98:	18d3      	adds	r3, r2, r3
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	78db      	ldrb	r3, [r3, #3]
 800bca2:	b25b      	sxtb	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dd09      	ble.n	800bcbc <rtcChangeValue+0x54>
				chrono->actual.hour--;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	78db      	ldrb	r3, [r3, #3]
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	b25a      	sxtb	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800bcba:	e063      	b.n	800bd84 <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	78db      	ldrb	r3, [r3, #3]
 800bcc0:	b25b      	sxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d15e      	bne.n	800bd84 <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2217      	movs	r2, #23
 800bcca:	70da      	strb	r2, [r3, #3]
			break;
 800bccc:	e05a      	b.n	800bd84 <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	791b      	ldrb	r3, [r3, #4]
 800bcd2:	b25b      	sxtb	r3, r3
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd09      	ble.n	800bcec <rtcChangeValue+0x84>
				chrono->actual.minute--;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	791b      	ldrb	r3, [r3, #4]
 800bcdc:	b25b      	sxtb	r3, r3
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	3b01      	subs	r3, #1
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	b25a      	sxtb	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800bcea:	e04d      	b.n	800bd88 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	791b      	ldrb	r3, [r3, #4]
 800bcf0:	b25b      	sxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d148      	bne.n	800bd88 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	223b      	movs	r2, #59	; 0x3b
 800bcfa:	711a      	strb	r2, [r3, #4]
			break;
 800bcfc:	e044      	b.n	800bd88 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	715a      	strb	r2, [r3, #5]
			break;
 800bd04:	e047      	b.n	800bd96 <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	789b      	ldrb	r3, [r3, #2]
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	dd09      	ble.n	800bd24 <rtcChangeValue+0xbc>
				chrono->actual.day--;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	789b      	ldrb	r3, [r3, #2]
 800bd14:	b25b      	sxtb	r3, r3
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	b25a      	sxtb	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 800bd22:	e033      	b.n	800bd8c <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	789b      	ldrb	r3, [r3, #2]
 800bd28:	b25b      	sxtb	r3, r3
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d12e      	bne.n	800bd8c <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	221f      	movs	r2, #31
 800bd32:	709a      	strb	r2, [r3, #2]
			break;
 800bd34:	e02a      	b.n	800bd8c <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	785b      	ldrb	r3, [r3, #1]
 800bd3a:	b25b      	sxtb	r3, r3
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	dd09      	ble.n	800bd54 <rtcChangeValue+0xec>
				chrono->actual.month--;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	785b      	ldrb	r3, [r3, #1]
 800bd44:	b25b      	sxtb	r3, r3
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	b25a      	sxtb	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 800bd52:	e01d      	b.n	800bd90 <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	785b      	ldrb	r3, [r3, #1]
 800bd58:	b25b      	sxtb	r3, r3
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d118      	bne.n	800bd90 <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	220c      	movs	r2, #12
 800bd62:	705a      	strb	r2, [r3, #1]
			break;
 800bd64:	e014      	b.n	800bd90 <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	b25b      	sxtb	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	dd11      	ble.n	800bd94 <rtcChangeValue+0x12c>
				chrono->actual.year--;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	b25b      	sxtb	r3, r3
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	b25a      	sxtb	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	701a      	strb	r2, [r3, #0]
			break;
 800bd82:	e007      	b.n	800bd94 <rtcChangeValue+0x12c>
			break;
 800bd84:	46c0      	nop			; (mov r8, r8)
 800bd86:	e006      	b.n	800bd96 <rtcChangeValue+0x12e>
			break;
 800bd88:	46c0      	nop			; (mov r8, r8)
 800bd8a:	e004      	b.n	800bd96 <rtcChangeValue+0x12e>
			break;
 800bd8c:	46c0      	nop			; (mov r8, r8)
 800bd8e:	e002      	b.n	800bd96 <rtcChangeValue+0x12e>
			break;
 800bd90:	46c0      	nop			; (mov r8, r8)
 800bd92:	e000      	b.n	800bd96 <rtcChangeValue+0x12e>
			break;
 800bd94:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f7ff fdf1 	bl	800b980 <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 800bd9e:	e08e      	b.n	800bebe <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 800bda0:	1cbb      	adds	r3, r7, #2
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d000      	beq.n	800bdaa <rtcChangeValue+0x142>
 800bda8:	e089      	b.n	800bebe <rtcChangeValue+0x256>
		switch (element) {
 800bdaa:	1cfb      	adds	r3, r7, #3
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d900      	bls.n	800bdb4 <rtcChangeValue+0x14c>
 800bdb2:	e080      	b.n	800beb6 <rtcChangeValue+0x24e>
 800bdb4:	009a      	lsls	r2, r3, #2
 800bdb6:	4b45      	ldr	r3, [pc, #276]	; (800becc <rtcChangeValue+0x264>)
 800bdb8:	18d3      	adds	r3, r2, r3
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	78db      	ldrb	r3, [r3, #3]
 800bdc2:	b25b      	sxtb	r3, r3
 800bdc4:	2b16      	cmp	r3, #22
 800bdc6:	dc09      	bgt.n	800bddc <rtcChangeValue+0x174>
				chrono->actual.hour++;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	78db      	ldrb	r3, [r3, #3]
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	b25a      	sxtb	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	70da      	strb	r2, [r3, #3]
			break;
 800bdda:	e063      	b.n	800bea4 <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	78db      	ldrb	r3, [r3, #3]
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	2b16      	cmp	r3, #22
 800bde4:	dd5e      	ble.n	800bea4 <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	70da      	strb	r2, [r3, #3]
			break;
 800bdec:	e05a      	b.n	800bea4 <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	791b      	ldrb	r3, [r3, #4]
 800bdf2:	b25b      	sxtb	r3, r3
 800bdf4:	2b3a      	cmp	r3, #58	; 0x3a
 800bdf6:	dc09      	bgt.n	800be0c <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	791b      	ldrb	r3, [r3, #4]
 800bdfc:	b25b      	sxtb	r3, r3
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	3301      	adds	r3, #1
 800be02:	b2db      	uxtb	r3, r3
 800be04:	b25a      	sxtb	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	711a      	strb	r2, [r3, #4]
			break;
 800be0a:	e04d      	b.n	800bea8 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	791b      	ldrb	r3, [r3, #4]
 800be10:	b25b      	sxtb	r3, r3
 800be12:	2b3a      	cmp	r3, #58	; 0x3a
 800be14:	dd48      	ble.n	800bea8 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	711a      	strb	r2, [r3, #4]
			break;
 800be1c:	e044      	b.n	800bea8 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	715a      	strb	r2, [r3, #5]
			break;
 800be24:	e047      	b.n	800beb6 <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	789b      	ldrb	r3, [r3, #2]
 800be2a:	b25b      	sxtb	r3, r3
 800be2c:	2b1e      	cmp	r3, #30
 800be2e:	dc09      	bgt.n	800be44 <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	789b      	ldrb	r3, [r3, #2]
 800be34:	b25b      	sxtb	r3, r3
 800be36:	b2db      	uxtb	r3, r3
 800be38:	3301      	adds	r3, #1
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	b25a      	sxtb	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	709a      	strb	r2, [r3, #2]
			break;
 800be42:	e033      	b.n	800beac <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	789b      	ldrb	r3, [r3, #2]
 800be48:	b25b      	sxtb	r3, r3
 800be4a:	2b1f      	cmp	r3, #31
 800be4c:	d12e      	bne.n	800beac <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	709a      	strb	r2, [r3, #2]
			break;
 800be54:	e02a      	b.n	800beac <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	2b0b      	cmp	r3, #11
 800be5e:	dc09      	bgt.n	800be74 <rtcChangeValue+0x20c>
				chrono->actual.month++;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	b25b      	sxtb	r3, r3
 800be66:	b2db      	uxtb	r3, r3
 800be68:	3301      	adds	r3, #1
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	b25a      	sxtb	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	705a      	strb	r2, [r3, #1]
			break;
 800be72:	e01d      	b.n	800beb0 <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	785b      	ldrb	r3, [r3, #1]
 800be78:	b25b      	sxtb	r3, r3
 800be7a:	2b0c      	cmp	r3, #12
 800be7c:	d118      	bne.n	800beb0 <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	705a      	strb	r2, [r3, #1]
			break;
 800be84:	e014      	b.n	800beb0 <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	b25b      	sxtb	r3, r3
 800be8c:	2b62      	cmp	r3, #98	; 0x62
 800be8e:	dc11      	bgt.n	800beb4 <rtcChangeValue+0x24c>
				chrono->actual.year++;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	b25b      	sxtb	r3, r3
 800be96:	b2db      	uxtb	r3, r3
 800be98:	3301      	adds	r3, #1
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	b25a      	sxtb	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	701a      	strb	r2, [r3, #0]
			break;
 800bea2:	e007      	b.n	800beb4 <rtcChangeValue+0x24c>
			break;
 800bea4:	46c0      	nop			; (mov r8, r8)
 800bea6:	e006      	b.n	800beb6 <rtcChangeValue+0x24e>
			break;
 800bea8:	46c0      	nop			; (mov r8, r8)
 800beaa:	e004      	b.n	800beb6 <rtcChangeValue+0x24e>
			break;
 800beac:	46c0      	nop			; (mov r8, r8)
 800beae:	e002      	b.n	800beb6 <rtcChangeValue+0x24e>
			break;
 800beb0:	46c0      	nop			; (mov r8, r8)
 800beb2:	e000      	b.n	800beb6 <rtcChangeValue+0x24e>
			break;
 800beb4:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	0018      	movs	r0, r3
 800beba:	f7ff fd61 	bl	800b980 <rtcSetTime>
}
 800bebe:	46c0      	nop			; (mov r8, r8)
 800bec0:	46bd      	mov	sp, r7
 800bec2:	b002      	add	sp, #8
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	080157d8 	.word	0x080157d8
 800becc:	080157f0 	.word	0x080157f0

0800bed0 <batteryCheckInit>:
#include <chrono/battery.h>
#include <chrono/watch.h>

extern watchTypeDef watch;

void batteryCheckInit(void) {
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 800bed4:	4b03      	ldr	r3, [pc, #12]	; (800bee4 <batteryCheckInit+0x14>)
 800bed6:	0018      	movs	r0, r3
 800bed8:	f7f8 fa56 	bl	8004388 <HAL_ADCEx_Calibration_Start>

}
 800bedc:	46c0      	nop			; (mov r8, r8)
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	200005fc 	.word	0x200005fc

0800bee8 <batteryReadState>:

void batteryReadState(void){
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800beee:	4b10      	ldr	r3, [pc, #64]	; (800bf30 <batteryReadState+0x48>)
 800bef0:	0018      	movs	r0, r3
 800bef2:	f7f7 fe7b 	bl	8003bec <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 200) == HAL_OK){
 800bef6:	4b0e      	ldr	r3, [pc, #56]	; (800bf30 <batteryReadState+0x48>)
 800bef8:	21c8      	movs	r1, #200	; 0xc8
 800befa:	0018      	movs	r0, r3
 800befc:	f7f7 fec4 	bl	8003c88 <HAL_ADC_PollForConversion>
 800bf00:	1e03      	subs	r3, r0, #0
 800bf02:	d110      	bne.n	800bf26 <batteryReadState+0x3e>
		uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 800bf04:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <batteryReadState+0x48>)
 800bf06:	0018      	movs	r0, r3
 800bf08:	f7f7 ff52 	bl	8003db0 <HAL_ADC_GetValue>
 800bf0c:	0003      	movs	r3, r0
 800bf0e:	607b      	str	r3, [r7, #4]
		if(adcValue < LOW_BATTERY_LIMIT){
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a08      	ldr	r2, [pc, #32]	; (800bf34 <batteryReadState+0x4c>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d803      	bhi.n	800bf20 <batteryReadState+0x38>
			watch.flagLowBattery = 1;
 800bf18:	4b07      	ldr	r3, [pc, #28]	; (800bf38 <batteryReadState+0x50>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	711a      	strb	r2, [r3, #4]
		}else{
			watch.flagLowBattery = 0;
		}
	}

}
 800bf1e:	e002      	b.n	800bf26 <batteryReadState+0x3e>
			watch.flagLowBattery = 0;
 800bf20:	4b05      	ldr	r3, [pc, #20]	; (800bf38 <batteryReadState+0x50>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	711a      	strb	r2, [r3, #4]
}
 800bf26:	46c0      	nop			; (mov r8, r8)
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	b002      	add	sp, #8
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	46c0      	nop			; (mov r8, r8)
 800bf30:	200005fc 	.word	0x200005fc
 800bf34:	000008b5 	.word	0x000008b5
 800bf38:	2000050c 	.word	0x2000050c

0800bf3c <interfaceInit>:
 * brief: initialisation of watch interface
 * note: remember of set coordintaes, lenghts etc. outside
 * param: interface struct
 * retval: none
 */
void interfaceInit(interfaceTypeDef *interface) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]

//			display init

	printf("EPD_1in54_V2_test Demo\r\n");
 800bf44:	4b6c      	ldr	r3, [pc, #432]	; (800c0f8 <interfaceInit+0x1bc>)
 800bf46:	0018      	movs	r0, r3
 800bf48:	f002 ff86 	bl	800ee58 <puts>
	DEV_Module_Init();
 800bf4c:	f7fb fe54 	bl	8007bf8 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800bf50:	4b6a      	ldr	r3, [pc, #424]	; (800c0fc <interfaceInit+0x1c0>)
 800bf52:	0018      	movs	r0, r3
 800bf54:	f002 ff80 	bl	800ee58 <puts>
	EPD_1IN54_V2_Init();
 800bf58:	f7fb ff20 	bl	8007d9c <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800bf5c:	f7fb ff7c 	bl	8007e58 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800bf60:	23fa      	movs	r3, #250	; 0xfa
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	0018      	movs	r0, r3
 800bf66:	f7f7 facd 	bl	8003504 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	uint16_t Imagesize = (
 800bf6a:	210e      	movs	r1, #14
 800bf6c:	187b      	adds	r3, r7, r1
 800bf6e:	4a64      	ldr	r2, [pc, #400]	; (800c100 <interfaceInit+0x1c4>)
 800bf70:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((interface->framebuffer = (uint8_t*) malloc(Imagesize)) == NULL) {
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	0018      	movs	r0, r3
 800bf78:	f002 fe1e 	bl	800ebb8 <malloc>
 800bf7c:	0003      	movs	r3, r0
 800bf7e:	0019      	movs	r1, r3
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	2394      	movs	r3, #148	; 0x94
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	50d1      	str	r1, [r2, r3]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	2394      	movs	r3, #148	; 0x94
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	58d3      	ldr	r3, [r2, r3]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d103      	bne.n	800bf9c <interfaceInit+0x60>
		printf("Failed to apply for black memory...\r\n");
 800bf94:	4b5b      	ldr	r3, [pc, #364]	; (800c104 <interfaceInit+0x1c8>)
 800bf96:	0018      	movs	r0, r3
 800bf98:	f002 ff5e 	bl	800ee58 <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800bf9c:	4b5a      	ldr	r3, [pc, #360]	; (800c108 <interfaceInit+0x1cc>)
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	f002 ff5a 	bl	800ee58 <puts>
	Paint_NewImage(interface->framebuffer, EPD_1IN54_V2_WIDTH,
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	2394      	movs	r3, #148	; 0x94
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	58d0      	ldr	r0, [r2, r3]
	EPD_1IN54_V2_HEIGHT, 0, interface->colorForeground);
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	2393      	movs	r3, #147	; 0x93
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	5cd3      	ldrb	r3, [r2, r3]
	Paint_NewImage(interface->framebuffer, EPD_1IN54_V2_WIDTH,
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	22c8      	movs	r2, #200	; 0xc8
 800bfbc:	21c8      	movs	r1, #200	; 0xc8
 800bfbe:	f7fc f8d1 	bl	8008164 <Paint_NewImage>

	interfaceUpdateModeSwitch(interface, INTERFACE_UPDATE_MODE_FULL);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f000 f8f8 	bl	800c1bc <interfaceUpdateModeSwitch>

	interface->coordinatesMain[X] = 100;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2264      	movs	r2, #100	; 0x64
 800bfd0:	701a      	strb	r2, [r3, #0]
	interface->coordinatesMain[Y] = 100;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2264      	movs	r2, #100	; 0x64
 800bfd6:	705a      	strb	r2, [r3, #1]

	interface->coordinatesChronoMinutes[X] = 100;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2264      	movs	r2, #100	; 0x64
 800bfdc:	70da      	strb	r2, [r3, #3]
	interface->coordinatesChronoMinutes[Y] = 150;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2296      	movs	r2, #150	; 0x96
 800bfe2:	711a      	strb	r2, [r3, #4]

	interface->coordinatesChronoDecimals[X] = 100;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2264      	movs	r2, #100	; 0x64
 800bfe8:	719a      	strb	r2, [r3, #6]
	interface->coordinatesChronoDecimals[Y] = 50;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2232      	movs	r2, #50	; 0x32
 800bfee:	71da      	strb	r2, [r3, #7]

	interface->coordinatesTemperature[X] = 22;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2216      	movs	r2, #22
 800bff4:	725a      	strb	r2, [r3, #9]
	interface->coordinatesTemperature[Y] = 44;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	222c      	movs	r2, #44	; 0x2c
 800bffa:	729a      	strb	r2, [r3, #10]

	interface->coordinatesHumidity[X] = 130;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2282      	movs	r2, #130	; 0x82
 800c000:	731a      	strb	r2, [r3, #12]
	interface->coordinatesHumidity[Y] = 75;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	224b      	movs	r2, #75	; 0x4b
 800c006:	735a      	strb	r2, [r3, #13]

	interface->coordinatesPressure[X] = 100;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2264      	movs	r2, #100	; 0x64
 800c00c:	73da      	strb	r2, [r3, #15]
	interface->coordinatesPressure[Y] = 100;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2264      	movs	r2, #100	; 0x64
 800c012:	741a      	strb	r2, [r3, #16]

	interface->coordinatesCompass[X] = 55;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2237      	movs	r2, #55	; 0x37
 800c018:	749a      	strb	r2, [r3, #18]
	interface->coordinatesCompass[Y] = 100;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2264      	movs	r2, #100	; 0x64
 800c01e:	74da      	strb	r2, [r3, #19]

	interface->coordinatesDate[X] = 149;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2295      	movs	r2, #149	; 0x95
 800c024:	755a      	strb	r2, [r3, #21]
	interface->coordinatesDate[Y] = 93;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	225d      	movs	r2, #93	; 0x5d
 800c02a:	759a      	strb	r2, [r3, #22]

	interface->coordinatesBatteryState[X] = 32;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	761a      	strb	r2, [r3, #24]
	interface->coordinatesBatteryState[Y] = 28;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	221c      	movs	r2, #28
 800c036:	765a      	strb	r2, [r3, #25]

	interface->coordinatesMoonPhase[X] = 150;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2296      	movs	r2, #150	; 0x96
 800c03c:	76da      	strb	r2, [r3, #27]
	interface->coordinatesMoonPhase[Y] = 50;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2232      	movs	r2, #50	; 0x32
 800c042:	771a      	strb	r2, [r3, #28]

	interface->coordinatesForecast[X] = 155;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	229b      	movs	r2, #155	; 0x9b
 800c048:	779a      	strb	r2, [r3, #30]
	interface->coordinatesForecast[Y] = 145;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2291      	movs	r2, #145	; 0x91
 800c04e:	77da      	strb	r2, [r3, #31]

	interface->radiusMain = 97;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2221      	movs	r2, #33	; 0x21
 800c054:	2161      	movs	r1, #97	; 0x61
 800c056:	5499      	strb	r1, [r3, r2]
	interface->radiusSmall = 28;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2222      	movs	r2, #34	; 0x22
 800c05c:	211c      	movs	r1, #28
 800c05e:	5499      	strb	r1, [r3, r2]
	interface->radiusCompass = 25;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2223      	movs	r2, #35	; 0x23
 800c064:	2119      	movs	r1, #25
 800c066:	5499      	strb	r1, [r3, r2]
	interface->radiusMoonPhase = 10;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2224      	movs	r2, #36	; 0x24
 800c06c:	210a      	movs	r1, #10
 800c06e:	5499      	strb	r1, [r3, r2]

	interface->pointerLengthHours = 55;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2225      	movs	r2, #37	; 0x25
 800c074:	2137      	movs	r1, #55	; 0x37
 800c076:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthMinutes = 80;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2226      	movs	r2, #38	; 0x26
 800c07c:	2150      	movs	r1, #80	; 0x50
 800c07e:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthChronoSeconds = 80;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2227      	movs	r2, #39	; 0x27
 800c084:	2150      	movs	r1, #80	; 0x50
 800c086:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthChronoMinutes = 20;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2228      	movs	r2, #40	; 0x28
 800c08c:	2114      	movs	r1, #20
 800c08e:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthChronoDecimals = 20;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2229      	movs	r2, #41	; 0x29
 800c094:	2114      	movs	r1, #20
 800c096:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthBatteryState = 35;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	222a      	movs	r2, #42	; 0x2a
 800c09c:	2123      	movs	r1, #35	; 0x23
 800c09e:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthPressure = 100;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	222b      	movs	r2, #43	; 0x2b
 800c0a4:	2164      	movs	r1, #100	; 0x64
 800c0a6:	5499      	strb	r1, [r3, r2]
	interface->pointerLenghtCompass = 18;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	222c      	movs	r2, #44	; 0x2c
 800c0ac:	2112      	movs	r1, #18
 800c0ae:	5499      	strb	r1, [r3, r2]
	interface->pointerShiftPressure = 80;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2230      	movs	r2, #48	; 0x30
 800c0b4:	2150      	movs	r1, #80	; 0x50
 800c0b6:	5499      	strb	r1, [r3, r2]

	interface->indexLengthChronoDecimals = 4;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	222d      	movs	r2, #45	; 0x2d
 800c0bc:	2104      	movs	r1, #4
 800c0be:	5499      	strb	r1, [r3, r2]
	interface->indexLengthChronoMinutes = 2;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	222e      	movs	r2, #46	; 0x2e
 800c0c4:	2102      	movs	r1, #2
 800c0c6:	5499      	strb	r1, [r3, r2]
	interface->indexLengthMain = 10;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	222f      	movs	r2, #47	; 0x2f
 800c0cc:	210a      	movs	r1, #10
 800c0ce:	5499      	strb	r1, [r3, r2]

	interface->shadowShift = 2;
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	2392      	movs	r3, #146	; 0x92
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	2102      	movs	r1, #2
 800c0d8:	54d1      	strb	r1, [r2, r3]
	interface->colorBackground = INTERFACE_COLOR_BLACK;
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	2326      	movs	r3, #38	; 0x26
 800c0de:	33ff      	adds	r3, #255	; 0xff
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	54d1      	strb	r1, [r2, r3]
	interface->colorForeground = INTERFACE_COLOR_WHITE;
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	2393      	movs	r3, #147	; 0x93
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	21ff      	movs	r1, #255	; 0xff
 800c0ec:	54d1      	strb	r1, [r2, r3]
}
 800c0ee:	46c0      	nop			; (mov r8, r8)
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	b004      	add	sp, #16
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	46c0      	nop			; (mov r8, r8)
 800c0f8:	080118c8 	.word	0x080118c8
 800c0fc:	080118e0 	.word	0x080118e0
 800c100:	00001388 	.word	0x00001388
 800c104:	080118fc 	.word	0x080118fc
 800c108:	08011924 	.word	0x08011924

0800c10c <interfaceSettingsInit>:

void interfaceSettingsInit(interfaceSettingsTypeDef *settings) {
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	settings->coordinatesTemperature[X] = 70;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2246      	movs	r2, #70	; 0x46
 800c118:	761a      	strb	r2, [r3, #24]
	settings->coordinatesTemperature[Y] = 5;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2205      	movs	r2, #5
 800c11e:	765a      	strb	r2, [r3, #25]

	settings->coordinatesHumidity[X] = 40;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2228      	movs	r2, #40	; 0x28
 800c124:	769a      	strb	r2, [r3, #26]
	settings->coordinatesHumidity[Y] = 20;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2214      	movs	r2, #20
 800c12a:	76da      	strb	r2, [r3, #27]

	settings->coordinatesPressure[X] = 30;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	221e      	movs	r2, #30
 800c130:	771a      	strb	r2, [r3, #28]
	settings->coordinatesPressure[Y] = 35;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2223      	movs	r2, #35	; 0x23
 800c136:	775a      	strb	r2, [r3, #29]

	settings->coordinatesAltitude[X] = 20;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2214      	movs	r2, #20
 800c13c:	779a      	strb	r2, [r3, #30]
	settings->coordinatesAltitude[Y] = 50;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2232      	movs	r2, #50	; 0x32
 800c142:	77da      	strb	r2, [r3, #31]

	settings->coordinatesHours[X] = 10;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	220a      	movs	r2, #10
 800c148:	701a      	strb	r2, [r3, #0]
	settings->coordinatesHours[Y] = 80;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2250      	movs	r2, #80	; 0x50
 800c14e:	705a      	strb	r2, [r3, #1]

	settings->coordinatesMinutes[X] = 50;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2232      	movs	r2, #50	; 0x32
 800c154:	70da      	strb	r2, [r3, #3]
	settings->coordinatesMinutes[Y] = 80;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2250      	movs	r2, #80	; 0x50
 800c15a:	711a      	strb	r2, [r3, #4]

	settings->coordinatesSeconds[X] = 90;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	225a      	movs	r2, #90	; 0x5a
 800c160:	719a      	strb	r2, [r3, #6]
	settings->coordinatesSeconds[Y] = 80;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2250      	movs	r2, #80	; 0x50
 800c166:	71da      	strb	r2, [r3, #7]

	settings->coordinatesDays[X] = 10;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	220a      	movs	r2, #10
 800c16c:	725a      	strb	r2, [r3, #9]
	settings->coordinatesDays[Y] = 100;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2264      	movs	r2, #100	; 0x64
 800c172:	729a      	strb	r2, [r3, #10]

	settings->coordinatesMonths[X] = 50;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2232      	movs	r2, #50	; 0x32
 800c178:	731a      	strb	r2, [r3, #12]
	settings->coordinatesMonths[Y] = 100;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2264      	movs	r2, #100	; 0x64
 800c17e:	735a      	strb	r2, [r3, #13]

	settings->coordinatesYears[X] = 90;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	225a      	movs	r2, #90	; 0x5a
 800c184:	73da      	strb	r2, [r3, #15]
	settings->coordinatesYears[Y] = 100;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2264      	movs	r2, #100	; 0x64
 800c18a:	741a      	strb	r2, [r3, #16]

	settings->coordinatesPressureReference[X] = 20;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2214      	movs	r2, #20
 800c190:	749a      	strb	r2, [r3, #18]
	settings->coordinatesPressureReference[Y] = 125;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	227d      	movs	r2, #125	; 0x7d
 800c196:	74da      	strb	r2, [r3, #19]

	settings->coordinatesTemperatureCompensation[X] = 30;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	221e      	movs	r2, #30
 800c19c:	755a      	strb	r2, [r3, #21]
	settings->coordinatesTemperatureCompensation[Y] = 140;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	228c      	movs	r2, #140	; 0x8c
 800c1a2:	759a      	strb	r2, [r3, #22]

	settings->colorBackground = INTERFACE_COLOR_WHITE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	21ff      	movs	r1, #255	; 0xff
 800c1aa:	5499      	strb	r1, [r3, r2]
	settings->colorForeground = INTERFACE_COLOR_BLACK;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2221      	movs	r2, #33	; 0x21
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	5499      	strb	r1, [r3, r2]
}
 800c1b4:	46c0      	nop			; (mov r8, r8)
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	b002      	add	sp, #8
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <interfaceUpdateModeSwitch>:
 * brief: change update method
 * note: full or partial EPD refresh
 * param: interface struct
 * param: INTERFACE_UPDATE_MODE_FULL / INTERFACE_UPDATE_MODE_PARTIAL
 */
void interfaceUpdateModeSwitch(interfaceTypeDef *interface, uint8_t mode) {
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	000a      	movs	r2, r1
 800c1c6:	1cfb      	adds	r3, r7, #3
 800c1c8:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_MODE_FULL) {
 800c1ca:	1cfb      	adds	r3, r7, #3
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10e      	bne.n	800c1f0 <interfaceUpdateModeSwitch+0x34>

		EPD_1IN54_V2_Init();
 800c1d2:	f7fb fde3 	bl	8007d9c <EPD_1IN54_V2_Init>
		Paint_SelectImage(interface->framebuffer);
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	2394      	movs	r3, #148	; 0x94
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	58d3      	ldr	r3, [r2, r3]
 800c1de:	0018      	movs	r0, r3
 800c1e0:	f7fc f82e 	bl	8008240 <Paint_SelectImage>

		interface->updateMode = INTERFACE_UPDATE_MODE_FULL;
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	2396      	movs	r3, #150	; 0x96
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	54d1      	strb	r1, [r2, r3]
		Paint_SelectImage(interface->framebuffer);

		interface->updateMode = INTERFACE_UPDATE_MODE_PARTIAL;
	}

}
 800c1ee:	e018      	b.n	800c222 <interfaceUpdateModeSwitch+0x66>
	} else if (mode == INTERFACE_UPDATE_MODE_PARTIAL) {
 800c1f0:	1cfb      	adds	r3, r7, #3
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d114      	bne.n	800c222 <interfaceUpdateModeSwitch+0x66>
		EPD_1IN54_V2_Init();
 800c1f8:	f7fb fdd0 	bl	8007d9c <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(interface->framebuffer);
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	2394      	movs	r3, #148	; 0x94
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	58d3      	ldr	r3, [r2, r3]
 800c204:	0018      	movs	r0, r3
 800c206:	f7fb fea9 	bl	8007f5c <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(interface->framebuffer);
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	2394      	movs	r3, #148	; 0x94
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	58d3      	ldr	r3, [r2, r3]
 800c212:	0018      	movs	r0, r3
 800c214:	f7fc f814 	bl	8008240 <Paint_SelectImage>
		interface->updateMode = INTERFACE_UPDATE_MODE_PARTIAL;
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	2396      	movs	r3, #150	; 0x96
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	2101      	movs	r1, #1
 800c220:	54d1      	strb	r1, [r2, r3]
}
 800c222:	46c0      	nop			; (mov r8, r8)
 800c224:	46bd      	mov	sp, r7
 800c226:	b002      	add	sp, #8
 800c228:	bd80      	pop	{r7, pc}

0800c22a <interfaceBurn>:
/*
 * brief: burn framebuffer on matrix
 * param: interface struct
 * retval: none
 */
void interfaceBurn(interfaceTypeDef *interface) {
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]

	if (interface->updateMode == INTERFACE_UPDATE_MODE_PARTIAL) {
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	2396      	movs	r3, #150	; 0x96
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	5cd3      	ldrb	r3, [r2, r3]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d107      	bne.n	800c24e <interfaceBurn+0x24>

		EPD_1IN54_V2_DisplayPart(interface->framebuffer);
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	2394      	movs	r3, #148	; 0x94
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	58d3      	ldr	r3, [r2, r3]
 800c246:	0018      	movs	r0, r3
 800c248:	f7fb ff12 	bl	8008070 <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(interface->framebuffer);

	}

}
 800c24c:	e00c      	b.n	800c268 <interfaceBurn+0x3e>
	} else if (interface->updateMode == INTERFACE_UPDATE_MODE_FULL) {
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	2396      	movs	r3, #150	; 0x96
 800c252:	005b      	lsls	r3, r3, #1
 800c254:	5cd3      	ldrb	r3, [r2, r3]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <interfaceBurn+0x3e>
		EPD_1IN54_V2_Display(interface->framebuffer);
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	2394      	movs	r3, #148	; 0x94
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	58d3      	ldr	r3, [r2, r3]
 800c262:	0018      	movs	r0, r3
 800c264:	f7fb fe2b 	bl	8007ebe <EPD_1IN54_V2_Display>
}
 800c268:	46c0      	nop			; (mov r8, r8)
 800c26a:	46bd      	mov	sp, r7
 800c26c:	b002      	add	sp, #8
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <interfaceClear>:
/*
 * brief: burn framebuffer on matrix
 * param: interface struct
 * retval: none
 */
void interfaceClear(interfaceTypeDef *interface) {
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	Paint_Clear(interface->colorBackground);
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	2326      	movs	r3, #38	; 0x26
 800c27c:	33ff      	adds	r3, #255	; 0xff
 800c27e:	5cd3      	ldrb	r3, [r2, r3]
 800c280:	b29b      	uxth	r3, r3
 800c282:	0018      	movs	r0, r3
 800c284:	f7fc f98e 	bl	80085a4 <Paint_Clear>
}
 800c288:	46c0      	nop			; (mov r8, r8)
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b002      	add	sp, #8
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <interfaceSettingsClear>:

void interfaceSettingsClear(interfaceSettingsTypeDef *settings) {
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
	Paint_Clear(settings->colorBackground);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2220      	movs	r2, #32
 800c29c:	5c9b      	ldrb	r3, [r3, r2]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	f7fc f97f 	bl	80085a4 <Paint_Clear>
}
 800c2a6:	46c0      	nop			; (mov r8, r8)
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	b002      	add	sp, #8
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <interfaceDrawMain>:

void interfaceDrawMain(interfaceTypeDef *interface, RTCChronoTypeDef *chrono,
		lis3mdlTypeDef *magnetometer, bme280TypeDef *atmospherical,
		watchTypeDef *watch, forecastTypeDef *forecast) {
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	46c6      	mov	lr, r8
 800c2b4:	b500      	push	{lr}
 800c2b6:	b092      	sub	sp, #72	; 0x48
 800c2b8:	af08      	add	r7, sp, #32
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]

	//			LOGO
	Paint_DrawString_EN(82, 7, "libra", &Font12, interface->colorForeground,
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	2393      	movs	r3, #147	; 0x93
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	5cd3      	ldrb	r3, [r2, r3]
 800c2ca:	b29b      	uxth	r3, r3
			interface->colorBackground);
 800c2cc:	68f9      	ldr	r1, [r7, #12]
 800c2ce:	2226      	movs	r2, #38	; 0x26
 800c2d0:	32ff      	adds	r2, #255	; 0xff
 800c2d2:	5c8a      	ldrb	r2, [r1, r2]
	Paint_DrawString_EN(82, 7, "libra", &Font12, interface->colorForeground,
 800c2d4:	b292      	uxth	r2, r2
 800c2d6:	48e4      	ldr	r0, [pc, #912]	; (800c668 <interfaceDrawMain+0x3b8>)
 800c2d8:	49e4      	ldr	r1, [pc, #912]	; (800c66c <interfaceDrawMain+0x3bc>)
 800c2da:	9201      	str	r2, [sp, #4]
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	0003      	movs	r3, r0
 800c2e0:	000a      	movs	r2, r1
 800c2e2:	2107      	movs	r1, #7
 800c2e4:	2052      	movs	r0, #82	; 0x52
 800c2e6:	f7fd f89f 	bl	8009428 <Paint_DrawString_EN>

	//			MOON PHASE BOARD
	if (interface->coordinatesMoonPhase[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	7f5b      	ldrb	r3, [r3, #29]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d000      	beq.n	800c2f4 <interfaceDrawMain+0x44>
 800c2f2:	e11f      	b.n	800c534 <interfaceDrawMain+0x284>
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	7edb      	ldrb	r3, [r3, #27]
 800c2f8:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y], interface->radiusMoonPhase,
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	7f1b      	ldrb	r3, [r3, #28]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c2fe:	b299      	uxth	r1, r3
				interface->coordinatesMoonPhase[Y], interface->radiusMoonPhase,
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2224      	movs	r2, #36	; 0x24
 800c304:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c306:	b29c      	uxth	r4, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	2393      	movs	r3, #147	; 0x93
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c310:	b29b      	uxth	r3, r3
 800c312:	2201      	movs	r2, #1
 800c314:	9201      	str	r2, [sp, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	9200      	str	r2, [sp, #0]
 800c31a:	0022      	movs	r2, r4
 800c31c:	f7fc fd4e 	bl	8008dbc <Paint_DrawCircle>

		//draw craters
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 2,
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	7edb      	ldrb	r3, [r3, #27]
 800c324:	b29b      	uxth	r3, r3
 800c326:	3b02      	subs	r3, #2
 800c328:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 1, 3,
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	7f1b      	ldrb	r3, [r3, #28]
 800c32e:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 2,
 800c330:	3301      	adds	r3, #1
 800c332:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	2326      	movs	r3, #38	; 0x26
 800c338:	33ff      	adds	r3, #255	; 0xff
 800c33a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 2,
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2200      	movs	r2, #0
 800c340:	9201      	str	r2, [sp, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	9200      	str	r2, [sp, #0]
 800c346:	2203      	movs	r2, #3
 800c348:	f7fc fd38 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] + 2,
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	7edb      	ldrb	r3, [r3, #27]
 800c350:	b29b      	uxth	r3, r3
 800c352:	3302      	adds	r3, #2
 800c354:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] - 5, 1,
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	7f1b      	ldrb	r3, [r3, #28]
 800c35a:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] + 2,
 800c35c:	3b05      	subs	r3, #5
 800c35e:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	2326      	movs	r3, #38	; 0x26
 800c364:	33ff      	adds	r3, #255	; 0xff
 800c366:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] + 2,
 800c368:	b29b      	uxth	r3, r3
 800c36a:	2200      	movs	r2, #0
 800c36c:	9201      	str	r2, [sp, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	9200      	str	r2, [sp, #0]
 800c372:	2201      	movs	r2, #1
 800c374:	f7fc fd22 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 9,
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	7edb      	ldrb	r3, [r3, #27]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	3b09      	subs	r3, #9
 800c380:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 3, 2,
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	7f1b      	ldrb	r3, [r3, #28]
 800c386:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 9,
 800c388:	3303      	adds	r3, #3
 800c38a:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	2326      	movs	r3, #38	; 0x26
 800c390:	33ff      	adds	r3, #255	; 0xff
 800c392:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 9,
 800c394:	b29b      	uxth	r3, r3
 800c396:	2200      	movs	r2, #0
 800c398:	9201      	str	r2, [sp, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	9200      	str	r2, [sp, #0]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	f7fc fd0c 	bl	8008dbc <Paint_DrawCircle>

		if (chrono->actual.moonPhase < 50) {
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	2b31      	cmp	r3, #49	; 0x31
 800c3aa:	d836      	bhi.n	800c41a <interfaceDrawMain+0x16a>

			float moonPhaseShift = ((float) chrono->actual.moonPhase / 25)
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	f7f4 fef5 	bl	80011a0 <__aeabi_ui2f>
 800c3b6:	1c03      	adds	r3, r0, #0
 800c3b8:	49ad      	ldr	r1, [pc, #692]	; (800c670 <interfaceDrawMain+0x3c0>)
 800c3ba:	1c18      	adds	r0, r3, #0
 800c3bc:	f7f4 fa9c 	bl	80008f8 <__aeabi_fdiv>
 800c3c0:	1c03      	adds	r3, r0, #0
 800c3c2:	1c1c      	adds	r4, r3, #0
					* interface->radiusMoonPhase;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2224      	movs	r2, #36	; 0x24
 800c3c8:	5c9b      	ldrb	r3, [r3, r2]
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	f7f4 fea2 	bl	8001114 <__aeabi_i2f>
 800c3d0:	1c03      	adds	r3, r0, #0
			float moonPhaseShift = ((float) chrono->actual.moonPhase / 25)
 800c3d2:	1c19      	adds	r1, r3, #0
 800c3d4:	1c20      	adds	r0, r4, #0
 800c3d6:	f7f4 fb9b 	bl	8000b10 <__aeabi_fmul>
 800c3da:	1c03      	adds	r3, r0, #0
 800c3dc:	61bb      	str	r3, [r7, #24]
			Paint_DrawCircle(
					interface->coordinatesMoonPhase[X]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	7edb      	ldrb	r3, [r3, #27]
 800c3e2:	b29c      	uxth	r4, r3
							- (uint32_t) moonPhaseShift,
 800c3e4:	69b8      	ldr	r0, [r7, #24]
 800c3e6:	f7f4 f897 	bl	8000518 <__aeabi_f2uiz>
 800c3ea:	0003      	movs	r3, r0
			Paint_DrawCircle(
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	1ae3      	subs	r3, r4, r3
 800c3f0:	b298      	uxth	r0, r3
					interface->coordinatesMoonPhase[Y],
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	7f1b      	ldrb	r3, [r3, #28]
			Paint_DrawCircle(
 800c3f6:	b299      	uxth	r1, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2224      	movs	r2, #36	; 0x24
 800c3fc:	5c9b      	ldrb	r3, [r3, r2]
			Paint_DrawCircle(
 800c3fe:	b29c      	uxth	r4, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	2326      	movs	r3, #38	; 0x26
 800c404:	33ff      	adds	r3, #255	; 0xff
 800c406:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawCircle(
 800c408:	b29b      	uxth	r3, r3
 800c40a:	2201      	movs	r2, #1
 800c40c:	9201      	str	r2, [sp, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	9200      	str	r2, [sp, #0]
 800c412:	0022      	movs	r2, r4
 800c414:	f7fc fcd2 	bl	8008dbc <Paint_DrawCircle>
 800c418:	e03c      	b.n	800c494 <interfaceDrawMain+0x1e4>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);

		} else if (chrono->actual.moonPhase > 50) {
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	2b32      	cmp	r3, #50	; 0x32
 800c420:	d938      	bls.n	800c494 <interfaceDrawMain+0x1e4>
			uint32_t moonPhase = 100 - chrono->actual.moonPhase;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	2264      	movs	r2, #100	; 0x64
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	623b      	str	r3, [r7, #32]

			float moonPhaseShift = ((float) moonPhase / 25)
 800c42c:	6a38      	ldr	r0, [r7, #32]
 800c42e:	f7f4 feb7 	bl	80011a0 <__aeabi_ui2f>
 800c432:	1c03      	adds	r3, r0, #0
 800c434:	498e      	ldr	r1, [pc, #568]	; (800c670 <interfaceDrawMain+0x3c0>)
 800c436:	1c18      	adds	r0, r3, #0
 800c438:	f7f4 fa5e 	bl	80008f8 <__aeabi_fdiv>
 800c43c:	1c03      	adds	r3, r0, #0
 800c43e:	1c1c      	adds	r4, r3, #0
					* interface->radiusMoonPhase;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2224      	movs	r2, #36	; 0x24
 800c444:	5c9b      	ldrb	r3, [r3, r2]
 800c446:	0018      	movs	r0, r3
 800c448:	f7f4 fe64 	bl	8001114 <__aeabi_i2f>
 800c44c:	1c03      	adds	r3, r0, #0
			float moonPhaseShift = ((float) moonPhase / 25)
 800c44e:	1c19      	adds	r1, r3, #0
 800c450:	1c20      	adds	r0, r4, #0
 800c452:	f7f4 fb5d 	bl	8000b10 <__aeabi_fmul>
 800c456:	1c03      	adds	r3, r0, #0
 800c458:	61fb      	str	r3, [r7, #28]
			Paint_DrawCircle(
					interface->coordinatesMoonPhase[X]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	7edb      	ldrb	r3, [r3, #27]
 800c45e:	b29c      	uxth	r4, r3
							+ (uint32_t) moonPhaseShift,
 800c460:	69f8      	ldr	r0, [r7, #28]
 800c462:	f7f4 f859 	bl	8000518 <__aeabi_f2uiz>
 800c466:	0003      	movs	r3, r0
			Paint_DrawCircle(
 800c468:	b29b      	uxth	r3, r3
 800c46a:	18e3      	adds	r3, r4, r3
 800c46c:	b298      	uxth	r0, r3
					interface->coordinatesMoonPhase[Y],
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	7f1b      	ldrb	r3, [r3, #28]
			Paint_DrawCircle(
 800c472:	b299      	uxth	r1, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2224      	movs	r2, #36	; 0x24
 800c478:	5c9b      	ldrb	r3, [r3, r2]
			Paint_DrawCircle(
 800c47a:	b29c      	uxth	r4, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	2326      	movs	r3, #38	; 0x26
 800c480:	33ff      	adds	r3, #255	; 0xff
 800c482:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawCircle(
 800c484:	b29b      	uxth	r3, r3
 800c486:	2201      	movs	r2, #1
 800c488:	9201      	str	r2, [sp, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	9200      	str	r2, [sp, #0]
 800c48e:	0022      	movs	r2, r4
 800c490:	f7fc fc94 	bl	8008dbc <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);

		}

		//			draw stars
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 15,
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	7edb      	ldrb	r3, [r3, #27]
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b0f      	subs	r3, #15
 800c49c:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] - 5,
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	7f1b      	ldrb	r3, [r3, #28]
 800c4a2:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 15,
 800c4a4:	3b05      	subs	r3, #5
 800c4a6:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	2393      	movs	r3, #147	; 0x93
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 15,
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	f7fc f902 	bl	80086c0 <Paint_DrawPoint>
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 13,
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	7edb      	ldrb	r3, [r3, #27]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	330d      	adds	r3, #13
 800c4c4:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 2,
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	7f1b      	ldrb	r3, [r3, #28]
 800c4ca:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 13,
 800c4cc:	3302      	adds	r3, #2
 800c4ce:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	2393      	movs	r3, #147	; 0x93
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 13,
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	2301      	movs	r3, #1
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f7fc f8ee 	bl	80086c0 <Paint_DrawPoint>
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 9,
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	7edb      	ldrb	r3, [r3, #27]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	3b09      	subs	r3, #9
 800c4ec:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 17,
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	7f1b      	ldrb	r3, [r3, #28]
 800c4f2:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 9,
 800c4f4:	3311      	adds	r3, #17
 800c4f6:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	2393      	movs	r3, #147	; 0x93
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 9,
 800c500:	b29a      	uxth	r2, r3
 800c502:	2301      	movs	r3, #1
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	2301      	movs	r3, #1
 800c508:	f7fc f8da 	bl	80086c0 <Paint_DrawPoint>
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 8,
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	7edb      	ldrb	r3, [r3, #27]
 800c510:	b29b      	uxth	r3, r3
 800c512:	3308      	adds	r3, #8
 800c514:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] - 18,
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	7f1b      	ldrb	r3, [r3, #28]
 800c51a:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 8,
 800c51c:	3b12      	subs	r3, #18
 800c51e:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	2393      	movs	r3, #147	; 0x93
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 8,
 800c528:	b29a      	uxth	r2, r3
 800c52a:	2301      	movs	r3, #1
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	2302      	movs	r3, #2
 800c530:	f7fc f8c6 	bl	80086c0 <Paint_DrawPoint>

	}

	//			TEMPERATURE
	if (interface->coordinatesTemperature[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	7adb      	ldrb	r3, [r3, #11]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d000      	beq.n	800c53e <interfaceDrawMain+0x28e>
 800c53c:	e0bf      	b.n	800c6be <interfaceDrawMain+0x40e>

		//frame
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	7a5b      	ldrb	r3, [r3, #9]
 800c542:	b29b      	uxth	r3, r3
 800c544:	3b14      	subs	r3, #20
 800c546:	b298      	uxth	r0, r3
				interface->coordinatesTemperature[Y] - 4,
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	7a9b      	ldrb	r3, [r3, #10]
 800c54c:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c54e:	3b04      	subs	r3, #4
 800c550:	b299      	uxth	r1, r3
				interface->coordinatesTemperature[X] + 50,
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	7a5b      	ldrb	r3, [r3, #9]
 800c556:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c558:	3332      	adds	r3, #50	; 0x32
 800c55a:	b29c      	uxth	r4, r3
				interface->coordinatesTemperature[Y] + 18,
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	7a9b      	ldrb	r3, [r3, #10]
 800c560:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c562:	3312      	adds	r3, #18
 800c564:	b29d      	uxth	r5, r3
				interface->colorForeground, DOT_PIXEL_2X2, DRAW_FILL_FULL);
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	2393      	movs	r3, #147	; 0x93
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c56e:	b29b      	uxth	r3, r3
 800c570:	2201      	movs	r2, #1
 800c572:	9202      	str	r2, [sp, #8]
 800c574:	2202      	movs	r2, #2
 800c576:	9201      	str	r2, [sp, #4]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	002b      	movs	r3, r5
 800c57c:	0022      	movs	r2, r4
 800c57e:	f7fc fb51 	bl	8008c24 <Paint_DrawRectangle>

		//unit
		Paint_DrawCircle(interface->coordinatesTemperature[X] + 26,
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	7a5b      	ldrb	r3, [r3, #9]
 800c586:	b29b      	uxth	r3, r3
 800c588:	331a      	adds	r3, #26
 800c58a:	b298      	uxth	r0, r3
				interface->coordinatesTemperature[Y] + 4, 2,
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	7a9b      	ldrb	r3, [r3, #10]
 800c590:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesTemperature[X] + 26,
 800c592:	3304      	adds	r3, #4
 800c594:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	2326      	movs	r3, #38	; 0x26
 800c59a:	33ff      	adds	r3, #255	; 0xff
 800c59c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesTemperature[X] + 26,
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	9201      	str	r2, [sp, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	9200      	str	r2, [sp, #0]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	f7fc fc07 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	7a5b      	ldrb	r3, [r3, #9]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	331f      	adds	r3, #31
 800c5b6:	b298      	uxth	r0, r3
				interface->coordinatesTemperature[Y], "C", &Font16,
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	7a9b      	ldrb	r3, [r3, #10]
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c5bc:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	2326      	movs	r3, #38	; 0x26
 800c5c2:	33ff      	adds	r3, #255	; 0xff
 800c5c4:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c5c6:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800c5c8:	68f9      	ldr	r1, [r7, #12]
 800c5ca:	2293      	movs	r2, #147	; 0x93
 800c5cc:	0052      	lsls	r2, r2, #1
 800c5ce:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c5d0:	b292      	uxth	r2, r2
 800c5d2:	4d28      	ldr	r5, [pc, #160]	; (800c674 <interfaceDrawMain+0x3c4>)
 800c5d4:	4928      	ldr	r1, [pc, #160]	; (800c678 <interfaceDrawMain+0x3c8>)
 800c5d6:	9201      	str	r2, [sp, #4]
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	002b      	movs	r3, r5
 800c5dc:	000a      	movs	r2, r1
 800c5de:	0021      	movs	r1, r4
 800c5e0:	f7fc ff22 	bl	8009428 <Paint_DrawString_EN>

		//value
		if (atmospherical->temperatureValue < 0) {
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	da47      	bge.n	800c67c <interfaceDrawMain+0x3cc>
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	7a5b      	ldrb	r3, [r3, #9]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	3b08      	subs	r3, #8
 800c5f4:	b298      	uxth	r0, r3
					interface->coordinatesTemperature[Y], '-', &Font16,
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	7a9b      	ldrb	r3, [r3, #10]
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c5fa:	b29c      	uxth	r4, r3
					interface->colorBackground, interface->colorForeground);
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	2326      	movs	r3, #38	; 0x26
 800c600:	33ff      	adds	r3, #255	; 0xff
 800c602:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c604:	b29b      	uxth	r3, r3
					interface->colorBackground, interface->colorForeground);
 800c606:	68f9      	ldr	r1, [r7, #12]
 800c608:	2293      	movs	r2, #147	; 0x93
 800c60a:	0052      	lsls	r2, r2, #1
 800c60c:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c60e:	b292      	uxth	r2, r2
 800c610:	4918      	ldr	r1, [pc, #96]	; (800c674 <interfaceDrawMain+0x3c4>)
 800c612:	9201      	str	r2, [sp, #4]
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	000b      	movs	r3, r1
 800c618:	222d      	movs	r2, #45	; 0x2d
 800c61a:	0021      	movs	r1, r4
 800c61c:	f7fc fe20 	bl	8009260 <Paint_DrawChar>
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	7a5b      	ldrb	r3, [r3, #9]
 800c624:	b29c      	uxth	r4, r3
					interface->coordinatesTemperature[Y],
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	7a9b      	ldrb	r3, [r3, #10]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c62a:	b29d      	uxth	r5, r3
					abs(atmospherical->temperatureValueCompensated / 100),
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	2164      	movs	r1, #100	; 0x64
 800c632:	0018      	movs	r0, r3
 800c634:	f7f3 fdfa 	bl	800022c <__divsi3>
 800c638:	0003      	movs	r3, r0
 800c63a:	17da      	asrs	r2, r3, #31
 800c63c:	1898      	adds	r0, r3, r2
 800c63e:	4050      	eors	r0, r2
					&Font16, interface->colorBackground,
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	2326      	movs	r3, #38	; 0x26
 800c644:	33ff      	adds	r3, #255	; 0xff
 800c646:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c648:	b29b      	uxth	r3, r3
					interface->colorForeground);
 800c64a:	68f9      	ldr	r1, [r7, #12]
 800c64c:	2293      	movs	r2, #147	; 0x93
 800c64e:	0052      	lsls	r2, r2, #1
 800c650:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c652:	b292      	uxth	r2, r2
 800c654:	4907      	ldr	r1, [pc, #28]	; (800c674 <interfaceDrawMain+0x3c4>)
 800c656:	9201      	str	r2, [sp, #4]
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	000b      	movs	r3, r1
 800c65c:	0002      	movs	r2, r0
 800c65e:	0029      	movs	r1, r5
 800c660:	0020      	movs	r0, r4
 800c662:	f7fc ff5f 	bl	8009524 <Paint_DrawNum>
 800c666:	e02a      	b.n	800c6be <interfaceDrawMain+0x40e>
 800c668:	20000008 	.word	0x20000008
 800c66c:	08011934 	.word	0x08011934
 800c670:	41c80000 	.word	0x41c80000
 800c674:	20000010 	.word	0x20000010
 800c678:	0801193c 	.word	0x0801193c
		} else {
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	7a5b      	ldrb	r3, [r3, #9]
 800c680:	b29c      	uxth	r4, r3
					interface->coordinatesTemperature[Y],
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	7a9b      	ldrb	r3, [r3, #10]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c686:	b29d      	uxth	r5, r3
					atmospherical->temperatureValueCompensated / 100, &Font16,
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	69db      	ldr	r3, [r3, #28]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c68c:	2164      	movs	r1, #100	; 0x64
 800c68e:	0018      	movs	r0, r3
 800c690:	f7f3 fdcc 	bl	800022c <__divsi3>
 800c694:	0003      	movs	r3, r0
 800c696:	0018      	movs	r0, r3
					interface->colorBackground, interface->colorForeground);
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	2326      	movs	r3, #38	; 0x26
 800c69c:	33ff      	adds	r3, #255	; 0xff
 800c69e:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c6a0:	b29b      	uxth	r3, r3
					interface->colorBackground, interface->colorForeground);
 800c6a2:	68f9      	ldr	r1, [r7, #12]
 800c6a4:	2293      	movs	r2, #147	; 0x93
 800c6a6:	0052      	lsls	r2, r2, #1
 800c6a8:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c6aa:	b292      	uxth	r2, r2
 800c6ac:	4918      	ldr	r1, [pc, #96]	; (800c710 <interfaceDrawMain+0x460>)
 800c6ae:	9201      	str	r2, [sp, #4]
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	000b      	movs	r3, r1
 800c6b4:	0002      	movs	r2, r0
 800c6b6:	0029      	movs	r1, r5
 800c6b8:	0020      	movs	r0, r4
 800c6ba:	f7fc ff33 	bl	8009524 <Paint_DrawNum>
		}
	}

	//			HUMIDITY
	if (interface->coordinatesHumidity[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	7b9b      	ldrb	r3, [r3, #14]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d000      	beq.n	800c6c8 <interfaceDrawMain+0x418>
 800c6c6:	e0b1      	b.n	800c82c <interfaceDrawMain+0x57c>

		//frame
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	7b1b      	ldrb	r3, [r3, #12]
 800c6cc:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y],
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	7b5b      	ldrb	r3, [r3, #13]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c6d2:	b299      	uxth	r1, r3
				interface->coordinatesHumidity[X] + 5,
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	7b1b      	ldrb	r3, [r3, #12]
 800c6d8:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c6da:	3305      	adds	r3, #5
 800c6dc:	b29c      	uxth	r4, r3
				interface->coordinatesHumidity[Y] + 50,
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	7b5b      	ldrb	r3, [r3, #13]
 800c6e2:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c6e4:	3332      	adds	r3, #50	; 0x32
 800c6e6:	b29d      	uxth	r5, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	2393      	movs	r3, #147	; 0x93
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	9202      	str	r2, [sp, #8]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	9201      	str	r2, [sp, #4]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	002b      	movs	r3, r5
 800c6fe:	0022      	movs	r2, r4
 800c700:	f7fc fa90 	bl	8008c24 <Paint_DrawRectangle>

		//indexes
		for (uint8_t i = 0; i <= 50; i = i + 5) {
 800c704:	2327      	movs	r3, #39	; 0x27
 800c706:	18fb      	adds	r3, r7, r3
 800c708:	2200      	movs	r2, #0
 800c70a:	701a      	strb	r2, [r3, #0]
 800c70c:	e02f      	b.n	800c76e <interfaceDrawMain+0x4be>
 800c70e:	46c0      	nop			; (mov r8, r8)
 800c710:	20000010 	.word	0x20000010
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	7b1b      	ldrb	r3, [r3, #12]
 800c718:	b298      	uxth	r0, r3
					interface->coordinatesHumidity[Y] + i,
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	7b5b      	ldrb	r3, [r3, #13]
 800c71e:	b29a      	uxth	r2, r3
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c720:	2527      	movs	r5, #39	; 0x27
 800c722:	197b      	adds	r3, r7, r5
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	b29b      	uxth	r3, r3
 800c728:	18d3      	adds	r3, r2, r3
 800c72a:	b299      	uxth	r1, r3
					interface->coordinatesHumidity[X] - 2,
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	7b1b      	ldrb	r3, [r3, #12]
 800c730:	b29b      	uxth	r3, r3
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c732:	3b02      	subs	r3, #2
 800c734:	b29c      	uxth	r4, r3
					interface->coordinatesHumidity[Y] + i,
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	7b5b      	ldrb	r3, [r3, #13]
 800c73a:	b29a      	uxth	r2, r3
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c73c:	002e      	movs	r6, r5
 800c73e:	197b      	adds	r3, r7, r5
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	18d3      	adds	r3, r2, r3
 800c746:	b29d      	uxth	r5, r3
					interface->colorForeground, DOT_PIXEL_1X1,
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	2393      	movs	r3, #147	; 0x93
 800c74c:	005b      	lsls	r3, r3, #1
 800c74e:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c750:	b29b      	uxth	r3, r3
 800c752:	2200      	movs	r2, #0
 800c754:	9202      	str	r2, [sp, #8]
 800c756:	2201      	movs	r2, #1
 800c758:	9201      	str	r2, [sp, #4]
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	002b      	movs	r3, r5
 800c75e:	0022      	movs	r2, r4
 800c760:	f7fc f898 	bl	8008894 <Paint_DrawLine>
		for (uint8_t i = 0; i <= 50; i = i + 5) {
 800c764:	19bb      	adds	r3, r7, r6
 800c766:	19ba      	adds	r2, r7, r6
 800c768:	7812      	ldrb	r2, [r2, #0]
 800c76a:	3205      	adds	r2, #5
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	2327      	movs	r3, #39	; 0x27
 800c770:	18fb      	adds	r3, r7, r3
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b32      	cmp	r3, #50	; 0x32
 800c776:	d9cd      	bls.n	800c714 <interfaceDrawMain+0x464>
					LINE_STYLE_SOLID);
		}
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	7b1b      	ldrb	r3, [r3, #12]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	3306      	adds	r3, #6
 800c780:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y], "0%RH", &Font8,
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	7b5b      	ldrb	r3, [r3, #13]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c786:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	2393      	movs	r3, #147	; 0x93
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c790:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800c792:	68f9      	ldr	r1, [r7, #12]
 800c794:	2226      	movs	r2, #38	; 0x26
 800c796:	32ff      	adds	r2, #255	; 0xff
 800c798:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c79a:	b292      	uxth	r2, r2
 800c79c:	4ddf      	ldr	r5, [pc, #892]	; (800cb1c <interfaceDrawMain+0x86c>)
 800c79e:	49e0      	ldr	r1, [pc, #896]	; (800cb20 <interfaceDrawMain+0x870>)
 800c7a0:	9201      	str	r2, [sp, #4]
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	002b      	movs	r3, r5
 800c7a6:	000a      	movs	r2, r1
 800c7a8:	0021      	movs	r1, r4
 800c7aa:	f7fc fe3d 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	7b1b      	ldrb	r3, [r3, #12]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	3306      	adds	r3, #6
 800c7b6:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y] + 43, "100", &Font8,
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	7b5b      	ldrb	r3, [r3, #13]
 800c7bc:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c7be:	332b      	adds	r3, #43	; 0x2b
 800c7c0:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	2393      	movs	r3, #147	; 0x93
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c7ca:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800c7cc:	68f9      	ldr	r1, [r7, #12]
 800c7ce:	2226      	movs	r2, #38	; 0x26
 800c7d0:	32ff      	adds	r2, #255	; 0xff
 800c7d2:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c7d4:	b292      	uxth	r2, r2
 800c7d6:	4dd1      	ldr	r5, [pc, #836]	; (800cb1c <interfaceDrawMain+0x86c>)
 800c7d8:	49d2      	ldr	r1, [pc, #840]	; (800cb24 <interfaceDrawMain+0x874>)
 800c7da:	9201      	str	r2, [sp, #4]
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	002b      	movs	r3, r5
 800c7e0:	000a      	movs	r2, r1
 800c7e2:	0021      	movs	r1, r4
 800c7e4:	f7fc fe20 	bl	8009428 <Paint_DrawString_EN>

		//value
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	7b1b      	ldrb	r3, [r3, #12]
 800c7ec:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y],
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	7b5b      	ldrb	r3, [r3, #13]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c7f2:	b299      	uxth	r1, r3
				interface->coordinatesHumidity[X] + 5,
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	7b1b      	ldrb	r3, [r3, #12]
 800c7f8:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c7fa:	3305      	adds	r3, #5
 800c7fc:	b29c      	uxth	r4, r3
				interface->coordinatesHumidity[Y]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	7b5b      	ldrb	r3, [r3, #13]
 800c802:	b29a      	uxth	r2, r3
						+ (atmospherical->humidityValue / 2),
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	085b      	lsrs	r3, r3, #1
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	18d3      	adds	r3, r2, r3
 800c80e:	b29d      	uxth	r5, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	2393      	movs	r3, #147	; 0x93
 800c814:	005b      	lsls	r3, r3, #1
 800c816:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c818:	b29b      	uxth	r3, r3
 800c81a:	2201      	movs	r2, #1
 800c81c:	9202      	str	r2, [sp, #8]
 800c81e:	2201      	movs	r2, #1
 800c820:	9201      	str	r2, [sp, #4]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	002b      	movs	r3, r5
 800c826:	0022      	movs	r2, r4
 800c828:	f7fc f9fc 	bl	8008c24 <Paint_DrawRectangle>
	}

	//			COMPASS
	if (interface->coordinatesCompass[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	7d1b      	ldrb	r3, [r3, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d000      	beq.n	800c836 <interfaceDrawMain+0x586>
 800c834:	e1fc      	b.n	800cc30 <interfaceDrawMain+0x980>

		//board
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7c9b      	ldrb	r3, [r3, #18]
 800c83a:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y], interface->radiusCompass,
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800c840:	b299      	uxth	r1, r3
				interface->coordinatesCompass[Y], interface->radiusCompass,
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2223      	movs	r2, #35	; 0x23
 800c846:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800c848:	b29c      	uxth	r4, r3
				interface->colorForeground, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	2393      	movs	r3, #147	; 0x93
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800c852:	b29b      	uxth	r3, r3
 800c854:	2200      	movs	r2, #0
 800c856:	9201      	str	r2, [sp, #4]
 800c858:	2202      	movs	r2, #2
 800c85a:	9200      	str	r2, [sp, #0]
 800c85c:	0022      	movs	r2, r4
 800c85e:	f7fc faad 	bl	8008dbc <Paint_DrawCircle>

		//altimeter unit
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	7c9b      	ldrb	r3, [r3, #18]
 800c866:	b29b      	uxth	r3, r3
 800c868:	3b04      	subs	r3, #4
 800c86a:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] + 3, 'm', &Font12,
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	7cdb      	ldrb	r3, [r3, #19]
 800c870:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800c872:	3303      	adds	r3, #3
 800c874:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	2393      	movs	r3, #147	; 0x93
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800c87e:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800c880:	68f9      	ldr	r1, [r7, #12]
 800c882:	2226      	movs	r2, #38	; 0x26
 800c884:	32ff      	adds	r2, #255	; 0xff
 800c886:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800c888:	b292      	uxth	r2, r2
 800c88a:	49a7      	ldr	r1, [pc, #668]	; (800cb28 <interfaceDrawMain+0x878>)
 800c88c:	9201      	str	r2, [sp, #4]
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	000b      	movs	r3, r1
 800c892:	226d      	movs	r2, #109	; 0x6d
 800c894:	0021      	movs	r1, r4
 800c896:	f7fc fce3 	bl	8009260 <Paint_DrawChar>

		//fields for indexes
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	7c9b      	ldrb	r3, [r3, #18]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	3b03      	subs	r3, #3
 800c8a2:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 30,
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	7cdb      	ldrb	r3, [r3, #19]
 800c8a8:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8aa:	3b1e      	subs	r3, #30
 800c8ac:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] - 3 + 8,
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	7c9b      	ldrb	r3, [r3, #18]
 800c8b2:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8b4:	3305      	adds	r3, #5
 800c8b6:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] - 30 + 12,
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	7cdb      	ldrb	r3, [r3, #19]
 800c8bc:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8be:	3b12      	subs	r3, #18
 800c8c0:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	2326      	movs	r3, #38	; 0x26
 800c8c6:	33ff      	adds	r3, #255	; 0xff
 800c8c8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	9202      	str	r2, [sp, #8]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	9201      	str	r2, [sp, #4]
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	002b      	movs	r3, r5
 800c8d8:	0022      	movs	r2, r4
 800c8da:	f7fc f9a3 	bl	8008c24 <Paint_DrawRectangle>
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	7c9b      	ldrb	r3, [r3, #18]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3b03      	subs	r3, #3
 800c8e6:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] + 19,
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	7cdb      	ldrb	r3, [r3, #19]
 800c8ec:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8ee:	3313      	adds	r3, #19
 800c8f0:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] - 3 + 8,
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	7c9b      	ldrb	r3, [r3, #18]
 800c8f6:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c8f8:	3305      	adds	r3, #5
 800c8fa:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] + 19 + 12,
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	7cdb      	ldrb	r3, [r3, #19]
 800c900:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c902:	331f      	adds	r3, #31
 800c904:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	2326      	movs	r3, #38	; 0x26
 800c90a:	33ff      	adds	r3, #255	; 0xff
 800c90c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800c90e:	b29b      	uxth	r3, r3
 800c910:	2201      	movs	r2, #1
 800c912:	9202      	str	r2, [sp, #8]
 800c914:	2201      	movs	r2, #1
 800c916:	9201      	str	r2, [sp, #4]
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	002b      	movs	r3, r5
 800c91c:	0022      	movs	r2, r4
 800c91e:	f7fc f981 	bl	8008c24 <Paint_DrawRectangle>
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	7c9b      	ldrb	r3, [r3, #18]
 800c926:	b29b      	uxth	r3, r3
 800c928:	3b1c      	subs	r3, #28
 800c92a:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5,
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	7cdb      	ldrb	r3, [r3, #19]
 800c930:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800c932:	3b05      	subs	r3, #5
 800c934:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] - 28 + 8,
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	7c9b      	ldrb	r3, [r3, #18]
 800c93a:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800c93c:	3b14      	subs	r3, #20
 800c93e:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] - 5 + 12,
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	7cdb      	ldrb	r3, [r3, #19]
 800c944:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800c946:	3307      	adds	r3, #7
 800c948:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	2326      	movs	r3, #38	; 0x26
 800c94e:	33ff      	adds	r3, #255	; 0xff
 800c950:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800c952:	b29b      	uxth	r3, r3
 800c954:	2201      	movs	r2, #1
 800c956:	9202      	str	r2, [sp, #8]
 800c958:	2201      	movs	r2, #1
 800c95a:	9201      	str	r2, [sp, #4]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	002b      	movs	r3, r5
 800c960:	0022      	movs	r2, r4
 800c962:	f7fc f95f 	bl	8008c24 <Paint_DrawRectangle>
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	7c9b      	ldrb	r3, [r3, #18]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3314      	adds	r3, #20
 800c96e:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5,
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	7cdb      	ldrb	r3, [r3, #19]
 800c974:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800c976:	3b05      	subs	r3, #5
 800c978:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] + 20 + 8,
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	7c9b      	ldrb	r3, [r3, #18]
 800c97e:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800c980:	331c      	adds	r3, #28
 800c982:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] - 5 + 12,
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	7cdb      	ldrb	r3, [r3, #19]
 800c988:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800c98a:	3307      	adds	r3, #7
 800c98c:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	2326      	movs	r3, #38	; 0x26
 800c992:	33ff      	adds	r3, #255	; 0xff
 800c994:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800c996:	b29b      	uxth	r3, r3
 800c998:	2201      	movs	r2, #1
 800c99a:	9202      	str	r2, [sp, #8]
 800c99c:	2201      	movs	r2, #1
 800c99e:	9201      	str	r2, [sp, #4]
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	002b      	movs	r3, r5
 800c9a4:	0022      	movs	r2, r4
 800c9a6:	f7fc f93d 	bl	8008c24 <Paint_DrawRectangle>

		//indexes
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	7c9b      	ldrb	r3, [r3, #18]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	3b03      	subs	r3, #3
 800c9b2:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 30, 'N', &Font12,
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	7cdb      	ldrb	r3, [r3, #19]
 800c9b8:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9ba:	3b1e      	subs	r3, #30
 800c9bc:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	2393      	movs	r3, #147	; 0x93
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9c6:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800c9c8:	68f9      	ldr	r1, [r7, #12]
 800c9ca:	2226      	movs	r2, #38	; 0x26
 800c9cc:	32ff      	adds	r2, #255	; 0xff
 800c9ce:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9d0:	b292      	uxth	r2, r2
 800c9d2:	4955      	ldr	r1, [pc, #340]	; (800cb28 <interfaceDrawMain+0x878>)
 800c9d4:	9201      	str	r2, [sp, #4]
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	000b      	movs	r3, r1
 800c9da:	224e      	movs	r2, #78	; 0x4e
 800c9dc:	0021      	movs	r1, r4
 800c9de:	f7fc fc3f 	bl	8009260 <Paint_DrawChar>
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	7c9b      	ldrb	r3, [r3, #18]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	3b03      	subs	r3, #3
 800c9ea:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] + 19, 'S', &Font12,
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	7cdb      	ldrb	r3, [r3, #19]
 800c9f0:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9f2:	3313      	adds	r3, #19
 800c9f4:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	2393      	movs	r3, #147	; 0x93
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800c9fe:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800ca00:	68f9      	ldr	r1, [r7, #12]
 800ca02:	2226      	movs	r2, #38	; 0x26
 800ca04:	32ff      	adds	r2, #255	; 0xff
 800ca06:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800ca08:	b292      	uxth	r2, r2
 800ca0a:	4947      	ldr	r1, [pc, #284]	; (800cb28 <interfaceDrawMain+0x878>)
 800ca0c:	9201      	str	r2, [sp, #4]
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	000b      	movs	r3, r1
 800ca12:	2253      	movs	r2, #83	; 0x53
 800ca14:	0021      	movs	r1, r4
 800ca16:	f7fc fc23 	bl	8009260 <Paint_DrawChar>
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	7c9b      	ldrb	r3, [r3, #18]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	3b1c      	subs	r3, #28
 800ca22:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5, 'W', &Font12,
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	7cdb      	ldrb	r3, [r3, #19]
 800ca28:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800ca2a:	3b05      	subs	r3, #5
 800ca2c:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	2393      	movs	r3, #147	; 0x93
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800ca36:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800ca38:	68f9      	ldr	r1, [r7, #12]
 800ca3a:	2226      	movs	r2, #38	; 0x26
 800ca3c:	32ff      	adds	r2, #255	; 0xff
 800ca3e:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800ca40:	b292      	uxth	r2, r2
 800ca42:	4939      	ldr	r1, [pc, #228]	; (800cb28 <interfaceDrawMain+0x878>)
 800ca44:	9201      	str	r2, [sp, #4]
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	000b      	movs	r3, r1
 800ca4a:	2257      	movs	r2, #87	; 0x57
 800ca4c:	0021      	movs	r1, r4
 800ca4e:	f7fc fc07 	bl	8009260 <Paint_DrawChar>
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	7c9b      	ldrb	r3, [r3, #18]
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	3314      	adds	r3, #20
 800ca5a:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5, 'E', &Font12,
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	7cdb      	ldrb	r3, [r3, #19]
 800ca60:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ca62:	3b05      	subs	r3, #5
 800ca64:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	2393      	movs	r3, #147	; 0x93
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ca6e:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800ca70:	68f9      	ldr	r1, [r7, #12]
 800ca72:	2226      	movs	r2, #38	; 0x26
 800ca74:	32ff      	adds	r2, #255	; 0xff
 800ca76:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ca78:	b292      	uxth	r2, r2
 800ca7a:	492b      	ldr	r1, [pc, #172]	; (800cb28 <interfaceDrawMain+0x878>)
 800ca7c:	9201      	str	r2, [sp, #4]
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	000b      	movs	r3, r1
 800ca82:	2245      	movs	r2, #69	; 0x45
 800ca84:	0021      	movs	r1, r4
 800ca86:	f7fc fbeb 	bl	8009260 <Paint_DrawChar>

		//alti value
		if (atmospherical->altitudeValue < 0) {
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	da4c      	bge.n	800cb2c <interfaceDrawMain+0x87c>
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	7c9b      	ldrb	r3, [r3, #18]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	3b0c      	subs	r3, #12
 800ca9a:	b298      	uxth	r0, r3
					interface->coordinatesCompass[Y] - 14, '-', &Font12,
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	7cdb      	ldrb	r3, [r3, #19]
 800caa0:	b29b      	uxth	r3, r3
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800caa2:	3b0e      	subs	r3, #14
 800caa4:	b29c      	uxth	r4, r3
					interface->colorForeground, interface->colorBackground);
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	2393      	movs	r3, #147	; 0x93
 800caaa:	005b      	lsls	r3, r3, #1
 800caac:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800caae:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800cab0:	68f9      	ldr	r1, [r7, #12]
 800cab2:	2226      	movs	r2, #38	; 0x26
 800cab4:	32ff      	adds	r2, #255	; 0xff
 800cab6:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800cab8:	b292      	uxth	r2, r2
 800caba:	491b      	ldr	r1, [pc, #108]	; (800cb28 <interfaceDrawMain+0x878>)
 800cabc:	9201      	str	r2, [sp, #4]
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	000b      	movs	r3, r1
 800cac2:	222d      	movs	r2, #45	; 0x2d
 800cac4:	0021      	movs	r1, r4
 800cac6:	f7fc fbcb 	bl	8009260 <Paint_DrawChar>
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	7c9b      	ldrb	r3, [r3, #18]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3b04      	subs	r3, #4
 800cad2:	b29c      	uxth	r4, r3
					interface->coordinatesCompass[Y] - 14,
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	7cdb      	ldrb	r3, [r3, #19]
 800cad8:	b29b      	uxth	r3, r3
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cada:	3b0e      	subs	r3, #14
 800cadc:	b29d      	uxth	r5, r3
					abs(atmospherical->altitudeValue / 100), &Font12,
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2164      	movs	r1, #100	; 0x64
 800cae4:	0018      	movs	r0, r3
 800cae6:	f7f3 fba1 	bl	800022c <__divsi3>
 800caea:	0003      	movs	r3, r0
 800caec:	17da      	asrs	r2, r3, #31
 800caee:	1898      	adds	r0, r3, r2
 800caf0:	4050      	eors	r0, r2
					interface->colorForeground, interface->colorBackground);
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	2393      	movs	r3, #147	; 0x93
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cafa:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800cafc:	68f9      	ldr	r1, [r7, #12]
 800cafe:	2226      	movs	r2, #38	; 0x26
 800cb00:	32ff      	adds	r2, #255	; 0xff
 800cb02:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cb04:	b292      	uxth	r2, r2
 800cb06:	4908      	ldr	r1, [pc, #32]	; (800cb28 <interfaceDrawMain+0x878>)
 800cb08:	9201      	str	r2, [sp, #4]
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	000b      	movs	r3, r1
 800cb0e:	0002      	movs	r2, r0
 800cb10:	0029      	movs	r1, r5
 800cb12:	0020      	movs	r0, r4
 800cb14:	f7fc fd06 	bl	8009524 <Paint_DrawNum>
 800cb18:	e02d      	b.n	800cb76 <interfaceDrawMain+0x8c6>
 800cb1a:	46c0      	nop			; (mov r8, r8)
 800cb1c:	20000028 	.word	0x20000028
 800cb20:	08011940 	.word	0x08011940
 800cb24:	08011948 	.word	0x08011948
 800cb28:	20000008 	.word	0x20000008
		} else {
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	7c9b      	ldrb	r3, [r3, #18]
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	3b0c      	subs	r3, #12
 800cb34:	b29c      	uxth	r4, r3
					interface->coordinatesCompass[Y] - 14,
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	7cdb      	ldrb	r3, [r3, #19]
 800cb3a:	b29b      	uxth	r3, r3
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cb3c:	3b0e      	subs	r3, #14
 800cb3e:	b29d      	uxth	r5, r3
					atmospherical->altitudeValue / 100, &Font12,
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	691b      	ldr	r3, [r3, #16]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cb44:	2164      	movs	r1, #100	; 0x64
 800cb46:	0018      	movs	r0, r3
 800cb48:	f7f3 fb70 	bl	800022c <__divsi3>
 800cb4c:	0003      	movs	r3, r0
 800cb4e:	0018      	movs	r0, r3
					interface->colorForeground, interface->colorBackground);
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	2393      	movs	r3, #147	; 0x93
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cb58:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	2226      	movs	r2, #38	; 0x26
 800cb5e:	32ff      	adds	r2, #255	; 0xff
 800cb60:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cb62:	b292      	uxth	r2, r2
 800cb64:	49e4      	ldr	r1, [pc, #912]	; (800cef8 <interfaceDrawMain+0xc48>)
 800cb66:	9201      	str	r2, [sp, #4]
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	000b      	movs	r3, r1
 800cb6c:	0002      	movs	r2, r0
 800cb6e:	0029      	movs	r1, r5
 800cb70:	0020      	movs	r0, r4
 800cb72:	f7fc fcd7 	bl	8009524 <Paint_DrawNum>
		}

		//compass pointers
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	7c9b      	ldrb	r3, [r3, #18]
 800cb7a:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y], magnetometer->compassAngleXY,
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cb80:	b299      	uxth	r1, r3
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	239e      	movs	r3, #158	; 0x9e
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	58d4      	ldr	r4, [r2, r3]
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	222c      	movs	r2, #44	; 0x2c
 800cb8e:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cb90:	b29d      	uxth	r5, r3
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	2393      	movs	r3, #147	; 0x93
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	9203      	str	r2, [sp, #12]
 800cba0:	2202      	movs	r2, #2
 800cba2:	9202      	str	r2, [sp, #8]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	2300      	movs	r3, #0
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	002b      	movs	r3, r5
 800cbac:	1c22      	adds	r2, r4, #0
 800cbae:	f7fb ff4f 	bl	8008a50 <Paint_DrawPointer>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	7c9b      	ldrb	r3, [r3, #18]
 800cbb6:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y],
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cbbc:	b29d      	uxth	r5, r3
				magnetometer->compassAngleXY + 3.14,
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	239e      	movs	r3, #158	; 0x9e
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	58d3      	ldr	r3, [r2, r3]
 800cbc6:	1c18      	adds	r0, r3, #0
 800cbc8:	f7f6 f93e 	bl	8002e48 <__aeabi_f2d>
 800cbcc:	4acb      	ldr	r2, [pc, #812]	; (800cefc <interfaceDrawMain+0xc4c>)
 800cbce:	4bcc      	ldr	r3, [pc, #816]	; (800cf00 <interfaceDrawMain+0xc50>)
 800cbd0:	f7f4 fb22 	bl	8001218 <__aeabi_dadd>
 800cbd4:	0002      	movs	r2, r0
 800cbd6:	000b      	movs	r3, r1
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cbd8:	0010      	movs	r0, r2
 800cbda:	0019      	movs	r1, r3
 800cbdc:	f7f6 f97c 	bl	8002ed8 <__aeabi_d2f>
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	222c      	movs	r2, #44	; 0x2c
 800cbe4:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cbe6:	b299      	uxth	r1, r3
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	2393      	movs	r3, #147	; 0x93
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	9203      	str	r2, [sp, #12]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	9202      	str	r2, [sp, #8]
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	000b      	movs	r3, r1
 800cc02:	1c02      	adds	r2, r0, #0
 800cc04:	0029      	movs	r1, r5
 800cc06:	0020      	movs	r0, r4
 800cc08:	f7fb ff22 	bl	8008a50 <Paint_DrawPointer>
				DOT_PIXEL_1X1, LINE_STYLE_SOLID);

		//dot
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	7c9b      	ldrb	r3, [r3, #18]
 800cc10:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y], 3, interface->colorForeground,
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800cc16:	b299      	uxth	r1, r3
				interface->coordinatesCompass[Y], 3, interface->colorForeground,
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	2393      	movs	r3, #147	; 0x93
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	2201      	movs	r2, #1
 800cc24:	9201      	str	r2, [sp, #4]
 800cc26:	2202      	movs	r2, #2
 800cc28:	9200      	str	r2, [sp, #0]
 800cc2a:	2203      	movs	r2, #3
 800cc2c:	f7fc f8c6 	bl	8008dbc <Paint_DrawCircle>
				DOT_PIXEL_2X2, DRAW_FILL_FULL);

	}

	//			CHRONO DECIMALS
	if (interface->coordinatesChronoDecimals[EN] == INTERFACE_ELEMENT_ENABLED) {
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	7a1b      	ldrb	r3, [r3, #8]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d000      	beq.n	800cc3a <interfaceDrawMain+0x98a>
 800cc38:	e0c1      	b.n	800cdbe <interfaceDrawMain+0xb0e>

		interfaceDrawDialer(interface->coordinatesChronoDecimals[X],
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	799d      	ldrb	r5, [r3, #6]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	79de      	ldrb	r6, [r3, #7]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2222      	movs	r2, #34	; 0x22
 800cc46:	5c9b      	ldrb	r3, [r3, r2]
 800cc48:	4698      	mov	r8, r3
				interface->coordinatesChronoDecimals[Y], interface->radiusSmall,
				chrono->chrono.hundredth / 10, 10,
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	7f9b      	ldrb	r3, [r3, #30]
 800cc4e:	b25b      	sxtb	r3, r3
		interfaceDrawDialer(interface->coordinatesChronoDecimals[X],
 800cc50:	210a      	movs	r1, #10
 800cc52:	0018      	movs	r0, r3
 800cc54:	f7f3 faea 	bl	800022c <__divsi3>
 800cc58:	0003      	movs	r3, r0
 800cc5a:	b25b      	sxtb	r3, r3
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	469c      	mov	ip, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2229      	movs	r2, #41	; 0x29
 800cc64:	5c9b      	ldrb	r3, [r3, r2]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	212d      	movs	r1, #45	; 0x2d
 800cc6a:	5c52      	ldrb	r2, [r2, r1]
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	2193      	movs	r1, #147	; 0x93
 800cc70:	0049      	lsls	r1, r1, #1
 800cc72:	5c41      	ldrb	r1, [r0, r1]
 800cc74:	68fc      	ldr	r4, [r7, #12]
 800cc76:	2026      	movs	r0, #38	; 0x26
 800cc78:	30ff      	adds	r0, #255	; 0xff
 800cc7a:	5c20      	ldrb	r0, [r4, r0]
 800cc7c:	9006      	str	r0, [sp, #24]
 800cc7e:	9105      	str	r1, [sp, #20]
 800cc80:	2100      	movs	r1, #0
 800cc82:	9104      	str	r1, [sp, #16]
 800cc84:	9203      	str	r2, [sp, #12]
 800cc86:	220a      	movs	r2, #10
 800cc88:	9202      	str	r2, [sp, #8]
 800cc8a:	9301      	str	r3, [sp, #4]
 800cc8c:	230a      	movs	r3, #10
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	4663      	mov	r3, ip
 800cc92:	4642      	mov	r2, r8
 800cc94:	0031      	movs	r1, r6
 800cc96:	0028      	movs	r0, r5
 800cc98:	f001 fb78 	bl	800e38c <interfaceDrawDialer>
//					LINE_STYLE_SOLID);
//
//		}

//digits
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	799b      	ldrb	r3, [r3, #6]
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	3b04      	subs	r3, #4
 800cca4:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] - 24, "0", &Font12,
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	79db      	ldrb	r3, [r3, #7]
 800ccaa:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800ccac:	3b18      	subs	r3, #24
 800ccae:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	2326      	movs	r3, #38	; 0x26
 800ccb4:	33ff      	adds	r3, #255	; 0xff
 800ccb6:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800ccb8:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800ccba:	68f9      	ldr	r1, [r7, #12]
 800ccbc:	2293      	movs	r2, #147	; 0x93
 800ccbe:	0052      	lsls	r2, r2, #1
 800ccc0:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	4d8c      	ldr	r5, [pc, #560]	; (800cef8 <interfaceDrawMain+0xc48>)
 800ccc6:	498f      	ldr	r1, [pc, #572]	; (800cf04 <interfaceDrawMain+0xc54>)
 800ccc8:	9201      	str	r2, [sp, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	002b      	movs	r3, r5
 800ccce:	000a      	movs	r2, r1
 800ccd0:	0021      	movs	r1, r4
 800ccd2:	f7fc fba9 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	799b      	ldrb	r3, [r3, #6]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	330c      	adds	r3, #12
 800ccde:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] - 12, "2", &Font12,
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	79db      	ldrb	r3, [r3, #7]
 800cce4:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800cce6:	3b0c      	subs	r3, #12
 800cce8:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	2326      	movs	r3, #38	; 0x26
 800ccee:	33ff      	adds	r3, #255	; 0xff
 800ccf0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800ccf2:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800ccf4:	68f9      	ldr	r1, [r7, #12]
 800ccf6:	2293      	movs	r2, #147	; 0x93
 800ccf8:	0052      	lsls	r2, r2, #1
 800ccfa:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800ccfc:	b292      	uxth	r2, r2
 800ccfe:	4d7e      	ldr	r5, [pc, #504]	; (800cef8 <interfaceDrawMain+0xc48>)
 800cd00:	4981      	ldr	r1, [pc, #516]	; (800cf08 <interfaceDrawMain+0xc58>)
 800cd02:	9201      	str	r2, [sp, #4]
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	002b      	movs	r3, r5
 800cd08:	000a      	movs	r2, r1
 800cd0a:	0021      	movs	r1, r4
 800cd0c:	f7fc fb8c 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	799b      	ldrb	r3, [r3, #6]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3306      	adds	r3, #6
 800cd18:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] + 6, "4", &Font12,
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	79db      	ldrb	r3, [r3, #7]
 800cd1e:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800cd20:	3306      	adds	r3, #6
 800cd22:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	2326      	movs	r3, #38	; 0x26
 800cd28:	33ff      	adds	r3, #255	; 0xff
 800cd2a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800cd2c:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800cd2e:	68f9      	ldr	r1, [r7, #12]
 800cd30:	2293      	movs	r2, #147	; 0x93
 800cd32:	0052      	lsls	r2, r2, #1
 800cd34:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800cd36:	b292      	uxth	r2, r2
 800cd38:	4d6f      	ldr	r5, [pc, #444]	; (800cef8 <interfaceDrawMain+0xc48>)
 800cd3a:	4974      	ldr	r1, [pc, #464]	; (800cf0c <interfaceDrawMain+0xc5c>)
 800cd3c:	9201      	str	r2, [sp, #4]
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	002b      	movs	r3, r5
 800cd42:	000a      	movs	r2, r1
 800cd44:	0021      	movs	r1, r4
 800cd46:	f7fc fb6f 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	799b      	ldrb	r3, [r3, #6]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	3b0e      	subs	r3, #14
 800cd52:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] + 6, "6", &Font12,
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	79db      	ldrb	r3, [r3, #7]
 800cd58:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800cd5a:	3306      	adds	r3, #6
 800cd5c:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	2326      	movs	r3, #38	; 0x26
 800cd62:	33ff      	adds	r3, #255	; 0xff
 800cd64:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800cd66:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800cd68:	68f9      	ldr	r1, [r7, #12]
 800cd6a:	2293      	movs	r2, #147	; 0x93
 800cd6c:	0052      	lsls	r2, r2, #1
 800cd6e:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800cd70:	b292      	uxth	r2, r2
 800cd72:	4d61      	ldr	r5, [pc, #388]	; (800cef8 <interfaceDrawMain+0xc48>)
 800cd74:	4966      	ldr	r1, [pc, #408]	; (800cf10 <interfaceDrawMain+0xc60>)
 800cd76:	9201      	str	r2, [sp, #4]
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	002b      	movs	r3, r5
 800cd7c:	000a      	movs	r2, r1
 800cd7e:	0021      	movs	r1, r4
 800cd80:	f7fc fb52 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	799b      	ldrb	r3, [r3, #6]
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	3b12      	subs	r3, #18
 800cd8c:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] - 12, "8", &Font12,
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	79db      	ldrb	r3, [r3, #7]
 800cd92:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800cd94:	3b0c      	subs	r3, #12
 800cd96:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	2326      	movs	r3, #38	; 0x26
 800cd9c:	33ff      	adds	r3, #255	; 0xff
 800cd9e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800cda0:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	2293      	movs	r2, #147	; 0x93
 800cda6:	0052      	lsls	r2, r2, #1
 800cda8:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800cdaa:	b292      	uxth	r2, r2
 800cdac:	4d52      	ldr	r5, [pc, #328]	; (800cef8 <interfaceDrawMain+0xc48>)
 800cdae:	4959      	ldr	r1, [pc, #356]	; (800cf14 <interfaceDrawMain+0xc64>)
 800cdb0:	9201      	str	r2, [sp, #4]
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	002b      	movs	r3, r5
 800cdb6:	000a      	movs	r2, r1
 800cdb8:	0021      	movs	r1, r4
 800cdba:	f7fc fb35 	bl	8009428 <Paint_DrawString_EN>
//				interface->colorBackground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
	}

	//			CHRONO MINUTES

	if (interface->coordinatesChronoMinutes[EN] == INTERFACE_ELEMENT_ENABLED) {
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	795b      	ldrb	r3, [r3, #5]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d000      	beq.n	800cdc8 <interfaceDrawMain+0xb18>
 800cdc6:	e0d7      	b.n	800cf78 <interfaceDrawMain+0xcc8>

		interfaceDrawDialer(interface->coordinatesChronoMinutes[X],
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	78dd      	ldrb	r5, [r3, #3]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	791e      	ldrb	r6, [r3, #4]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2222      	movs	r2, #34	; 0x22
 800cdd4:	5c9b      	ldrb	r3, [r3, r2]
 800cdd6:	469c      	mov	ip, r3
				interface->coordinatesChronoMinutes[Y], interface->radiusSmall,
				chrono->chrono.minute, 30,
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	7f1b      	ldrb	r3, [r3, #28]
 800cddc:	b25b      	sxtb	r3, r3
		interfaceDrawDialer(interface->coordinatesChronoMinutes[X],
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	4698      	mov	r8, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2228      	movs	r2, #40	; 0x28
 800cde6:	5c9b      	ldrb	r3, [r3, r2]
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	212e      	movs	r1, #46	; 0x2e
 800cdec:	5c52      	ldrb	r2, [r2, r1]
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	2193      	movs	r1, #147	; 0x93
 800cdf2:	0049      	lsls	r1, r1, #1
 800cdf4:	5c41      	ldrb	r1, [r0, r1]
 800cdf6:	68fc      	ldr	r4, [r7, #12]
 800cdf8:	2026      	movs	r0, #38	; 0x26
 800cdfa:	30ff      	adds	r0, #255	; 0xff
 800cdfc:	5c20      	ldrb	r0, [r4, r0]
 800cdfe:	9006      	str	r0, [sp, #24]
 800ce00:	9105      	str	r1, [sp, #20]
 800ce02:	2105      	movs	r1, #5
 800ce04:	9104      	str	r1, [sp, #16]
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	221e      	movs	r2, #30
 800ce0a:	9202      	str	r2, [sp, #8]
 800ce0c:	9301      	str	r3, [sp, #4]
 800ce0e:	231e      	movs	r3, #30
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	4643      	mov	r3, r8
 800ce14:	4662      	mov	r2, ip
 800ce16:	0031      	movs	r1, r6
 800ce18:	0028      	movs	r0, r5
 800ce1a:	f001 fab7 	bl	800e38c <interfaceDrawDialer>
				interface->pointerLengthChronoMinutes, 30,
				interface->indexLengthChronoMinutes, 5,
				interface->colorForeground, interface->colorBackground);

//digits
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	78db      	ldrb	r3, [r3, #3]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	3b08      	subs	r3, #8
 800ce26:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y] - 20, "30", &Font12,
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	791b      	ldrb	r3, [r3, #4]
 800ce2c:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800ce2e:	3b14      	subs	r3, #20
 800ce30:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	2326      	movs	r3, #38	; 0x26
 800ce36:	33ff      	adds	r3, #255	; 0xff
 800ce38:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800ce3a:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800ce3c:	68f9      	ldr	r1, [r7, #12]
 800ce3e:	2293      	movs	r2, #147	; 0x93
 800ce40:	0052      	lsls	r2, r2, #1
 800ce42:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800ce44:	b292      	uxth	r2, r2
 800ce46:	4d2c      	ldr	r5, [pc, #176]	; (800cef8 <interfaceDrawMain+0xc48>)
 800ce48:	4933      	ldr	r1, [pc, #204]	; (800cf18 <interfaceDrawMain+0xc68>)
 800ce4a:	9201      	str	r2, [sp, #4]
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	002b      	movs	r3, r5
 800ce50:	000a      	movs	r2, r1
 800ce52:	0021      	movs	r1, r4
 800ce54:	f7fc fae8 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	78db      	ldrb	r3, [r3, #3]
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3302      	adds	r3, #2
 800ce60:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y] + 2, "10", &Font12,
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	791b      	ldrb	r3, [r3, #4]
 800ce66:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800ce68:	3302      	adds	r3, #2
 800ce6a:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	2326      	movs	r3, #38	; 0x26
 800ce70:	33ff      	adds	r3, #255	; 0xff
 800ce72:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800ce74:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800ce76:	68f9      	ldr	r1, [r7, #12]
 800ce78:	2293      	movs	r2, #147	; 0x93
 800ce7a:	0052      	lsls	r2, r2, #1
 800ce7c:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800ce7e:	b292      	uxth	r2, r2
 800ce80:	4d1d      	ldr	r5, [pc, #116]	; (800cef8 <interfaceDrawMain+0xc48>)
 800ce82:	4926      	ldr	r1, [pc, #152]	; (800cf1c <interfaceDrawMain+0xc6c>)
 800ce84:	9201      	str	r2, [sp, #4]
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	002b      	movs	r3, r5
 800ce8a:	000a      	movs	r2, r1
 800ce8c:	0021      	movs	r1, r4
 800ce8e:	f7fc facb 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	78db      	ldrb	r3, [r3, #3]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	3b12      	subs	r3, #18
 800ce9a:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y] + 2, "20", &Font12,
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	791b      	ldrb	r3, [r3, #4]
 800cea0:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800cea2:	3302      	adds	r3, #2
 800cea4:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	2326      	movs	r3, #38	; 0x26
 800ceaa:	33ff      	adds	r3, #255	; 0xff
 800ceac:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800ceae:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800ceb0:	68f9      	ldr	r1, [r7, #12]
 800ceb2:	2293      	movs	r2, #147	; 0x93
 800ceb4:	0052      	lsls	r2, r2, #1
 800ceb6:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800ceb8:	b292      	uxth	r2, r2
 800ceba:	4d0f      	ldr	r5, [pc, #60]	; (800cef8 <interfaceDrawMain+0xc48>)
 800cebc:	4918      	ldr	r1, [pc, #96]	; (800cf20 <interfaceDrawMain+0xc70>)
 800cebe:	9201      	str	r2, [sp, #4]
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	002b      	movs	r3, r5
 800cec4:	000a      	movs	r2, r1
 800cec6:	0021      	movs	r1, r4
 800cec8:	f7fc faae 	bl	8009428 <Paint_DrawString_EN>


//half hours dots
		for (uint8_t halfHours = (chrono->chrono.hour * 2)
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	7edb      	ldrb	r3, [r3, #27]
 800ced0:	b25b      	sxtb	r3, r3
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	18db      	adds	r3, r3, r3
 800ced6:	b2dc      	uxtb	r4, r3
				+ (chrono->chrono.minute / 30); halfHours > 0; halfHours--) {
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	7f1b      	ldrb	r3, [r3, #28]
 800cedc:	b25b      	sxtb	r3, r3
 800cede:	211e      	movs	r1, #30
 800cee0:	0018      	movs	r0, r3
 800cee2:	f7f3 f9a3 	bl	800022c <__divsi3>
 800cee6:	0003      	movs	r3, r0
 800cee8:	b25b      	sxtb	r3, r3
 800ceea:	b2da      	uxtb	r2, r3
		for (uint8_t halfHours = (chrono->chrono.hour * 2)
 800ceec:	2326      	movs	r3, #38	; 0x26
 800ceee:	18fb      	adds	r3, r7, r3
 800cef0:	18a2      	adds	r2, r4, r2
 800cef2:	701a      	strb	r2, [r3, #0]
 800cef4:	e03b      	b.n	800cf6e <interfaceDrawMain+0xcbe>
 800cef6:	46c0      	nop			; (mov r8, r8)
 800cef8:	20000008 	.word	0x20000008
 800cefc:	51eb851f 	.word	0x51eb851f
 800cf00:	40091eb8 	.word	0x40091eb8
 800cf04:	0801194c 	.word	0x0801194c
 800cf08:	08011950 	.word	0x08011950
 800cf0c:	08011954 	.word	0x08011954
 800cf10:	08011958 	.word	0x08011958
 800cf14:	0801195c 	.word	0x0801195c
 800cf18:	08011960 	.word	0x08011960
 800cf1c:	08011964 	.word	0x08011964
 800cf20:	08011968 	.word	0x08011968
			Paint_DrawPoint(
					interface->coordinatesChronoMinutes[X]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	78db      	ldrb	r3, [r3, #3]
 800cf28:	b29a      	uxth	r2, r3
							- interface->pointerLengthChronoMinutes
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2128      	movs	r1, #40	; 0x28
 800cf2e:	5c5b      	ldrb	r3, [r3, r1]
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	b29a      	uxth	r2, r3
			Paint_DrawPoint(
 800cf36:	2426      	movs	r4, #38	; 0x26
 800cf38:	193b      	adds	r3, r7, r4
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	18d3      	adds	r3, r2, r3
 800cf44:	b298      	uxth	r0, r3
							+ (halfHours * 4),
					interface->coordinatesChronoMinutes[Y] - 5,
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	791b      	ldrb	r3, [r3, #4]
 800cf4a:	b29b      	uxth	r3, r3
			Paint_DrawPoint(
 800cf4c:	3b05      	subs	r3, #5
 800cf4e:	b299      	uxth	r1, r3
					interface->colorBackground, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	2326      	movs	r3, #38	; 0x26
 800cf54:	33ff      	adds	r3, #255	; 0xff
 800cf56:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawPoint(
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	2302      	movs	r3, #2
 800cf60:	f7fb fbae 	bl	80086c0 <Paint_DrawPoint>
				+ (chrono->chrono.minute / 30); halfHours > 0; halfHours--) {
 800cf64:	193b      	adds	r3, r7, r4
 800cf66:	781a      	ldrb	r2, [r3, #0]
 800cf68:	193b      	adds	r3, r7, r4
 800cf6a:	3a01      	subs	r2, #1
 800cf6c:	701a      	strb	r2, [r3, #0]
		for (uint8_t halfHours = (chrono->chrono.hour * 2)
 800cf6e:	2326      	movs	r3, #38	; 0x26
 800cf70:	18fb      	adds	r3, r7, r3
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1d5      	bne.n	800cf24 <interfaceDrawMain+0xc74>
		};

	}

	//			DATE
	if (interface->coordinatesDate[EN] == INTERFACE_ELEMENT_ENABLED) {
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	7ddb      	ldrb	r3, [r3, #23]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d13d      	bne.n	800cffc <interfaceDrawMain+0xd4c>

		//window
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	7d5b      	ldrb	r3, [r3, #21]
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	3b01      	subs	r3, #1
 800cf88:	b298      	uxth	r0, r3
				interface->coordinatesDate[Y] - 3,
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	7d9b      	ldrb	r3, [r3, #22]
 800cf8e:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800cf90:	3b03      	subs	r3, #3
 800cf92:	b299      	uxth	r1, r3
				interface->coordinatesDate[X] + 24,
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	7d5b      	ldrb	r3, [r3, #21]
 800cf98:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	b29c      	uxth	r4, r3
				interface->coordinatesDate[Y] + 18, interface->colorForeground,
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	7d9b      	ldrb	r3, [r3, #22]
 800cfa2:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800cfa4:	3312      	adds	r3, #18
 800cfa6:	b29d      	uxth	r5, r3
				interface->coordinatesDate[Y] + 18, interface->colorForeground,
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	2393      	movs	r3, #147	; 0x93
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	9202      	str	r2, [sp, #8]
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	9201      	str	r2, [sp, #4]
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	002b      	movs	r3, r5
 800cfbe:	0022      	movs	r2, r4
 800cfc0:	f7fb fe30 	bl	8008c24 <Paint_DrawRectangle>
				DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window

		//value
		Paint_DrawNum(interface->coordinatesDate[X],
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	7d5b      	ldrb	r3, [r3, #21]
 800cfc8:	b298      	uxth	r0, r3
				interface->coordinatesDate[Y], chrono->actual.day, &Font16,
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawNum(interface->coordinatesDate[X],
 800cfce:	b29c      	uxth	r4, r3
				interface->coordinatesDate[Y], chrono->actual.day, &Font16,
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	789b      	ldrb	r3, [r3, #2]
 800cfd4:	b25b      	sxtb	r3, r3
		Paint_DrawNum(interface->coordinatesDate[X],
 800cfd6:	001d      	movs	r5, r3
				interface->colorForeground, interface->colorBackground); //date
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	2393      	movs	r3, #147	; 0x93
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesDate[X],
 800cfe0:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground); //date
 800cfe2:	68f9      	ldr	r1, [r7, #12]
 800cfe4:	2226      	movs	r2, #38	; 0x26
 800cfe6:	32ff      	adds	r2, #255	; 0xff
 800cfe8:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesDate[X],
 800cfea:	b292      	uxth	r2, r2
 800cfec:	49e9      	ldr	r1, [pc, #932]	; (800d394 <interfaceDrawMain+0x10e4>)
 800cfee:	9201      	str	r2, [sp, #4]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	000b      	movs	r3, r1
 800cff4:	002a      	movs	r2, r5
 800cff6:	0021      	movs	r1, r4
 800cff8:	f7fc fa94 	bl	8009524 <Paint_DrawNum>

	}

	//			BAROMETER
	if (interface->coordinatesPressure[EN] == INTERFACE_ELEMENT_ENABLED) {
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	7c5b      	ldrb	r3, [r3, #17]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d000      	beq.n	800d006 <interfaceDrawMain+0xd56>
 800d004:	e0e6      	b.n	800d1d4 <interfaceDrawMain+0xf24>

		//indexes
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	7bdb      	ldrb	r3, [r3, #15]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	334d      	adds	r3, #77	; 0x4d
 800d00e:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 2, 975, &Font8,
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	7c1b      	ldrb	r3, [r3, #16]
 800d014:	b29b      	uxth	r3, r3
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800d016:	3302      	adds	r3, #2
 800d018:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	2393      	movs	r3, #147	; 0x93
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800d022:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800d024:	68f9      	ldr	r1, [r7, #12]
 800d026:	2226      	movs	r2, #38	; 0x26
 800d028:	32ff      	adds	r2, #255	; 0xff
 800d02a:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800d02c:	b292      	uxth	r2, r2
 800d02e:	49da      	ldr	r1, [pc, #872]	; (800d398 <interfaceDrawMain+0x10e8>)
 800d030:	4dda      	ldr	r5, [pc, #872]	; (800d39c <interfaceDrawMain+0x10ec>)
 800d032:	9201      	str	r2, [sp, #4]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	000b      	movs	r3, r1
 800d038:	002a      	movs	r2, r5
 800d03a:	0021      	movs	r1, r4
 800d03c:	f7fc fa72 	bl	8009524 <Paint_DrawNum>
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	7bdb      	ldrb	r3, [r3, #15]
 800d044:	b29b      	uxth	r3, r3
 800d046:	334d      	adds	r3, #77	; 0x4d
 800d048:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 11, "hPa", &Font8,
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	7c1b      	ldrb	r3, [r3, #16]
 800d04e:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800d050:	330b      	adds	r3, #11
 800d052:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	2393      	movs	r3, #147	; 0x93
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800d05c:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800d05e:	68f9      	ldr	r1, [r7, #12]
 800d060:	2226      	movs	r2, #38	; 0x26
 800d062:	32ff      	adds	r2, #255	; 0xff
 800d064:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800d066:	b292      	uxth	r2, r2
 800d068:	4dcb      	ldr	r5, [pc, #812]	; (800d398 <interfaceDrawMain+0x10e8>)
 800d06a:	49cd      	ldr	r1, [pc, #820]	; (800d3a0 <interfaceDrawMain+0x10f0>)
 800d06c:	9201      	str	r2, [sp, #4]
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	002b      	movs	r3, r5
 800d072:	000a      	movs	r2, r1
 800d074:	0021      	movs	r1, r4
 800d076:	f7fc f9d7 	bl	8009428 <Paint_DrawString_EN>
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	7bdb      	ldrb	r3, [r3, #15]
 800d07e:	b29b      	uxth	r3, r3
 800d080:	3302      	adds	r3, #2
 800d082:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 85, 1000, &Font8,
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	7c1b      	ldrb	r3, [r3, #16]
 800d088:	b29b      	uxth	r3, r3
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800d08a:	3355      	adds	r3, #85	; 0x55
 800d08c:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	2393      	movs	r3, #147	; 0x93
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800d096:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800d098:	68f9      	ldr	r1, [r7, #12]
 800d09a:	2226      	movs	r2, #38	; 0x26
 800d09c:	32ff      	adds	r2, #255	; 0xff
 800d09e:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800d0a0:	b292      	uxth	r2, r2
 800d0a2:	4dbd      	ldr	r5, [pc, #756]	; (800d398 <interfaceDrawMain+0x10e8>)
 800d0a4:	21fa      	movs	r1, #250	; 0xfa
 800d0a6:	0089      	lsls	r1, r1, #2
 800d0a8:	9201      	str	r2, [sp, #4]
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	002b      	movs	r3, r5
 800d0ae:	000a      	movs	r2, r1
 800d0b0:	0021      	movs	r1, r4
 800d0b2:	f7fc fa37 	bl	8009524 <Paint_DrawNum>
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	7bdb      	ldrb	r3, [r3, #15]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	3b5f      	subs	r3, #95	; 0x5f
 800d0be:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 2, 1025, &Font8,
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	7c1b      	ldrb	r3, [r3, #16]
 800d0c4:	b29b      	uxth	r3, r3
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800d0c6:	3302      	adds	r3, #2
 800d0c8:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	2393      	movs	r3, #147	; 0x93
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800d0d2:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800d0d4:	68f9      	ldr	r1, [r7, #12]
 800d0d6:	2226      	movs	r2, #38	; 0x26
 800d0d8:	32ff      	adds	r2, #255	; 0xff
 800d0da:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800d0dc:	b292      	uxth	r2, r2
 800d0de:	49ae      	ldr	r1, [pc, #696]	; (800d398 <interfaceDrawMain+0x10e8>)
 800d0e0:	4db0      	ldr	r5, [pc, #704]	; (800d3a4 <interfaceDrawMain+0x10f4>)
 800d0e2:	9201      	str	r2, [sp, #4]
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	000b      	movs	r3, r1
 800d0e8:	002a      	movs	r2, r5
 800d0ea:	0021      	movs	r1, r4
 800d0ec:	f7fc fa1a 	bl	8009524 <Paint_DrawNum>

		//pointer
		interface->pointerAnglePressure = 2 * 3.14 / 100
				* ((int32_t) atmospherical->pressureValue / 100 - 950 - 25);
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	2164      	movs	r1, #100	; 0x64
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f7f3 f898 	bl	800022c <__divsi3>
 800d0fc:	0003      	movs	r3, r0
 800d0fe:	4aaa      	ldr	r2, [pc, #680]	; (800d3a8 <interfaceDrawMain+0x10f8>)
 800d100:	4694      	mov	ip, r2
 800d102:	4463      	add	r3, ip
 800d104:	0018      	movs	r0, r3
 800d106:	f7f5 fe49 	bl	8002d9c <__aeabi_i2d>
 800d10a:	4aa8      	ldr	r2, [pc, #672]	; (800d3ac <interfaceDrawMain+0x10fc>)
 800d10c:	4ba8      	ldr	r3, [pc, #672]	; (800d3b0 <interfaceDrawMain+0x1100>)
 800d10e:	f7f4 fff3 	bl	80020f8 <__aeabi_dmul>
 800d112:	0002      	movs	r2, r0
 800d114:	000b      	movs	r3, r1
 800d116:	0010      	movs	r0, r2
 800d118:	0019      	movs	r1, r3
 800d11a:	f7f5 fedd 	bl	8002ed8 <__aeabi_d2f>
 800d11e:	1c02      	adds	r2, r0, #0
		interface->pointerAnglePressure = 2 * 3.14 / 100
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	651a      	str	r2, [r3, #80]	; 0x50

		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	7bdb      	ldrb	r3, [r3, #15]
 800d128:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y],
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	7c1b      	ldrb	r3, [r3, #16]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d12e:	b29c      	uxth	r4, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6d1d      	ldr	r5, [r3, #80]	; 0x50
				interface->pointerAnglePressure,
				interface->pointerLengthPressure,
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	222b      	movs	r2, #43	; 0x2b
 800d138:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d13a:	b29e      	uxth	r6, r3
				interface->pointerShiftPressure, interface->colorForeground,
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2230      	movs	r2, #48	; 0x30
 800d140:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d142:	b29b      	uxth	r3, r3
				interface->pointerShiftPressure, interface->colorForeground,
 800d144:	68f9      	ldr	r1, [r7, #12]
 800d146:	2293      	movs	r2, #147	; 0x93
 800d148:	0052      	lsls	r2, r2, #1
 800d14a:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d14c:	b292      	uxth	r2, r2
 800d14e:	2100      	movs	r1, #0
 800d150:	9103      	str	r1, [sp, #12]
 800d152:	2103      	movs	r1, #3
 800d154:	9102      	str	r1, [sp, #8]
 800d156:	9201      	str	r2, [sp, #4]
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	0033      	movs	r3, r6
 800d15c:	1c2a      	adds	r2, r5, #0
 800d15e:	0021      	movs	r1, r4
 800d160:	f7fb fc76 	bl	8008a50 <Paint_DrawPointer>
				DOT_PIXEL_3X3, LINE_STYLE_SOLID);

		//past pressure pointer

		interface->pointerAnglePressure = 2 * 3.14 / 100
				* ((int32_t) forecast->pastPressureReadings[20] - 950 - 25);
 800d164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d166:	22b0      	movs	r2, #176	; 0xb0
 800d168:	589b      	ldr	r3, [r3, r2]
 800d16a:	4a8f      	ldr	r2, [pc, #572]	; (800d3a8 <interfaceDrawMain+0x10f8>)
 800d16c:	4694      	mov	ip, r2
 800d16e:	4463      	add	r3, ip
 800d170:	0018      	movs	r0, r3
 800d172:	f7f5 fe13 	bl	8002d9c <__aeabi_i2d>
 800d176:	4a8d      	ldr	r2, [pc, #564]	; (800d3ac <interfaceDrawMain+0x10fc>)
 800d178:	4b8d      	ldr	r3, [pc, #564]	; (800d3b0 <interfaceDrawMain+0x1100>)
 800d17a:	f7f4 ffbd 	bl	80020f8 <__aeabi_dmul>
 800d17e:	0002      	movs	r2, r0
 800d180:	000b      	movs	r3, r1
 800d182:	0010      	movs	r0, r2
 800d184:	0019      	movs	r1, r3
 800d186:	f7f5 fea7 	bl	8002ed8 <__aeabi_d2f>
 800d18a:	1c02      	adds	r2, r0, #0
		interface->pointerAnglePressure = 2 * 3.14 / 100
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	651a      	str	r2, [r3, #80]	; 0x50

		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	7bdb      	ldrb	r3, [r3, #15]
 800d194:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y],
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	7c1b      	ldrb	r3, [r3, #16]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d19a:	b29c      	uxth	r4, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
				interface->pointerAnglePressure,
				interface->pointerLengthPressure,
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	222b      	movs	r2, #43	; 0x2b
 800d1a4:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d1a6:	b29e      	uxth	r6, r3
				interface->pointerShiftPressure + 5, interface->colorForeground,
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2230      	movs	r2, #48	; 0x30
 800d1ac:	5c9b      	ldrb	r3, [r3, r2]
 800d1ae:	b29b      	uxth	r3, r3
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d1b0:	3305      	adds	r3, #5
 800d1b2:	b29b      	uxth	r3, r3
				interface->pointerShiftPressure + 5, interface->colorForeground,
 800d1b4:	68f9      	ldr	r1, [r7, #12]
 800d1b6:	2293      	movs	r2, #147	; 0x93
 800d1b8:	0052      	lsls	r2, r2, #1
 800d1ba:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800d1bc:	b292      	uxth	r2, r2
 800d1be:	2100      	movs	r1, #0
 800d1c0:	9103      	str	r1, [sp, #12]
 800d1c2:	2102      	movs	r1, #2
 800d1c4:	9102      	str	r1, [sp, #8]
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	0033      	movs	r3, r6
 800d1cc:	1c2a      	adds	r2, r5, #0
 800d1ce:	0021      	movs	r1, r4
 800d1d0:	f7fb fc3e 	bl	8008a50 <Paint_DrawPointer>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID);
	}

	//			forecast
	if (interface->coordinatesForecast[EN] == INTERFACE_ELEMENT_ENABLED) {
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2220      	movs	r2, #32
 800d1d8:	5c9b      	ldrb	r3, [r3, r2]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d155      	bne.n	800d28a <interfaceDrawMain+0xfda>

		int8_t cloudyRange = 4; //difference is 3 more or less than 0 for medium weather
 800d1de:	2417      	movs	r4, #23
 800d1e0:	193b      	adds	r3, r7, r4
 800d1e2:	2204      	movs	r2, #4
 800d1e4:	701a      	strb	r2, [r3, #0]

		int16_t pressureDifference = atmospherical->pressureValue / 100
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	2164      	movs	r1, #100	; 0x64
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f7f2 ff93 	bl	8000118 <__udivsi3>
 800d1f2:	0003      	movs	r3, r0
				- forecast->pastPressureReadings[20];
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1f8:	21b0      	movs	r1, #176	; 0xb0
 800d1fa:	585b      	ldr	r3, [r3, r1]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	b29a      	uxth	r2, r3
		int16_t pressureDifference = atmospherical->pressureValue / 100
 800d202:	2114      	movs	r1, #20
 800d204:	187b      	adds	r3, r7, r1
 800d206:	801a      	strh	r2, [r3, #0]

		if (pressureDifference < (0 - (cloudyRange / 2))) { //rainy
 800d208:	187b      	adds	r3, r7, r1
 800d20a:	2200      	movs	r2, #0
 800d20c:	5e9a      	ldrsh	r2, [r3, r2]
 800d20e:	193b      	adds	r3, r7, r4
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	b25b      	sxtb	r3, r3
 800d214:	2b00      	cmp	r3, #0
 800d216:	da00      	bge.n	800d21a <interfaceDrawMain+0xf6a>
 800d218:	3301      	adds	r3, #1
 800d21a:	105b      	asrs	r3, r3, #1
 800d21c:	b25b      	sxtb	r3, r3
 800d21e:	425b      	negs	r3, r3
 800d220:	429a      	cmp	r2, r3
 800d222:	da0b      	bge.n	800d23c <interfaceDrawMain+0xf8c>

			interfaceDrawIcon(interface->coordinatesForecast[X],
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	7f98      	ldrb	r0, [r3, #30]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	7fd9      	ldrb	r1, [r3, #31]
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	2393      	movs	r3, #147	; 0x93
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	5cd2      	ldrb	r2, [r2, r3]
 800d234:	2302      	movs	r3, #2
 800d236:	f000 fdcf 	bl	800ddd8 <interfaceDrawIcon>
 800d23a:	e026      	b.n	800d28a <interfaceDrawMain+0xfda>
					interface->coordinatesForecast[Y],
					interface->colorForeground, INTERFACE_ICON_RAIN);

		} else if (pressureDifference > (cloudyRange / 2)) { //sunny
 800d23c:	2317      	movs	r3, #23
 800d23e:	18fb      	adds	r3, r7, r3
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	b25b      	sxtb	r3, r3
 800d244:	2b00      	cmp	r3, #0
 800d246:	da00      	bge.n	800d24a <interfaceDrawMain+0xf9a>
 800d248:	3301      	adds	r3, #1
 800d24a:	105b      	asrs	r3, r3, #1
 800d24c:	b25b      	sxtb	r3, r3
 800d24e:	b21b      	sxth	r3, r3
 800d250:	2214      	movs	r2, #20
 800d252:	18ba      	adds	r2, r7, r2
 800d254:	2100      	movs	r1, #0
 800d256:	5e52      	ldrsh	r2, [r2, r1]
 800d258:	429a      	cmp	r2, r3
 800d25a:	dd0b      	ble.n	800d274 <interfaceDrawMain+0xfc4>

			interfaceDrawIcon(interface->coordinatesForecast[X],
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	7f98      	ldrb	r0, [r3, #30]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	7fd9      	ldrb	r1, [r3, #31]
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	2393      	movs	r3, #147	; 0x93
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	5cd2      	ldrb	r2, [r2, r3]
 800d26c:	2303      	movs	r3, #3
 800d26e:	f000 fdb3 	bl	800ddd8 <interfaceDrawIcon>
 800d272:	e00a      	b.n	800d28a <interfaceDrawMain+0xfda>
					interface->coordinatesForecast[Y],
					interface->colorForeground, INTERFACE_ICON_SUN);

		} else { //cloudy

			interfaceDrawIcon(interface->coordinatesForecast[X],
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	7f98      	ldrb	r0, [r3, #30]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	7fd9      	ldrb	r1, [r3, #31]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	2393      	movs	r3, #147	; 0x93
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	5cd2      	ldrb	r2, [r2, r3]
 800d284:	2301      	movs	r3, #1
 800d286:	f000 fda7 	bl	800ddd8 <interfaceDrawIcon>
		}

	}

	//			LOW BATTERY INDICATOR
	if (interface->coordinatesBatteryState[EN] == INTERFACE_ELEMENT_ENABLED) {
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	7e9b      	ldrb	r3, [r3, #26]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d11c      	bne.n	800d2cc <interfaceDrawMain+0x101c>

		if (watch->flagLowBattery) {
 800d292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d294:	791b      	ldrb	r3, [r3, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d018      	beq.n	800d2cc <interfaceDrawMain+0x101c>
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	7e1b      	ldrb	r3, [r3, #24]
 800d29e:	b298      	uxth	r0, r3
					interface->coordinatesBatteryState[Y], "LOW BATT", &Font8,
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	7e5b      	ldrb	r3, [r3, #25]
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800d2a4:	b29c      	uxth	r4, r3
					interface->colorForeground, interface->colorBackground);
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	2393      	movs	r3, #147	; 0x93
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800d2ae:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800d2b0:	68f9      	ldr	r1, [r7, #12]
 800d2b2:	2226      	movs	r2, #38	; 0x26
 800d2b4:	32ff      	adds	r2, #255	; 0xff
 800d2b6:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800d2b8:	b292      	uxth	r2, r2
 800d2ba:	4d37      	ldr	r5, [pc, #220]	; (800d398 <interfaceDrawMain+0x10e8>)
 800d2bc:	493d      	ldr	r1, [pc, #244]	; (800d3b4 <interfaceDrawMain+0x1104>)
 800d2be:	9201      	str	r2, [sp, #4]
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	002b      	movs	r3, r5
 800d2c4:	000a      	movs	r2, r1
 800d2c6:	0021      	movs	r1, r4
 800d2c8:	f7fc f8ae 	bl	8009428 <Paint_DrawString_EN>

	}

	//			MAIN BOARD
	//circle
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->radiusMain,
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d2d6:	b299      	uxth	r1, r3
			interface->coordinatesMain[Y], interface->radiusMain,
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2221      	movs	r2, #33	; 0x21
 800d2dc:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d2de:	b29c      	uxth	r4, r3
			interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	2393      	movs	r3, #147	; 0x93
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	9201      	str	r2, [sp, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	9200      	str	r2, [sp, #0]
 800d2f2:	0022      	movs	r2, r4
 800d2f4:	f7fb fd62 	bl	8008dbc <Paint_DrawCircle>

	//indexes - count angles

	uint8_t numberOfIndexesMain = sizeof(interface->indexAngleMain)
 800d2f8:	2313      	movs	r3, #19
 800d2fa:	18fb      	adds	r3, r7, r3
 800d2fc:	220c      	movs	r2, #12
 800d2fe:	701a      	strb	r2, [r3, #0]
			/ sizeof(interface->indexAngleMain[0]);

	for (uint8_t i = 0; i < numberOfIndexesMain; i++) {
 800d300:	2325      	movs	r3, #37	; 0x25
 800d302:	18fb      	adds	r3, r7, r3
 800d304:	2200      	movs	r2, #0
 800d306:	701a      	strb	r2, [r3, #0]
 800d308:	e036      	b.n	800d378 <interfaceDrawMain+0x10c8>

		interface->indexAngleMain[i] = 2 * 3.14 / numberOfIndexesMain
 800d30a:	2313      	movs	r3, #19
 800d30c:	18fb      	adds	r3, r7, r3
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	0018      	movs	r0, r3
 800d312:	f7f5 fd43 	bl	8002d9c <__aeabi_i2d>
 800d316:	0002      	movs	r2, r0
 800d318:	000b      	movs	r3, r1
 800d31a:	4827      	ldr	r0, [pc, #156]	; (800d3b8 <interfaceDrawMain+0x1108>)
 800d31c:	4927      	ldr	r1, [pc, #156]	; (800d3bc <interfaceDrawMain+0x110c>)
 800d31e:	f7f4 fae5 	bl	80018ec <__aeabi_ddiv>
 800d322:	0002      	movs	r2, r0
 800d324:	000b      	movs	r3, r1
 800d326:	0014      	movs	r4, r2
 800d328:	001d      	movs	r5, r3
				* (i - (numberOfIndexesMain / 4));
 800d32a:	2625      	movs	r6, #37	; 0x25
 800d32c:	19bb      	adds	r3, r7, r6
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	2213      	movs	r2, #19
 800d332:	18ba      	adds	r2, r7, r2
 800d334:	7812      	ldrb	r2, [r2, #0]
 800d336:	0892      	lsrs	r2, r2, #2
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	1a9b      	subs	r3, r3, r2
 800d33c:	0018      	movs	r0, r3
 800d33e:	f7f5 fd2d 	bl	8002d9c <__aeabi_i2d>
 800d342:	0002      	movs	r2, r0
 800d344:	000b      	movs	r3, r1
 800d346:	0020      	movs	r0, r4
 800d348:	0029      	movs	r1, r5
 800d34a:	f7f4 fed5 	bl	80020f8 <__aeabi_dmul>
 800d34e:	0002      	movs	r2, r0
 800d350:	000b      	movs	r3, r1
		interface->indexAngleMain[i] = 2 * 3.14 / numberOfIndexesMain
 800d352:	19b9      	adds	r1, r7, r6
 800d354:	780c      	ldrb	r4, [r1, #0]
				* (i - (numberOfIndexesMain / 4));
 800d356:	0010      	movs	r0, r2
 800d358:	0019      	movs	r1, r3
 800d35a:	f7f5 fdbd 	bl	8002ed8 <__aeabi_d2f>
 800d35e:	1c01      	adds	r1, r0, #0
		interface->indexAngleMain[i] = 2 * 3.14 / numberOfIndexesMain
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	0023      	movs	r3, r4
 800d364:	333c      	adds	r3, #60	; 0x3c
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	18d3      	adds	r3, r2, r3
 800d36a:	3304      	adds	r3, #4
 800d36c:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < numberOfIndexesMain; i++) {
 800d36e:	19bb      	adds	r3, r7, r6
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	19bb      	adds	r3, r7, r6
 800d374:	3201      	adds	r2, #1
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	2325      	movs	r3, #37	; 0x25
 800d37a:	18fa      	adds	r2, r7, r3
 800d37c:	2313      	movs	r3, #19
 800d37e:	18fb      	adds	r3, r7, r3
 800d380:	7812      	ldrb	r2, [r2, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	429a      	cmp	r2, r3
 800d386:	d3c0      	bcc.n	800d30a <interfaceDrawMain+0x105a>
	};

	//indexes- draw
	for (uint8_t i = 1; i < numberOfIndexesMain; i++) {
 800d388:	2324      	movs	r3, #36	; 0x24
 800d38a:	18fb      	adds	r3, r7, r3
 800d38c:	2201      	movs	r2, #1
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	e049      	b.n	800d426 <interfaceDrawMain+0x1176>
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	20000010 	.word	0x20000010
 800d398:	20000028 	.word	0x20000028
 800d39c:	000003cf 	.word	0x000003cf
 800d3a0:	0801196c 	.word	0x0801196c
 800d3a4:	00000401 	.word	0x00000401
 800d3a8:	fffffc31 	.word	0xfffffc31
 800d3ac:	2a305533 	.word	0x2a305533
 800d3b0:	3fb013a9 	.word	0x3fb013a9
 800d3b4:	08011970 	.word	0x08011970
 800d3b8:	51eb851f 	.word	0x51eb851f
 800d3bc:	40191eb8 	.word	0x40191eb8

		Paint_DrawPointer(interface->coordinatesMain[X],
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	b298      	uxth	r0, r3
				interface->coordinatesMain[Y], interface->indexAngleMain[i],
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	785b      	ldrb	r3, [r3, #1]
		Paint_DrawPointer(interface->coordinatesMain[X],
 800d3ca:	b29c      	uxth	r4, r3
 800d3cc:	2124      	movs	r1, #36	; 0x24
 800d3ce:	187b      	adds	r3, r7, r1
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	333c      	adds	r3, #60	; 0x3c
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	18d3      	adds	r3, r2, r3
 800d3da:	3304      	adds	r3, #4
 800d3dc:	681d      	ldr	r5, [r3, #0]
				interface->radiusMain,
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2221      	movs	r2, #33	; 0x21
 800d3e2:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesMain[X],
 800d3e4:	b29e      	uxth	r6, r3
				interface->radiusMain - interface->indexLengthMain,
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2221      	movs	r2, #33	; 0x21
 800d3ea:	5c9b      	ldrb	r3, [r3, r2]
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	212f      	movs	r1, #47	; 0x2f
 800d3f2:	5c5b      	ldrb	r3, [r3, r1]
 800d3f4:	b29b      	uxth	r3, r3
		Paint_DrawPointer(interface->coordinatesMain[X],
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	b29b      	uxth	r3, r3
				interface->colorForeground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	2293      	movs	r2, #147	; 0x93
 800d3fe:	0052      	lsls	r2, r2, #1
 800d400:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawPointer(interface->coordinatesMain[X],
 800d402:	b292      	uxth	r2, r2
 800d404:	2100      	movs	r1, #0
 800d406:	9103      	str	r1, [sp, #12]
 800d408:	2101      	movs	r1, #1
 800d40a:	9102      	str	r1, [sp, #8]
 800d40c:	9201      	str	r2, [sp, #4]
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	0033      	movs	r3, r6
 800d412:	1c2a      	adds	r2, r5, #0
 800d414:	0021      	movs	r1, r4
 800d416:	f7fb fb1b 	bl	8008a50 <Paint_DrawPointer>
	for (uint8_t i = 1; i < numberOfIndexesMain; i++) {
 800d41a:	2124      	movs	r1, #36	; 0x24
 800d41c:	187b      	adds	r3, r7, r1
 800d41e:	781a      	ldrb	r2, [r3, #0]
 800d420:	187b      	adds	r3, r7, r1
 800d422:	3201      	adds	r2, #1
 800d424:	701a      	strb	r2, [r3, #0]
 800d426:	2324      	movs	r3, #36	; 0x24
 800d428:	18fa      	adds	r2, r7, r3
 800d42a:	2313      	movs	r3, #19
 800d42c:	18fb      	adds	r3, r7, r3
 800d42e:	7812      	ldrb	r2, [r2, #0]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d3c4      	bcc.n	800d3c0 <interfaceDrawMain+0x1110>

	}

	//hour shadow
	interface->pointerAngleHours = 2 * 3.14 / 60
			* ((chrono->actual.hour * 5 + (chrono->actual.minute / 10)) - 15);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	78db      	ldrb	r3, [r3, #3]
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	001a      	movs	r2, r3
 800d43e:	0013      	movs	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	189c      	adds	r4, r3, r2
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	791b      	ldrb	r3, [r3, #4]
 800d448:	b25b      	sxtb	r3, r3
 800d44a:	210a      	movs	r1, #10
 800d44c:	0018      	movs	r0, r3
 800d44e:	f7f2 feed 	bl	800022c <__divsi3>
 800d452:	0003      	movs	r3, r0
 800d454:	b25b      	sxtb	r3, r3
 800d456:	18e3      	adds	r3, r4, r3
 800d458:	3b0f      	subs	r3, #15
 800d45a:	0018      	movs	r0, r3
 800d45c:	f7f5 fc9e 	bl	8002d9c <__aeabi_i2d>
 800d460:	4a98      	ldr	r2, [pc, #608]	; (800d6c4 <interfaceDrawMain+0x1414>)
 800d462:	4b99      	ldr	r3, [pc, #612]	; (800d6c8 <interfaceDrawMain+0x1418>)
 800d464:	f7f4 fe48 	bl	80020f8 <__aeabi_dmul>
 800d468:	0002      	movs	r2, r0
 800d46a:	000b      	movs	r3, r1
 800d46c:	0010      	movs	r0, r2
 800d46e:	0019      	movs	r1, r3
 800d470:	f7f5 fd32 	bl	8002ed8 <__aeabi_d2f>
 800d474:	1c02      	adds	r2, r0, #0
	interface->pointerAngleHours = 2 * 3.14 / 60
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	635a      	str	r2, [r3, #52]	; 0x34

	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	b29a      	uxth	r2, r3
 800d480:	68f9      	ldr	r1, [r7, #12]
 800d482:	2392      	movs	r3, #146	; 0x92
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	5ccb      	ldrb	r3, [r1, r3]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	18d3      	adds	r3, r2, r3
 800d48c:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y] + interface->shadowShift,
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	b29a      	uxth	r2, r3
 800d494:	68f9      	ldr	r1, [r7, #12]
 800d496:	2392      	movs	r3, #146	; 0x92
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	5ccb      	ldrb	r3, [r1, r3]
 800d49c:	b29b      	uxth	r3, r3
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d49e:	18d3      	adds	r3, r2, r3
 800d4a0:	b299      	uxth	r1, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
			interface->pointerAngleHours, interface->pointerLengthHours, 0,
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2225      	movs	r2, #37	; 0x25
 800d4aa:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d4ac:	b29d      	uxth	r5, r3
			interface->colorBackground, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	2326      	movs	r3, #38	; 0x26
 800d4b2:	33ff      	adds	r3, #255	; 0xff
 800d4b4:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	9203      	str	r2, [sp, #12]
 800d4bc:	2203      	movs	r2, #3
 800d4be:	9202      	str	r2, [sp, #8]
 800d4c0:	9301      	str	r3, [sp, #4]
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	002b      	movs	r3, r5
 800d4c8:	1c22      	adds	r2, r4, #0
 800d4ca:	f7fb fac1 	bl	8008a50 <Paint_DrawPointer>
	//hour pointer
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->pointerAngleHours,
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d4d8:	b299      	uxth	r1, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
			interface->pointerLengthHours, 0, interface->colorForeground,
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2225      	movs	r2, #37	; 0x25
 800d4e2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d4e4:	b29d      	uxth	r5, r3
			interface->pointerLengthHours, 0, interface->colorForeground,
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	2393      	movs	r3, #147	; 0x93
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	9203      	str	r2, [sp, #12]
 800d4f4:	2203      	movs	r2, #3
 800d4f6:	9202      	str	r2, [sp, #8]
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	002b      	movs	r3, r5
 800d500:	1c22      	adds	r2, r4, #0
 800d502:	f7fb faa5 	bl	8008a50 <Paint_DrawPointer>
			DOT_PIXEL_3X3, LINE_STYLE_SOLID);

	//minute shadow
	interface->pointerAngleMinutes = 2 * 3.14 / 60
			* (chrono->actual.minute - 15);
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	791b      	ldrb	r3, [r3, #4]
 800d50a:	b25b      	sxtb	r3, r3
 800d50c:	3b0f      	subs	r3, #15
 800d50e:	0018      	movs	r0, r3
 800d510:	f7f5 fc44 	bl	8002d9c <__aeabi_i2d>
 800d514:	4a6b      	ldr	r2, [pc, #428]	; (800d6c4 <interfaceDrawMain+0x1414>)
 800d516:	4b6c      	ldr	r3, [pc, #432]	; (800d6c8 <interfaceDrawMain+0x1418>)
 800d518:	f7f4 fdee 	bl	80020f8 <__aeabi_dmul>
 800d51c:	0002      	movs	r2, r0
 800d51e:	000b      	movs	r3, r1
 800d520:	0010      	movs	r0, r2
 800d522:	0019      	movs	r1, r3
 800d524:	f7f5 fcd8 	bl	8002ed8 <__aeabi_d2f>
 800d528:	1c02      	adds	r2, r0, #0
	interface->pointerAngleMinutes = 2 * 3.14 / 60
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	639a      	str	r2, [r3, #56]	; 0x38
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	b29a      	uxth	r2, r3
 800d534:	68f9      	ldr	r1, [r7, #12]
 800d536:	2392      	movs	r3, #146	; 0x92
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	5ccb      	ldrb	r3, [r1, r3]
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	18d3      	adds	r3, r2, r3
 800d540:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y] + interface->shadowShift,
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	785b      	ldrb	r3, [r3, #1]
 800d546:	b29a      	uxth	r2, r3
 800d548:	68f9      	ldr	r1, [r7, #12]
 800d54a:	2392      	movs	r3, #146	; 0x92
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	5ccb      	ldrb	r3, [r1, r3]
 800d550:	b29b      	uxth	r3, r3
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d552:	18d3      	adds	r3, r2, r3
 800d554:	b299      	uxth	r1, r3
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6b9c      	ldr	r4, [r3, #56]	; 0x38
			interface->pointerAngleMinutes, interface->pointerLengthMinutes, 0,
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2226      	movs	r2, #38	; 0x26
 800d55e:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d560:	b29d      	uxth	r5, r3
			interface->colorBackground, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	2326      	movs	r3, #38	; 0x26
 800d566:	33ff      	adds	r3, #255	; 0xff
 800d568:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	2200      	movs	r2, #0
 800d56e:	9203      	str	r2, [sp, #12]
 800d570:	2202      	movs	r2, #2
 800d572:	9202      	str	r2, [sp, #8]
 800d574:	9301      	str	r3, [sp, #4]
 800d576:	2300      	movs	r3, #0
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	002b      	movs	r3, r5
 800d57c:	1c22      	adds	r2, r4, #0
 800d57e:	f7fb fa67 	bl	8008a50 <Paint_DrawPointer>

	//minute pointer
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->pointerAngleMinutes,
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d58c:	b299      	uxth	r1, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6b9c      	ldr	r4, [r3, #56]	; 0x38
			interface->pointerLengthMinutes, 0, interface->colorForeground,
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2226      	movs	r2, #38	; 0x26
 800d596:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d598:	b29d      	uxth	r5, r3
			interface->pointerLengthMinutes, 0, interface->colorForeground,
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	2393      	movs	r3, #147	; 0x93
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	9203      	str	r2, [sp, #12]
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	9202      	str	r2, [sp, #8]
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	002b      	movs	r3, r5
 800d5b4:	1c22      	adds	r2, r4, #0
 800d5b6:	f7fb fa4b 	bl	8008a50 <Paint_DrawPointer>
			DOT_PIXEL_2X2, LINE_STYLE_SOLID);

	//chrono seconds pointer
	interface->pointerAngleChronoSeconds = 2 * 3.14 / 60
			* (chrono->chrono.second - 15);
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	7f5b      	ldrb	r3, [r3, #29]
 800d5be:	b25b      	sxtb	r3, r3
 800d5c0:	3b0f      	subs	r3, #15
 800d5c2:	0018      	movs	r0, r3
 800d5c4:	f7f5 fbea 	bl	8002d9c <__aeabi_i2d>
 800d5c8:	4a3e      	ldr	r2, [pc, #248]	; (800d6c4 <interfaceDrawMain+0x1414>)
 800d5ca:	4b3f      	ldr	r3, [pc, #252]	; (800d6c8 <interfaceDrawMain+0x1418>)
 800d5cc:	f7f4 fd94 	bl	80020f8 <__aeabi_dmul>
 800d5d0:	0002      	movs	r2, r0
 800d5d2:	000b      	movs	r3, r1
 800d5d4:	0010      	movs	r0, r2
 800d5d6:	0019      	movs	r1, r3
 800d5d8:	f7f5 fc7e 	bl	8002ed8 <__aeabi_d2f>
 800d5dc:	1c02      	adds	r2, r0, #0
	interface->pointerAngleChronoSeconds = 2 * 3.14 / 60
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	641a      	str	r2, [r3, #64]	; 0x40

	Paint_DrawPointer(interface->coordinatesMain[X],
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->pointerAngleChronoSeconds,
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d5ec:	b299      	uxth	r1, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
			interface->pointerLengthChronoSeconds, 0,
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2227      	movs	r2, #39	; 0x27
 800d5f6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d5f8:	b29d      	uxth	r5, r3
			interface->colorBackground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	2326      	movs	r3, #38	; 0x26
 800d5fe:	33ff      	adds	r3, #255	; 0xff
 800d600:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800d602:	b29b      	uxth	r3, r3
 800d604:	2200      	movs	r2, #0
 800d606:	9203      	str	r2, [sp, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	9202      	str	r2, [sp, #8]
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	2300      	movs	r3, #0
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	002b      	movs	r3, r5
 800d614:	1c22      	adds	r2, r4, #0
 800d616:	f7fb fa1b 	bl	8008a50 <Paint_DrawPointer>
	//chrono seconds shadow
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	b29a      	uxth	r2, r3
 800d620:	68f9      	ldr	r1, [r7, #12]
 800d622:	2392      	movs	r3, #146	; 0x92
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	5ccb      	ldrb	r3, [r1, r3]
 800d628:	b29b      	uxth	r3, r3
 800d62a:	18d3      	adds	r3, r2, r3
 800d62c:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y] + interface->shadowShift,
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	785b      	ldrb	r3, [r3, #1]
 800d632:	b29a      	uxth	r2, r3
 800d634:	68f9      	ldr	r1, [r7, #12]
 800d636:	2392      	movs	r3, #146	; 0x92
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	5ccb      	ldrb	r3, [r1, r3]
 800d63c:	b29b      	uxth	r3, r3
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d63e:	18d3      	adds	r3, r2, r3
 800d640:	b299      	uxth	r1, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6c1c      	ldr	r4, [r3, #64]	; 0x40
			interface->pointerAngleChronoSeconds,
			interface->pointerLengthChronoSeconds, 0,
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2227      	movs	r2, #39	; 0x27
 800d64a:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d64c:	b29d      	uxth	r5, r3
			interface->colorForeground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	2393      	movs	r3, #147	; 0x93
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800d656:	b29b      	uxth	r3, r3
 800d658:	2200      	movs	r2, #0
 800d65a:	9203      	str	r2, [sp, #12]
 800d65c:	2201      	movs	r2, #1
 800d65e:	9202      	str	r2, [sp, #8]
 800d660:	9301      	str	r3, [sp, #4]
 800d662:	2300      	movs	r3, #0
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	002b      	movs	r3, r5
 800d668:	1c22      	adds	r2, r4, #0
 800d66a:	f7fb f9f1 	bl	8008a50 <Paint_DrawPointer>

	//dot
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], 8, interface->colorForeground,
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d678:	b299      	uxth	r1, r3
			interface->coordinatesMain[Y], 8, interface->colorForeground,
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	2393      	movs	r3, #147	; 0x93
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d682:	b29b      	uxth	r3, r3
 800d684:	2201      	movs	r2, #1
 800d686:	9201      	str	r2, [sp, #4]
 800d688:	2202      	movs	r2, #2
 800d68a:	9200      	str	r2, [sp, #0]
 800d68c:	2208      	movs	r2, #8
 800d68e:	f7fb fb95 	bl	8008dbc <Paint_DrawCircle>
			DOT_PIXEL_2X2, DRAW_FILL_FULL);
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], 2, interface->colorBackground,
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d69c:	b299      	uxth	r1, r3
			interface->coordinatesMain[Y], 2, interface->colorBackground,
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	2326      	movs	r3, #38	; 0x26
 800d6a2:	33ff      	adds	r3, #255	; 0xff
 800d6a4:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	9201      	str	r2, [sp, #4]
 800d6ac:	2202      	movs	r2, #2
 800d6ae:	9200      	str	r2, [sp, #0]
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	f7fb fb83 	bl	8008dbc <Paint_DrawCircle>
			DOT_PIXEL_2X2, DRAW_FILL_FULL);

}
 800d6b6:	46c0      	nop			; (mov r8, r8)
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	b00a      	add	sp, #40	; 0x28
 800d6bc:	bc80      	pop	{r7}
 800d6be:	46b8      	mov	r8, r7
 800d6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c2:	46c0      	nop			; (mov r8, r8)
 800d6c4:	46508dff 	.word	0x46508dff
 800d6c8:	3fbacb6f 	.word	0x3fbacb6f

0800d6cc <interfaceSettingsDraw>:

void interfaceSettingsDraw(interfaceSettingsTypeDef *settings,
		RTCChronoTypeDef *chrono, lis3mdlTypeDef *magnetometer,
		bme280TypeDef *atmospherical, watchTypeDef *watch) {
 800d6cc:	b5b0      	push	{r4, r5, r7, lr}
 800d6ce:	b08a      	sub	sp, #40	; 0x28
 800d6d0:	af04      	add	r7, sp, #16
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	603b      	str	r3, [r7, #0]

	//			temperature
	if (atmospherical->temperatureValue < 0) {
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	da38      	bge.n	800d754 <interfaceSettingsDraw+0x88>
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	7e1b      	ldrb	r3, [r3, #24]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	3b08      	subs	r3, #8
 800d6ea:	b298      	uxth	r0, r3
				settings->coordinatesTemperature[Y], '-', &Font16,
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	7e5b      	ldrb	r3, [r3, #25]
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800d6f0:	b299      	uxth	r1, r3
				settings->colorForeground, settings->colorBackground);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2221      	movs	r2, #33	; 0x21
 800d6f6:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800d6f8:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	2420      	movs	r4, #32
 800d6fe:	5d12      	ldrb	r2, [r2, r4]
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800d700:	b292      	uxth	r2, r2
 800d702:	4c81      	ldr	r4, [pc, #516]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d704:	9201      	str	r2, [sp, #4]
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	0023      	movs	r3, r4
 800d70a:	222d      	movs	r2, #45	; 0x2d
 800d70c:	f7fb fda8 	bl	8009260 <Paint_DrawChar>
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	7e1b      	ldrb	r3, [r3, #24]
 800d714:	b29c      	uxth	r4, r3
				settings->coordinatesTemperature[Y],
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	7e5b      	ldrb	r3, [r3, #25]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d71a:	b29d      	uxth	r5, r3
				abs(atmospherical->temperatureValueCompensated / 100), &Font16,
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	69db      	ldr	r3, [r3, #28]
 800d720:	2164      	movs	r1, #100	; 0x64
 800d722:	0018      	movs	r0, r3
 800d724:	f7f2 fd82 	bl	800022c <__divsi3>
 800d728:	0003      	movs	r3, r0
 800d72a:	17da      	asrs	r2, r3, #31
 800d72c:	1899      	adds	r1, r3, r2
 800d72e:	4051      	eors	r1, r2
				settings->colorForeground, settings->colorBackground);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2221      	movs	r2, #33	; 0x21
 800d734:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d736:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	2020      	movs	r0, #32
 800d73c:	5c12      	ldrb	r2, [r2, r0]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d73e:	b292      	uxth	r2, r2
 800d740:	4871      	ldr	r0, [pc, #452]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	0003      	movs	r3, r0
 800d748:	000a      	movs	r2, r1
 800d74a:	0029      	movs	r1, r5
 800d74c:	0020      	movs	r0, r4
 800d74e:	f7fb fee9 	bl	8009524 <Paint_DrawNum>
 800d752:	e01e      	b.n	800d792 <interfaceSettingsDraw+0xc6>
	} else {
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	7e1b      	ldrb	r3, [r3, #24]
 800d758:	b29c      	uxth	r4, r3
				settings->coordinatesTemperature[Y],
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	7e5b      	ldrb	r3, [r3, #25]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d75e:	b29d      	uxth	r5, r3
				atmospherical->temperatureValueCompensated / 100, &Font16,
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	69db      	ldr	r3, [r3, #28]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d764:	2164      	movs	r1, #100	; 0x64
 800d766:	0018      	movs	r0, r3
 800d768:	f7f2 fd60 	bl	800022c <__divsi3>
 800d76c:	0003      	movs	r3, r0
 800d76e:	0018      	movs	r0, r3
				settings->colorForeground, settings->colorBackground);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2221      	movs	r2, #33	; 0x21
 800d774:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d776:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	2120      	movs	r1, #32
 800d77c:	5c52      	ldrb	r2, [r2, r1]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800d77e:	b292      	uxth	r2, r2
 800d780:	4961      	ldr	r1, [pc, #388]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d782:	9201      	str	r2, [sp, #4]
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	000b      	movs	r3, r1
 800d788:	0002      	movs	r2, r0
 800d78a:	0029      	movs	r1, r5
 800d78c:	0020      	movs	r0, r4
 800d78e:	f7fb fec9 	bl	8009524 <Paint_DrawNum>
	}

	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	7e1b      	ldrb	r3, [r3, #24]
 800d796:	b29b      	uxth	r3, r3
 800d798:	3319      	adds	r3, #25
 800d79a:	b298      	uxth	r0, r3
			settings->coordinatesTemperature[Y], 'C', &Font16,
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	7e5b      	ldrb	r3, [r3, #25]
	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800d7a0:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2221      	movs	r2, #33	; 0x21
 800d7a6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800d7a8:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	2420      	movs	r4, #32
 800d7ae:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800d7b0:	b292      	uxth	r2, r2
 800d7b2:	4c55      	ldr	r4, [pc, #340]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d7b4:	9201      	str	r2, [sp, #4]
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	0023      	movs	r3, r4
 800d7ba:	2243      	movs	r2, #67	; 0x43
 800d7bc:	f7fb fd50 	bl	8009260 <Paint_DrawChar>

	//			humidity
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	7e9b      	ldrb	r3, [r3, #26]
 800d7c4:	b298      	uxth	r0, r3
			settings->coordinatesHumidity[Y], atmospherical->humidityValue,
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	7edb      	ldrb	r3, [r3, #27]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800d7ca:	b299      	uxth	r1, r3
			settings->coordinatesHumidity[Y], atmospherical->humidityValue,
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	68db      	ldr	r3, [r3, #12]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800d7d0:	001d      	movs	r5, r3
			&Font16, settings->colorForeground, settings->colorBackground);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2221      	movs	r2, #33	; 0x21
 800d7d6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800d7d8:	b29b      	uxth	r3, r3
			&Font16, settings->colorForeground, settings->colorBackground);
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	2420      	movs	r4, #32
 800d7de:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800d7e0:	b292      	uxth	r2, r2
 800d7e2:	4c49      	ldr	r4, [pc, #292]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d7e4:	9201      	str	r2, [sp, #4]
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	0023      	movs	r3, r4
 800d7ea:	002a      	movs	r2, r5
 800d7ec:	f7fb fe9a 	bl	8009524 <Paint_DrawNum>
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	7e9b      	ldrb	r3, [r3, #26]
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	3319      	adds	r3, #25
 800d7f8:	b298      	uxth	r0, r3
			settings->coordinatesHumidity[Y], '%', &Font16,
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	7edb      	ldrb	r3, [r3, #27]
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800d7fe:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2221      	movs	r2, #33	; 0x21
 800d804:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800d806:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	2420      	movs	r4, #32
 800d80c:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800d80e:	b292      	uxth	r2, r2
 800d810:	4c3d      	ldr	r4, [pc, #244]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d812:	9201      	str	r2, [sp, #4]
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	0023      	movs	r3, r4
 800d818:	2225      	movs	r2, #37	; 0x25
 800d81a:	f7fb fd21 	bl	8009260 <Paint_DrawChar>

	//pressure
	Paint_DrawNum(settings->coordinatesPressure[X],
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	7f1b      	ldrb	r3, [r3, #28]
 800d822:	b29c      	uxth	r4, r3
			settings->coordinatesPressure[Y],
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	7f5b      	ldrb	r3, [r3, #29]
	Paint_DrawNum(settings->coordinatesPressure[X],
 800d828:	b29d      	uxth	r5, r3
			atmospherical->pressureValue / 100, &Font16,
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	2164      	movs	r1, #100	; 0x64
 800d830:	0018      	movs	r0, r3
 800d832:	f7f2 fc71 	bl	8000118 <__udivsi3>
 800d836:	0003      	movs	r3, r0
	Paint_DrawNum(settings->coordinatesPressure[X],
 800d838:	0018      	movs	r0, r3
			settings->colorForeground, settings->colorBackground);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2221      	movs	r2, #33	; 0x21
 800d83e:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesPressure[X],
 800d840:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	2120      	movs	r1, #32
 800d846:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawNum(settings->coordinatesPressure[X],
 800d848:	b292      	uxth	r2, r2
 800d84a:	492f      	ldr	r1, [pc, #188]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d84c:	9201      	str	r2, [sp, #4]
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	000b      	movs	r3, r1
 800d852:	0002      	movs	r2, r0
 800d854:	0029      	movs	r1, r5
 800d856:	0020      	movs	r0, r4
 800d858:	f7fb fe64 	bl	8009524 <Paint_DrawNum>

	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	7f1b      	ldrb	r3, [r3, #28]
 800d860:	b29b      	uxth	r3, r3
 800d862:	3332      	adds	r3, #50	; 0x32
 800d864:	b298      	uxth	r0, r3
			settings->coordinatesPressure[Y], "hPa", &Font16,
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	7f5b      	ldrb	r3, [r3, #29]
	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800d86a:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2221      	movs	r2, #33	; 0x21
 800d870:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800d872:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	2420      	movs	r4, #32
 800d878:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800d87a:	b292      	uxth	r2, r2
 800d87c:	4d22      	ldr	r5, [pc, #136]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d87e:	4c23      	ldr	r4, [pc, #140]	; (800d90c <interfaceSettingsDraw+0x240>)
 800d880:	9201      	str	r2, [sp, #4]
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	002b      	movs	r3, r5
 800d886:	0022      	movs	r2, r4
 800d888:	f7fb fdce 	bl	8009428 <Paint_DrawString_EN>

	//altitude
	if (atmospherical->altitudeValue < 0) {
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	2b00      	cmp	r3, #0
 800d892:	da3d      	bge.n	800d910 <interfaceSettingsDraw+0x244>
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	7f9b      	ldrb	r3, [r3, #30]
 800d898:	b29b      	uxth	r3, r3
 800d89a:	3b08      	subs	r3, #8
 800d89c:	b298      	uxth	r0, r3
				settings->coordinatesAltitude[Y], '-', &Font16,
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800d8a2:	b299      	uxth	r1, r3
				settings->colorForeground, settings->colorBackground);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2221      	movs	r2, #33	; 0x21
 800d8a8:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800d8aa:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	2420      	movs	r4, #32
 800d8b0:	5d12      	ldrb	r2, [r2, r4]
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800d8b2:	b292      	uxth	r2, r2
 800d8b4:	4c14      	ldr	r4, [pc, #80]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d8b6:	9201      	str	r2, [sp, #4]
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	0023      	movs	r3, r4
 800d8bc:	222d      	movs	r2, #45	; 0x2d
 800d8be:	f7fb fccf 	bl	8009260 <Paint_DrawChar>
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	7f9b      	ldrb	r3, [r3, #30]
 800d8c6:	b29c      	uxth	r4, r3
				settings->coordinatesAltitude[Y],
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d8cc:	b29d      	uxth	r5, r3
				abs(atmospherical->altitudeValue / 100), &Font16,
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	2164      	movs	r1, #100	; 0x64
 800d8d4:	0018      	movs	r0, r3
 800d8d6:	f7f2 fca9 	bl	800022c <__divsi3>
 800d8da:	0003      	movs	r3, r0
 800d8dc:	17da      	asrs	r2, r3, #31
 800d8de:	1899      	adds	r1, r3, r2
 800d8e0:	4051      	eors	r1, r2
				settings->colorForeground, settings->colorBackground);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2221      	movs	r2, #33	; 0x21
 800d8e6:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d8e8:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	2020      	movs	r0, #32
 800d8ee:	5c12      	ldrb	r2, [r2, r0]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d8f0:	b292      	uxth	r2, r2
 800d8f2:	4805      	ldr	r0, [pc, #20]	; (800d908 <interfaceSettingsDraw+0x23c>)
 800d8f4:	9201      	str	r2, [sp, #4]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	0003      	movs	r3, r0
 800d8fa:	000a      	movs	r2, r1
 800d8fc:	0029      	movs	r1, r5
 800d8fe:	0020      	movs	r0, r4
 800d900:	f7fb fe10 	bl	8009524 <Paint_DrawNum>
 800d904:	e023      	b.n	800d94e <interfaceSettingsDraw+0x282>
 800d906:	46c0      	nop			; (mov r8, r8)
 800d908:	20000010 	.word	0x20000010
 800d90c:	0801196c 	.word	0x0801196c
	} else {
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	7f9b      	ldrb	r3, [r3, #30]
 800d914:	b29c      	uxth	r4, r3
				settings->coordinatesAltitude[Y],
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d91a:	b29d      	uxth	r5, r3
				atmospherical->altitudeValue / 100, &Font16,
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	691b      	ldr	r3, [r3, #16]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d920:	2164      	movs	r1, #100	; 0x64
 800d922:	0018      	movs	r0, r3
 800d924:	f7f2 fc82 	bl	800022c <__divsi3>
 800d928:	0003      	movs	r3, r0
 800d92a:	0018      	movs	r0, r3
				settings->colorForeground, settings->colorBackground);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2221      	movs	r2, #33	; 0x21
 800d930:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d932:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	2120      	movs	r1, #32
 800d938:	5c52      	ldrb	r2, [r2, r1]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800d93a:	b292      	uxth	r2, r2
 800d93c:	49d1      	ldr	r1, [pc, #836]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800d93e:	9201      	str	r2, [sp, #4]
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	000b      	movs	r3, r1
 800d944:	0002      	movs	r2, r0
 800d946:	0029      	movs	r1, r5
 800d948:	0020      	movs	r0, r4
 800d94a:	f7fb fdeb 	bl	8009524 <Paint_DrawNum>
	}

	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	7f9b      	ldrb	r3, [r3, #30]
 800d952:	b29b      	uxth	r3, r3
 800d954:	3332      	adds	r3, #50	; 0x32
 800d956:	b298      	uxth	r0, r3
			settings->coordinatesAltitude[Y], 'm', &Font16,
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	7fdb      	ldrb	r3, [r3, #31]
	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800d95c:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2221      	movs	r2, #33	; 0x21
 800d962:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800d964:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	2420      	movs	r4, #32
 800d96a:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800d96c:	b292      	uxth	r2, r2
 800d96e:	4cc5      	ldr	r4, [pc, #788]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800d970:	9201      	str	r2, [sp, #4]
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	0023      	movs	r3, r4
 800d976:	226d      	movs	r2, #109	; 0x6d
 800d978:	f7fb fc72 	bl	8009260 <Paint_DrawChar>

	//hours
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	b298      	uxth	r0, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	785b      	ldrb	r3, [r3, #1]
 800d986:	b299      	uxth	r1, r3
			chrono->actual.hour, &Font20, settings->colorForeground,
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	78db      	ldrb	r3, [r3, #3]
 800d98c:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800d98e:	001d      	movs	r5, r3
			chrono->actual.hour, &Font20, settings->colorForeground,
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2221      	movs	r2, #33	; 0x21
 800d994:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800d996:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	2420      	movs	r4, #32
 800d99c:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800d99e:	b292      	uxth	r2, r2
 800d9a0:	4cb9      	ldr	r4, [pc, #740]	; (800dc88 <interfaceSettingsDraw+0x5bc>)
 800d9a2:	9201      	str	r2, [sp, #4]
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	0023      	movs	r3, r4
 800d9a8:	002a      	movs	r2, r5
 800d9aa:	f7fb fdbb 	bl	8009524 <Paint_DrawNum>

	//minutes
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	78db      	ldrb	r3, [r3, #3]
 800d9b2:	b298      	uxth	r0, r3
			settings->coordinatesMinutes[Y], chrono->actual.minute, &Font20,
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	791b      	ldrb	r3, [r3, #4]
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800d9b8:	b299      	uxth	r1, r3
			settings->coordinatesMinutes[Y], chrono->actual.minute, &Font20,
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	791b      	ldrb	r3, [r3, #4]
 800d9be:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800d9c0:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2221      	movs	r2, #33	; 0x21
 800d9c6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800d9c8:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	2420      	movs	r4, #32
 800d9ce:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800d9d0:	b292      	uxth	r2, r2
 800d9d2:	4cad      	ldr	r4, [pc, #692]	; (800dc88 <interfaceSettingsDraw+0x5bc>)
 800d9d4:	9201      	str	r2, [sp, #4]
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	0023      	movs	r3, r4
 800d9da:	002a      	movs	r2, r5
 800d9dc:	f7fb fda2 	bl	8009524 <Paint_DrawNum>
	//seconds
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	799b      	ldrb	r3, [r3, #6]
 800d9e4:	b298      	uxth	r0, r3
			settings->coordinatesSeconds[Y], chrono->actual.second, &Font20,
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	79db      	ldrb	r3, [r3, #7]
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800d9ea:	b299      	uxth	r1, r3
			settings->coordinatesSeconds[Y], chrono->actual.second, &Font20,
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	795b      	ldrb	r3, [r3, #5]
 800d9f0:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800d9f2:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2221      	movs	r2, #33	; 0x21
 800d9f8:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800d9fa:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	2420      	movs	r4, #32
 800da00:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800da02:	b292      	uxth	r2, r2
 800da04:	4ca0      	ldr	r4, [pc, #640]	; (800dc88 <interfaceSettingsDraw+0x5bc>)
 800da06:	9201      	str	r2, [sp, #4]
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	0023      	movs	r3, r4
 800da0c:	002a      	movs	r2, r5
 800da0e:	f7fb fd89 	bl	8009524 <Paint_DrawNum>

	//days
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	7a5b      	ldrb	r3, [r3, #9]
 800da16:	b298      	uxth	r0, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	7a9b      	ldrb	r3, [r3, #10]
 800da1c:	b299      	uxth	r1, r3
			chrono->actual.day, &Font20, settings->colorForeground,
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	789b      	ldrb	r3, [r3, #2]
 800da22:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800da24:	001d      	movs	r5, r3
			chrono->actual.day, &Font20, settings->colorForeground,
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2221      	movs	r2, #33	; 0x21
 800da2a:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800da2c:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800da2e:	68fa      	ldr	r2, [r7, #12]
 800da30:	2420      	movs	r4, #32
 800da32:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800da34:	b292      	uxth	r2, r2
 800da36:	4c94      	ldr	r4, [pc, #592]	; (800dc88 <interfaceSettingsDraw+0x5bc>)
 800da38:	9201      	str	r2, [sp, #4]
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	0023      	movs	r3, r4
 800da3e:	002a      	movs	r2, r5
 800da40:	f7fb fd70 	bl	8009524 <Paint_DrawNum>
	//months
	Paint_DrawNum(settings->coordinatesMonths[X],
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	7b1b      	ldrb	r3, [r3, #12]
 800da48:	b298      	uxth	r0, r3
			settings->coordinatesMonths[Y], chrono->actual.month, &Font20,
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	7b5b      	ldrb	r3, [r3, #13]
	Paint_DrawNum(settings->coordinatesMonths[X],
 800da4e:	b299      	uxth	r1, r3
			settings->coordinatesMonths[Y], chrono->actual.month, &Font20,
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	785b      	ldrb	r3, [r3, #1]
 800da54:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesMonths[X],
 800da56:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2221      	movs	r2, #33	; 0x21
 800da5c:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesMonths[X],
 800da5e:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	2420      	movs	r4, #32
 800da64:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesMonths[X],
 800da66:	b292      	uxth	r2, r2
 800da68:	4c87      	ldr	r4, [pc, #540]	; (800dc88 <interfaceSettingsDraw+0x5bc>)
 800da6a:	9201      	str	r2, [sp, #4]
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	0023      	movs	r3, r4
 800da70:	002a      	movs	r2, r5
 800da72:	f7fb fd57 	bl	8009524 <Paint_DrawNum>
	//years
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	7bdb      	ldrb	r3, [r3, #15]
 800da7a:	b298      	uxth	r0, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	7c1b      	ldrb	r3, [r3, #16]
 800da80:	b299      	uxth	r1, r3
			chrono->actual.year, &Font20, settings->colorForeground,
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800da88:	001d      	movs	r5, r3
			chrono->actual.year, &Font20, settings->colorForeground,
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2221      	movs	r2, #33	; 0x21
 800da8e:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800da90:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	2420      	movs	r4, #32
 800da96:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800da98:	b292      	uxth	r2, r2
 800da9a:	4c7b      	ldr	r4, [pc, #492]	; (800dc88 <interfaceSettingsDraw+0x5bc>)
 800da9c:	9201      	str	r2, [sp, #4]
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	0023      	movs	r3, r4
 800daa2:	002a      	movs	r2, r5
 800daa4:	f7fb fd3e 	bl	8009524 <Paint_DrawNum>

	//Pressure ref
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	7c9b      	ldrb	r3, [r3, #18]
 800daac:	b298      	uxth	r0, r3
			settings->coordinatesPressureReference[Y],
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	7cdb      	ldrb	r3, [r3, #19]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800dab2:	b299      	uxth	r1, r3
			atmospherical->pressureReference, &Font16,
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	695b      	ldr	r3, [r3, #20]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800dab8:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2221      	movs	r2, #33	; 0x21
 800dabe:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800dac0:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	2420      	movs	r4, #32
 800dac6:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800dac8:	b292      	uxth	r2, r2
 800daca:	4c6e      	ldr	r4, [pc, #440]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800dacc:	9201      	str	r2, [sp, #4]
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	0023      	movs	r3, r4
 800dad2:	002a      	movs	r2, r5
 800dad4:	f7fb fd26 	bl	8009524 <Paint_DrawNum>
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	7c9b      	ldrb	r3, [r3, #18]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	3332      	adds	r3, #50	; 0x32
 800dae0:	b298      	uxth	r0, r3
			settings->coordinatesPressureReference[Y], "hPa", &Font16,
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	7cdb      	ldrb	r3, [r3, #19]
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800dae6:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2221      	movs	r2, #33	; 0x21
 800daec:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800daee:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	2420      	movs	r4, #32
 800daf4:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800daf6:	b292      	uxth	r2, r2
 800daf8:	4d62      	ldr	r5, [pc, #392]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800dafa:	4c64      	ldr	r4, [pc, #400]	; (800dc8c <interfaceSettingsDraw+0x5c0>)
 800dafc:	9201      	str	r2, [sp, #4]
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	002b      	movs	r3, r5
 800db02:	0022      	movs	r2, r4
 800db04:	f7fb fc90 	bl	8009428 <Paint_DrawString_EN>

	//temperature compensation
	if (atmospherical->temperatureOffset < 0) {
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	da31      	bge.n	800db74 <interfaceSettingsDraw+0x4a8>
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	7d5b      	ldrb	r3, [r3, #21]
 800db14:	b29b      	uxth	r3, r3
 800db16:	3b08      	subs	r3, #8
 800db18:	b298      	uxth	r0, r3
				settings->coordinatesTemperatureCompensation[Y], '-', &Font16,
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800db1e:	b299      	uxth	r1, r3
				settings->colorForeground, settings->colorBackground);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2221      	movs	r2, #33	; 0x21
 800db24:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800db26:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	2420      	movs	r4, #32
 800db2c:	5d12      	ldrb	r2, [r2, r4]
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800db2e:	b292      	uxth	r2, r2
 800db30:	4c54      	ldr	r4, [pc, #336]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800db32:	9201      	str	r2, [sp, #4]
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	0023      	movs	r3, r4
 800db38:	222d      	movs	r2, #45	; 0x2d
 800db3a:	f7fb fb91 	bl	8009260 <Paint_DrawChar>
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	7d5b      	ldrb	r3, [r3, #21]
 800db42:	b298      	uxth	r0, r3
				settings->coordinatesTemperatureCompensation[Y],
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db48:	b299      	uxth	r1, r3
				abs(atmospherical->temperatureOffset), &Font16,
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	17da      	asrs	r2, r3, #31
 800db50:	189c      	adds	r4, r3, r2
 800db52:	4054      	eors	r4, r2
				settings->colorForeground, settings->colorBackground);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2221      	movs	r2, #33	; 0x21
 800db58:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db5a:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	2520      	movs	r5, #32
 800db60:	5d52      	ldrb	r2, [r2, r5]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db62:	b292      	uxth	r2, r2
 800db64:	4d47      	ldr	r5, [pc, #284]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800db66:	9201      	str	r2, [sp, #4]
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	002b      	movs	r3, r5
 800db6c:	0022      	movs	r2, r4
 800db6e:	f7fb fcd9 	bl	8009524 <Paint_DrawNum>
 800db72:	e016      	b.n	800dba2 <interfaceSettingsDraw+0x4d6>
	} else {
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	7d5b      	ldrb	r3, [r3, #21]
 800db78:	b298      	uxth	r0, r3
				settings->coordinatesTemperatureCompensation[Y],
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db7e:	b299      	uxth	r1, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	699c      	ldr	r4, [r3, #24]
				atmospherical->temperatureOffset, &Font16,
				settings->colorForeground, settings->colorBackground);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2221      	movs	r2, #33	; 0x21
 800db88:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db8a:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	2520      	movs	r5, #32
 800db90:	5d52      	ldrb	r2, [r2, r5]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800db92:	b292      	uxth	r2, r2
 800db94:	4d3b      	ldr	r5, [pc, #236]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800db96:	9201      	str	r2, [sp, #4]
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	002b      	movs	r3, r5
 800db9c:	0022      	movs	r2, r4
 800db9e:	f7fb fcc1 	bl	8009524 <Paint_DrawNum>
	}

	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	7d5b      	ldrb	r3, [r3, #21]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	3319      	adds	r3, #25
 800dbaa:	b298      	uxth	r0, r3
			settings->coordinatesTemperatureCompensation[Y], 'C', &Font16,
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	7d9b      	ldrb	r3, [r3, #22]
	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800dbb0:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2221      	movs	r2, #33	; 0x21
 800dbb6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800dbb8:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	2420      	movs	r4, #32
 800dbbe:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800dbc0:	b292      	uxth	r2, r2
 800dbc2:	4c30      	ldr	r4, [pc, #192]	; (800dc84 <interfaceSettingsDraw+0x5b8>)
 800dbc4:	9201      	str	r2, [sp, #4]
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	0023      	movs	r3, r4
 800dbca:	2243      	movs	r2, #67	; 0x43
 800dbcc:	f7fb fb48 	bl	8009260 <Paint_DrawChar>

	//actual setting marker

	uint8_t markerPosition[2] = { 0, 0 };
 800dbd0:	2314      	movs	r3, #20
 800dbd2:	18fb      	adds	r3, r7, r3
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	801a      	strh	r2, [r3, #0]

	switch (watch->settingsItem) {
 800dbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbda:	78db      	ldrb	r3, [r3, #3]
 800dbdc:	2b08      	cmp	r3, #8
 800dbde:	d86b      	bhi.n	800dcb8 <interfaceSettingsDraw+0x5ec>
 800dbe0:	009a      	lsls	r2, r3, #2
 800dbe2:	4b2b      	ldr	r3, [pc, #172]	; (800dc90 <interfaceSettingsDraw+0x5c4>)
 800dbe4:	18d3      	adds	r3, r2, r3
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	469f      	mov	pc, r3

	case WATCH_SETTINGS_ITEM_HOUR:
		memcpy(markerPosition, settings->coordinatesHours, 2);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2214      	movs	r2, #20
 800dbee:	18ba      	adds	r2, r7, r2
 800dbf0:	0010      	movs	r0, r2
 800dbf2:	0019      	movs	r1, r3
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	001a      	movs	r2, r3
 800dbf8:	f000 ffe8 	bl	800ebcc <memcpy>
		break;
 800dbfc:	e05c      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_MINUTE:
		memcpy(markerPosition, settings->coordinatesMinutes, 2);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3303      	adds	r3, #3
 800dc02:	2214      	movs	r2, #20
 800dc04:	18ba      	adds	r2, r7, r2
 800dc06:	0010      	movs	r0, r2
 800dc08:	0019      	movs	r1, r3
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	001a      	movs	r2, r3
 800dc0e:	f000 ffdd 	bl	800ebcc <memcpy>
		break;
 800dc12:	e051      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_SECOND:
		memcpy(markerPosition, settings->coordinatesSeconds, 2);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3306      	adds	r3, #6
 800dc18:	2214      	movs	r2, #20
 800dc1a:	18ba      	adds	r2, r7, r2
 800dc1c:	0010      	movs	r0, r2
 800dc1e:	0019      	movs	r1, r3
 800dc20:	2302      	movs	r3, #2
 800dc22:	001a      	movs	r2, r3
 800dc24:	f000 ffd2 	bl	800ebcc <memcpy>
		break;
 800dc28:	e046      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_DAY:
		memcpy(markerPosition, settings->coordinatesDays, 2);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3309      	adds	r3, #9
 800dc2e:	2214      	movs	r2, #20
 800dc30:	18ba      	adds	r2, r7, r2
 800dc32:	0010      	movs	r0, r2
 800dc34:	0019      	movs	r1, r3
 800dc36:	2302      	movs	r3, #2
 800dc38:	001a      	movs	r2, r3
 800dc3a:	f000 ffc7 	bl	800ebcc <memcpy>
		break;
 800dc3e:	e03b      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_MONTH:
		memcpy(markerPosition, settings->coordinatesMonths, 2);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	330c      	adds	r3, #12
 800dc44:	2214      	movs	r2, #20
 800dc46:	18ba      	adds	r2, r7, r2
 800dc48:	0010      	movs	r0, r2
 800dc4a:	0019      	movs	r1, r3
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	001a      	movs	r2, r3
 800dc50:	f000 ffbc 	bl	800ebcc <memcpy>
		break;
 800dc54:	e030      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_YEAR:
		memcpy(markerPosition, settings->coordinatesYears, 2);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	330f      	adds	r3, #15
 800dc5a:	2214      	movs	r2, #20
 800dc5c:	18ba      	adds	r2, r7, r2
 800dc5e:	0010      	movs	r0, r2
 800dc60:	0019      	movs	r1, r3
 800dc62:	2302      	movs	r3, #2
 800dc64:	001a      	movs	r2, r3
 800dc66:	f000 ffb1 	bl	800ebcc <memcpy>
		break;
 800dc6a:	e025      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_PREF:
		memcpy(markerPosition, settings->coordinatesPressureReference, 2);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	3312      	adds	r3, #18
 800dc70:	2214      	movs	r2, #20
 800dc72:	18ba      	adds	r2, r7, r2
 800dc74:	0010      	movs	r0, r2
 800dc76:	0019      	movs	r1, r3
 800dc78:	2302      	movs	r3, #2
 800dc7a:	001a      	movs	r2, r3
 800dc7c:	f000 ffa6 	bl	800ebcc <memcpy>
		break;
 800dc80:	e01a      	b.n	800dcb8 <interfaceSettingsDraw+0x5ec>
 800dc82:	46c0      	nop			; (mov r8, r8)
 800dc84:	20000010 	.word	0x20000010
 800dc88:	20000018 	.word	0x20000018
 800dc8c:	0801196c 	.word	0x0801196c
 800dc90:	08015808 	.word	0x08015808
	case WATCH_SETTINGS_ITEM_TOFFSET:
		memcpy(markerPosition, settings->coordinatesTemperatureCompensation, 2);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	3315      	adds	r3, #21
 800dc98:	2414      	movs	r4, #20
 800dc9a:	193a      	adds	r2, r7, r4
 800dc9c:	0010      	movs	r0, r2
 800dc9e:	0019      	movs	r1, r3
 800dca0:	2302      	movs	r3, #2
 800dca2:	001a      	movs	r2, r3
 800dca4:	f000 ff92 	bl	800ebcc <memcpy>
		markerPosition[X] = markerPosition[X] - 7;
 800dca8:	0021      	movs	r1, r4
 800dcaa:	187b      	adds	r3, r7, r1
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	3b07      	subs	r3, #7
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	187b      	adds	r3, r7, r1
 800dcb4:	701a      	strb	r2, [r3, #0]
		break;
 800dcb6:	46c0      	nop			; (mov r8, r8)

	}

	Paint_DrawPoint(markerPosition[X] - 2, markerPosition[Y] + 7,
 800dcb8:	2214      	movs	r2, #20
 800dcba:	18bb      	adds	r3, r7, r2
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	3b02      	subs	r3, #2
 800dcc2:	b298      	uxth	r0, r3
 800dcc4:	18bb      	adds	r3, r7, r2
 800dcc6:	785b      	ldrb	r3, [r3, #1]
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	3307      	adds	r3, #7
 800dccc:	b299      	uxth	r1, r3
			settings->colorForeground, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2221      	movs	r2, #33	; 0x21
 800dcd2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPoint(markerPosition[X] - 2, markerPosition[Y] + 7,
 800dcd4:	b29a      	uxth	r2, r3
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	2303      	movs	r3, #3
 800dcdc:	f7fa fcf0 	bl	80086c0 <Paint_DrawPoint>
//	Paint_DrawNum(100, 100, watch->settingsItem, &Font16,
//			settings->colorForeground, settings->colorBackground);

	//net
//	Paint_DrawLine(130, 0, 130, 200, settings->colorForeground, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
	Paint_DrawRectangle(130, 0, 200, 200, settings->colorForeground,
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2221      	movs	r2, #33	; 0x21
 800dce4:	5c9b      	ldrb	r3, [r3, r2]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	2201      	movs	r2, #1
 800dcea:	9202      	str	r2, [sp, #8]
 800dcec:	2201      	movs	r2, #1
 800dcee:	9201      	str	r2, [sp, #4]
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	23c8      	movs	r3, #200	; 0xc8
 800dcf4:	22c8      	movs	r2, #200	; 0xc8
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	2082      	movs	r0, #130	; 0x82
 800dcfa:	f7fa ff93 	bl	8008c24 <Paint_DrawRectangle>
			DOT_PIXEL_1X1, DRAW_FILL_FULL);
	Paint_DrawLine(0, 75, 200, 75, settings->colorForeground, DOT_PIXEL_3X3,
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2221      	movs	r2, #33	; 0x21
 800dd02:	5c9b      	ldrb	r3, [r3, r2]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	2200      	movs	r2, #0
 800dd08:	9202      	str	r2, [sp, #8]
 800dd0a:	2203      	movs	r2, #3
 800dd0c:	9201      	str	r2, [sp, #4]
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	234b      	movs	r3, #75	; 0x4b
 800dd12:	22c8      	movs	r2, #200	; 0xc8
 800dd14:	214b      	movs	r1, #75	; 0x4b
 800dd16:	2000      	movs	r0, #0
 800dd18:	f7fa fdbc 	bl	8008894 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 120, 200, 120, settings->colorForeground, DOT_PIXEL_3X3,
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2221      	movs	r2, #33	; 0x21
 800dd20:	5c9b      	ldrb	r3, [r3, r2]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2200      	movs	r2, #0
 800dd26:	9202      	str	r2, [sp, #8]
 800dd28:	2203      	movs	r2, #3
 800dd2a:	9201      	str	r2, [sp, #4]
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	2378      	movs	r3, #120	; 0x78
 800dd30:	22c8      	movs	r2, #200	; 0xc8
 800dd32:	2178      	movs	r1, #120	; 0x78
 800dd34:	2000      	movs	r0, #0
 800dd36:	f7fa fdad 	bl	8008894 <Paint_DrawLine>
			LINE_STYLE_SOLID);

	//sensors labels
	Paint_DrawChar(160, 30, '+', &Font24, settings->colorBackground,
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2220      	movs	r2, #32
 800dd3e:	5c9b      	ldrb	r3, [r3, r2]
 800dd40:	b29b      	uxth	r3, r3
			settings->colorForeground);
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	2121      	movs	r1, #33	; 0x21
 800dd46:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawChar(160, 30, '+', &Font24, settings->colorBackground,
 800dd48:	b292      	uxth	r2, r2
 800dd4a:	4920      	ldr	r1, [pc, #128]	; (800ddcc <interfaceSettingsDraw+0x700>)
 800dd4c:	9201      	str	r2, [sp, #4]
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	000b      	movs	r3, r1
 800dd52:	222b      	movs	r2, #43	; 0x2b
 800dd54:	211e      	movs	r1, #30
 800dd56:	20a0      	movs	r0, #160	; 0xa0
 800dd58:	f7fb fa82 	bl	8009260 <Paint_DrawChar>
	Paint_DrawChar(180, 90, '-', &Font24, settings->colorBackground,
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2220      	movs	r2, #32
 800dd60:	5c9b      	ldrb	r3, [r3, r2]
 800dd62:	b29b      	uxth	r3, r3
			settings->colorForeground);
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	2121      	movs	r1, #33	; 0x21
 800dd68:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawChar(180, 90, '-', &Font24, settings->colorBackground,
 800dd6a:	b292      	uxth	r2, r2
 800dd6c:	4917      	ldr	r1, [pc, #92]	; (800ddcc <interfaceSettingsDraw+0x700>)
 800dd6e:	9201      	str	r2, [sp, #4]
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	000b      	movs	r3, r1
 800dd74:	222d      	movs	r2, #45	; 0x2d
 800dd76:	215a      	movs	r1, #90	; 0x5a
 800dd78:	20b4      	movs	r0, #180	; 0xb4
 800dd7a:	f7fb fa71 	bl	8009260 <Paint_DrawChar>
	Paint_DrawChar(160, 150, '>', &Font24, settings->colorBackground,
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2220      	movs	r2, #32
 800dd82:	5c9b      	ldrb	r3, [r3, r2]
 800dd84:	b29b      	uxth	r3, r3
			settings->colorForeground);
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	2121      	movs	r1, #33	; 0x21
 800dd8a:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawChar(160, 150, '>', &Font24, settings->colorBackground,
 800dd8c:	b292      	uxth	r2, r2
 800dd8e:	490f      	ldr	r1, [pc, #60]	; (800ddcc <interfaceSettingsDraw+0x700>)
 800dd90:	9201      	str	r2, [sp, #4]
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	000b      	movs	r3, r1
 800dd96:	223e      	movs	r2, #62	; 0x3e
 800dd98:	2196      	movs	r1, #150	; 0x96
 800dd9a:	20a0      	movs	r0, #160	; 0xa0
 800dd9c:	f7fb fa60 	bl	8009260 <Paint_DrawChar>

	//logo
	Paint_DrawString_EN(60, 175, "libra", &Font16, settings->colorForeground,
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2221      	movs	r2, #33	; 0x21
 800dda4:	5c9b      	ldrb	r3, [r3, r2]
 800dda6:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	2120      	movs	r1, #32
 800ddac:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawString_EN(60, 175, "libra", &Font16, settings->colorForeground,
 800ddae:	b292      	uxth	r2, r2
 800ddb0:	4807      	ldr	r0, [pc, #28]	; (800ddd0 <interfaceSettingsDraw+0x704>)
 800ddb2:	4908      	ldr	r1, [pc, #32]	; (800ddd4 <interfaceSettingsDraw+0x708>)
 800ddb4:	9201      	str	r2, [sp, #4]
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	0003      	movs	r3, r0
 800ddba:	000a      	movs	r2, r1
 800ddbc:	21af      	movs	r1, #175	; 0xaf
 800ddbe:	203c      	movs	r0, #60	; 0x3c
 800ddc0:	f7fb fb32 	bl	8009428 <Paint_DrawString_EN>

}
 800ddc4:	46c0      	nop			; (mov r8, r8)
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	b006      	add	sp, #24
 800ddca:	bdb0      	pop	{r4, r5, r7, pc}
 800ddcc:	20000020 	.word	0x20000020
 800ddd0:	20000010 	.word	0x20000010
 800ddd4:	08011934 	.word	0x08011934

0800ddd8 <interfaceDrawIcon>:

void interfaceDrawIcon(uint8_t x, uint8_t y, uint8_t color, uint8_t icon) {
 800ddd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddda:	b089      	sub	sp, #36	; 0x24
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	0005      	movs	r5, r0
 800dde0:	000c      	movs	r4, r1
 800dde2:	0010      	movs	r0, r2
 800dde4:	0019      	movs	r1, r3
 800dde6:	1dfb      	adds	r3, r7, #7
 800dde8:	1c2a      	adds	r2, r5, #0
 800ddea:	701a      	strb	r2, [r3, #0]
 800ddec:	1dbb      	adds	r3, r7, #6
 800ddee:	1c22      	adds	r2, r4, #0
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	1d7b      	adds	r3, r7, #5
 800ddf4:	1c02      	adds	r2, r0, #0
 800ddf6:	701a      	strb	r2, [r3, #0]
 800ddf8:	1d3b      	adds	r3, r7, #4
 800ddfa:	1c0a      	adds	r2, r1, #0
 800ddfc:	701a      	strb	r2, [r3, #0]
	if (icon == INTERFACE_ICON_SUN) {
 800ddfe:	1d3b      	adds	r3, r7, #4
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b03      	cmp	r3, #3
 800de04:	d000      	beq.n	800de08 <interfaceDrawIcon+0x30>
 800de06:	e0b8      	b.n	800df7a <interfaceDrawIcon+0x1a2>
		Paint_DrawCircle(x, y, 7, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800de08:	1dfb      	adds	r3, r7, #7
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	b298      	uxth	r0, r3
 800de0e:	1dbb      	adds	r3, r7, #6
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	b299      	uxth	r1, r3
 800de14:	1d7b      	adds	r3, r7, #5
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	b29b      	uxth	r3, r3
 800de1a:	2201      	movs	r2, #1
 800de1c:	9201      	str	r2, [sp, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	9200      	str	r2, [sp, #0]
 800de22:	2207      	movs	r2, #7
 800de24:	f7fa ffca 	bl	8008dbc <Paint_DrawCircle>

		Paint_DrawPointer(x, y, 0, 15, 12, color, DOT_PIXEL_1X1,
 800de28:	1dfb      	adds	r3, r7, #7
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	b298      	uxth	r0, r3
 800de2e:	1dbb      	adds	r3, r7, #6
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b299      	uxth	r1, r3
 800de34:	1d7b      	adds	r3, r7, #5
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	b29b      	uxth	r3, r3
 800de3a:	2400      	movs	r4, #0
 800de3c:	2200      	movs	r2, #0
 800de3e:	9203      	str	r2, [sp, #12]
 800de40:	2201      	movs	r2, #1
 800de42:	9202      	str	r2, [sp, #8]
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	230c      	movs	r3, #12
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	230f      	movs	r3, #15
 800de4c:	1c22      	adds	r2, r4, #0
 800de4e:	f7fa fdff 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 0.79, 15, 12, color, DOT_PIXEL_1X1,
 800de52:	1dfb      	adds	r3, r7, #7
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	b298      	uxth	r0, r3
 800de58:	1dbb      	adds	r3, r7, #6
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	b299      	uxth	r1, r3
 800de5e:	1d7b      	adds	r3, r7, #5
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	b29b      	uxth	r3, r3
 800de64:	4cb4      	ldr	r4, [pc, #720]	; (800e138 <interfaceDrawIcon+0x360>)
 800de66:	2200      	movs	r2, #0
 800de68:	9203      	str	r2, [sp, #12]
 800de6a:	2201      	movs	r2, #1
 800de6c:	9202      	str	r2, [sp, #8]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	230c      	movs	r3, #12
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	230f      	movs	r3, #15
 800de76:	1c22      	adds	r2, r4, #0
 800de78:	f7fa fdea 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 1.57, 15, 12, color, DOT_PIXEL_1X1,
 800de7c:	1dfb      	adds	r3, r7, #7
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	b298      	uxth	r0, r3
 800de82:	1dbb      	adds	r3, r7, #6
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	b299      	uxth	r1, r3
 800de88:	1d7b      	adds	r3, r7, #5
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	4cab      	ldr	r4, [pc, #684]	; (800e13c <interfaceDrawIcon+0x364>)
 800de90:	2200      	movs	r2, #0
 800de92:	9203      	str	r2, [sp, #12]
 800de94:	2201      	movs	r2, #1
 800de96:	9202      	str	r2, [sp, #8]
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	230c      	movs	r3, #12
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	230f      	movs	r3, #15
 800dea0:	1c22      	adds	r2, r4, #0
 800dea2:	f7fa fdd5 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 2.36, 15, 12, color, DOT_PIXEL_1X1,
 800dea6:	1dfb      	adds	r3, r7, #7
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	b298      	uxth	r0, r3
 800deac:	1dbb      	adds	r3, r7, #6
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	b299      	uxth	r1, r3
 800deb2:	1d7b      	adds	r3, r7, #5
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	4ca1      	ldr	r4, [pc, #644]	; (800e140 <interfaceDrawIcon+0x368>)
 800deba:	2200      	movs	r2, #0
 800debc:	9203      	str	r2, [sp, #12]
 800debe:	2201      	movs	r2, #1
 800dec0:	9202      	str	r2, [sp, #8]
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	230c      	movs	r3, #12
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	230f      	movs	r3, #15
 800deca:	1c22      	adds	r2, r4, #0
 800decc:	f7fa fdc0 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 3.14, 15, 12, color, DOT_PIXEL_1X1,
 800ded0:	1dfb      	adds	r3, r7, #7
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	b298      	uxth	r0, r3
 800ded6:	1dbb      	adds	r3, r7, #6
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	b299      	uxth	r1, r3
 800dedc:	1d7b      	adds	r3, r7, #5
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4c98      	ldr	r4, [pc, #608]	; (800e144 <interfaceDrawIcon+0x36c>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	9203      	str	r2, [sp, #12]
 800dee8:	2201      	movs	r2, #1
 800deea:	9202      	str	r2, [sp, #8]
 800deec:	9301      	str	r3, [sp, #4]
 800deee:	230c      	movs	r3, #12
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	230f      	movs	r3, #15
 800def4:	1c22      	adds	r2, r4, #0
 800def6:	f7fa fdab 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 3.93, 15, 12, color, DOT_PIXEL_1X1,
 800defa:	1dfb      	adds	r3, r7, #7
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	b298      	uxth	r0, r3
 800df00:	1dbb      	adds	r3, r7, #6
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	b299      	uxth	r1, r3
 800df06:	1d7b      	adds	r3, r7, #5
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	4c8e      	ldr	r4, [pc, #568]	; (800e148 <interfaceDrawIcon+0x370>)
 800df0e:	2200      	movs	r2, #0
 800df10:	9203      	str	r2, [sp, #12]
 800df12:	2201      	movs	r2, #1
 800df14:	9202      	str	r2, [sp, #8]
 800df16:	9301      	str	r3, [sp, #4]
 800df18:	230c      	movs	r3, #12
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	230f      	movs	r3, #15
 800df1e:	1c22      	adds	r2, r4, #0
 800df20:	f7fa fd96 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 4.71, 15, 12, color, DOT_PIXEL_1X1,
 800df24:	1dfb      	adds	r3, r7, #7
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	b298      	uxth	r0, r3
 800df2a:	1dbb      	adds	r3, r7, #6
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	b299      	uxth	r1, r3
 800df30:	1d7b      	adds	r3, r7, #5
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	b29b      	uxth	r3, r3
 800df36:	4c85      	ldr	r4, [pc, #532]	; (800e14c <interfaceDrawIcon+0x374>)
 800df38:	2200      	movs	r2, #0
 800df3a:	9203      	str	r2, [sp, #12]
 800df3c:	2201      	movs	r2, #1
 800df3e:	9202      	str	r2, [sp, #8]
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	230c      	movs	r3, #12
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	230f      	movs	r3, #15
 800df48:	1c22      	adds	r2, r4, #0
 800df4a:	f7fa fd81 	bl	8008a50 <Paint_DrawPointer>
				LINE_STYLE_SOLID);
		Paint_DrawPointer(x, y, 5.5, 15, 12, color, DOT_PIXEL_1X1,
 800df4e:	1dfb      	adds	r3, r7, #7
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	b298      	uxth	r0, r3
 800df54:	1dbb      	adds	r3, r7, #6
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	b299      	uxth	r1, r3
 800df5a:	1d7b      	adds	r3, r7, #5
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	b29b      	uxth	r3, r3
 800df60:	4c7b      	ldr	r4, [pc, #492]	; (800e150 <interfaceDrawIcon+0x378>)
 800df62:	2200      	movs	r2, #0
 800df64:	9203      	str	r2, [sp, #12]
 800df66:	2201      	movs	r2, #1
 800df68:	9202      	str	r2, [sp, #8]
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	230c      	movs	r3, #12
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	230f      	movs	r3, #15
 800df72:	1c22      	adds	r2, r4, #0
 800df74:	f7fa fd6c 	bl	8008a50 <Paint_DrawPointer>
				DOT_PIXEL_1X1, LINE_STYLE_SOLID);
		Paint_DrawLine(x + 6, y + 13, x - xShift + 6, y + yShift + 13, color,
				DOT_PIXEL_1X1, LINE_STYLE_SOLID);
//		Paint_DrawLine(x+10, y+13, x-xShift+10, y+yShift+13, color, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
	}
}
 800df78:	e204      	b.n	800e384 <interfaceDrawIcon+0x5ac>
	} else if (icon == INTERFACE_ICON_CLOUD) {
 800df7a:	1d3b      	adds	r3, r7, #4
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d000      	beq.n	800df84 <interfaceDrawIcon+0x1ac>
 800df82:	e0e7      	b.n	800e154 <interfaceDrawIcon+0x37c>
		Paint_DrawCircle(x + 4, y - 3, 6, color, DOT_PIXEL_1X1,
 800df84:	1dfb      	adds	r3, r7, #7
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	3304      	adds	r3, #4
 800df8c:	b298      	uxth	r0, r3
 800df8e:	1dbb      	adds	r3, r7, #6
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	b29b      	uxth	r3, r3
 800df94:	3b03      	subs	r3, #3
 800df96:	b299      	uxth	r1, r3
 800df98:	1d7b      	adds	r3, r7, #5
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	2200      	movs	r2, #0
 800dfa0:	9201      	str	r2, [sp, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	9200      	str	r2, [sp, #0]
 800dfa6:	2206      	movs	r2, #6
 800dfa8:	f7fa ff08 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawPointer(x + 4, y - 3, 0, 14, 11, color, DOT_PIXEL_1X1,
 800dfac:	1dfb      	adds	r3, r7, #7
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	b298      	uxth	r0, r3
 800dfb6:	1dbb      	adds	r3, r7, #6
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	3b03      	subs	r3, #3
 800dfbe:	b299      	uxth	r1, r3
 800dfc0:	1d7b      	adds	r3, r7, #5
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	2400      	movs	r4, #0
 800dfc8:	2200      	movs	r2, #0
 800dfca:	9203      	str	r2, [sp, #12]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	9202      	str	r2, [sp, #8]
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	230b      	movs	r3, #11
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	230e      	movs	r3, #14
 800dfd8:	1c22      	adds	r2, r4, #0
 800dfda:	f7fa fd39 	bl	8008a50 <Paint_DrawPointer>
		Paint_DrawPointer(x + 4, y - 3, 3.93, 14, 11, color, DOT_PIXEL_1X1,
 800dfde:	1dfb      	adds	r3, r7, #7
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	b298      	uxth	r0, r3
 800dfe8:	1dbb      	adds	r3, r7, #6
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	3b03      	subs	r3, #3
 800dff0:	b299      	uxth	r1, r3
 800dff2:	1d7b      	adds	r3, r7, #5
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	4c53      	ldr	r4, [pc, #332]	; (800e148 <interfaceDrawIcon+0x370>)
 800dffa:	2200      	movs	r2, #0
 800dffc:	9203      	str	r2, [sp, #12]
 800dffe:	2201      	movs	r2, #1
 800e000:	9202      	str	r2, [sp, #8]
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	230b      	movs	r3, #11
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	230e      	movs	r3, #14
 800e00a:	1c22      	adds	r2, r4, #0
 800e00c:	f7fa fd20 	bl	8008a50 <Paint_DrawPointer>
		Paint_DrawPointer(x + 4, y - 3, 4.71, 14, 11, color, DOT_PIXEL_1X1,
 800e010:	1dfb      	adds	r3, r7, #7
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	b29b      	uxth	r3, r3
 800e016:	3304      	adds	r3, #4
 800e018:	b298      	uxth	r0, r3
 800e01a:	1dbb      	adds	r3, r7, #6
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	b29b      	uxth	r3, r3
 800e020:	3b03      	subs	r3, #3
 800e022:	b299      	uxth	r1, r3
 800e024:	1d7b      	adds	r3, r7, #5
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	b29b      	uxth	r3, r3
 800e02a:	4c48      	ldr	r4, [pc, #288]	; (800e14c <interfaceDrawIcon+0x374>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	9203      	str	r2, [sp, #12]
 800e030:	2201      	movs	r2, #1
 800e032:	9202      	str	r2, [sp, #8]
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	230b      	movs	r3, #11
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	230e      	movs	r3, #14
 800e03c:	1c22      	adds	r2, r4, #0
 800e03e:	f7fa fd07 	bl	8008a50 <Paint_DrawPointer>
		Paint_DrawPointer(x + 4, y - 3, 5.5, 14, 11, color, DOT_PIXEL_1X1,
 800e042:	1dfb      	adds	r3, r7, #7
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	b29b      	uxth	r3, r3
 800e048:	3304      	adds	r3, #4
 800e04a:	b298      	uxth	r0, r3
 800e04c:	1dbb      	adds	r3, r7, #6
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b29b      	uxth	r3, r3
 800e052:	3b03      	subs	r3, #3
 800e054:	b299      	uxth	r1, r3
 800e056:	1d7b      	adds	r3, r7, #5
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	4c3c      	ldr	r4, [pc, #240]	; (800e150 <interfaceDrawIcon+0x378>)
 800e05e:	2200      	movs	r2, #0
 800e060:	9203      	str	r2, [sp, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	9202      	str	r2, [sp, #8]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	230b      	movs	r3, #11
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	230e      	movs	r3, #14
 800e06e:	1c22      	adds	r2, r4, #0
 800e070:	f7fa fcee 	bl	8008a50 <Paint_DrawPointer>
		Paint_DrawCircle(x, y, 6, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e074:	1dfb      	adds	r3, r7, #7
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	b298      	uxth	r0, r3
 800e07a:	1dbb      	adds	r3, r7, #6
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	b299      	uxth	r1, r3
 800e080:	1d7b      	adds	r3, r7, #5
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	b29b      	uxth	r3, r3
 800e086:	2201      	movs	r2, #1
 800e088:	9201      	str	r2, [sp, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	9200      	str	r2, [sp, #0]
 800e08e:	2206      	movs	r2, #6
 800e090:	f7fa fe94 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x + 6, y + 1, 5, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e094:	1dfb      	adds	r3, r7, #7
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	3306      	adds	r3, #6
 800e09c:	b298      	uxth	r0, r3
 800e09e:	1dbb      	adds	r3, r7, #6
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	b299      	uxth	r1, r3
 800e0a8:	1d7b      	adds	r3, r7, #5
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	9201      	str	r2, [sp, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	9200      	str	r2, [sp, #0]
 800e0b6:	2205      	movs	r2, #5
 800e0b8:	f7fa fe80 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x - 6, y + 1, 5, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e0bc:	1dfb      	adds	r3, r7, #7
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	3b06      	subs	r3, #6
 800e0c4:	b298      	uxth	r0, r3
 800e0c6:	1dbb      	adds	r3, r7, #6
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	b299      	uxth	r1, r3
 800e0d0:	1d7b      	adds	r3, r7, #5
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	9201      	str	r2, [sp, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	9200      	str	r2, [sp, #0]
 800e0de:	2205      	movs	r2, #5
 800e0e0:	f7fa fe6c 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x - 4, y + 6, 4, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e0e4:	1dfb      	adds	r3, r7, #7
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	3b04      	subs	r3, #4
 800e0ec:	b298      	uxth	r0, r3
 800e0ee:	1dbb      	adds	r3, r7, #6
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	3306      	adds	r3, #6
 800e0f6:	b299      	uxth	r1, r3
 800e0f8:	1d7b      	adds	r3, r7, #5
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	2201      	movs	r2, #1
 800e100:	9201      	str	r2, [sp, #4]
 800e102:	2201      	movs	r2, #1
 800e104:	9200      	str	r2, [sp, #0]
 800e106:	2204      	movs	r2, #4
 800e108:	f7fa fe58 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x + 4, y + 6, 4, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e10c:	1dfb      	adds	r3, r7, #7
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	b29b      	uxth	r3, r3
 800e112:	3304      	adds	r3, #4
 800e114:	b298      	uxth	r0, r3
 800e116:	1dbb      	adds	r3, r7, #6
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	3306      	adds	r3, #6
 800e11e:	b299      	uxth	r1, r3
 800e120:	1d7b      	adds	r3, r7, #5
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	b29b      	uxth	r3, r3
 800e126:	2201      	movs	r2, #1
 800e128:	9201      	str	r2, [sp, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	9200      	str	r2, [sp, #0]
 800e12e:	2204      	movs	r2, #4
 800e130:	f7fa fe44 	bl	8008dbc <Paint_DrawCircle>
}
 800e134:	e126      	b.n	800e384 <interfaceDrawIcon+0x5ac>
 800e136:	46c0      	nop			; (mov r8, r8)
 800e138:	3f4a3d71 	.word	0x3f4a3d71
 800e13c:	3fc8f5c3 	.word	0x3fc8f5c3
 800e140:	40170a3d 	.word	0x40170a3d
 800e144:	4048f5c3 	.word	0x4048f5c3
 800e148:	407b851f 	.word	0x407b851f
 800e14c:	4096b852 	.word	0x4096b852
 800e150:	40b00000 	.word	0x40b00000
	} else if (icon == INTERFACE_ICON_RAIN) {
 800e154:	1d3b      	adds	r3, r7, #4
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d000      	beq.n	800e15e <interfaceDrawIcon+0x386>
 800e15c:	e112      	b.n	800e384 <interfaceDrawIcon+0x5ac>
		Paint_DrawCircle(x, y, 6, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e15e:	1dfb      	adds	r3, r7, #7
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	b298      	uxth	r0, r3
 800e164:	1dbb      	adds	r3, r7, #6
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	b299      	uxth	r1, r3
 800e16a:	1d7b      	adds	r3, r7, #5
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	b29b      	uxth	r3, r3
 800e170:	2201      	movs	r2, #1
 800e172:	9201      	str	r2, [sp, #4]
 800e174:	2201      	movs	r2, #1
 800e176:	9200      	str	r2, [sp, #0]
 800e178:	2206      	movs	r2, #6
 800e17a:	f7fa fe1f 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x + 6, y + 1, 5, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e17e:	1dfb      	adds	r3, r7, #7
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	b29b      	uxth	r3, r3
 800e184:	3306      	adds	r3, #6
 800e186:	b298      	uxth	r0, r3
 800e188:	1dbb      	adds	r3, r7, #6
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	3301      	adds	r3, #1
 800e190:	b299      	uxth	r1, r3
 800e192:	1d7b      	adds	r3, r7, #5
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	b29b      	uxth	r3, r3
 800e198:	2201      	movs	r2, #1
 800e19a:	9201      	str	r2, [sp, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	9200      	str	r2, [sp, #0]
 800e1a0:	2205      	movs	r2, #5
 800e1a2:	f7fa fe0b 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x - 6, y + 1, 5, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e1a6:	1dfb      	adds	r3, r7, #7
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	3b06      	subs	r3, #6
 800e1ae:	b298      	uxth	r0, r3
 800e1b0:	1dbb      	adds	r3, r7, #6
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	b299      	uxth	r1, r3
 800e1ba:	1d7b      	adds	r3, r7, #5
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	9201      	str	r2, [sp, #4]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	9200      	str	r2, [sp, #0]
 800e1c8:	2205      	movs	r2, #5
 800e1ca:	f7fa fdf7 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x - 4, y + 6, 4, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e1ce:	1dfb      	adds	r3, r7, #7
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	3b04      	subs	r3, #4
 800e1d6:	b298      	uxth	r0, r3
 800e1d8:	1dbb      	adds	r3, r7, #6
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	3306      	adds	r3, #6
 800e1e0:	b299      	uxth	r1, r3
 800e1e2:	1d7b      	adds	r3, r7, #5
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	9201      	str	r2, [sp, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	9200      	str	r2, [sp, #0]
 800e1f0:	2204      	movs	r2, #4
 800e1f2:	f7fa fde3 	bl	8008dbc <Paint_DrawCircle>
		Paint_DrawCircle(x + 4, y + 6, 4, color, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e1f6:	1dfb      	adds	r3, r7, #7
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	b298      	uxth	r0, r3
 800e200:	1dbb      	adds	r3, r7, #6
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	b29b      	uxth	r3, r3
 800e206:	3306      	adds	r3, #6
 800e208:	b299      	uxth	r1, r3
 800e20a:	1d7b      	adds	r3, r7, #5
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	2201      	movs	r2, #1
 800e212:	9201      	str	r2, [sp, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	9200      	str	r2, [sp, #0]
 800e218:	2204      	movs	r2, #4
 800e21a:	f7fa fdcf 	bl	8008dbc <Paint_DrawCircle>
		uint8_t xShift = 3;
 800e21e:	260f      	movs	r6, #15
 800e220:	19bb      	adds	r3, r7, r6
 800e222:	2203      	movs	r2, #3
 800e224:	701a      	strb	r2, [r3, #0]
		uint8_t yShift = 6;
 800e226:	250e      	movs	r5, #14
 800e228:	197b      	adds	r3, r7, r5
 800e22a:	2206      	movs	r2, #6
 800e22c:	701a      	strb	r2, [r3, #0]
		Paint_DrawLine(x - 6, y + 13, x - xShift - 6, y + yShift + 13, color,
 800e22e:	1dfb      	adds	r3, r7, #7
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	b29b      	uxth	r3, r3
 800e234:	3b06      	subs	r3, #6
 800e236:	b298      	uxth	r0, r3
 800e238:	1dbb      	adds	r3, r7, #6
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	330d      	adds	r3, #13
 800e240:	b299      	uxth	r1, r3
 800e242:	1dfb      	adds	r3, r7, #7
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	b29a      	uxth	r2, r3
 800e248:	19bb      	adds	r3, r7, r6
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	b29b      	uxth	r3, r3
 800e252:	3b06      	subs	r3, #6
 800e254:	b29c      	uxth	r4, r3
 800e256:	1dbb      	adds	r3, r7, #6
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	197b      	adds	r3, r7, r5
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	b29b      	uxth	r3, r3
 800e262:	18d3      	adds	r3, r2, r3
 800e264:	b29b      	uxth	r3, r3
 800e266:	330d      	adds	r3, #13
 800e268:	b29a      	uxth	r2, r3
 800e26a:	1d7b      	adds	r3, r7, #5
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	b29b      	uxth	r3, r3
 800e270:	2500      	movs	r5, #0
 800e272:	9502      	str	r5, [sp, #8]
 800e274:	2501      	movs	r5, #1
 800e276:	9501      	str	r5, [sp, #4]
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	0013      	movs	r3, r2
 800e27c:	0022      	movs	r2, r4
 800e27e:	f7fa fb09 	bl	8008894 <Paint_DrawLine>
		Paint_DrawLine(x - 2, y + 13, x - xShift - 2, y + yShift + 13, color,
 800e282:	1dfb      	adds	r3, r7, #7
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	b29b      	uxth	r3, r3
 800e288:	3b02      	subs	r3, #2
 800e28a:	b298      	uxth	r0, r3
 800e28c:	1dbb      	adds	r3, r7, #6
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	b29b      	uxth	r3, r3
 800e292:	330d      	adds	r3, #13
 800e294:	b299      	uxth	r1, r3
 800e296:	1dfb      	adds	r3, r7, #7
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	19bb      	adds	r3, r7, r6
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	3b02      	subs	r3, #2
 800e2a8:	b29c      	uxth	r4, r3
 800e2aa:	1dbb      	adds	r3, r7, #6
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	250e      	movs	r5, #14
 800e2b2:	197b      	adds	r3, r7, r5
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	18d3      	adds	r3, r2, r3
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	330d      	adds	r3, #13
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	1d7b      	adds	r3, r7, #5
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	2500      	movs	r5, #0
 800e2c8:	9502      	str	r5, [sp, #8]
 800e2ca:	2501      	movs	r5, #1
 800e2cc:	9501      	str	r5, [sp, #4]
 800e2ce:	9300      	str	r3, [sp, #0]
 800e2d0:	0013      	movs	r3, r2
 800e2d2:	0022      	movs	r2, r4
 800e2d4:	f7fa fade 	bl	8008894 <Paint_DrawLine>
		Paint_DrawLine(x + 2, y + 13, x - xShift + 2, y + yShift + 13, color,
 800e2d8:	1dfb      	adds	r3, r7, #7
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	3302      	adds	r3, #2
 800e2e0:	b298      	uxth	r0, r3
 800e2e2:	1dbb      	adds	r3, r7, #6
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	330d      	adds	r3, #13
 800e2ea:	b299      	uxth	r1, r3
 800e2ec:	1dfb      	adds	r3, r7, #7
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	19bb      	adds	r3, r7, r6
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	3302      	adds	r3, #2
 800e2fe:	b29c      	uxth	r4, r3
 800e300:	1dbb      	adds	r3, r7, #6
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	b29a      	uxth	r2, r3
 800e306:	250e      	movs	r5, #14
 800e308:	197b      	adds	r3, r7, r5
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	18d3      	adds	r3, r2, r3
 800e310:	b29b      	uxth	r3, r3
 800e312:	330d      	adds	r3, #13
 800e314:	b29a      	uxth	r2, r3
 800e316:	1d7b      	adds	r3, r7, #5
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	2500      	movs	r5, #0
 800e31e:	9502      	str	r5, [sp, #8]
 800e320:	2501      	movs	r5, #1
 800e322:	9501      	str	r5, [sp, #4]
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	0013      	movs	r3, r2
 800e328:	0022      	movs	r2, r4
 800e32a:	f7fa fab3 	bl	8008894 <Paint_DrawLine>
		Paint_DrawLine(x + 6, y + 13, x - xShift + 6, y + yShift + 13, color,
 800e32e:	1dfb      	adds	r3, r7, #7
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	b29b      	uxth	r3, r3
 800e334:	3306      	adds	r3, #6
 800e336:	b298      	uxth	r0, r3
 800e338:	1dbb      	adds	r3, r7, #6
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	330d      	adds	r3, #13
 800e340:	b299      	uxth	r1, r3
 800e342:	1dfb      	adds	r3, r7, #7
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	b29a      	uxth	r2, r3
 800e348:	19bb      	adds	r3, r7, r6
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	b29b      	uxth	r3, r3
 800e352:	3306      	adds	r3, #6
 800e354:	b29c      	uxth	r4, r3
 800e356:	1dbb      	adds	r3, r7, #6
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	250e      	movs	r5, #14
 800e35e:	197b      	adds	r3, r7, r5
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	b29b      	uxth	r3, r3
 800e364:	18d3      	adds	r3, r2, r3
 800e366:	b29b      	uxth	r3, r3
 800e368:	330d      	adds	r3, #13
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	1d7b      	adds	r3, r7, #5
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	b29b      	uxth	r3, r3
 800e372:	2500      	movs	r5, #0
 800e374:	9502      	str	r5, [sp, #8]
 800e376:	2501      	movs	r5, #1
 800e378:	9501      	str	r5, [sp, #4]
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	0013      	movs	r3, r2
 800e37e:	0022      	movs	r2, r4
 800e380:	f7fa fa88 	bl	8008894 <Paint_DrawLine>
}
 800e384:	46c0      	nop			; (mov r8, r8)
 800e386:	46bd      	mov	sp, r7
 800e388:	b005      	add	sp, #20
 800e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e38c <interfaceDrawDialer>:
 * @param: background color
 */
void interfaceDrawDialer(uint8_t x, uint8_t y, uint8_t radius, uint8_t value,
		uint8_t maxValue, uint8_t pointerLength, uint8_t indexesNumber,
		uint8_t indexesLength, uint8_t longerIndexesDivider, uint8_t colorFore,
		uint8_t colorBack) {
 800e38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e38e:	46c6      	mov	lr, r8
 800e390:	b500      	push	{lr}
 800e392:	b092      	sub	sp, #72	; 0x48
 800e394:	af04      	add	r7, sp, #16
 800e396:	000d      	movs	r5, r1
 800e398:	0014      	movs	r4, r2
 800e39a:	0019      	movs	r1, r3
 800e39c:	2327      	movs	r3, #39	; 0x27
 800e39e:	18fa      	adds	r2, r7, r3
 800e3a0:	1c03      	adds	r3, r0, #0
 800e3a2:	7013      	strb	r3, [r2, #0]
 800e3a4:	2626      	movs	r6, #38	; 0x26
 800e3a6:	19bb      	adds	r3, r7, r6
 800e3a8:	1c2a      	adds	r2, r5, #0
 800e3aa:	701a      	strb	r2, [r3, #0]
 800e3ac:	2525      	movs	r5, #37	; 0x25
 800e3ae:	197b      	adds	r3, r7, r5
 800e3b0:	1c22      	adds	r2, r4, #0
 800e3b2:	701a      	strb	r2, [r3, #0]
 800e3b4:	2224      	movs	r2, #36	; 0x24
 800e3b6:	18bb      	adds	r3, r7, r2
 800e3b8:	1c0a      	adds	r2, r1, #0
 800e3ba:	701a      	strb	r2, [r3, #0]
 800e3bc:	466b      	mov	r3, sp
 800e3be:	4698      	mov	r8, r3
	//outer circle
	Paint_DrawCircle(x, y, radius + 2, colorFore, DOT_PIXEL_1X1,
 800e3c0:	2327      	movs	r3, #39	; 0x27
 800e3c2:	18fb      	adds	r3, r7, r3
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	b29c      	uxth	r4, r3
 800e3c8:	19bb      	adds	r3, r7, r6
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	b298      	uxth	r0, r3
 800e3ce:	197b      	adds	r3, r7, r5
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	3302      	adds	r3, #2
 800e3d6:	b299      	uxth	r1, r3
 800e3d8:	2544      	movs	r5, #68	; 0x44
 800e3da:	2220      	movs	r2, #32
 800e3dc:	18bb      	adds	r3, r7, r2
 800e3de:	195b      	adds	r3, r3, r5
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	0013      	movs	r3, r2
 800e3ee:	000a      	movs	r2, r1
 800e3f0:	0001      	movs	r1, r0
 800e3f2:	0020      	movs	r0, r4
 800e3f4:	f7fa fce2 	bl	8008dbc <Paint_DrawCircle>
			DRAW_FILL_EMPTY);
	//inner circle
	Paint_DrawCircle(x, y, radius, colorFore, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e3f8:	2327      	movs	r3, #39	; 0x27
 800e3fa:	18fb      	adds	r3, r7, r3
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	b29c      	uxth	r4, r3
 800e400:	19bb      	adds	r3, r7, r6
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	b298      	uxth	r0, r3
 800e406:	2225      	movs	r2, #37	; 0x25
 800e408:	18bb      	adds	r3, r7, r2
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	b299      	uxth	r1, r3
 800e40e:	2220      	movs	r2, #32
 800e410:	18ba      	adds	r2, r7, r2
 800e412:	1953      	adds	r3, r2, r5
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	b29a      	uxth	r2, r3
 800e418:	2301      	movs	r3, #1
 800e41a:	9301      	str	r3, [sp, #4]
 800e41c:	2301      	movs	r3, #1
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	0013      	movs	r3, r2
 800e422:	000a      	movs	r2, r1
 800e424:	0001      	movs	r1, r0
 800e426:	0020      	movs	r0, r4
 800e428:	f7fa fcc8 	bl	8008dbc <Paint_DrawCircle>

	//dot at center
	Paint_DrawCircle(x, y, 2, colorBack, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800e42c:	2327      	movs	r3, #39	; 0x27
 800e42e:	18fb      	adds	r3, r7, r3
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	b298      	uxth	r0, r3
 800e434:	19bb      	adds	r3, r7, r6
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	b299      	uxth	r1, r3
 800e43a:	2348      	movs	r3, #72	; 0x48
 800e43c:	2220      	movs	r2, #32
 800e43e:	4694      	mov	ip, r2
 800e440:	44bc      	add	ip, r7
 800e442:	4463      	add	r3, ip
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	b29a      	uxth	r2, r3
 800e448:	2301      	movs	r3, #1
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	2301      	movs	r3, #1
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	0013      	movs	r3, r2
 800e452:	2202      	movs	r2, #2
 800e454:	f7fa fcb2 	bl	8008dbc <Paint_DrawCircle>

	//indexes- count angles
	float indexAngles[indexesNumber];
 800e458:	2338      	movs	r3, #56	; 0x38
 800e45a:	2220      	movs	r2, #32
 800e45c:	4694      	mov	ip, r2
 800e45e:	44bc      	add	ip, r7
 800e460:	4463      	add	r3, ip
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	001a      	movs	r2, r3
 800e466:	3a01      	subs	r2, #1
 800e468:	633a      	str	r2, [r7, #48]	; 0x30
 800e46a:	60bb      	str	r3, [r7, #8]
 800e46c:	2200      	movs	r2, #0
 800e46e:	60fa      	str	r2, [r7, #12]
 800e470:	68b8      	ldr	r0, [r7, #8]
 800e472:	68f9      	ldr	r1, [r7, #12]
 800e474:	0002      	movs	r2, r0
 800e476:	0ed2      	lsrs	r2, r2, #27
 800e478:	000c      	movs	r4, r1
 800e47a:	0164      	lsls	r4, r4, #5
 800e47c:	61fc      	str	r4, [r7, #28]
 800e47e:	69fc      	ldr	r4, [r7, #28]
 800e480:	4314      	orrs	r4, r2
 800e482:	61fc      	str	r4, [r7, #28]
 800e484:	0002      	movs	r2, r0
 800e486:	0152      	lsls	r2, r2, #5
 800e488:	61ba      	str	r2, [r7, #24]
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	2200      	movs	r2, #0
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	6838      	ldr	r0, [r7, #0]
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	0002      	movs	r2, r0
 800e496:	0ed2      	lsrs	r2, r2, #27
 800e498:	000c      	movs	r4, r1
 800e49a:	0164      	lsls	r4, r4, #5
 800e49c:	617c      	str	r4, [r7, #20]
 800e49e:	697c      	ldr	r4, [r7, #20]
 800e4a0:	4314      	orrs	r4, r2
 800e4a2:	617c      	str	r4, [r7, #20]
 800e4a4:	0002      	movs	r2, r0
 800e4a6:	0152      	lsls	r2, r2, #5
 800e4a8:	613a      	str	r2, [r7, #16]
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	3307      	adds	r3, #7
 800e4ae:	08db      	lsrs	r3, r3, #3
 800e4b0:	00db      	lsls	r3, r3, #3
 800e4b2:	466a      	mov	r2, sp
 800e4b4:	1ad3      	subs	r3, r2, r3
 800e4b6:	469d      	mov	sp, r3
 800e4b8:	ab04      	add	r3, sp, #16
 800e4ba:	3303      	adds	r3, #3
 800e4bc:	089b      	lsrs	r3, r3, #2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	//count angle for every index
	for (uint8_t i = 0; i < indexesNumber; i++) {
 800e4c2:	2316      	movs	r3, #22
 800e4c4:	2220      	movs	r2, #32
 800e4c6:	4694      	mov	ip, r2
 800e4c8:	44bc      	add	ip, r7
 800e4ca:	4463      	add	r3, ip
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]
 800e4d0:	e04f      	b.n	800e572 <interfaceDrawDialer+0x1e6>
		indexAngles[i] = 2 * 3.14 / indexesNumber
 800e4d2:	2338      	movs	r3, #56	; 0x38
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	4694      	mov	ip, r2
 800e4d8:	44bc      	add	ip, r7
 800e4da:	4463      	add	r3, ip
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	0018      	movs	r0, r3
 800e4e0:	f7f4 fc5c 	bl	8002d9c <__aeabi_i2d>
 800e4e4:	0002      	movs	r2, r0
 800e4e6:	000b      	movs	r3, r1
 800e4e8:	48a8      	ldr	r0, [pc, #672]	; (800e78c <interfaceDrawDialer+0x400>)
 800e4ea:	49a9      	ldr	r1, [pc, #676]	; (800e790 <interfaceDrawDialer+0x404>)
 800e4ec:	f7f3 f9fe 	bl	80018ec <__aeabi_ddiv>
 800e4f0:	0002      	movs	r2, r0
 800e4f2:	000b      	movs	r3, r1
 800e4f4:	0014      	movs	r4, r2
 800e4f6:	001d      	movs	r5, r3
				* (i - ((float) indexesNumber / 4)); //have to subtract 1/4 from start counting from 12.
 800e4f8:	2316      	movs	r3, #22
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	4694      	mov	ip, r2
 800e4fe:	44bc      	add	ip, r7
 800e500:	4463      	add	r3, ip
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	0018      	movs	r0, r3
 800e506:	f7f2 fe05 	bl	8001114 <__aeabi_i2f>
 800e50a:	1c06      	adds	r6, r0, #0
 800e50c:	2238      	movs	r2, #56	; 0x38
 800e50e:	2320      	movs	r3, #32
 800e510:	18f9      	adds	r1, r7, r3
 800e512:	188b      	adds	r3, r1, r2
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	0018      	movs	r0, r3
 800e518:	f7f2 fe42 	bl	80011a0 <__aeabi_ui2f>
 800e51c:	1c03      	adds	r3, r0, #0
 800e51e:	2181      	movs	r1, #129	; 0x81
 800e520:	05c9      	lsls	r1, r1, #23
 800e522:	1c18      	adds	r0, r3, #0
 800e524:	f7f2 f9e8 	bl	80008f8 <__aeabi_fdiv>
 800e528:	1c03      	adds	r3, r0, #0
 800e52a:	1c19      	adds	r1, r3, #0
 800e52c:	1c30      	adds	r0, r6, #0
 800e52e:	f7f2 fc09 	bl	8000d44 <__aeabi_fsub>
 800e532:	1c03      	adds	r3, r0, #0
 800e534:	1c18      	adds	r0, r3, #0
 800e536:	f7f4 fc87 	bl	8002e48 <__aeabi_f2d>
 800e53a:	0002      	movs	r2, r0
 800e53c:	000b      	movs	r3, r1
 800e53e:	0020      	movs	r0, r4
 800e540:	0029      	movs	r1, r5
 800e542:	f7f3 fdd9 	bl	80020f8 <__aeabi_dmul>
 800e546:	0002      	movs	r2, r0
 800e548:	000b      	movs	r3, r1
		indexAngles[i] = 2 * 3.14 / indexesNumber
 800e54a:	2516      	movs	r5, #22
 800e54c:	2620      	movs	r6, #32
 800e54e:	19b9      	adds	r1, r7, r6
 800e550:	1949      	adds	r1, r1, r5
 800e552:	780c      	ldrb	r4, [r1, #0]
				* (i - ((float) indexesNumber / 4)); //have to subtract 1/4 from start counting from 12.
 800e554:	0010      	movs	r0, r2
 800e556:	0019      	movs	r1, r3
 800e558:	f7f4 fcbe 	bl	8002ed8 <__aeabi_d2f>
 800e55c:	1c01      	adds	r1, r0, #0
		indexAngles[i] = 2 * 3.14 / indexesNumber
 800e55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e560:	00a2      	lsls	r2, r4, #2
 800e562:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < indexesNumber; i++) {
 800e564:	19bb      	adds	r3, r7, r6
 800e566:	195b      	adds	r3, r3, r5
 800e568:	781a      	ldrb	r2, [r3, #0]
 800e56a:	19bb      	adds	r3, r7, r6
 800e56c:	195b      	adds	r3, r3, r5
 800e56e:	3201      	adds	r2, #1
 800e570:	701a      	strb	r2, [r3, #0]
 800e572:	2316      	movs	r3, #22
 800e574:	2220      	movs	r2, #32
 800e576:	18ba      	adds	r2, r7, r2
 800e578:	18d2      	adds	r2, r2, r3
 800e57a:	2338      	movs	r3, #56	; 0x38
 800e57c:	2120      	movs	r1, #32
 800e57e:	468c      	mov	ip, r1
 800e580:	44bc      	add	ip, r7
 800e582:	4463      	add	r3, ip
 800e584:	7812      	ldrb	r2, [r2, #0]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d3a2      	bcc.n	800e4d2 <interfaceDrawDialer+0x146>
	}

	//indexes- draw
	for (uint8_t i = 0; i < indexesNumber; i++) {
 800e58c:	2317      	movs	r3, #23
 800e58e:	2220      	movs	r2, #32
 800e590:	4694      	mov	ip, r2
 800e592:	44bc      	add	ip, r7
 800e594:	4463      	add	r3, ip
 800e596:	2200      	movs	r2, #0
 800e598:	701a      	strb	r2, [r3, #0]
 800e59a:	e080      	b.n	800e69e <interfaceDrawDialer+0x312>

		Paint_DrawPointer(x, y, indexAngles[i], radius, radius - indexesLength,
 800e59c:	2127      	movs	r1, #39	; 0x27
 800e59e:	187b      	adds	r3, r7, r1
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	b298      	uxth	r0, r3
 800e5a4:	2326      	movs	r3, #38	; 0x26
 800e5a6:	18fb      	adds	r3, r7, r3
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	b299      	uxth	r1, r3
 800e5ac:	2417      	movs	r4, #23
 800e5ae:	2520      	movs	r5, #32
 800e5b0:	197a      	adds	r2, r7, r5
 800e5b2:	1913      	adds	r3, r2, r4
 800e5b4:	781a      	ldrb	r2, [r3, #0]
 800e5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b8:	0092      	lsls	r2, r2, #2
 800e5ba:	58d4      	ldr	r4, [r2, r3]
 800e5bc:	2225      	movs	r2, #37	; 0x25
 800e5be:	18bb      	adds	r3, r7, r2
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	b29d      	uxth	r5, r3
 800e5c4:	18bb      	adds	r3, r7, r2
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	233c      	movs	r3, #60	; 0x3c
 800e5cc:	2620      	movs	r6, #32
 800e5ce:	46b4      	mov	ip, r6
 800e5d0:	44bc      	add	ip, r7
 800e5d2:	4463      	add	r3, ip
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	2248      	movs	r2, #72	; 0x48
 800e5de:	2620      	movs	r6, #32
 800e5e0:	46b4      	mov	ip, r6
 800e5e2:	44bc      	add	ip, r7
 800e5e4:	4462      	add	r2, ip
 800e5e6:	7812      	ldrb	r2, [r2, #0]
 800e5e8:	b292      	uxth	r2, r2
 800e5ea:	2600      	movs	r6, #0
 800e5ec:	9603      	str	r6, [sp, #12]
 800e5ee:	2601      	movs	r6, #1
 800e5f0:	9602      	str	r6, [sp, #8]
 800e5f2:	9201      	str	r2, [sp, #4]
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	002b      	movs	r3, r5
 800e5f8:	1c22      	adds	r2, r4, #0
 800e5fa:	f7fa fa29 	bl	8008a50 <Paint_DrawPointer>
				colorBack, DOT_PIXEL_1X1, LINE_STYLE_SOLID);

		if (longerIndexesDivider > 0) {
 800e5fe:	2140      	movs	r1, #64	; 0x40
 800e600:	2520      	movs	r5, #32
 800e602:	1978      	adds	r0, r7, r5
 800e604:	1843      	adds	r3, r0, r1
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d03f      	beq.n	800e68c <interfaceDrawDialer+0x300>
			if (i % longerIndexesDivider == 0) {
 800e60c:	2417      	movs	r4, #23
 800e60e:	1978      	adds	r0, r7, r5
 800e610:	1902      	adds	r2, r0, r4
 800e612:	1978      	adds	r0, r7, r5
 800e614:	1843      	adds	r3, r0, r1
 800e616:	7812      	ldrb	r2, [r2, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	0019      	movs	r1, r3
 800e61c:	0010      	movs	r0, r2
 800e61e:	f7f1 fe01 	bl	8000224 <__aeabi_uidivmod>
 800e622:	000b      	movs	r3, r1
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d130      	bne.n	800e68c <interfaceDrawDialer+0x300>
				Paint_DrawPointer(x, y, indexAngles[i], radius,
 800e62a:	2127      	movs	r1, #39	; 0x27
 800e62c:	187b      	adds	r3, r7, r1
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	b298      	uxth	r0, r3
 800e632:	2326      	movs	r3, #38	; 0x26
 800e634:	18fb      	adds	r3, r7, r3
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	b299      	uxth	r1, r3
 800e63a:	197b      	adds	r3, r7, r5
 800e63c:	191b      	adds	r3, r3, r4
 800e63e:	781a      	ldrb	r2, [r3, #0]
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	0092      	lsls	r2, r2, #2
 800e644:	58d4      	ldr	r4, [r2, r3]
 800e646:	2225      	movs	r2, #37	; 0x25
 800e648:	18bb      	adds	r3, r7, r2
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	b29d      	uxth	r5, r3
						radius - indexesLength - 4, colorBack, DOT_PIXEL_1X1,
 800e64e:	18bb      	adds	r3, r7, r2
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	b29a      	uxth	r2, r3
 800e654:	233c      	movs	r3, #60	; 0x3c
 800e656:	2620      	movs	r6, #32
 800e658:	46b4      	mov	ip, r6
 800e65a:	44bc      	add	ip, r7
 800e65c:	4463      	add	r3, ip
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	b29b      	uxth	r3, r3
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	b29b      	uxth	r3, r3
				Paint_DrawPointer(x, y, indexAngles[i], radius,
 800e666:	3b04      	subs	r3, #4
 800e668:	b29b      	uxth	r3, r3
 800e66a:	2248      	movs	r2, #72	; 0x48
 800e66c:	2620      	movs	r6, #32
 800e66e:	46b4      	mov	ip, r6
 800e670:	44bc      	add	ip, r7
 800e672:	4462      	add	r2, ip
 800e674:	7812      	ldrb	r2, [r2, #0]
 800e676:	b292      	uxth	r2, r2
 800e678:	2600      	movs	r6, #0
 800e67a:	9603      	str	r6, [sp, #12]
 800e67c:	2601      	movs	r6, #1
 800e67e:	9602      	str	r6, [sp, #8]
 800e680:	9201      	str	r2, [sp, #4]
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	002b      	movs	r3, r5
 800e686:	1c22      	adds	r2, r4, #0
 800e688:	f7fa f9e2 	bl	8008a50 <Paint_DrawPointer>
	for (uint8_t i = 0; i < indexesNumber; i++) {
 800e68c:	2117      	movs	r1, #23
 800e68e:	2020      	movs	r0, #32
 800e690:	183b      	adds	r3, r7, r0
 800e692:	185b      	adds	r3, r3, r1
 800e694:	781a      	ldrb	r2, [r3, #0]
 800e696:	183b      	adds	r3, r7, r0
 800e698:	185b      	adds	r3, r3, r1
 800e69a:	3201      	adds	r2, #1
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	2317      	movs	r3, #23
 800e6a0:	2220      	movs	r2, #32
 800e6a2:	18ba      	adds	r2, r7, r2
 800e6a4:	18d2      	adds	r2, r2, r3
 800e6a6:	2338      	movs	r3, #56	; 0x38
 800e6a8:	2120      	movs	r1, #32
 800e6aa:	468c      	mov	ip, r1
 800e6ac:	44bc      	add	ip, r7
 800e6ae:	4463      	add	r3, ip
 800e6b0:	7812      	ldrb	r2, [r2, #0]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d200      	bcs.n	800e6ba <interfaceDrawDialer+0x32e>
 800e6b8:	e770      	b.n	800e59c <interfaceDrawDialer+0x210>
		}

	}

	//pointer
	float pointerAngle = 2 * 3.14 / maxValue * (value - ((float) maxValue / 4));
 800e6ba:	2330      	movs	r3, #48	; 0x30
 800e6bc:	2220      	movs	r2, #32
 800e6be:	4694      	mov	ip, r2
 800e6c0:	44bc      	add	ip, r7
 800e6c2:	4463      	add	r3, ip
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	0018      	movs	r0, r3
 800e6c8:	f7f4 fb68 	bl	8002d9c <__aeabi_i2d>
 800e6cc:	0002      	movs	r2, r0
 800e6ce:	000b      	movs	r3, r1
 800e6d0:	482e      	ldr	r0, [pc, #184]	; (800e78c <interfaceDrawDialer+0x400>)
 800e6d2:	492f      	ldr	r1, [pc, #188]	; (800e790 <interfaceDrawDialer+0x404>)
 800e6d4:	f7f3 f90a 	bl	80018ec <__aeabi_ddiv>
 800e6d8:	0002      	movs	r2, r0
 800e6da:	000b      	movs	r3, r1
 800e6dc:	0014      	movs	r4, r2
 800e6de:	001d      	movs	r5, r3
 800e6e0:	2324      	movs	r3, #36	; 0x24
 800e6e2:	18fb      	adds	r3, r7, r3
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	0018      	movs	r0, r3
 800e6e8:	f7f2 fd14 	bl	8001114 <__aeabi_i2f>
 800e6ec:	1c06      	adds	r6, r0, #0
 800e6ee:	2330      	movs	r3, #48	; 0x30
 800e6f0:	2220      	movs	r2, #32
 800e6f2:	4694      	mov	ip, r2
 800e6f4:	44bc      	add	ip, r7
 800e6f6:	4463      	add	r3, ip
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	0018      	movs	r0, r3
 800e6fc:	f7f2 fd50 	bl	80011a0 <__aeabi_ui2f>
 800e700:	1c03      	adds	r3, r0, #0
 800e702:	2181      	movs	r1, #129	; 0x81
 800e704:	05c9      	lsls	r1, r1, #23
 800e706:	1c18      	adds	r0, r3, #0
 800e708:	f7f2 f8f6 	bl	80008f8 <__aeabi_fdiv>
 800e70c:	1c03      	adds	r3, r0, #0
 800e70e:	1c19      	adds	r1, r3, #0
 800e710:	1c30      	adds	r0, r6, #0
 800e712:	f7f2 fb17 	bl	8000d44 <__aeabi_fsub>
 800e716:	1c03      	adds	r3, r0, #0
 800e718:	1c18      	adds	r0, r3, #0
 800e71a:	f7f4 fb95 	bl	8002e48 <__aeabi_f2d>
 800e71e:	0002      	movs	r2, r0
 800e720:	000b      	movs	r3, r1
 800e722:	0020      	movs	r0, r4
 800e724:	0029      	movs	r1, r5
 800e726:	f7f3 fce7 	bl	80020f8 <__aeabi_dmul>
 800e72a:	0002      	movs	r2, r0
 800e72c:	000b      	movs	r3, r1
 800e72e:	0010      	movs	r0, r2
 800e730:	0019      	movs	r1, r3
 800e732:	f7f4 fbd1 	bl	8002ed8 <__aeabi_d2f>
 800e736:	1c03      	adds	r3, r0, #0
 800e738:	62bb      	str	r3, [r7, #40]	; 0x28

	Paint_DrawPointer(x, y, pointerAngle, pointerLength, 0, colorBack,
 800e73a:	2327      	movs	r3, #39	; 0x27
 800e73c:	18fb      	adds	r3, r7, r3
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	b298      	uxth	r0, r3
 800e742:	2326      	movs	r3, #38	; 0x26
 800e744:	18fb      	adds	r3, r7, r3
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	b299      	uxth	r1, r3
 800e74a:	2334      	movs	r3, #52	; 0x34
 800e74c:	2220      	movs	r2, #32
 800e74e:	4694      	mov	ip, r2
 800e750:	44bc      	add	ip, r7
 800e752:	4463      	add	r3, ip
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	b29c      	uxth	r4, r3
 800e758:	2348      	movs	r3, #72	; 0x48
 800e75a:	2220      	movs	r2, #32
 800e75c:	4694      	mov	ip, r2
 800e75e:	44bc      	add	ip, r7
 800e760:	4463      	add	r3, ip
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	b29b      	uxth	r3, r3
 800e766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e768:	2500      	movs	r5, #0
 800e76a:	9503      	str	r5, [sp, #12]
 800e76c:	2501      	movs	r5, #1
 800e76e:	9502      	str	r5, [sp, #8]
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	2300      	movs	r3, #0
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	0023      	movs	r3, r4
 800e778:	f7fa f96a 	bl	8008a50 <Paint_DrawPointer>
 800e77c:	46c5      	mov	sp, r8
			DOT_PIXEL_1X1, LINE_STYLE_SOLID);

}
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	46bd      	mov	sp, r7
 800e782:	b00e      	add	sp, #56	; 0x38
 800e784:	bc80      	pop	{r7}
 800e786:	46b8      	mov	r8, r7
 800e788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78a:	46c0      	nop			; (mov r8, r8)
 800e78c:	51eb851f 	.word	0x51eb851f
 800e790:	40191eb8 	.word	0x40191eb8

0800e794 <goodNight>:
 *      Author: bartosz
 */

#include <chrono/sleep.h>

void goodNight(void) {
 800e794:	b580      	push	{r7, lr}
 800e796:	af00      	add	r7, sp, #0
	//enter sleep mode
		EPD_1IN54_V2_Sleep();
 800e798:	f7f9 fcd5 	bl	8008146 <EPD_1IN54_V2_Sleep>

	HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, 0);
 800e79c:	4b0d      	ldr	r3, [pc, #52]	; (800e7d4 <goodNight+0x40>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	2140      	movs	r1, #64	; 0x40
 800e7a2:	0018      	movs	r0, r3
 800e7a4:	f7f6 f8d1 	bl	800494a <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 800e7a8:	f7f4 fed0 	bl	800354c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800e7ac:	2380      	movs	r3, #128	; 0x80
 800e7ae:	01db      	lsls	r3, r3, #7
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	0018      	movs	r0, r3
 800e7b4:	f7f6 ff0a 	bl	80055cc <HAL_PWR_EnterSTOPMode>

	//on wake up

	HAL_ResumeTick();
 800e7b8:	f7f4 fed6 	bl	8003568 <HAL_ResumeTick>
	SystemClock_Config();
 800e7bc:	f7fb fade 	bl	8009d7c <SystemClock_Config>
	HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, 1);
 800e7c0:	4b04      	ldr	r3, [pc, #16]	; (800e7d4 <goodNight+0x40>)
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	2140      	movs	r1, #64	; 0x40
 800e7c6:	0018      	movs	r0, r3
 800e7c8:	f7f6 f8bf 	bl	800494a <HAL_GPIO_WritePin>
}
 800e7cc:	46c0      	nop			; (mov r8, r8)
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	46c0      	nop			; (mov r8, r8)
 800e7d4:	50000400 	.word	0x50000400

0800e7d8 <HAL_TIM_PeriodElapsedCallback>:
#include <chrono/timers.h>
#include <chrono/watch.h>

extern watchTypeDef watch;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) { //1Hz
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a17      	ldr	r2, [pc, #92]	; (800e844 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d127      	bne.n	800e83a <HAL_TIM_PeriodElapsedCallback+0x62>

		//auto turn-off settings after 5 seconds
	if (watch.mode == WATCH_MODE_SETTINGS) {
 800e7ea:	4b17      	ldr	r3, [pc, #92]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d112      	bne.n	800e818 <HAL_TIM_PeriodElapsedCallback+0x40>
		watch.counterSettingsMode++;
 800e7f2:	4b15      	ldr	r3, [pc, #84]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e7f4:	785b      	ldrb	r3, [r3, #1]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	4b13      	ldr	r3, [pc, #76]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e7fc:	705a      	strb	r2, [r3, #1]
		if(watch.counterSettingsMode > WATCH_TIME_SETTINGS_MODE) {
 800e7fe:	4b12      	ldr	r3, [pc, #72]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e800:	785b      	ldrb	r3, [r3, #1]
 800e802:	2b03      	cmp	r3, #3
 800e804:	d919      	bls.n	800e83a <HAL_TIM_PeriodElapsedCallback+0x62>
			watchSwitchMode(&watch, WATCH_MODE_NORMAL);
 800e806:	4b10      	ldr	r3, [pc, #64]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e808:	2100      	movs	r1, #0
 800e80a:	0018      	movs	r0, r3
 800e80c:	f000 f959 	bl	800eac2 <watchSwitchMode>
			watch.counterSettingsMode = 0;
 800e810:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e812:	2200      	movs	r2, #0
 800e814:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}

#endif
}
 800e816:	e010      	b.n	800e83a <HAL_TIM_PeriodElapsedCallback+0x62>
	} else if (watch.mode == WATCH_MODE_NORMAL){
 800e818:	4b0b      	ldr	r3, [pc, #44]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10c      	bne.n	800e83a <HAL_TIM_PeriodElapsedCallback+0x62>
		watch.counterDontSleepTimer++;
 800e820:	4b09      	ldr	r3, [pc, #36]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e822:	789b      	ldrb	r3, [r3, #2]
 800e824:	3301      	adds	r3, #1
 800e826:	b2da      	uxtb	r2, r3
 800e828:	4b07      	ldr	r3, [pc, #28]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e82a:	709a      	strb	r2, [r3, #2]
		if(watch.counterDontSleepTimer > WATCH_TIME_DONT_SLEEP){
 800e82c:	4b06      	ldr	r3, [pc, #24]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e82e:	789b      	ldrb	r3, [r3, #2]
 800e830:	2b32      	cmp	r3, #50	; 0x32
 800e832:	d902      	bls.n	800e83a <HAL_TIM_PeriodElapsedCallback+0x62>
			watch.counterDontSleepTimer = WATCH_TIME_DONT_SLEEP;
 800e834:	4b04      	ldr	r3, [pc, #16]	; (800e848 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e836:	2232      	movs	r2, #50	; 0x32
 800e838:	709a      	strb	r2, [r3, #2]
}
 800e83a:	46c0      	nop			; (mov r8, r8)
 800e83c:	46bd      	mov	sp, r7
 800e83e:	b002      	add	sp, #8
 800e840:	bd80      	pop	{r7, pc}
 800e842:	46c0      	nop			; (mov r8, r8)
 800e844:	40000400 	.word	0x40000400
 800e848:	2000050c 	.word	0x2000050c

0800e84c <timersInit>:

void timersInit(void) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	af00      	add	r7, sp, #0
HAL_TIM_Base_Start_IT(&htim3);
 800e850:	4b03      	ldr	r3, [pc, #12]	; (800e860 <timersInit+0x14>)
 800e852:	0018      	movs	r0, r3
 800e854:	f7f8 fda0 	bl	8007398 <HAL_TIM_Base_Start_IT>
}
 800e858:	46c0      	nop			; (mov r8, r8)
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	46c0      	nop			; (mov r8, r8)
 800e860:	20000758 	.word	0x20000758

0800e864 <HAL_GPIO_EXTI_Falling_Callback>:
#if AVOID_CONTACT_VIBRATIONS
volatile uint16_t touchSensorsTimer = 0; //starts counting when sensor touched
volatile uint16_t touchSensorsBusyFlag = 0; //active when sensor touched
#endif

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800e864:	b5b0      	push	{r4, r5, r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	0002      	movs	r2, r0
 800e86c:	1dbb      	adds	r3, r7, #6
 800e86e:	801a      	strh	r2, [r3, #0]
		touchSensorsBusyFlag = 1;
		HAL_TIM_Base_Start_IT(&htim6); //start counting

#endif

	uint8_t buttonRegister = touchRead();
 800e870:	250e      	movs	r5, #14
 800e872:	197c      	adds	r4, r7, r5
 800e874:	f000 f8d8 	bl	800ea28 <touchRead>
 800e878:	0003      	movs	r3, r0
 800e87a:	7023      	strb	r3, [r4, #0]

	if (watch.mode == WATCH_MODE_NORMAL) {
 800e87c:	4b66      	ldr	r3, [pc, #408]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d144      	bne.n	800e90e <HAL_GPIO_EXTI_Falling_Callback+0xaa>
		if (buttonRegister == BUTTON_SET) {
 800e884:	197b      	adds	r3, r7, r5
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	2b05      	cmp	r3, #5
 800e88a:	d108      	bne.n	800e89e <HAL_GPIO_EXTI_Falling_Callback+0x3a>
			watchSwitchMode(&watch, WATCH_MODE_SETTINGS);
 800e88c:	4b62      	ldr	r3, [pc, #392]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e88e:	2101      	movs	r1, #1
 800e890:	0018      	movs	r0, r3
 800e892:	f000 f916 	bl	800eac2 <watchSwitchMode>
			watch.counterDontSleepTimer = WATCH_TIME_DONT_SLEEP
 800e896:	4b60      	ldr	r3, [pc, #384]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e898:	2231      	movs	r2, #49	; 0x31
 800e89a:	709a      	strb	r2, [r3, #2]
 800e89c:	e002      	b.n	800e8a4 <HAL_GPIO_EXTI_Falling_Callback+0x40>
					- WATCH_TIME_SETTINGS_MODE + 2;
		} else {
			watch.counterDontSleepTimer = 0;
 800e89e:	4b5e      	ldr	r3, [pc, #376]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	709a      	strb	r2, [r3, #2]
		}


		if (buttonRegister == BUTTON_START) {
 800e8a4:	230e      	movs	r3, #14
 800e8a6:	18fb      	adds	r3, r7, r3
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	d11e      	bne.n	800e8ec <HAL_GPIO_EXTI_Falling_Callback+0x88>

			if (chrono.chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800e8ae:	4b5b      	ldr	r3, [pc, #364]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8b0:	2224      	movs	r2, #36	; 0x24
 800e8b2:	5c9b      	ldrb	r3, [r3, r2]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d104      	bne.n	800e8c2 <HAL_GPIO_EXTI_Falling_Callback+0x5e>
				rtcStartChrono(&chrono);
 800e8b8:	4b58      	ldr	r3, [pc, #352]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f7fd f89e 	bl	800b9fc <rtcStartChrono>
	}
#if AVOID_CONTACT_VIBRATIONS
	}
#endif

}
 800e8c0:	e0a5      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
			} else if (chrono.chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800e8c2:	4b56      	ldr	r3, [pc, #344]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8c4:	2224      	movs	r2, #36	; 0x24
 800e8c6:	5c9b      	ldrb	r3, [r3, r2]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d104      	bne.n	800e8d6 <HAL_GPIO_EXTI_Falling_Callback+0x72>
				rtcStopChrono(&chrono);
 800e8cc:	4b53      	ldr	r3, [pc, #332]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f7fd f8e8 	bl	800baa4 <rtcStopChrono>
}
 800e8d4:	e09b      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
			} else if (chrono.chronoMode == RTC_CHRONO_MODE_STOP) {
 800e8d6:	4b51      	ldr	r3, [pc, #324]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8d8:	2224      	movs	r2, #36	; 0x24
 800e8da:	5c9b      	ldrb	r3, [r3, r2]
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d000      	beq.n	800e8e2 <HAL_GPIO_EXTI_Falling_Callback+0x7e>
 800e8e0:	e095      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcResumeChrono(&chrono);
 800e8e2:	4b4e      	ldr	r3, [pc, #312]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8e4:	0018      	movs	r0, r3
 800e8e6:	f7fd f98f 	bl	800bc08 <rtcResumeChrono>
}
 800e8ea:	e090      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
		} else if (buttonRegister == BUTTON_RESET) {
 800e8ec:	230e      	movs	r3, #14
 800e8ee:	18fb      	adds	r3, r7, r3
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2b06      	cmp	r3, #6
 800e8f4:	d000      	beq.n	800e8f8 <HAL_GPIO_EXTI_Falling_Callback+0x94>
 800e8f6:	e08a      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
			if (chrono.chronoMode == RTC_CHRONO_MODE_STOP) {
 800e8f8:	4b48      	ldr	r3, [pc, #288]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e8fa:	2224      	movs	r2, #36	; 0x24
 800e8fc:	5c9b      	ldrb	r3, [r3, r2]
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d000      	beq.n	800e904 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
 800e902:	e084      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcResetChrono(&chrono);
 800e904:	4b45      	ldr	r3, [pc, #276]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e906:	0018      	movs	r0, r3
 800e908:	f7fd f98a 	bl	800bc20 <rtcResetChrono>
}
 800e90c:	e07f      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
	else if (watch.mode == WATCH_MODE_SETTINGS) {
 800e90e:	4b42      	ldr	r3, [pc, #264]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d000      	beq.n	800e918 <HAL_GPIO_EXTI_Falling_Callback+0xb4>
 800e916:	e079      	b.n	800ea0c <HAL_GPIO_EXTI_Falling_Callback+0x1a8>
		watch.counterSettingsMode = 0; // if any pressed in settings, refresh timer to avoid exit settings mode
 800e918:	4b3f      	ldr	r3, [pc, #252]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	705a      	strb	r2, [r3, #1]
		if (buttonRegister == BUTTON_RESET)
 800e91e:	230e      	movs	r3, #14
 800e920:	18fb      	adds	r3, r7, r3
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	2b06      	cmp	r3, #6
 800e926:	d104      	bne.n	800e932 <HAL_GPIO_EXTI_Falling_Callback+0xce>
			watchSwitchSettingsItem(&watch);
 800e928:	4b3b      	ldr	r3, [pc, #236]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e92a:	0018      	movs	r0, r3
 800e92c:	f000 f8db 	bl	800eae6 <watchSwitchSettingsItem>
}
 800e930:	e06d      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
		else if (buttonRegister == BUTTON_START || buttonRegister == BUTTON_SET) {
 800e932:	220e      	movs	r2, #14
 800e934:	18bb      	adds	r3, r7, r2
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d003      	beq.n	800e944 <HAL_GPIO_EXTI_Falling_Callback+0xe0>
 800e93c:	18bb      	adds	r3, r7, r2
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b05      	cmp	r3, #5
 800e942:	d163      	bne.n	800ea0c <HAL_GPIO_EXTI_Falling_Callback+0x1a8>
			if (buttonRegister == BUTTON_START)
 800e944:	230e      	movs	r3, #14
 800e946:	18fb      	adds	r3, r7, r3
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b03      	cmp	r3, #3
 800e94c:	d104      	bne.n	800e958 <HAL_GPIO_EXTI_Falling_Callback+0xf4>
				upOrDown = RTC_CHANGE_DIR_UP;
 800e94e:	230f      	movs	r3, #15
 800e950:	18fb      	adds	r3, r7, r3
 800e952:	2200      	movs	r2, #0
 800e954:	701a      	strb	r2, [r3, #0]
 800e956:	e008      	b.n	800e96a <HAL_GPIO_EXTI_Falling_Callback+0x106>
			else if (buttonRegister == BUTTON_SET)
 800e958:	230e      	movs	r3, #14
 800e95a:	18fb      	adds	r3, r7, r3
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	2b05      	cmp	r3, #5
 800e960:	d103      	bne.n	800e96a <HAL_GPIO_EXTI_Falling_Callback+0x106>
				upOrDown = RTC_CHANGE_DIR_DOWN;
 800e962:	230f      	movs	r3, #15
 800e964:	18fb      	adds	r3, r7, r3
 800e966:	2201      	movs	r2, #1
 800e968:	701a      	strb	r2, [r3, #0]
			switch (watch.settingsItem) {
 800e96a:	4b2b      	ldr	r3, [pc, #172]	; (800ea18 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800e96c:	78db      	ldrb	r3, [r3, #3]
 800e96e:	2b08      	cmp	r3, #8
 800e970:	d84d      	bhi.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
 800e972:	009a      	lsls	r2, r3, #2
 800e974:	4b2a      	ldr	r3, [pc, #168]	; (800ea20 <HAL_GPIO_EXTI_Falling_Callback+0x1bc>)
 800e976:	18d3      	adds	r3, r2, r3
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	469f      	mov	pc, r3
				rtcChangeValue(&chrono, RTC_CHANGE_HOUR, upOrDown);
 800e97c:	230f      	movs	r3, #15
 800e97e:	18fb      	adds	r3, r7, r3
 800e980:	781a      	ldrb	r2, [r3, #0]
 800e982:	4b26      	ldr	r3, [pc, #152]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e984:	2100      	movs	r1, #0
 800e986:	0018      	movs	r0, r3
 800e988:	f7fd f96e 	bl	800bc68 <rtcChangeValue>
				break;
 800e98c:	e03f      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcChangeValue(&chrono, RTC_CHANGE_MINUTE, upOrDown);
 800e98e:	230f      	movs	r3, #15
 800e990:	18fb      	adds	r3, r7, r3
 800e992:	781a      	ldrb	r2, [r3, #0]
 800e994:	4b21      	ldr	r3, [pc, #132]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e996:	2101      	movs	r1, #1
 800e998:	0018      	movs	r0, r3
 800e99a:	f7fd f965 	bl	800bc68 <rtcChangeValue>
				break;
 800e99e:	e036      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcChangeValue(&chrono, RTC_CHANGE_SECOND, upOrDown);
 800e9a0:	230f      	movs	r3, #15
 800e9a2:	18fb      	adds	r3, r7, r3
 800e9a4:	781a      	ldrb	r2, [r3, #0]
 800e9a6:	4b1d      	ldr	r3, [pc, #116]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e9a8:	2102      	movs	r1, #2
 800e9aa:	0018      	movs	r0, r3
 800e9ac:	f7fd f95c 	bl	800bc68 <rtcChangeValue>
				break;
 800e9b0:	e02d      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcChangeValue(&chrono, RTC_CHANGE_DAY, upOrDown);
 800e9b2:	230f      	movs	r3, #15
 800e9b4:	18fb      	adds	r3, r7, r3
 800e9b6:	781a      	ldrb	r2, [r3, #0]
 800e9b8:	4b18      	ldr	r3, [pc, #96]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e9ba:	2103      	movs	r1, #3
 800e9bc:	0018      	movs	r0, r3
 800e9be:	f7fd f953 	bl	800bc68 <rtcChangeValue>
				break;
 800e9c2:	e024      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcChangeValue(&chrono, RTC_CHANGE_MONTH, upOrDown);
 800e9c4:	230f      	movs	r3, #15
 800e9c6:	18fb      	adds	r3, r7, r3
 800e9c8:	781a      	ldrb	r2, [r3, #0]
 800e9ca:	4b14      	ldr	r3, [pc, #80]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e9cc:	2104      	movs	r1, #4
 800e9ce:	0018      	movs	r0, r3
 800e9d0:	f7fd f94a 	bl	800bc68 <rtcChangeValue>
				break;
 800e9d4:	e01b      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				rtcChangeValue(&chrono, RTC_CHANGE_YEAR, upOrDown);
 800e9d6:	230f      	movs	r3, #15
 800e9d8:	18fb      	adds	r3, r7, r3
 800e9da:	781a      	ldrb	r2, [r3, #0]
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800e9de:	2105      	movs	r1, #5
 800e9e0:	0018      	movs	r0, r3
 800e9e2:	f7fd f941 	bl	800bc68 <rtcChangeValue>
				break;
 800e9e6:	e012      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				bme280ChangeValue(&atmospherical, BME280_CHANGE_PREF, upOrDown);
 800e9e8:	230f      	movs	r3, #15
 800e9ea:	18fb      	adds	r3, r7, r3
 800e9ec:	781a      	ldrb	r2, [r3, #0]
 800e9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <HAL_GPIO_EXTI_Falling_Callback+0x1c0>)
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	f7fb fff0 	bl	800a9d8 <bme280ChangeValue>
				break;
 800e9f8:	e009      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
				bme280ChangeValue(&atmospherical, BME280_CHANGE_TOFFSET,
 800e9fa:	230f      	movs	r3, #15
 800e9fc:	18fb      	adds	r3, r7, r3
 800e9fe:	781a      	ldrb	r2, [r3, #0]
 800ea00:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <HAL_GPIO_EXTI_Falling_Callback+0x1c0>)
 800ea02:	2100      	movs	r1, #0
 800ea04:	0018      	movs	r0, r3
 800ea06:	f7fb ffe7 	bl	800a9d8 <bme280ChangeValue>
				break;
 800ea0a:	e000      	b.n	800ea0e <HAL_GPIO_EXTI_Falling_Callback+0x1aa>
		}
 800ea0c:	46c0      	nop			; (mov r8, r8)
}
 800ea0e:	46c0      	nop			; (mov r8, r8)
 800ea10:	46bd      	mov	sp, r7
 800ea12:	b004      	add	sp, #16
 800ea14:	bdb0      	pop	{r4, r5, r7, pc}
 800ea16:	46c0      	nop			; (mov r8, r8)
 800ea18:	2000050c 	.word	0x2000050c
 800ea1c:	200000b8 	.word	0x200000b8
 800ea20:	0801582c 	.word	0x0801582c
 800ea24:	20000368 	.word	0x20000368

0800ea28 <touchRead>:
/*
 * brief: returns button matrix states
 * parameter: none
 * retval: buttons register described in buttons.h
 */
uint8_t touchRead(void) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0

	uint8_t touchReg = 0; //stores configuration of pressed buttons
 800ea2e:	1dfb      	adds	r3, r7, #7
 800ea30:	2200      	movs	r2, #0
 800ea32:	701a      	strb	r2, [r3, #0]

	touchReg = touchReg
			| (HAL_GPIO_ReadPin(BUTTON_START_GPIO_Port, BUTTON_START_Pin) << 2);
 800ea34:	23a0      	movs	r3, #160	; 0xa0
 800ea36:	05db      	lsls	r3, r3, #23
 800ea38:	2104      	movs	r1, #4
 800ea3a:	0018      	movs	r0, r3
 800ea3c:	f7f5 ff68 	bl	8004910 <HAL_GPIO_ReadPin>
 800ea40:	0003      	movs	r3, r0
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	b25a      	sxtb	r2, r3
 800ea46:	1dfb      	adds	r3, r7, #7
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	b25b      	sxtb	r3, r3
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	b25a      	sxtb	r2, r3
	touchReg = touchReg
 800ea50:	1dfb      	adds	r3, r7, #7
 800ea52:	701a      	strb	r2, [r3, #0]
	touchReg = touchReg
			| (HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin) << 1);
 800ea54:	23a0      	movs	r3, #160	; 0xa0
 800ea56:	05db      	lsls	r3, r3, #23
 800ea58:	2108      	movs	r1, #8
 800ea5a:	0018      	movs	r0, r3
 800ea5c:	f7f5 ff58 	bl	8004910 <HAL_GPIO_ReadPin>
 800ea60:	0003      	movs	r3, r0
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	b25a      	sxtb	r2, r3
 800ea66:	1dfb      	adds	r3, r7, #7
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	b25a      	sxtb	r2, r3
	touchReg = touchReg
 800ea70:	1dfb      	adds	r3, r7, #7
 800ea72:	701a      	strb	r2, [r3, #0]
	touchReg = touchReg
			| (HAL_GPIO_ReadPin(BUTTON_RESET_GPIO_Port, BUTTON_RESET_Pin));
 800ea74:	23a0      	movs	r3, #160	; 0xa0
 800ea76:	05db      	lsls	r3, r3, #23
 800ea78:	2110      	movs	r1, #16
 800ea7a:	0018      	movs	r0, r3
 800ea7c:	f7f5 ff48 	bl	8004910 <HAL_GPIO_ReadPin>
 800ea80:	0003      	movs	r3, r0
 800ea82:	0019      	movs	r1, r3
	touchReg = touchReg
 800ea84:	1dfb      	adds	r3, r7, #7
 800ea86:	1dfa      	adds	r2, r7, #7
 800ea88:	7812      	ldrb	r2, [r2, #0]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	701a      	strb	r2, [r3, #0]

	return touchReg;
 800ea8e:	1dfb      	adds	r3, r7, #7
 800ea90:	781b      	ldrb	r3, [r3, #0]

}
 800ea92:	0018      	movs	r0, r3
 800ea94:	46bd      	mov	sp, r7
 800ea96:	b002      	add	sp, #8
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <watchInit>:
 */


#include <chrono/watch.h>

void watchInit(watchTypeDef *watch){
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]

	watch->mode = WATCH_MODE_NORMAL;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
	watch->counterSettingsMode = 0;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	705a      	strb	r2, [r3, #1]
	watch->flagLowBattery = 1;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	711a      	strb	r2, [r3, #4]
	watch->counterDontSleepTimer = WATCH_TIME_DONT_SLEEP;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2232      	movs	r2, #50	; 0x32
 800eab8:	709a      	strb	r2, [r3, #2]
}
 800eaba:	46c0      	nop			; (mov r8, r8)
 800eabc:	46bd      	mov	sp, r7
 800eabe:	b002      	add	sp, #8
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <watchSwitchMode>:

void watchSwitchMode(watchTypeDef *watch, uint8_t mode){
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b082      	sub	sp, #8
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	000a      	movs	r2, r1
 800eacc:	1cfb      	adds	r3, r7, #3
 800eace:	701a      	strb	r2, [r3, #0]
	watch->mode = mode;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	1cfa      	adds	r2, r7, #3
 800ead4:	7812      	ldrb	r2, [r2, #0]
 800ead6:	701a      	strb	r2, [r3, #0]
	watch->settingsItem = WATCH_SETTINGS_ITEM_PREF; //after enter settings, set blank1 as default position
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2207      	movs	r2, #7
 800eadc:	70da      	strb	r2, [r3, #3]
}
 800eade:	46c0      	nop			; (mov r8, r8)
 800eae0:	46bd      	mov	sp, r7
 800eae2:	b002      	add	sp, #8
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <watchSwitchSettingsItem>:

void watchSwitchSettingsItem(watchTypeDef *watch){
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
	watch->settingsItem++;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	78db      	ldrb	r3, [r3, #3]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	70da      	strb	r2, [r3, #3]
	if(watch->settingsItem > WATCH_SETTINGS_ITEM_BLANK) watch->settingsItem = WATCH_SETTINGS_ITEM_HOUR;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	78db      	ldrb	r3, [r3, #3]
 800eafe:	2b09      	cmp	r3, #9
 800eb00:	d902      	bls.n	800eb08 <watchSwitchSettingsItem+0x22>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	70da      	strb	r2, [r3, #3]
}
 800eb08:	46c0      	nop			; (mov r8, r8)
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	b002      	add	sp, #8
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800eb10:	480d      	ldr	r0, [pc, #52]	; (800eb48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800eb12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800eb14:	f7fb fc20 	bl	800a358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800eb18:	480c      	ldr	r0, [pc, #48]	; (800eb4c <LoopForever+0x6>)
  ldr r1, =_edata
 800eb1a:	490d      	ldr	r1, [pc, #52]	; (800eb50 <LoopForever+0xa>)
  ldr r2, =_sidata
 800eb1c:	4a0d      	ldr	r2, [pc, #52]	; (800eb54 <LoopForever+0xe>)
  movs r3, #0
 800eb1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800eb20:	e002      	b.n	800eb28 <LoopCopyDataInit>

0800eb22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800eb22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eb24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eb26:	3304      	adds	r3, #4

0800eb28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eb28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eb2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eb2c:	d3f9      	bcc.n	800eb22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eb2e:	4a0a      	ldr	r2, [pc, #40]	; (800eb58 <LoopForever+0x12>)
  ldr r4, =_ebss
 800eb30:	4c0a      	ldr	r4, [pc, #40]	; (800eb5c <LoopForever+0x16>)
  movs r3, #0
 800eb32:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eb34:	e001      	b.n	800eb3a <LoopFillZerobss>

0800eb36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eb36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eb38:	3204      	adds	r2, #4

0800eb3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eb3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eb3c:	d3fb      	bcc.n	800eb36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800eb3e:	f000 f817 	bl	800eb70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800eb42:	f7fb f86d 	bl	8009c20 <main>

0800eb46 <LoopForever>:

LoopForever:
  b LoopForever
 800eb46:	e7fe      	b.n	800eb46 <LoopForever>
  ldr   r0, =_estack
 800eb48:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800eb4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800eb50:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800eb54:	08015b40 	.word	0x08015b40
  ldr r2, =_sbss
 800eb58:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800eb5c:	20000800 	.word	0x20000800

0800eb60 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800eb60:	e7fe      	b.n	800eb60 <ADC1_COMP_IRQHandler>
	...

0800eb64 <__errno>:
 800eb64:	4b01      	ldr	r3, [pc, #4]	; (800eb6c <__errno+0x8>)
 800eb66:	6818      	ldr	r0, [r3, #0]
 800eb68:	4770      	bx	lr
 800eb6a:	46c0      	nop			; (mov r8, r8)
 800eb6c:	20000034 	.word	0x20000034

0800eb70 <__libc_init_array>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	2600      	movs	r6, #0
 800eb74:	4d0c      	ldr	r5, [pc, #48]	; (800eba8 <__libc_init_array+0x38>)
 800eb76:	4c0d      	ldr	r4, [pc, #52]	; (800ebac <__libc_init_array+0x3c>)
 800eb78:	1b64      	subs	r4, r4, r5
 800eb7a:	10a4      	asrs	r4, r4, #2
 800eb7c:	42a6      	cmp	r6, r4
 800eb7e:	d109      	bne.n	800eb94 <__libc_init_array+0x24>
 800eb80:	2600      	movs	r6, #0
 800eb82:	f002 fccb 	bl	801151c <_init>
 800eb86:	4d0a      	ldr	r5, [pc, #40]	; (800ebb0 <__libc_init_array+0x40>)
 800eb88:	4c0a      	ldr	r4, [pc, #40]	; (800ebb4 <__libc_init_array+0x44>)
 800eb8a:	1b64      	subs	r4, r4, r5
 800eb8c:	10a4      	asrs	r4, r4, #2
 800eb8e:	42a6      	cmp	r6, r4
 800eb90:	d105      	bne.n	800eb9e <__libc_init_array+0x2e>
 800eb92:	bd70      	pop	{r4, r5, r6, pc}
 800eb94:	00b3      	lsls	r3, r6, #2
 800eb96:	58eb      	ldr	r3, [r5, r3]
 800eb98:	4798      	blx	r3
 800eb9a:	3601      	adds	r6, #1
 800eb9c:	e7ee      	b.n	800eb7c <__libc_init_array+0xc>
 800eb9e:	00b3      	lsls	r3, r6, #2
 800eba0:	58eb      	ldr	r3, [r5, r3]
 800eba2:	4798      	blx	r3
 800eba4:	3601      	adds	r6, #1
 800eba6:	e7f2      	b.n	800eb8e <__libc_init_array+0x1e>
 800eba8:	08015b38 	.word	0x08015b38
 800ebac:	08015b38 	.word	0x08015b38
 800ebb0:	08015b38 	.word	0x08015b38
 800ebb4:	08015b3c 	.word	0x08015b3c

0800ebb8 <malloc>:
 800ebb8:	b510      	push	{r4, lr}
 800ebba:	4b03      	ldr	r3, [pc, #12]	; (800ebc8 <malloc+0x10>)
 800ebbc:	0001      	movs	r1, r0
 800ebbe:	6818      	ldr	r0, [r3, #0]
 800ebc0:	f000 f860 	bl	800ec84 <_malloc_r>
 800ebc4:	bd10      	pop	{r4, pc}
 800ebc6:	46c0      	nop			; (mov r8, r8)
 800ebc8:	20000034 	.word	0x20000034

0800ebcc <memcpy>:
 800ebcc:	2300      	movs	r3, #0
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d100      	bne.n	800ebd6 <memcpy+0xa>
 800ebd4:	bd10      	pop	{r4, pc}
 800ebd6:	5ccc      	ldrb	r4, [r1, r3]
 800ebd8:	54c4      	strb	r4, [r0, r3]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	e7f8      	b.n	800ebd0 <memcpy+0x4>

0800ebde <memset>:
 800ebde:	0003      	movs	r3, r0
 800ebe0:	1882      	adds	r2, r0, r2
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d100      	bne.n	800ebe8 <memset+0xa>
 800ebe6:	4770      	bx	lr
 800ebe8:	7019      	strb	r1, [r3, #0]
 800ebea:	3301      	adds	r3, #1
 800ebec:	e7f9      	b.n	800ebe2 <memset+0x4>
	...

0800ebf0 <_free_r>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	0005      	movs	r5, r0
 800ebf4:	2900      	cmp	r1, #0
 800ebf6:	d010      	beq.n	800ec1a <_free_r+0x2a>
 800ebf8:	1f0c      	subs	r4, r1, #4
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	da00      	bge.n	800ec02 <_free_r+0x12>
 800ec00:	18e4      	adds	r4, r4, r3
 800ec02:	0028      	movs	r0, r5
 800ec04:	f000 fc50 	bl	800f4a8 <__malloc_lock>
 800ec08:	4a1d      	ldr	r2, [pc, #116]	; (800ec80 <_free_r+0x90>)
 800ec0a:	6813      	ldr	r3, [r2, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d105      	bne.n	800ec1c <_free_r+0x2c>
 800ec10:	6063      	str	r3, [r4, #4]
 800ec12:	6014      	str	r4, [r2, #0]
 800ec14:	0028      	movs	r0, r5
 800ec16:	f000 fc4f 	bl	800f4b8 <__malloc_unlock>
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}
 800ec1c:	42a3      	cmp	r3, r4
 800ec1e:	d908      	bls.n	800ec32 <_free_r+0x42>
 800ec20:	6821      	ldr	r1, [r4, #0]
 800ec22:	1860      	adds	r0, r4, r1
 800ec24:	4283      	cmp	r3, r0
 800ec26:	d1f3      	bne.n	800ec10 <_free_r+0x20>
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	1841      	adds	r1, r0, r1
 800ec2e:	6021      	str	r1, [r4, #0]
 800ec30:	e7ee      	b.n	800ec10 <_free_r+0x20>
 800ec32:	001a      	movs	r2, r3
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <_free_r+0x4e>
 800ec3a:	42a3      	cmp	r3, r4
 800ec3c:	d9f9      	bls.n	800ec32 <_free_r+0x42>
 800ec3e:	6811      	ldr	r1, [r2, #0]
 800ec40:	1850      	adds	r0, r2, r1
 800ec42:	42a0      	cmp	r0, r4
 800ec44:	d10b      	bne.n	800ec5e <_free_r+0x6e>
 800ec46:	6820      	ldr	r0, [r4, #0]
 800ec48:	1809      	adds	r1, r1, r0
 800ec4a:	1850      	adds	r0, r2, r1
 800ec4c:	6011      	str	r1, [r2, #0]
 800ec4e:	4283      	cmp	r3, r0
 800ec50:	d1e0      	bne.n	800ec14 <_free_r+0x24>
 800ec52:	6818      	ldr	r0, [r3, #0]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	1841      	adds	r1, r0, r1
 800ec58:	6011      	str	r1, [r2, #0]
 800ec5a:	6053      	str	r3, [r2, #4]
 800ec5c:	e7da      	b.n	800ec14 <_free_r+0x24>
 800ec5e:	42a0      	cmp	r0, r4
 800ec60:	d902      	bls.n	800ec68 <_free_r+0x78>
 800ec62:	230c      	movs	r3, #12
 800ec64:	602b      	str	r3, [r5, #0]
 800ec66:	e7d5      	b.n	800ec14 <_free_r+0x24>
 800ec68:	6821      	ldr	r1, [r4, #0]
 800ec6a:	1860      	adds	r0, r4, r1
 800ec6c:	4283      	cmp	r3, r0
 800ec6e:	d103      	bne.n	800ec78 <_free_r+0x88>
 800ec70:	6818      	ldr	r0, [r3, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	1841      	adds	r1, r0, r1
 800ec76:	6021      	str	r1, [r4, #0]
 800ec78:	6063      	str	r3, [r4, #4]
 800ec7a:	6054      	str	r4, [r2, #4]
 800ec7c:	e7ca      	b.n	800ec14 <_free_r+0x24>
 800ec7e:	46c0      	nop			; (mov r8, r8)
 800ec80:	200005d8 	.word	0x200005d8

0800ec84 <_malloc_r>:
 800ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec86:	2303      	movs	r3, #3
 800ec88:	1ccd      	adds	r5, r1, #3
 800ec8a:	439d      	bics	r5, r3
 800ec8c:	3508      	adds	r5, #8
 800ec8e:	0006      	movs	r6, r0
 800ec90:	2d0c      	cmp	r5, #12
 800ec92:	d21f      	bcs.n	800ecd4 <_malloc_r+0x50>
 800ec94:	250c      	movs	r5, #12
 800ec96:	42a9      	cmp	r1, r5
 800ec98:	d81e      	bhi.n	800ecd8 <_malloc_r+0x54>
 800ec9a:	0030      	movs	r0, r6
 800ec9c:	f000 fc04 	bl	800f4a8 <__malloc_lock>
 800eca0:	4925      	ldr	r1, [pc, #148]	; (800ed38 <_malloc_r+0xb4>)
 800eca2:	680a      	ldr	r2, [r1, #0]
 800eca4:	0014      	movs	r4, r2
 800eca6:	2c00      	cmp	r4, #0
 800eca8:	d11a      	bne.n	800ece0 <_malloc_r+0x5c>
 800ecaa:	4f24      	ldr	r7, [pc, #144]	; (800ed3c <_malloc_r+0xb8>)
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d104      	bne.n	800ecbc <_malloc_r+0x38>
 800ecb2:	0021      	movs	r1, r4
 800ecb4:	0030      	movs	r0, r6
 800ecb6:	f000 f8d9 	bl	800ee6c <_sbrk_r>
 800ecba:	6038      	str	r0, [r7, #0]
 800ecbc:	0029      	movs	r1, r5
 800ecbe:	0030      	movs	r0, r6
 800ecc0:	f000 f8d4 	bl	800ee6c <_sbrk_r>
 800ecc4:	1c43      	adds	r3, r0, #1
 800ecc6:	d12b      	bne.n	800ed20 <_malloc_r+0x9c>
 800ecc8:	230c      	movs	r3, #12
 800ecca:	0030      	movs	r0, r6
 800eccc:	6033      	str	r3, [r6, #0]
 800ecce:	f000 fbf3 	bl	800f4b8 <__malloc_unlock>
 800ecd2:	e003      	b.n	800ecdc <_malloc_r+0x58>
 800ecd4:	2d00      	cmp	r5, #0
 800ecd6:	dade      	bge.n	800ec96 <_malloc_r+0x12>
 800ecd8:	230c      	movs	r3, #12
 800ecda:	6033      	str	r3, [r6, #0]
 800ecdc:	2000      	movs	r0, #0
 800ecde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	1b5b      	subs	r3, r3, r5
 800ece4:	d419      	bmi.n	800ed1a <_malloc_r+0x96>
 800ece6:	2b0b      	cmp	r3, #11
 800ece8:	d903      	bls.n	800ecf2 <_malloc_r+0x6e>
 800ecea:	6023      	str	r3, [r4, #0]
 800ecec:	18e4      	adds	r4, r4, r3
 800ecee:	6025      	str	r5, [r4, #0]
 800ecf0:	e003      	b.n	800ecfa <_malloc_r+0x76>
 800ecf2:	6863      	ldr	r3, [r4, #4]
 800ecf4:	42a2      	cmp	r2, r4
 800ecf6:	d10e      	bne.n	800ed16 <_malloc_r+0x92>
 800ecf8:	600b      	str	r3, [r1, #0]
 800ecfa:	0030      	movs	r0, r6
 800ecfc:	f000 fbdc 	bl	800f4b8 <__malloc_unlock>
 800ed00:	0020      	movs	r0, r4
 800ed02:	2207      	movs	r2, #7
 800ed04:	300b      	adds	r0, #11
 800ed06:	1d23      	adds	r3, r4, #4
 800ed08:	4390      	bics	r0, r2
 800ed0a:	1ac2      	subs	r2, r0, r3
 800ed0c:	4298      	cmp	r0, r3
 800ed0e:	d0e6      	beq.n	800ecde <_malloc_r+0x5a>
 800ed10:	1a1b      	subs	r3, r3, r0
 800ed12:	50a3      	str	r3, [r4, r2]
 800ed14:	e7e3      	b.n	800ecde <_malloc_r+0x5a>
 800ed16:	6053      	str	r3, [r2, #4]
 800ed18:	e7ef      	b.n	800ecfa <_malloc_r+0x76>
 800ed1a:	0022      	movs	r2, r4
 800ed1c:	6864      	ldr	r4, [r4, #4]
 800ed1e:	e7c2      	b.n	800eca6 <_malloc_r+0x22>
 800ed20:	2303      	movs	r3, #3
 800ed22:	1cc4      	adds	r4, r0, #3
 800ed24:	439c      	bics	r4, r3
 800ed26:	42a0      	cmp	r0, r4
 800ed28:	d0e1      	beq.n	800ecee <_malloc_r+0x6a>
 800ed2a:	1a21      	subs	r1, r4, r0
 800ed2c:	0030      	movs	r0, r6
 800ed2e:	f000 f89d 	bl	800ee6c <_sbrk_r>
 800ed32:	1c43      	adds	r3, r0, #1
 800ed34:	d1db      	bne.n	800ecee <_malloc_r+0x6a>
 800ed36:	e7c7      	b.n	800ecc8 <_malloc_r+0x44>
 800ed38:	200005d8 	.word	0x200005d8
 800ed3c:	200005dc 	.word	0x200005dc

0800ed40 <iprintf>:
 800ed40:	b40f      	push	{r0, r1, r2, r3}
 800ed42:	4b0b      	ldr	r3, [pc, #44]	; (800ed70 <iprintf+0x30>)
 800ed44:	b513      	push	{r0, r1, r4, lr}
 800ed46:	681c      	ldr	r4, [r3, #0]
 800ed48:	2c00      	cmp	r4, #0
 800ed4a:	d005      	beq.n	800ed58 <iprintf+0x18>
 800ed4c:	69a3      	ldr	r3, [r4, #24]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d102      	bne.n	800ed58 <iprintf+0x18>
 800ed52:	0020      	movs	r0, r4
 800ed54:	f000 fa98 	bl	800f288 <__sinit>
 800ed58:	ab05      	add	r3, sp, #20
 800ed5a:	0020      	movs	r0, r4
 800ed5c:	9a04      	ldr	r2, [sp, #16]
 800ed5e:	68a1      	ldr	r1, [r4, #8]
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	f000 fbd9 	bl	800f518 <_vfiprintf_r>
 800ed66:	bc16      	pop	{r1, r2, r4}
 800ed68:	bc08      	pop	{r3}
 800ed6a:	b004      	add	sp, #16
 800ed6c:	4718      	bx	r3
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	20000034 	.word	0x20000034

0800ed74 <_puts_r>:
 800ed74:	b570      	push	{r4, r5, r6, lr}
 800ed76:	0005      	movs	r5, r0
 800ed78:	000e      	movs	r6, r1
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d004      	beq.n	800ed88 <_puts_r+0x14>
 800ed7e:	6983      	ldr	r3, [r0, #24]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <_puts_r+0x14>
 800ed84:	f000 fa80 	bl	800f288 <__sinit>
 800ed88:	69ab      	ldr	r3, [r5, #24]
 800ed8a:	68ac      	ldr	r4, [r5, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d102      	bne.n	800ed96 <_puts_r+0x22>
 800ed90:	0028      	movs	r0, r5
 800ed92:	f000 fa79 	bl	800f288 <__sinit>
 800ed96:	4b2d      	ldr	r3, [pc, #180]	; (800ee4c <_puts_r+0xd8>)
 800ed98:	429c      	cmp	r4, r3
 800ed9a:	d122      	bne.n	800ede2 <_puts_r+0x6e>
 800ed9c:	686c      	ldr	r4, [r5, #4]
 800ed9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eda0:	07db      	lsls	r3, r3, #31
 800eda2:	d405      	bmi.n	800edb0 <_puts_r+0x3c>
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	059b      	lsls	r3, r3, #22
 800eda8:	d402      	bmi.n	800edb0 <_puts_r+0x3c>
 800edaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edac:	f000 fb0d 	bl	800f3ca <__retarget_lock_acquire_recursive>
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	071b      	lsls	r3, r3, #28
 800edb4:	d502      	bpl.n	800edbc <_puts_r+0x48>
 800edb6:	6923      	ldr	r3, [r4, #16]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d129      	bne.n	800ee10 <_puts_r+0x9c>
 800edbc:	0021      	movs	r1, r4
 800edbe:	0028      	movs	r0, r5
 800edc0:	f000 f8bc 	bl	800ef3c <__swsetup_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d023      	beq.n	800ee10 <_puts_r+0x9c>
 800edc8:	2501      	movs	r5, #1
 800edca:	426d      	negs	r5, r5
 800edcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edce:	07db      	lsls	r3, r3, #31
 800edd0:	d405      	bmi.n	800edde <_puts_r+0x6a>
 800edd2:	89a3      	ldrh	r3, [r4, #12]
 800edd4:	059b      	lsls	r3, r3, #22
 800edd6:	d402      	bmi.n	800edde <_puts_r+0x6a>
 800edd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edda:	f000 faf7 	bl	800f3cc <__retarget_lock_release_recursive>
 800edde:	0028      	movs	r0, r5
 800ede0:	bd70      	pop	{r4, r5, r6, pc}
 800ede2:	4b1b      	ldr	r3, [pc, #108]	; (800ee50 <_puts_r+0xdc>)
 800ede4:	429c      	cmp	r4, r3
 800ede6:	d101      	bne.n	800edec <_puts_r+0x78>
 800ede8:	68ac      	ldr	r4, [r5, #8]
 800edea:	e7d8      	b.n	800ed9e <_puts_r+0x2a>
 800edec:	4b19      	ldr	r3, [pc, #100]	; (800ee54 <_puts_r+0xe0>)
 800edee:	429c      	cmp	r4, r3
 800edf0:	d1d5      	bne.n	800ed9e <_puts_r+0x2a>
 800edf2:	68ec      	ldr	r4, [r5, #12]
 800edf4:	e7d3      	b.n	800ed9e <_puts_r+0x2a>
 800edf6:	3601      	adds	r6, #1
 800edf8:	60a3      	str	r3, [r4, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	da04      	bge.n	800ee08 <_puts_r+0x94>
 800edfe:	69a2      	ldr	r2, [r4, #24]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	dc16      	bgt.n	800ee32 <_puts_r+0xbe>
 800ee04:	290a      	cmp	r1, #10
 800ee06:	d014      	beq.n	800ee32 <_puts_r+0xbe>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	1c5a      	adds	r2, r3, #1
 800ee0c:	6022      	str	r2, [r4, #0]
 800ee0e:	7019      	strb	r1, [r3, #0]
 800ee10:	68a3      	ldr	r3, [r4, #8]
 800ee12:	7831      	ldrb	r1, [r6, #0]
 800ee14:	3b01      	subs	r3, #1
 800ee16:	2900      	cmp	r1, #0
 800ee18:	d1ed      	bne.n	800edf6 <_puts_r+0x82>
 800ee1a:	60a3      	str	r3, [r4, #8]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	da0f      	bge.n	800ee40 <_puts_r+0xcc>
 800ee20:	0028      	movs	r0, r5
 800ee22:	0022      	movs	r2, r4
 800ee24:	310a      	adds	r1, #10
 800ee26:	f000 f833 	bl	800ee90 <__swbuf_r>
 800ee2a:	250a      	movs	r5, #10
 800ee2c:	1c43      	adds	r3, r0, #1
 800ee2e:	d1cd      	bne.n	800edcc <_puts_r+0x58>
 800ee30:	e7ca      	b.n	800edc8 <_puts_r+0x54>
 800ee32:	0022      	movs	r2, r4
 800ee34:	0028      	movs	r0, r5
 800ee36:	f000 f82b 	bl	800ee90 <__swbuf_r>
 800ee3a:	1c43      	adds	r3, r0, #1
 800ee3c:	d1e8      	bne.n	800ee10 <_puts_r+0x9c>
 800ee3e:	e7c3      	b.n	800edc8 <_puts_r+0x54>
 800ee40:	250a      	movs	r5, #10
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	6022      	str	r2, [r4, #0]
 800ee48:	701d      	strb	r5, [r3, #0]
 800ee4a:	e7bf      	b.n	800edcc <_puts_r+0x58>
 800ee4c:	08015874 	.word	0x08015874
 800ee50:	08015894 	.word	0x08015894
 800ee54:	08015854 	.word	0x08015854

0800ee58 <puts>:
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	4b03      	ldr	r3, [pc, #12]	; (800ee68 <puts+0x10>)
 800ee5c:	0001      	movs	r1, r0
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	f7ff ff88 	bl	800ed74 <_puts_r>
 800ee64:	bd10      	pop	{r4, pc}
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	20000034 	.word	0x20000034

0800ee6c <_sbrk_r>:
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	b570      	push	{r4, r5, r6, lr}
 800ee70:	4d06      	ldr	r5, [pc, #24]	; (800ee8c <_sbrk_r+0x20>)
 800ee72:	0004      	movs	r4, r0
 800ee74:	0008      	movs	r0, r1
 800ee76:	602b      	str	r3, [r5, #0]
 800ee78:	f7fb fa38 	bl	800a2ec <_sbrk>
 800ee7c:	1c43      	adds	r3, r0, #1
 800ee7e:	d103      	bne.n	800ee88 <_sbrk_r+0x1c>
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d000      	beq.n	800ee88 <_sbrk_r+0x1c>
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	bd70      	pop	{r4, r5, r6, pc}
 800ee8a:	46c0      	nop			; (mov r8, r8)
 800ee8c:	200007fc 	.word	0x200007fc

0800ee90 <__swbuf_r>:
 800ee90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee92:	0005      	movs	r5, r0
 800ee94:	000e      	movs	r6, r1
 800ee96:	0014      	movs	r4, r2
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d004      	beq.n	800eea6 <__swbuf_r+0x16>
 800ee9c:	6983      	ldr	r3, [r0, #24]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <__swbuf_r+0x16>
 800eea2:	f000 f9f1 	bl	800f288 <__sinit>
 800eea6:	4b22      	ldr	r3, [pc, #136]	; (800ef30 <__swbuf_r+0xa0>)
 800eea8:	429c      	cmp	r4, r3
 800eeaa:	d12e      	bne.n	800ef0a <__swbuf_r+0x7a>
 800eeac:	686c      	ldr	r4, [r5, #4]
 800eeae:	69a3      	ldr	r3, [r4, #24]
 800eeb0:	60a3      	str	r3, [r4, #8]
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	071b      	lsls	r3, r3, #28
 800eeb6:	d532      	bpl.n	800ef1e <__swbuf_r+0x8e>
 800eeb8:	6923      	ldr	r3, [r4, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d02f      	beq.n	800ef1e <__swbuf_r+0x8e>
 800eebe:	6823      	ldr	r3, [r4, #0]
 800eec0:	6922      	ldr	r2, [r4, #16]
 800eec2:	b2f7      	uxtb	r7, r6
 800eec4:	1a98      	subs	r0, r3, r2
 800eec6:	6963      	ldr	r3, [r4, #20]
 800eec8:	b2f6      	uxtb	r6, r6
 800eeca:	4283      	cmp	r3, r0
 800eecc:	dc05      	bgt.n	800eeda <__swbuf_r+0x4a>
 800eece:	0021      	movs	r1, r4
 800eed0:	0028      	movs	r0, r5
 800eed2:	f000 f937 	bl	800f144 <_fflush_r>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d127      	bne.n	800ef2a <__swbuf_r+0x9a>
 800eeda:	68a3      	ldr	r3, [r4, #8]
 800eedc:	3001      	adds	r0, #1
 800eede:	3b01      	subs	r3, #1
 800eee0:	60a3      	str	r3, [r4, #8]
 800eee2:	6823      	ldr	r3, [r4, #0]
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	6022      	str	r2, [r4, #0]
 800eee8:	701f      	strb	r7, [r3, #0]
 800eeea:	6963      	ldr	r3, [r4, #20]
 800eeec:	4283      	cmp	r3, r0
 800eeee:	d004      	beq.n	800eefa <__swbuf_r+0x6a>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	07db      	lsls	r3, r3, #31
 800eef4:	d507      	bpl.n	800ef06 <__swbuf_r+0x76>
 800eef6:	2e0a      	cmp	r6, #10
 800eef8:	d105      	bne.n	800ef06 <__swbuf_r+0x76>
 800eefa:	0021      	movs	r1, r4
 800eefc:	0028      	movs	r0, r5
 800eefe:	f000 f921 	bl	800f144 <_fflush_r>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d111      	bne.n	800ef2a <__swbuf_r+0x9a>
 800ef06:	0030      	movs	r0, r6
 800ef08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef0a:	4b0a      	ldr	r3, [pc, #40]	; (800ef34 <__swbuf_r+0xa4>)
 800ef0c:	429c      	cmp	r4, r3
 800ef0e:	d101      	bne.n	800ef14 <__swbuf_r+0x84>
 800ef10:	68ac      	ldr	r4, [r5, #8]
 800ef12:	e7cc      	b.n	800eeae <__swbuf_r+0x1e>
 800ef14:	4b08      	ldr	r3, [pc, #32]	; (800ef38 <__swbuf_r+0xa8>)
 800ef16:	429c      	cmp	r4, r3
 800ef18:	d1c9      	bne.n	800eeae <__swbuf_r+0x1e>
 800ef1a:	68ec      	ldr	r4, [r5, #12]
 800ef1c:	e7c7      	b.n	800eeae <__swbuf_r+0x1e>
 800ef1e:	0021      	movs	r1, r4
 800ef20:	0028      	movs	r0, r5
 800ef22:	f000 f80b 	bl	800ef3c <__swsetup_r>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d0c9      	beq.n	800eebe <__swbuf_r+0x2e>
 800ef2a:	2601      	movs	r6, #1
 800ef2c:	4276      	negs	r6, r6
 800ef2e:	e7ea      	b.n	800ef06 <__swbuf_r+0x76>
 800ef30:	08015874 	.word	0x08015874
 800ef34:	08015894 	.word	0x08015894
 800ef38:	08015854 	.word	0x08015854

0800ef3c <__swsetup_r>:
 800ef3c:	4b37      	ldr	r3, [pc, #220]	; (800f01c <__swsetup_r+0xe0>)
 800ef3e:	b570      	push	{r4, r5, r6, lr}
 800ef40:	681d      	ldr	r5, [r3, #0]
 800ef42:	0006      	movs	r6, r0
 800ef44:	000c      	movs	r4, r1
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	d005      	beq.n	800ef56 <__swsetup_r+0x1a>
 800ef4a:	69ab      	ldr	r3, [r5, #24]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d102      	bne.n	800ef56 <__swsetup_r+0x1a>
 800ef50:	0028      	movs	r0, r5
 800ef52:	f000 f999 	bl	800f288 <__sinit>
 800ef56:	4b32      	ldr	r3, [pc, #200]	; (800f020 <__swsetup_r+0xe4>)
 800ef58:	429c      	cmp	r4, r3
 800ef5a:	d10f      	bne.n	800ef7c <__swsetup_r+0x40>
 800ef5c:	686c      	ldr	r4, [r5, #4]
 800ef5e:	230c      	movs	r3, #12
 800ef60:	5ee2      	ldrsh	r2, [r4, r3]
 800ef62:	b293      	uxth	r3, r2
 800ef64:	0711      	lsls	r1, r2, #28
 800ef66:	d42d      	bmi.n	800efc4 <__swsetup_r+0x88>
 800ef68:	06d9      	lsls	r1, r3, #27
 800ef6a:	d411      	bmi.n	800ef90 <__swsetup_r+0x54>
 800ef6c:	2309      	movs	r3, #9
 800ef6e:	2001      	movs	r0, #1
 800ef70:	6033      	str	r3, [r6, #0]
 800ef72:	3337      	adds	r3, #55	; 0x37
 800ef74:	4313      	orrs	r3, r2
 800ef76:	81a3      	strh	r3, [r4, #12]
 800ef78:	4240      	negs	r0, r0
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	4b29      	ldr	r3, [pc, #164]	; (800f024 <__swsetup_r+0xe8>)
 800ef7e:	429c      	cmp	r4, r3
 800ef80:	d101      	bne.n	800ef86 <__swsetup_r+0x4a>
 800ef82:	68ac      	ldr	r4, [r5, #8]
 800ef84:	e7eb      	b.n	800ef5e <__swsetup_r+0x22>
 800ef86:	4b28      	ldr	r3, [pc, #160]	; (800f028 <__swsetup_r+0xec>)
 800ef88:	429c      	cmp	r4, r3
 800ef8a:	d1e8      	bne.n	800ef5e <__swsetup_r+0x22>
 800ef8c:	68ec      	ldr	r4, [r5, #12]
 800ef8e:	e7e6      	b.n	800ef5e <__swsetup_r+0x22>
 800ef90:	075b      	lsls	r3, r3, #29
 800ef92:	d513      	bpl.n	800efbc <__swsetup_r+0x80>
 800ef94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef96:	2900      	cmp	r1, #0
 800ef98:	d008      	beq.n	800efac <__swsetup_r+0x70>
 800ef9a:	0023      	movs	r3, r4
 800ef9c:	3344      	adds	r3, #68	; 0x44
 800ef9e:	4299      	cmp	r1, r3
 800efa0:	d002      	beq.n	800efa8 <__swsetup_r+0x6c>
 800efa2:	0030      	movs	r0, r6
 800efa4:	f7ff fe24 	bl	800ebf0 <_free_r>
 800efa8:	2300      	movs	r3, #0
 800efaa:	6363      	str	r3, [r4, #52]	; 0x34
 800efac:	2224      	movs	r2, #36	; 0x24
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	4393      	bics	r3, r2
 800efb2:	81a3      	strh	r3, [r4, #12]
 800efb4:	2300      	movs	r3, #0
 800efb6:	6063      	str	r3, [r4, #4]
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	6023      	str	r3, [r4, #0]
 800efbc:	2308      	movs	r3, #8
 800efbe:	89a2      	ldrh	r2, [r4, #12]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	81a3      	strh	r3, [r4, #12]
 800efc4:	6923      	ldr	r3, [r4, #16]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d10b      	bne.n	800efe2 <__swsetup_r+0xa6>
 800efca:	21a0      	movs	r1, #160	; 0xa0
 800efcc:	2280      	movs	r2, #128	; 0x80
 800efce:	89a3      	ldrh	r3, [r4, #12]
 800efd0:	0089      	lsls	r1, r1, #2
 800efd2:	0092      	lsls	r2, r2, #2
 800efd4:	400b      	ands	r3, r1
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d003      	beq.n	800efe2 <__swsetup_r+0xa6>
 800efda:	0021      	movs	r1, r4
 800efdc:	0030      	movs	r0, r6
 800efde:	f000 fa1f 	bl	800f420 <__smakebuf_r>
 800efe2:	220c      	movs	r2, #12
 800efe4:	5ea3      	ldrsh	r3, [r4, r2]
 800efe6:	2001      	movs	r0, #1
 800efe8:	001a      	movs	r2, r3
 800efea:	b299      	uxth	r1, r3
 800efec:	4002      	ands	r2, r0
 800efee:	4203      	tst	r3, r0
 800eff0:	d00f      	beq.n	800f012 <__swsetup_r+0xd6>
 800eff2:	2200      	movs	r2, #0
 800eff4:	60a2      	str	r2, [r4, #8]
 800eff6:	6962      	ldr	r2, [r4, #20]
 800eff8:	4252      	negs	r2, r2
 800effa:	61a2      	str	r2, [r4, #24]
 800effc:	2000      	movs	r0, #0
 800effe:	6922      	ldr	r2, [r4, #16]
 800f000:	4282      	cmp	r2, r0
 800f002:	d1ba      	bne.n	800ef7a <__swsetup_r+0x3e>
 800f004:	060a      	lsls	r2, r1, #24
 800f006:	d5b8      	bpl.n	800ef7a <__swsetup_r+0x3e>
 800f008:	2240      	movs	r2, #64	; 0x40
 800f00a:	4313      	orrs	r3, r2
 800f00c:	81a3      	strh	r3, [r4, #12]
 800f00e:	3801      	subs	r0, #1
 800f010:	e7b3      	b.n	800ef7a <__swsetup_r+0x3e>
 800f012:	0788      	lsls	r0, r1, #30
 800f014:	d400      	bmi.n	800f018 <__swsetup_r+0xdc>
 800f016:	6962      	ldr	r2, [r4, #20]
 800f018:	60a2      	str	r2, [r4, #8]
 800f01a:	e7ef      	b.n	800effc <__swsetup_r+0xc0>
 800f01c:	20000034 	.word	0x20000034
 800f020:	08015874 	.word	0x08015874
 800f024:	08015894 	.word	0x08015894
 800f028:	08015854 	.word	0x08015854

0800f02c <__sflush_r>:
 800f02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f02e:	898b      	ldrh	r3, [r1, #12]
 800f030:	0005      	movs	r5, r0
 800f032:	000c      	movs	r4, r1
 800f034:	071a      	lsls	r2, r3, #28
 800f036:	d45f      	bmi.n	800f0f8 <__sflush_r+0xcc>
 800f038:	684a      	ldr	r2, [r1, #4]
 800f03a:	2a00      	cmp	r2, #0
 800f03c:	dc04      	bgt.n	800f048 <__sflush_r+0x1c>
 800f03e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f040:	2a00      	cmp	r2, #0
 800f042:	dc01      	bgt.n	800f048 <__sflush_r+0x1c>
 800f044:	2000      	movs	r0, #0
 800f046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f048:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f04a:	2f00      	cmp	r7, #0
 800f04c:	d0fa      	beq.n	800f044 <__sflush_r+0x18>
 800f04e:	2200      	movs	r2, #0
 800f050:	2180      	movs	r1, #128	; 0x80
 800f052:	682e      	ldr	r6, [r5, #0]
 800f054:	602a      	str	r2, [r5, #0]
 800f056:	001a      	movs	r2, r3
 800f058:	0149      	lsls	r1, r1, #5
 800f05a:	400a      	ands	r2, r1
 800f05c:	420b      	tst	r3, r1
 800f05e:	d034      	beq.n	800f0ca <__sflush_r+0x9e>
 800f060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f062:	89a3      	ldrh	r3, [r4, #12]
 800f064:	075b      	lsls	r3, r3, #29
 800f066:	d506      	bpl.n	800f076 <__sflush_r+0x4a>
 800f068:	6863      	ldr	r3, [r4, #4]
 800f06a:	1ac0      	subs	r0, r0, r3
 800f06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <__sflush_r+0x4a>
 800f072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f074:	1ac0      	subs	r0, r0, r3
 800f076:	0002      	movs	r2, r0
 800f078:	6a21      	ldr	r1, [r4, #32]
 800f07a:	2300      	movs	r3, #0
 800f07c:	0028      	movs	r0, r5
 800f07e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f080:	47b8      	blx	r7
 800f082:	89a1      	ldrh	r1, [r4, #12]
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d106      	bne.n	800f096 <__sflush_r+0x6a>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	2b1d      	cmp	r3, #29
 800f08c:	d831      	bhi.n	800f0f2 <__sflush_r+0xc6>
 800f08e:	4a2c      	ldr	r2, [pc, #176]	; (800f140 <__sflush_r+0x114>)
 800f090:	40da      	lsrs	r2, r3
 800f092:	07d3      	lsls	r3, r2, #31
 800f094:	d52d      	bpl.n	800f0f2 <__sflush_r+0xc6>
 800f096:	2300      	movs	r3, #0
 800f098:	6063      	str	r3, [r4, #4]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	04cb      	lsls	r3, r1, #19
 800f0a0:	d505      	bpl.n	800f0ae <__sflush_r+0x82>
 800f0a2:	1c43      	adds	r3, r0, #1
 800f0a4:	d102      	bne.n	800f0ac <__sflush_r+0x80>
 800f0a6:	682b      	ldr	r3, [r5, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d100      	bne.n	800f0ae <__sflush_r+0x82>
 800f0ac:	6560      	str	r0, [r4, #84]	; 0x54
 800f0ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0b0:	602e      	str	r6, [r5, #0]
 800f0b2:	2900      	cmp	r1, #0
 800f0b4:	d0c6      	beq.n	800f044 <__sflush_r+0x18>
 800f0b6:	0023      	movs	r3, r4
 800f0b8:	3344      	adds	r3, #68	; 0x44
 800f0ba:	4299      	cmp	r1, r3
 800f0bc:	d002      	beq.n	800f0c4 <__sflush_r+0x98>
 800f0be:	0028      	movs	r0, r5
 800f0c0:	f7ff fd96 	bl	800ebf0 <_free_r>
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	6360      	str	r0, [r4, #52]	; 0x34
 800f0c8:	e7bd      	b.n	800f046 <__sflush_r+0x1a>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	0028      	movs	r0, r5
 800f0ce:	6a21      	ldr	r1, [r4, #32]
 800f0d0:	47b8      	blx	r7
 800f0d2:	1c43      	adds	r3, r0, #1
 800f0d4:	d1c5      	bne.n	800f062 <__sflush_r+0x36>
 800f0d6:	682b      	ldr	r3, [r5, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d0c2      	beq.n	800f062 <__sflush_r+0x36>
 800f0dc:	2b1d      	cmp	r3, #29
 800f0de:	d001      	beq.n	800f0e4 <__sflush_r+0xb8>
 800f0e0:	2b16      	cmp	r3, #22
 800f0e2:	d101      	bne.n	800f0e8 <__sflush_r+0xbc>
 800f0e4:	602e      	str	r6, [r5, #0]
 800f0e6:	e7ad      	b.n	800f044 <__sflush_r+0x18>
 800f0e8:	2340      	movs	r3, #64	; 0x40
 800f0ea:	89a2      	ldrh	r2, [r4, #12]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	81a3      	strh	r3, [r4, #12]
 800f0f0:	e7a9      	b.n	800f046 <__sflush_r+0x1a>
 800f0f2:	2340      	movs	r3, #64	; 0x40
 800f0f4:	430b      	orrs	r3, r1
 800f0f6:	e7fa      	b.n	800f0ee <__sflush_r+0xc2>
 800f0f8:	690f      	ldr	r7, [r1, #16]
 800f0fa:	2f00      	cmp	r7, #0
 800f0fc:	d0a2      	beq.n	800f044 <__sflush_r+0x18>
 800f0fe:	680a      	ldr	r2, [r1, #0]
 800f100:	600f      	str	r7, [r1, #0]
 800f102:	1bd2      	subs	r2, r2, r7
 800f104:	9201      	str	r2, [sp, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	079b      	lsls	r3, r3, #30
 800f10a:	d100      	bne.n	800f10e <__sflush_r+0xe2>
 800f10c:	694a      	ldr	r2, [r1, #20]
 800f10e:	60a2      	str	r2, [r4, #8]
 800f110:	9b01      	ldr	r3, [sp, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	dc00      	bgt.n	800f118 <__sflush_r+0xec>
 800f116:	e795      	b.n	800f044 <__sflush_r+0x18>
 800f118:	003a      	movs	r2, r7
 800f11a:	0028      	movs	r0, r5
 800f11c:	9b01      	ldr	r3, [sp, #4]
 800f11e:	6a21      	ldr	r1, [r4, #32]
 800f120:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f122:	47b0      	blx	r6
 800f124:	2800      	cmp	r0, #0
 800f126:	dc06      	bgt.n	800f136 <__sflush_r+0x10a>
 800f128:	2340      	movs	r3, #64	; 0x40
 800f12a:	2001      	movs	r0, #1
 800f12c:	89a2      	ldrh	r2, [r4, #12]
 800f12e:	4240      	negs	r0, r0
 800f130:	4313      	orrs	r3, r2
 800f132:	81a3      	strh	r3, [r4, #12]
 800f134:	e787      	b.n	800f046 <__sflush_r+0x1a>
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	183f      	adds	r7, r7, r0
 800f13a:	1a1b      	subs	r3, r3, r0
 800f13c:	9301      	str	r3, [sp, #4]
 800f13e:	e7e7      	b.n	800f110 <__sflush_r+0xe4>
 800f140:	20400001 	.word	0x20400001

0800f144 <_fflush_r>:
 800f144:	690b      	ldr	r3, [r1, #16]
 800f146:	b570      	push	{r4, r5, r6, lr}
 800f148:	0005      	movs	r5, r0
 800f14a:	000c      	movs	r4, r1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d102      	bne.n	800f156 <_fflush_r+0x12>
 800f150:	2500      	movs	r5, #0
 800f152:	0028      	movs	r0, r5
 800f154:	bd70      	pop	{r4, r5, r6, pc}
 800f156:	2800      	cmp	r0, #0
 800f158:	d004      	beq.n	800f164 <_fflush_r+0x20>
 800f15a:	6983      	ldr	r3, [r0, #24]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <_fflush_r+0x20>
 800f160:	f000 f892 	bl	800f288 <__sinit>
 800f164:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <_fflush_r+0x74>)
 800f166:	429c      	cmp	r4, r3
 800f168:	d11b      	bne.n	800f1a2 <_fflush_r+0x5e>
 800f16a:	686c      	ldr	r4, [r5, #4]
 800f16c:	220c      	movs	r2, #12
 800f16e:	5ea3      	ldrsh	r3, [r4, r2]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d0ed      	beq.n	800f150 <_fflush_r+0xc>
 800f174:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f176:	07d2      	lsls	r2, r2, #31
 800f178:	d404      	bmi.n	800f184 <_fflush_r+0x40>
 800f17a:	059b      	lsls	r3, r3, #22
 800f17c:	d402      	bmi.n	800f184 <_fflush_r+0x40>
 800f17e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f180:	f000 f923 	bl	800f3ca <__retarget_lock_acquire_recursive>
 800f184:	0028      	movs	r0, r5
 800f186:	0021      	movs	r1, r4
 800f188:	f7ff ff50 	bl	800f02c <__sflush_r>
 800f18c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f18e:	0005      	movs	r5, r0
 800f190:	07db      	lsls	r3, r3, #31
 800f192:	d4de      	bmi.n	800f152 <_fflush_r+0xe>
 800f194:	89a3      	ldrh	r3, [r4, #12]
 800f196:	059b      	lsls	r3, r3, #22
 800f198:	d4db      	bmi.n	800f152 <_fflush_r+0xe>
 800f19a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f19c:	f000 f916 	bl	800f3cc <__retarget_lock_release_recursive>
 800f1a0:	e7d7      	b.n	800f152 <_fflush_r+0xe>
 800f1a2:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <_fflush_r+0x78>)
 800f1a4:	429c      	cmp	r4, r3
 800f1a6:	d101      	bne.n	800f1ac <_fflush_r+0x68>
 800f1a8:	68ac      	ldr	r4, [r5, #8]
 800f1aa:	e7df      	b.n	800f16c <_fflush_r+0x28>
 800f1ac:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <_fflush_r+0x7c>)
 800f1ae:	429c      	cmp	r4, r3
 800f1b0:	d1dc      	bne.n	800f16c <_fflush_r+0x28>
 800f1b2:	68ec      	ldr	r4, [r5, #12]
 800f1b4:	e7da      	b.n	800f16c <_fflush_r+0x28>
 800f1b6:	46c0      	nop			; (mov r8, r8)
 800f1b8:	08015874 	.word	0x08015874
 800f1bc:	08015894 	.word	0x08015894
 800f1c0:	08015854 	.word	0x08015854

0800f1c4 <std>:
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	b510      	push	{r4, lr}
 800f1c8:	0004      	movs	r4, r0
 800f1ca:	6003      	str	r3, [r0, #0]
 800f1cc:	6043      	str	r3, [r0, #4]
 800f1ce:	6083      	str	r3, [r0, #8]
 800f1d0:	8181      	strh	r1, [r0, #12]
 800f1d2:	6643      	str	r3, [r0, #100]	; 0x64
 800f1d4:	0019      	movs	r1, r3
 800f1d6:	81c2      	strh	r2, [r0, #14]
 800f1d8:	6103      	str	r3, [r0, #16]
 800f1da:	6143      	str	r3, [r0, #20]
 800f1dc:	6183      	str	r3, [r0, #24]
 800f1de:	2208      	movs	r2, #8
 800f1e0:	305c      	adds	r0, #92	; 0x5c
 800f1e2:	f7ff fcfc 	bl	800ebde <memset>
 800f1e6:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <std+0x38>)
 800f1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800f1ea:	4b05      	ldr	r3, [pc, #20]	; (800f200 <std+0x3c>)
 800f1ec:	6224      	str	r4, [r4, #32]
 800f1ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800f1f0:	4b04      	ldr	r3, [pc, #16]	; (800f204 <std+0x40>)
 800f1f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1f4:	4b04      	ldr	r3, [pc, #16]	; (800f208 <std+0x44>)
 800f1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800f1f8:	bd10      	pop	{r4, pc}
 800f1fa:	46c0      	nop			; (mov r8, r8)
 800f1fc:	0800fa91 	.word	0x0800fa91
 800f200:	0800fab9 	.word	0x0800fab9
 800f204:	0800faf1 	.word	0x0800faf1
 800f208:	0800fb1d 	.word	0x0800fb1d

0800f20c <_cleanup_r>:
 800f20c:	b510      	push	{r4, lr}
 800f20e:	4902      	ldr	r1, [pc, #8]	; (800f218 <_cleanup_r+0xc>)
 800f210:	f000 f8ba 	bl	800f388 <_fwalk_reent>
 800f214:	bd10      	pop	{r4, pc}
 800f216:	46c0      	nop			; (mov r8, r8)
 800f218:	0800f145 	.word	0x0800f145

0800f21c <__sfmoreglue>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	2568      	movs	r5, #104	; 0x68
 800f220:	1e4a      	subs	r2, r1, #1
 800f222:	4355      	muls	r5, r2
 800f224:	000e      	movs	r6, r1
 800f226:	0029      	movs	r1, r5
 800f228:	3174      	adds	r1, #116	; 0x74
 800f22a:	f7ff fd2b 	bl	800ec84 <_malloc_r>
 800f22e:	1e04      	subs	r4, r0, #0
 800f230:	d008      	beq.n	800f244 <__sfmoreglue+0x28>
 800f232:	2100      	movs	r1, #0
 800f234:	002a      	movs	r2, r5
 800f236:	6001      	str	r1, [r0, #0]
 800f238:	6046      	str	r6, [r0, #4]
 800f23a:	300c      	adds	r0, #12
 800f23c:	60a0      	str	r0, [r4, #8]
 800f23e:	3268      	adds	r2, #104	; 0x68
 800f240:	f7ff fccd 	bl	800ebde <memset>
 800f244:	0020      	movs	r0, r4
 800f246:	bd70      	pop	{r4, r5, r6, pc}

0800f248 <__sfp_lock_acquire>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	4802      	ldr	r0, [pc, #8]	; (800f254 <__sfp_lock_acquire+0xc>)
 800f24c:	f000 f8bd 	bl	800f3ca <__retarget_lock_acquire_recursive>
 800f250:	bd10      	pop	{r4, pc}
 800f252:	46c0      	nop			; (mov r8, r8)
 800f254:	200007f8 	.word	0x200007f8

0800f258 <__sfp_lock_release>:
 800f258:	b510      	push	{r4, lr}
 800f25a:	4802      	ldr	r0, [pc, #8]	; (800f264 <__sfp_lock_release+0xc>)
 800f25c:	f000 f8b6 	bl	800f3cc <__retarget_lock_release_recursive>
 800f260:	bd10      	pop	{r4, pc}
 800f262:	46c0      	nop			; (mov r8, r8)
 800f264:	200007f8 	.word	0x200007f8

0800f268 <__sinit_lock_acquire>:
 800f268:	b510      	push	{r4, lr}
 800f26a:	4802      	ldr	r0, [pc, #8]	; (800f274 <__sinit_lock_acquire+0xc>)
 800f26c:	f000 f8ad 	bl	800f3ca <__retarget_lock_acquire_recursive>
 800f270:	bd10      	pop	{r4, pc}
 800f272:	46c0      	nop			; (mov r8, r8)
 800f274:	200007f3 	.word	0x200007f3

0800f278 <__sinit_lock_release>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	4802      	ldr	r0, [pc, #8]	; (800f284 <__sinit_lock_release+0xc>)
 800f27c:	f000 f8a6 	bl	800f3cc <__retarget_lock_release_recursive>
 800f280:	bd10      	pop	{r4, pc}
 800f282:	46c0      	nop			; (mov r8, r8)
 800f284:	200007f3 	.word	0x200007f3

0800f288 <__sinit>:
 800f288:	b513      	push	{r0, r1, r4, lr}
 800f28a:	0004      	movs	r4, r0
 800f28c:	f7ff ffec 	bl	800f268 <__sinit_lock_acquire>
 800f290:	69a3      	ldr	r3, [r4, #24]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <__sinit+0x14>
 800f296:	f7ff ffef 	bl	800f278 <__sinit_lock_release>
 800f29a:	bd13      	pop	{r0, r1, r4, pc}
 800f29c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f29e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f2a0:	6523      	str	r3, [r4, #80]	; 0x50
 800f2a2:	4b13      	ldr	r3, [pc, #76]	; (800f2f0 <__sinit+0x68>)
 800f2a4:	4a13      	ldr	r2, [pc, #76]	; (800f2f4 <__sinit+0x6c>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f2aa:	9301      	str	r3, [sp, #4]
 800f2ac:	42a3      	cmp	r3, r4
 800f2ae:	d101      	bne.n	800f2b4 <__sinit+0x2c>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	61a3      	str	r3, [r4, #24]
 800f2b4:	0020      	movs	r0, r4
 800f2b6:	f000 f81f 	bl	800f2f8 <__sfp>
 800f2ba:	6060      	str	r0, [r4, #4]
 800f2bc:	0020      	movs	r0, r4
 800f2be:	f000 f81b 	bl	800f2f8 <__sfp>
 800f2c2:	60a0      	str	r0, [r4, #8]
 800f2c4:	0020      	movs	r0, r4
 800f2c6:	f000 f817 	bl	800f2f8 <__sfp>
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2104      	movs	r1, #4
 800f2ce:	60e0      	str	r0, [r4, #12]
 800f2d0:	6860      	ldr	r0, [r4, #4]
 800f2d2:	f7ff ff77 	bl	800f1c4 <std>
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	2109      	movs	r1, #9
 800f2da:	68a0      	ldr	r0, [r4, #8]
 800f2dc:	f7ff ff72 	bl	800f1c4 <std>
 800f2e0:	2202      	movs	r2, #2
 800f2e2:	2112      	movs	r1, #18
 800f2e4:	68e0      	ldr	r0, [r4, #12]
 800f2e6:	f7ff ff6d 	bl	800f1c4 <std>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	61a3      	str	r3, [r4, #24]
 800f2ee:	e7d2      	b.n	800f296 <__sinit+0xe>
 800f2f0:	08015850 	.word	0x08015850
 800f2f4:	0800f20d 	.word	0x0800f20d

0800f2f8 <__sfp>:
 800f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fa:	0007      	movs	r7, r0
 800f2fc:	f7ff ffa4 	bl	800f248 <__sfp_lock_acquire>
 800f300:	4b1f      	ldr	r3, [pc, #124]	; (800f380 <__sfp+0x88>)
 800f302:	681e      	ldr	r6, [r3, #0]
 800f304:	69b3      	ldr	r3, [r6, #24]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d102      	bne.n	800f310 <__sfp+0x18>
 800f30a:	0030      	movs	r0, r6
 800f30c:	f7ff ffbc 	bl	800f288 <__sinit>
 800f310:	3648      	adds	r6, #72	; 0x48
 800f312:	68b4      	ldr	r4, [r6, #8]
 800f314:	6873      	ldr	r3, [r6, #4]
 800f316:	3b01      	subs	r3, #1
 800f318:	d504      	bpl.n	800f324 <__sfp+0x2c>
 800f31a:	6833      	ldr	r3, [r6, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d022      	beq.n	800f366 <__sfp+0x6e>
 800f320:	6836      	ldr	r6, [r6, #0]
 800f322:	e7f6      	b.n	800f312 <__sfp+0x1a>
 800f324:	220c      	movs	r2, #12
 800f326:	5ea5      	ldrsh	r5, [r4, r2]
 800f328:	2d00      	cmp	r5, #0
 800f32a:	d11a      	bne.n	800f362 <__sfp+0x6a>
 800f32c:	0020      	movs	r0, r4
 800f32e:	4b15      	ldr	r3, [pc, #84]	; (800f384 <__sfp+0x8c>)
 800f330:	3058      	adds	r0, #88	; 0x58
 800f332:	60e3      	str	r3, [r4, #12]
 800f334:	6665      	str	r5, [r4, #100]	; 0x64
 800f336:	f000 f847 	bl	800f3c8 <__retarget_lock_init_recursive>
 800f33a:	f7ff ff8d 	bl	800f258 <__sfp_lock_release>
 800f33e:	0020      	movs	r0, r4
 800f340:	2208      	movs	r2, #8
 800f342:	0029      	movs	r1, r5
 800f344:	6025      	str	r5, [r4, #0]
 800f346:	60a5      	str	r5, [r4, #8]
 800f348:	6065      	str	r5, [r4, #4]
 800f34a:	6125      	str	r5, [r4, #16]
 800f34c:	6165      	str	r5, [r4, #20]
 800f34e:	61a5      	str	r5, [r4, #24]
 800f350:	305c      	adds	r0, #92	; 0x5c
 800f352:	f7ff fc44 	bl	800ebde <memset>
 800f356:	6365      	str	r5, [r4, #52]	; 0x34
 800f358:	63a5      	str	r5, [r4, #56]	; 0x38
 800f35a:	64a5      	str	r5, [r4, #72]	; 0x48
 800f35c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f35e:	0020      	movs	r0, r4
 800f360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f362:	3468      	adds	r4, #104	; 0x68
 800f364:	e7d7      	b.n	800f316 <__sfp+0x1e>
 800f366:	2104      	movs	r1, #4
 800f368:	0038      	movs	r0, r7
 800f36a:	f7ff ff57 	bl	800f21c <__sfmoreglue>
 800f36e:	1e04      	subs	r4, r0, #0
 800f370:	6030      	str	r0, [r6, #0]
 800f372:	d1d5      	bne.n	800f320 <__sfp+0x28>
 800f374:	f7ff ff70 	bl	800f258 <__sfp_lock_release>
 800f378:	230c      	movs	r3, #12
 800f37a:	603b      	str	r3, [r7, #0]
 800f37c:	e7ef      	b.n	800f35e <__sfp+0x66>
 800f37e:	46c0      	nop			; (mov r8, r8)
 800f380:	08015850 	.word	0x08015850
 800f384:	ffff0001 	.word	0xffff0001

0800f388 <_fwalk_reent>:
 800f388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f38a:	0004      	movs	r4, r0
 800f38c:	0006      	movs	r6, r0
 800f38e:	2700      	movs	r7, #0
 800f390:	9101      	str	r1, [sp, #4]
 800f392:	3448      	adds	r4, #72	; 0x48
 800f394:	6863      	ldr	r3, [r4, #4]
 800f396:	68a5      	ldr	r5, [r4, #8]
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	9b00      	ldr	r3, [sp, #0]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	d504      	bpl.n	800f3ac <_fwalk_reent+0x24>
 800f3a2:	6824      	ldr	r4, [r4, #0]
 800f3a4:	2c00      	cmp	r4, #0
 800f3a6:	d1f5      	bne.n	800f394 <_fwalk_reent+0xc>
 800f3a8:	0038      	movs	r0, r7
 800f3aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f3ac:	89ab      	ldrh	r3, [r5, #12]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d908      	bls.n	800f3c4 <_fwalk_reent+0x3c>
 800f3b2:	220e      	movs	r2, #14
 800f3b4:	5eab      	ldrsh	r3, [r5, r2]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	d004      	beq.n	800f3c4 <_fwalk_reent+0x3c>
 800f3ba:	0029      	movs	r1, r5
 800f3bc:	0030      	movs	r0, r6
 800f3be:	9b01      	ldr	r3, [sp, #4]
 800f3c0:	4798      	blx	r3
 800f3c2:	4307      	orrs	r7, r0
 800f3c4:	3568      	adds	r5, #104	; 0x68
 800f3c6:	e7e8      	b.n	800f39a <_fwalk_reent+0x12>

0800f3c8 <__retarget_lock_init_recursive>:
 800f3c8:	4770      	bx	lr

0800f3ca <__retarget_lock_acquire_recursive>:
 800f3ca:	4770      	bx	lr

0800f3cc <__retarget_lock_release_recursive>:
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <__swhatbuf_r>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	000e      	movs	r6, r1
 800f3d4:	001d      	movs	r5, r3
 800f3d6:	230e      	movs	r3, #14
 800f3d8:	5ec9      	ldrsh	r1, [r1, r3]
 800f3da:	0014      	movs	r4, r2
 800f3dc:	b096      	sub	sp, #88	; 0x58
 800f3de:	2900      	cmp	r1, #0
 800f3e0:	da07      	bge.n	800f3f2 <__swhatbuf_r+0x22>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	602b      	str	r3, [r5, #0]
 800f3e6:	89b3      	ldrh	r3, [r6, #12]
 800f3e8:	061b      	lsls	r3, r3, #24
 800f3ea:	d411      	bmi.n	800f410 <__swhatbuf_r+0x40>
 800f3ec:	2380      	movs	r3, #128	; 0x80
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	e00f      	b.n	800f412 <__swhatbuf_r+0x42>
 800f3f2:	466a      	mov	r2, sp
 800f3f4:	f000 fbbe 	bl	800fb74 <_fstat_r>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	dbf2      	blt.n	800f3e2 <__swhatbuf_r+0x12>
 800f3fc:	23f0      	movs	r3, #240	; 0xf0
 800f3fe:	9901      	ldr	r1, [sp, #4]
 800f400:	021b      	lsls	r3, r3, #8
 800f402:	4019      	ands	r1, r3
 800f404:	4b05      	ldr	r3, [pc, #20]	; (800f41c <__swhatbuf_r+0x4c>)
 800f406:	18c9      	adds	r1, r1, r3
 800f408:	424b      	negs	r3, r1
 800f40a:	4159      	adcs	r1, r3
 800f40c:	6029      	str	r1, [r5, #0]
 800f40e:	e7ed      	b.n	800f3ec <__swhatbuf_r+0x1c>
 800f410:	2340      	movs	r3, #64	; 0x40
 800f412:	2000      	movs	r0, #0
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	b016      	add	sp, #88	; 0x58
 800f418:	bd70      	pop	{r4, r5, r6, pc}
 800f41a:	46c0      	nop			; (mov r8, r8)
 800f41c:	ffffe000 	.word	0xffffe000

0800f420 <__smakebuf_r>:
 800f420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f422:	2602      	movs	r6, #2
 800f424:	898b      	ldrh	r3, [r1, #12]
 800f426:	0005      	movs	r5, r0
 800f428:	000c      	movs	r4, r1
 800f42a:	4233      	tst	r3, r6
 800f42c:	d006      	beq.n	800f43c <__smakebuf_r+0x1c>
 800f42e:	0023      	movs	r3, r4
 800f430:	3347      	adds	r3, #71	; 0x47
 800f432:	6023      	str	r3, [r4, #0]
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	2301      	movs	r3, #1
 800f438:	6163      	str	r3, [r4, #20]
 800f43a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f43c:	466a      	mov	r2, sp
 800f43e:	ab01      	add	r3, sp, #4
 800f440:	f7ff ffc6 	bl	800f3d0 <__swhatbuf_r>
 800f444:	9900      	ldr	r1, [sp, #0]
 800f446:	0007      	movs	r7, r0
 800f448:	0028      	movs	r0, r5
 800f44a:	f7ff fc1b 	bl	800ec84 <_malloc_r>
 800f44e:	2800      	cmp	r0, #0
 800f450:	d108      	bne.n	800f464 <__smakebuf_r+0x44>
 800f452:	220c      	movs	r2, #12
 800f454:	5ea3      	ldrsh	r3, [r4, r2]
 800f456:	059a      	lsls	r2, r3, #22
 800f458:	d4ef      	bmi.n	800f43a <__smakebuf_r+0x1a>
 800f45a:	2203      	movs	r2, #3
 800f45c:	4393      	bics	r3, r2
 800f45e:	431e      	orrs	r6, r3
 800f460:	81a6      	strh	r6, [r4, #12]
 800f462:	e7e4      	b.n	800f42e <__smakebuf_r+0xe>
 800f464:	4b0f      	ldr	r3, [pc, #60]	; (800f4a4 <__smakebuf_r+0x84>)
 800f466:	62ab      	str	r3, [r5, #40]	; 0x28
 800f468:	2380      	movs	r3, #128	; 0x80
 800f46a:	89a2      	ldrh	r2, [r4, #12]
 800f46c:	6020      	str	r0, [r4, #0]
 800f46e:	4313      	orrs	r3, r2
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	9b00      	ldr	r3, [sp, #0]
 800f474:	6120      	str	r0, [r4, #16]
 800f476:	6163      	str	r3, [r4, #20]
 800f478:	9b01      	ldr	r3, [sp, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00d      	beq.n	800f49a <__smakebuf_r+0x7a>
 800f47e:	0028      	movs	r0, r5
 800f480:	230e      	movs	r3, #14
 800f482:	5ee1      	ldrsh	r1, [r4, r3]
 800f484:	f000 fb88 	bl	800fb98 <_isatty_r>
 800f488:	2800      	cmp	r0, #0
 800f48a:	d006      	beq.n	800f49a <__smakebuf_r+0x7a>
 800f48c:	2203      	movs	r2, #3
 800f48e:	89a3      	ldrh	r3, [r4, #12]
 800f490:	4393      	bics	r3, r2
 800f492:	001a      	movs	r2, r3
 800f494:	2301      	movs	r3, #1
 800f496:	4313      	orrs	r3, r2
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	89a0      	ldrh	r0, [r4, #12]
 800f49c:	4307      	orrs	r7, r0
 800f49e:	81a7      	strh	r7, [r4, #12]
 800f4a0:	e7cb      	b.n	800f43a <__smakebuf_r+0x1a>
 800f4a2:	46c0      	nop			; (mov r8, r8)
 800f4a4:	0800f20d 	.word	0x0800f20d

0800f4a8 <__malloc_lock>:
 800f4a8:	b510      	push	{r4, lr}
 800f4aa:	4802      	ldr	r0, [pc, #8]	; (800f4b4 <__malloc_lock+0xc>)
 800f4ac:	f7ff ff8d 	bl	800f3ca <__retarget_lock_acquire_recursive>
 800f4b0:	bd10      	pop	{r4, pc}
 800f4b2:	46c0      	nop			; (mov r8, r8)
 800f4b4:	200007f4 	.word	0x200007f4

0800f4b8 <__malloc_unlock>:
 800f4b8:	b510      	push	{r4, lr}
 800f4ba:	4802      	ldr	r0, [pc, #8]	; (800f4c4 <__malloc_unlock+0xc>)
 800f4bc:	f7ff ff86 	bl	800f3cc <__retarget_lock_release_recursive>
 800f4c0:	bd10      	pop	{r4, pc}
 800f4c2:	46c0      	nop			; (mov r8, r8)
 800f4c4:	200007f4 	.word	0x200007f4

0800f4c8 <__sfputc_r>:
 800f4c8:	6893      	ldr	r3, [r2, #8]
 800f4ca:	b510      	push	{r4, lr}
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	6093      	str	r3, [r2, #8]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	da04      	bge.n	800f4de <__sfputc_r+0x16>
 800f4d4:	6994      	ldr	r4, [r2, #24]
 800f4d6:	42a3      	cmp	r3, r4
 800f4d8:	db07      	blt.n	800f4ea <__sfputc_r+0x22>
 800f4da:	290a      	cmp	r1, #10
 800f4dc:	d005      	beq.n	800f4ea <__sfputc_r+0x22>
 800f4de:	6813      	ldr	r3, [r2, #0]
 800f4e0:	1c58      	adds	r0, r3, #1
 800f4e2:	6010      	str	r0, [r2, #0]
 800f4e4:	7019      	strb	r1, [r3, #0]
 800f4e6:	0008      	movs	r0, r1
 800f4e8:	bd10      	pop	{r4, pc}
 800f4ea:	f7ff fcd1 	bl	800ee90 <__swbuf_r>
 800f4ee:	0001      	movs	r1, r0
 800f4f0:	e7f9      	b.n	800f4e6 <__sfputc_r+0x1e>

0800f4f2 <__sfputs_r>:
 800f4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f4:	0006      	movs	r6, r0
 800f4f6:	000f      	movs	r7, r1
 800f4f8:	0014      	movs	r4, r2
 800f4fa:	18d5      	adds	r5, r2, r3
 800f4fc:	42ac      	cmp	r4, r5
 800f4fe:	d101      	bne.n	800f504 <__sfputs_r+0x12>
 800f500:	2000      	movs	r0, #0
 800f502:	e007      	b.n	800f514 <__sfputs_r+0x22>
 800f504:	7821      	ldrb	r1, [r4, #0]
 800f506:	003a      	movs	r2, r7
 800f508:	0030      	movs	r0, r6
 800f50a:	f7ff ffdd 	bl	800f4c8 <__sfputc_r>
 800f50e:	3401      	adds	r4, #1
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d1f3      	bne.n	800f4fc <__sfputs_r+0xa>
 800f514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f518 <_vfiprintf_r>:
 800f518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f51a:	b0a1      	sub	sp, #132	; 0x84
 800f51c:	0006      	movs	r6, r0
 800f51e:	000c      	movs	r4, r1
 800f520:	001f      	movs	r7, r3
 800f522:	9203      	str	r2, [sp, #12]
 800f524:	2800      	cmp	r0, #0
 800f526:	d004      	beq.n	800f532 <_vfiprintf_r+0x1a>
 800f528:	6983      	ldr	r3, [r0, #24]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d101      	bne.n	800f532 <_vfiprintf_r+0x1a>
 800f52e:	f7ff feab 	bl	800f288 <__sinit>
 800f532:	4b8e      	ldr	r3, [pc, #568]	; (800f76c <_vfiprintf_r+0x254>)
 800f534:	429c      	cmp	r4, r3
 800f536:	d11c      	bne.n	800f572 <_vfiprintf_r+0x5a>
 800f538:	6874      	ldr	r4, [r6, #4]
 800f53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f53c:	07db      	lsls	r3, r3, #31
 800f53e:	d405      	bmi.n	800f54c <_vfiprintf_r+0x34>
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	059b      	lsls	r3, r3, #22
 800f544:	d402      	bmi.n	800f54c <_vfiprintf_r+0x34>
 800f546:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f548:	f7ff ff3f 	bl	800f3ca <__retarget_lock_acquire_recursive>
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	071b      	lsls	r3, r3, #28
 800f550:	d502      	bpl.n	800f558 <_vfiprintf_r+0x40>
 800f552:	6923      	ldr	r3, [r4, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d11d      	bne.n	800f594 <_vfiprintf_r+0x7c>
 800f558:	0021      	movs	r1, r4
 800f55a:	0030      	movs	r0, r6
 800f55c:	f7ff fcee 	bl	800ef3c <__swsetup_r>
 800f560:	2800      	cmp	r0, #0
 800f562:	d017      	beq.n	800f594 <_vfiprintf_r+0x7c>
 800f564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f566:	07db      	lsls	r3, r3, #31
 800f568:	d50d      	bpl.n	800f586 <_vfiprintf_r+0x6e>
 800f56a:	2001      	movs	r0, #1
 800f56c:	4240      	negs	r0, r0
 800f56e:	b021      	add	sp, #132	; 0x84
 800f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f572:	4b7f      	ldr	r3, [pc, #508]	; (800f770 <_vfiprintf_r+0x258>)
 800f574:	429c      	cmp	r4, r3
 800f576:	d101      	bne.n	800f57c <_vfiprintf_r+0x64>
 800f578:	68b4      	ldr	r4, [r6, #8]
 800f57a:	e7de      	b.n	800f53a <_vfiprintf_r+0x22>
 800f57c:	4b7d      	ldr	r3, [pc, #500]	; (800f774 <_vfiprintf_r+0x25c>)
 800f57e:	429c      	cmp	r4, r3
 800f580:	d1db      	bne.n	800f53a <_vfiprintf_r+0x22>
 800f582:	68f4      	ldr	r4, [r6, #12]
 800f584:	e7d9      	b.n	800f53a <_vfiprintf_r+0x22>
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	059b      	lsls	r3, r3, #22
 800f58a:	d4ee      	bmi.n	800f56a <_vfiprintf_r+0x52>
 800f58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f58e:	f7ff ff1d 	bl	800f3cc <__retarget_lock_release_recursive>
 800f592:	e7ea      	b.n	800f56a <_vfiprintf_r+0x52>
 800f594:	2300      	movs	r3, #0
 800f596:	ad08      	add	r5, sp, #32
 800f598:	616b      	str	r3, [r5, #20]
 800f59a:	3320      	adds	r3, #32
 800f59c:	766b      	strb	r3, [r5, #25]
 800f59e:	3310      	adds	r3, #16
 800f5a0:	76ab      	strb	r3, [r5, #26]
 800f5a2:	9707      	str	r7, [sp, #28]
 800f5a4:	9f03      	ldr	r7, [sp, #12]
 800f5a6:	783b      	ldrb	r3, [r7, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <_vfiprintf_r+0x98>
 800f5ac:	2b25      	cmp	r3, #37	; 0x25
 800f5ae:	d14e      	bne.n	800f64e <_vfiprintf_r+0x136>
 800f5b0:	9b03      	ldr	r3, [sp, #12]
 800f5b2:	1afb      	subs	r3, r7, r3
 800f5b4:	9305      	str	r3, [sp, #20]
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	429f      	cmp	r7, r3
 800f5ba:	d00d      	beq.n	800f5d8 <_vfiprintf_r+0xc0>
 800f5bc:	9b05      	ldr	r3, [sp, #20]
 800f5be:	0021      	movs	r1, r4
 800f5c0:	0030      	movs	r0, r6
 800f5c2:	9a03      	ldr	r2, [sp, #12]
 800f5c4:	f7ff ff95 	bl	800f4f2 <__sfputs_r>
 800f5c8:	1c43      	adds	r3, r0, #1
 800f5ca:	d100      	bne.n	800f5ce <_vfiprintf_r+0xb6>
 800f5cc:	e0b5      	b.n	800f73a <_vfiprintf_r+0x222>
 800f5ce:	696a      	ldr	r2, [r5, #20]
 800f5d0:	9b05      	ldr	r3, [sp, #20]
 800f5d2:	4694      	mov	ip, r2
 800f5d4:	4463      	add	r3, ip
 800f5d6:	616b      	str	r3, [r5, #20]
 800f5d8:	783b      	ldrb	r3, [r7, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d100      	bne.n	800f5e0 <_vfiprintf_r+0xc8>
 800f5de:	e0ac      	b.n	800f73a <_vfiprintf_r+0x222>
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	1c7b      	adds	r3, r7, #1
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	4252      	negs	r2, r2
 800f5ea:	606a      	str	r2, [r5, #4]
 800f5ec:	a904      	add	r1, sp, #16
 800f5ee:	3254      	adds	r2, #84	; 0x54
 800f5f0:	1852      	adds	r2, r2, r1
 800f5f2:	602b      	str	r3, [r5, #0]
 800f5f4:	60eb      	str	r3, [r5, #12]
 800f5f6:	60ab      	str	r3, [r5, #8]
 800f5f8:	7013      	strb	r3, [r2, #0]
 800f5fa:	65ab      	str	r3, [r5, #88]	; 0x58
 800f5fc:	9b03      	ldr	r3, [sp, #12]
 800f5fe:	2205      	movs	r2, #5
 800f600:	7819      	ldrb	r1, [r3, #0]
 800f602:	485d      	ldr	r0, [pc, #372]	; (800f778 <_vfiprintf_r+0x260>)
 800f604:	f000 faee 	bl	800fbe4 <memchr>
 800f608:	9b03      	ldr	r3, [sp, #12]
 800f60a:	1c5f      	adds	r7, r3, #1
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d120      	bne.n	800f652 <_vfiprintf_r+0x13a>
 800f610:	682a      	ldr	r2, [r5, #0]
 800f612:	06d3      	lsls	r3, r2, #27
 800f614:	d504      	bpl.n	800f620 <_vfiprintf_r+0x108>
 800f616:	2353      	movs	r3, #83	; 0x53
 800f618:	a904      	add	r1, sp, #16
 800f61a:	185b      	adds	r3, r3, r1
 800f61c:	2120      	movs	r1, #32
 800f61e:	7019      	strb	r1, [r3, #0]
 800f620:	0713      	lsls	r3, r2, #28
 800f622:	d504      	bpl.n	800f62e <_vfiprintf_r+0x116>
 800f624:	2353      	movs	r3, #83	; 0x53
 800f626:	a904      	add	r1, sp, #16
 800f628:	185b      	adds	r3, r3, r1
 800f62a:	212b      	movs	r1, #43	; 0x2b
 800f62c:	7019      	strb	r1, [r3, #0]
 800f62e:	9b03      	ldr	r3, [sp, #12]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	2b2a      	cmp	r3, #42	; 0x2a
 800f634:	d016      	beq.n	800f664 <_vfiprintf_r+0x14c>
 800f636:	2100      	movs	r1, #0
 800f638:	68eb      	ldr	r3, [r5, #12]
 800f63a:	9f03      	ldr	r7, [sp, #12]
 800f63c:	783a      	ldrb	r2, [r7, #0]
 800f63e:	1c78      	adds	r0, r7, #1
 800f640:	3a30      	subs	r2, #48	; 0x30
 800f642:	4684      	mov	ip, r0
 800f644:	2a09      	cmp	r2, #9
 800f646:	d94f      	bls.n	800f6e8 <_vfiprintf_r+0x1d0>
 800f648:	2900      	cmp	r1, #0
 800f64a:	d111      	bne.n	800f670 <_vfiprintf_r+0x158>
 800f64c:	e017      	b.n	800f67e <_vfiprintf_r+0x166>
 800f64e:	3701      	adds	r7, #1
 800f650:	e7a9      	b.n	800f5a6 <_vfiprintf_r+0x8e>
 800f652:	4b49      	ldr	r3, [pc, #292]	; (800f778 <_vfiprintf_r+0x260>)
 800f654:	682a      	ldr	r2, [r5, #0]
 800f656:	1ac0      	subs	r0, r0, r3
 800f658:	2301      	movs	r3, #1
 800f65a:	4083      	lsls	r3, r0
 800f65c:	4313      	orrs	r3, r2
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	9703      	str	r7, [sp, #12]
 800f662:	e7cb      	b.n	800f5fc <_vfiprintf_r+0xe4>
 800f664:	9b07      	ldr	r3, [sp, #28]
 800f666:	1d19      	adds	r1, r3, #4
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	9107      	str	r1, [sp, #28]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	db01      	blt.n	800f674 <_vfiprintf_r+0x15c>
 800f670:	930b      	str	r3, [sp, #44]	; 0x2c
 800f672:	e004      	b.n	800f67e <_vfiprintf_r+0x166>
 800f674:	425b      	negs	r3, r3
 800f676:	60eb      	str	r3, [r5, #12]
 800f678:	2302      	movs	r3, #2
 800f67a:	4313      	orrs	r3, r2
 800f67c:	602b      	str	r3, [r5, #0]
 800f67e:	783b      	ldrb	r3, [r7, #0]
 800f680:	2b2e      	cmp	r3, #46	; 0x2e
 800f682:	d10a      	bne.n	800f69a <_vfiprintf_r+0x182>
 800f684:	787b      	ldrb	r3, [r7, #1]
 800f686:	2b2a      	cmp	r3, #42	; 0x2a
 800f688:	d137      	bne.n	800f6fa <_vfiprintf_r+0x1e2>
 800f68a:	9b07      	ldr	r3, [sp, #28]
 800f68c:	3702      	adds	r7, #2
 800f68e:	1d1a      	adds	r2, r3, #4
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	9207      	str	r2, [sp, #28]
 800f694:	2b00      	cmp	r3, #0
 800f696:	db2d      	blt.n	800f6f4 <_vfiprintf_r+0x1dc>
 800f698:	9309      	str	r3, [sp, #36]	; 0x24
 800f69a:	2203      	movs	r2, #3
 800f69c:	7839      	ldrb	r1, [r7, #0]
 800f69e:	4837      	ldr	r0, [pc, #220]	; (800f77c <_vfiprintf_r+0x264>)
 800f6a0:	f000 faa0 	bl	800fbe4 <memchr>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d007      	beq.n	800f6b8 <_vfiprintf_r+0x1a0>
 800f6a8:	4b34      	ldr	r3, [pc, #208]	; (800f77c <_vfiprintf_r+0x264>)
 800f6aa:	682a      	ldr	r2, [r5, #0]
 800f6ac:	1ac0      	subs	r0, r0, r3
 800f6ae:	2340      	movs	r3, #64	; 0x40
 800f6b0:	4083      	lsls	r3, r0
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	3701      	adds	r7, #1
 800f6b6:	602b      	str	r3, [r5, #0]
 800f6b8:	7839      	ldrb	r1, [r7, #0]
 800f6ba:	1c7b      	adds	r3, r7, #1
 800f6bc:	2206      	movs	r2, #6
 800f6be:	4830      	ldr	r0, [pc, #192]	; (800f780 <_vfiprintf_r+0x268>)
 800f6c0:	9303      	str	r3, [sp, #12]
 800f6c2:	7629      	strb	r1, [r5, #24]
 800f6c4:	f000 fa8e 	bl	800fbe4 <memchr>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d045      	beq.n	800f758 <_vfiprintf_r+0x240>
 800f6cc:	4b2d      	ldr	r3, [pc, #180]	; (800f784 <_vfiprintf_r+0x26c>)
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d127      	bne.n	800f722 <_vfiprintf_r+0x20a>
 800f6d2:	2207      	movs	r2, #7
 800f6d4:	9b07      	ldr	r3, [sp, #28]
 800f6d6:	3307      	adds	r3, #7
 800f6d8:	4393      	bics	r3, r2
 800f6da:	3308      	adds	r3, #8
 800f6dc:	9307      	str	r3, [sp, #28]
 800f6de:	696b      	ldr	r3, [r5, #20]
 800f6e0:	9a04      	ldr	r2, [sp, #16]
 800f6e2:	189b      	adds	r3, r3, r2
 800f6e4:	616b      	str	r3, [r5, #20]
 800f6e6:	e75d      	b.n	800f5a4 <_vfiprintf_r+0x8c>
 800f6e8:	210a      	movs	r1, #10
 800f6ea:	434b      	muls	r3, r1
 800f6ec:	4667      	mov	r7, ip
 800f6ee:	189b      	adds	r3, r3, r2
 800f6f0:	3909      	subs	r1, #9
 800f6f2:	e7a3      	b.n	800f63c <_vfiprintf_r+0x124>
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	425b      	negs	r3, r3
 800f6f8:	e7ce      	b.n	800f698 <_vfiprintf_r+0x180>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	001a      	movs	r2, r3
 800f6fe:	3701      	adds	r7, #1
 800f700:	606b      	str	r3, [r5, #4]
 800f702:	7839      	ldrb	r1, [r7, #0]
 800f704:	1c78      	adds	r0, r7, #1
 800f706:	3930      	subs	r1, #48	; 0x30
 800f708:	4684      	mov	ip, r0
 800f70a:	2909      	cmp	r1, #9
 800f70c:	d903      	bls.n	800f716 <_vfiprintf_r+0x1fe>
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d0c3      	beq.n	800f69a <_vfiprintf_r+0x182>
 800f712:	9209      	str	r2, [sp, #36]	; 0x24
 800f714:	e7c1      	b.n	800f69a <_vfiprintf_r+0x182>
 800f716:	230a      	movs	r3, #10
 800f718:	435a      	muls	r2, r3
 800f71a:	4667      	mov	r7, ip
 800f71c:	1852      	adds	r2, r2, r1
 800f71e:	3b09      	subs	r3, #9
 800f720:	e7ef      	b.n	800f702 <_vfiprintf_r+0x1ea>
 800f722:	ab07      	add	r3, sp, #28
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	0022      	movs	r2, r4
 800f728:	0029      	movs	r1, r5
 800f72a:	0030      	movs	r0, r6
 800f72c:	4b16      	ldr	r3, [pc, #88]	; (800f788 <_vfiprintf_r+0x270>)
 800f72e:	e000      	b.n	800f732 <_vfiprintf_r+0x21a>
 800f730:	bf00      	nop
 800f732:	9004      	str	r0, [sp, #16]
 800f734:	9b04      	ldr	r3, [sp, #16]
 800f736:	3301      	adds	r3, #1
 800f738:	d1d1      	bne.n	800f6de <_vfiprintf_r+0x1c6>
 800f73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f73c:	07db      	lsls	r3, r3, #31
 800f73e:	d405      	bmi.n	800f74c <_vfiprintf_r+0x234>
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	059b      	lsls	r3, r3, #22
 800f744:	d402      	bmi.n	800f74c <_vfiprintf_r+0x234>
 800f746:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f748:	f7ff fe40 	bl	800f3cc <__retarget_lock_release_recursive>
 800f74c:	89a3      	ldrh	r3, [r4, #12]
 800f74e:	065b      	lsls	r3, r3, #25
 800f750:	d500      	bpl.n	800f754 <_vfiprintf_r+0x23c>
 800f752:	e70a      	b.n	800f56a <_vfiprintf_r+0x52>
 800f754:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f756:	e70a      	b.n	800f56e <_vfiprintf_r+0x56>
 800f758:	ab07      	add	r3, sp, #28
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	0022      	movs	r2, r4
 800f75e:	0029      	movs	r1, r5
 800f760:	0030      	movs	r0, r6
 800f762:	4b09      	ldr	r3, [pc, #36]	; (800f788 <_vfiprintf_r+0x270>)
 800f764:	f000 f882 	bl	800f86c <_printf_i>
 800f768:	e7e3      	b.n	800f732 <_vfiprintf_r+0x21a>
 800f76a:	46c0      	nop			; (mov r8, r8)
 800f76c:	08015874 	.word	0x08015874
 800f770:	08015894 	.word	0x08015894
 800f774:	08015854 	.word	0x08015854
 800f778:	080158b4 	.word	0x080158b4
 800f77c:	080158ba 	.word	0x080158ba
 800f780:	080158be 	.word	0x080158be
 800f784:	00000000 	.word	0x00000000
 800f788:	0800f4f3 	.word	0x0800f4f3

0800f78c <_printf_common>:
 800f78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f78e:	0015      	movs	r5, r2
 800f790:	9301      	str	r3, [sp, #4]
 800f792:	688a      	ldr	r2, [r1, #8]
 800f794:	690b      	ldr	r3, [r1, #16]
 800f796:	000c      	movs	r4, r1
 800f798:	9000      	str	r0, [sp, #0]
 800f79a:	4293      	cmp	r3, r2
 800f79c:	da00      	bge.n	800f7a0 <_printf_common+0x14>
 800f79e:	0013      	movs	r3, r2
 800f7a0:	0022      	movs	r2, r4
 800f7a2:	602b      	str	r3, [r5, #0]
 800f7a4:	3243      	adds	r2, #67	; 0x43
 800f7a6:	7812      	ldrb	r2, [r2, #0]
 800f7a8:	2a00      	cmp	r2, #0
 800f7aa:	d001      	beq.n	800f7b0 <_printf_common+0x24>
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	602b      	str	r3, [r5, #0]
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	069b      	lsls	r3, r3, #26
 800f7b4:	d502      	bpl.n	800f7bc <_printf_common+0x30>
 800f7b6:	682b      	ldr	r3, [r5, #0]
 800f7b8:	3302      	adds	r3, #2
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	6822      	ldr	r2, [r4, #0]
 800f7be:	2306      	movs	r3, #6
 800f7c0:	0017      	movs	r7, r2
 800f7c2:	401f      	ands	r7, r3
 800f7c4:	421a      	tst	r2, r3
 800f7c6:	d027      	beq.n	800f818 <_printf_common+0x8c>
 800f7c8:	0023      	movs	r3, r4
 800f7ca:	3343      	adds	r3, #67	; 0x43
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	1e5a      	subs	r2, r3, #1
 800f7d0:	4193      	sbcs	r3, r2
 800f7d2:	6822      	ldr	r2, [r4, #0]
 800f7d4:	0692      	lsls	r2, r2, #26
 800f7d6:	d430      	bmi.n	800f83a <_printf_common+0xae>
 800f7d8:	0022      	movs	r2, r4
 800f7da:	9901      	ldr	r1, [sp, #4]
 800f7dc:	9800      	ldr	r0, [sp, #0]
 800f7de:	9e08      	ldr	r6, [sp, #32]
 800f7e0:	3243      	adds	r2, #67	; 0x43
 800f7e2:	47b0      	blx	r6
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d025      	beq.n	800f834 <_printf_common+0xa8>
 800f7e8:	2306      	movs	r3, #6
 800f7ea:	6820      	ldr	r0, [r4, #0]
 800f7ec:	682a      	ldr	r2, [r5, #0]
 800f7ee:	68e1      	ldr	r1, [r4, #12]
 800f7f0:	2500      	movs	r5, #0
 800f7f2:	4003      	ands	r3, r0
 800f7f4:	2b04      	cmp	r3, #4
 800f7f6:	d103      	bne.n	800f800 <_printf_common+0x74>
 800f7f8:	1a8d      	subs	r5, r1, r2
 800f7fa:	43eb      	mvns	r3, r5
 800f7fc:	17db      	asrs	r3, r3, #31
 800f7fe:	401d      	ands	r5, r3
 800f800:	68a3      	ldr	r3, [r4, #8]
 800f802:	6922      	ldr	r2, [r4, #16]
 800f804:	4293      	cmp	r3, r2
 800f806:	dd01      	ble.n	800f80c <_printf_common+0x80>
 800f808:	1a9b      	subs	r3, r3, r2
 800f80a:	18ed      	adds	r5, r5, r3
 800f80c:	2700      	movs	r7, #0
 800f80e:	42bd      	cmp	r5, r7
 800f810:	d120      	bne.n	800f854 <_printf_common+0xc8>
 800f812:	2000      	movs	r0, #0
 800f814:	e010      	b.n	800f838 <_printf_common+0xac>
 800f816:	3701      	adds	r7, #1
 800f818:	68e3      	ldr	r3, [r4, #12]
 800f81a:	682a      	ldr	r2, [r5, #0]
 800f81c:	1a9b      	subs	r3, r3, r2
 800f81e:	42bb      	cmp	r3, r7
 800f820:	ddd2      	ble.n	800f7c8 <_printf_common+0x3c>
 800f822:	0022      	movs	r2, r4
 800f824:	2301      	movs	r3, #1
 800f826:	9901      	ldr	r1, [sp, #4]
 800f828:	9800      	ldr	r0, [sp, #0]
 800f82a:	9e08      	ldr	r6, [sp, #32]
 800f82c:	3219      	adds	r2, #25
 800f82e:	47b0      	blx	r6
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d1f0      	bne.n	800f816 <_printf_common+0x8a>
 800f834:	2001      	movs	r0, #1
 800f836:	4240      	negs	r0, r0
 800f838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f83a:	2030      	movs	r0, #48	; 0x30
 800f83c:	18e1      	adds	r1, r4, r3
 800f83e:	3143      	adds	r1, #67	; 0x43
 800f840:	7008      	strb	r0, [r1, #0]
 800f842:	0021      	movs	r1, r4
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	3145      	adds	r1, #69	; 0x45
 800f848:	7809      	ldrb	r1, [r1, #0]
 800f84a:	18a2      	adds	r2, r4, r2
 800f84c:	3243      	adds	r2, #67	; 0x43
 800f84e:	3302      	adds	r3, #2
 800f850:	7011      	strb	r1, [r2, #0]
 800f852:	e7c1      	b.n	800f7d8 <_printf_common+0x4c>
 800f854:	0022      	movs	r2, r4
 800f856:	2301      	movs	r3, #1
 800f858:	9901      	ldr	r1, [sp, #4]
 800f85a:	9800      	ldr	r0, [sp, #0]
 800f85c:	9e08      	ldr	r6, [sp, #32]
 800f85e:	321a      	adds	r2, #26
 800f860:	47b0      	blx	r6
 800f862:	1c43      	adds	r3, r0, #1
 800f864:	d0e6      	beq.n	800f834 <_printf_common+0xa8>
 800f866:	3701      	adds	r7, #1
 800f868:	e7d1      	b.n	800f80e <_printf_common+0x82>
	...

0800f86c <_printf_i>:
 800f86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86e:	b08b      	sub	sp, #44	; 0x2c
 800f870:	9206      	str	r2, [sp, #24]
 800f872:	000a      	movs	r2, r1
 800f874:	3243      	adds	r2, #67	; 0x43
 800f876:	9307      	str	r3, [sp, #28]
 800f878:	9005      	str	r0, [sp, #20]
 800f87a:	9204      	str	r2, [sp, #16]
 800f87c:	7e0a      	ldrb	r2, [r1, #24]
 800f87e:	000c      	movs	r4, r1
 800f880:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f882:	2a78      	cmp	r2, #120	; 0x78
 800f884:	d806      	bhi.n	800f894 <_printf_i+0x28>
 800f886:	2a62      	cmp	r2, #98	; 0x62
 800f888:	d808      	bhi.n	800f89c <_printf_i+0x30>
 800f88a:	2a00      	cmp	r2, #0
 800f88c:	d100      	bne.n	800f890 <_printf_i+0x24>
 800f88e:	e0c0      	b.n	800fa12 <_printf_i+0x1a6>
 800f890:	2a58      	cmp	r2, #88	; 0x58
 800f892:	d052      	beq.n	800f93a <_printf_i+0xce>
 800f894:	0026      	movs	r6, r4
 800f896:	3642      	adds	r6, #66	; 0x42
 800f898:	7032      	strb	r2, [r6, #0]
 800f89a:	e022      	b.n	800f8e2 <_printf_i+0x76>
 800f89c:	0010      	movs	r0, r2
 800f89e:	3863      	subs	r0, #99	; 0x63
 800f8a0:	2815      	cmp	r0, #21
 800f8a2:	d8f7      	bhi.n	800f894 <_printf_i+0x28>
 800f8a4:	f7f0 fc2e 	bl	8000104 <__gnu_thumb1_case_shi>
 800f8a8:	001f0016 	.word	0x001f0016
 800f8ac:	fff6fff6 	.word	0xfff6fff6
 800f8b0:	fff6fff6 	.word	0xfff6fff6
 800f8b4:	fff6001f 	.word	0xfff6001f
 800f8b8:	fff6fff6 	.word	0xfff6fff6
 800f8bc:	00a8fff6 	.word	0x00a8fff6
 800f8c0:	009a0036 	.word	0x009a0036
 800f8c4:	fff6fff6 	.word	0xfff6fff6
 800f8c8:	fff600b9 	.word	0xfff600b9
 800f8cc:	fff60036 	.word	0xfff60036
 800f8d0:	009efff6 	.word	0x009efff6
 800f8d4:	0026      	movs	r6, r4
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	3642      	adds	r6, #66	; 0x42
 800f8da:	1d11      	adds	r1, r2, #4
 800f8dc:	6019      	str	r1, [r3, #0]
 800f8de:	6813      	ldr	r3, [r2, #0]
 800f8e0:	7033      	strb	r3, [r6, #0]
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e0a7      	b.n	800fa36 <_printf_i+0x1ca>
 800f8e6:	6808      	ldr	r0, [r1, #0]
 800f8e8:	6819      	ldr	r1, [r3, #0]
 800f8ea:	1d0a      	adds	r2, r1, #4
 800f8ec:	0605      	lsls	r5, r0, #24
 800f8ee:	d50b      	bpl.n	800f908 <_printf_i+0x9c>
 800f8f0:	680d      	ldr	r5, [r1, #0]
 800f8f2:	601a      	str	r2, [r3, #0]
 800f8f4:	2d00      	cmp	r5, #0
 800f8f6:	da03      	bge.n	800f900 <_printf_i+0x94>
 800f8f8:	232d      	movs	r3, #45	; 0x2d
 800f8fa:	9a04      	ldr	r2, [sp, #16]
 800f8fc:	426d      	negs	r5, r5
 800f8fe:	7013      	strb	r3, [r2, #0]
 800f900:	4b61      	ldr	r3, [pc, #388]	; (800fa88 <_printf_i+0x21c>)
 800f902:	270a      	movs	r7, #10
 800f904:	9303      	str	r3, [sp, #12]
 800f906:	e032      	b.n	800f96e <_printf_i+0x102>
 800f908:	680d      	ldr	r5, [r1, #0]
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	0641      	lsls	r1, r0, #25
 800f90e:	d5f1      	bpl.n	800f8f4 <_printf_i+0x88>
 800f910:	b22d      	sxth	r5, r5
 800f912:	e7ef      	b.n	800f8f4 <_printf_i+0x88>
 800f914:	680d      	ldr	r5, [r1, #0]
 800f916:	6819      	ldr	r1, [r3, #0]
 800f918:	1d08      	adds	r0, r1, #4
 800f91a:	6018      	str	r0, [r3, #0]
 800f91c:	062e      	lsls	r6, r5, #24
 800f91e:	d501      	bpl.n	800f924 <_printf_i+0xb8>
 800f920:	680d      	ldr	r5, [r1, #0]
 800f922:	e003      	b.n	800f92c <_printf_i+0xc0>
 800f924:	066d      	lsls	r5, r5, #25
 800f926:	d5fb      	bpl.n	800f920 <_printf_i+0xb4>
 800f928:	680d      	ldr	r5, [r1, #0]
 800f92a:	b2ad      	uxth	r5, r5
 800f92c:	4b56      	ldr	r3, [pc, #344]	; (800fa88 <_printf_i+0x21c>)
 800f92e:	270a      	movs	r7, #10
 800f930:	9303      	str	r3, [sp, #12]
 800f932:	2a6f      	cmp	r2, #111	; 0x6f
 800f934:	d117      	bne.n	800f966 <_printf_i+0xfa>
 800f936:	2708      	movs	r7, #8
 800f938:	e015      	b.n	800f966 <_printf_i+0xfa>
 800f93a:	3145      	adds	r1, #69	; 0x45
 800f93c:	700a      	strb	r2, [r1, #0]
 800f93e:	4a52      	ldr	r2, [pc, #328]	; (800fa88 <_printf_i+0x21c>)
 800f940:	9203      	str	r2, [sp, #12]
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	6821      	ldr	r1, [r4, #0]
 800f946:	ca20      	ldmia	r2!, {r5}
 800f948:	601a      	str	r2, [r3, #0]
 800f94a:	0608      	lsls	r0, r1, #24
 800f94c:	d550      	bpl.n	800f9f0 <_printf_i+0x184>
 800f94e:	07cb      	lsls	r3, r1, #31
 800f950:	d502      	bpl.n	800f958 <_printf_i+0xec>
 800f952:	2320      	movs	r3, #32
 800f954:	4319      	orrs	r1, r3
 800f956:	6021      	str	r1, [r4, #0]
 800f958:	2710      	movs	r7, #16
 800f95a:	2d00      	cmp	r5, #0
 800f95c:	d103      	bne.n	800f966 <_printf_i+0xfa>
 800f95e:	2320      	movs	r3, #32
 800f960:	6822      	ldr	r2, [r4, #0]
 800f962:	439a      	bics	r2, r3
 800f964:	6022      	str	r2, [r4, #0]
 800f966:	0023      	movs	r3, r4
 800f968:	2200      	movs	r2, #0
 800f96a:	3343      	adds	r3, #67	; 0x43
 800f96c:	701a      	strb	r2, [r3, #0]
 800f96e:	6863      	ldr	r3, [r4, #4]
 800f970:	60a3      	str	r3, [r4, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	db03      	blt.n	800f97e <_printf_i+0x112>
 800f976:	2204      	movs	r2, #4
 800f978:	6821      	ldr	r1, [r4, #0]
 800f97a:	4391      	bics	r1, r2
 800f97c:	6021      	str	r1, [r4, #0]
 800f97e:	2d00      	cmp	r5, #0
 800f980:	d102      	bne.n	800f988 <_printf_i+0x11c>
 800f982:	9e04      	ldr	r6, [sp, #16]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00c      	beq.n	800f9a2 <_printf_i+0x136>
 800f988:	9e04      	ldr	r6, [sp, #16]
 800f98a:	0028      	movs	r0, r5
 800f98c:	0039      	movs	r1, r7
 800f98e:	f7f0 fc49 	bl	8000224 <__aeabi_uidivmod>
 800f992:	9b03      	ldr	r3, [sp, #12]
 800f994:	3e01      	subs	r6, #1
 800f996:	5c5b      	ldrb	r3, [r3, r1]
 800f998:	7033      	strb	r3, [r6, #0]
 800f99a:	002b      	movs	r3, r5
 800f99c:	0005      	movs	r5, r0
 800f99e:	429f      	cmp	r7, r3
 800f9a0:	d9f3      	bls.n	800f98a <_printf_i+0x11e>
 800f9a2:	2f08      	cmp	r7, #8
 800f9a4:	d109      	bne.n	800f9ba <_printf_i+0x14e>
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	07db      	lsls	r3, r3, #31
 800f9aa:	d506      	bpl.n	800f9ba <_printf_i+0x14e>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	6922      	ldr	r2, [r4, #16]
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	dc02      	bgt.n	800f9ba <_printf_i+0x14e>
 800f9b4:	2330      	movs	r3, #48	; 0x30
 800f9b6:	3e01      	subs	r6, #1
 800f9b8:	7033      	strb	r3, [r6, #0]
 800f9ba:	9b04      	ldr	r3, [sp, #16]
 800f9bc:	1b9b      	subs	r3, r3, r6
 800f9be:	6123      	str	r3, [r4, #16]
 800f9c0:	9b07      	ldr	r3, [sp, #28]
 800f9c2:	0021      	movs	r1, r4
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	9805      	ldr	r0, [sp, #20]
 800f9c8:	9b06      	ldr	r3, [sp, #24]
 800f9ca:	aa09      	add	r2, sp, #36	; 0x24
 800f9cc:	f7ff fede 	bl	800f78c <_printf_common>
 800f9d0:	1c43      	adds	r3, r0, #1
 800f9d2:	d135      	bne.n	800fa40 <_printf_i+0x1d4>
 800f9d4:	2001      	movs	r0, #1
 800f9d6:	4240      	negs	r0, r0
 800f9d8:	b00b      	add	sp, #44	; 0x2c
 800f9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9dc:	2220      	movs	r2, #32
 800f9de:	6809      	ldr	r1, [r1, #0]
 800f9e0:	430a      	orrs	r2, r1
 800f9e2:	6022      	str	r2, [r4, #0]
 800f9e4:	0022      	movs	r2, r4
 800f9e6:	2178      	movs	r1, #120	; 0x78
 800f9e8:	3245      	adds	r2, #69	; 0x45
 800f9ea:	7011      	strb	r1, [r2, #0]
 800f9ec:	4a27      	ldr	r2, [pc, #156]	; (800fa8c <_printf_i+0x220>)
 800f9ee:	e7a7      	b.n	800f940 <_printf_i+0xd4>
 800f9f0:	0648      	lsls	r0, r1, #25
 800f9f2:	d5ac      	bpl.n	800f94e <_printf_i+0xe2>
 800f9f4:	b2ad      	uxth	r5, r5
 800f9f6:	e7aa      	b.n	800f94e <_printf_i+0xe2>
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	680d      	ldr	r5, [r1, #0]
 800f9fc:	1d10      	adds	r0, r2, #4
 800f9fe:	6949      	ldr	r1, [r1, #20]
 800fa00:	6018      	str	r0, [r3, #0]
 800fa02:	6813      	ldr	r3, [r2, #0]
 800fa04:	062e      	lsls	r6, r5, #24
 800fa06:	d501      	bpl.n	800fa0c <_printf_i+0x1a0>
 800fa08:	6019      	str	r1, [r3, #0]
 800fa0a:	e002      	b.n	800fa12 <_printf_i+0x1a6>
 800fa0c:	066d      	lsls	r5, r5, #25
 800fa0e:	d5fb      	bpl.n	800fa08 <_printf_i+0x19c>
 800fa10:	8019      	strh	r1, [r3, #0]
 800fa12:	2300      	movs	r3, #0
 800fa14:	9e04      	ldr	r6, [sp, #16]
 800fa16:	6123      	str	r3, [r4, #16]
 800fa18:	e7d2      	b.n	800f9c0 <_printf_i+0x154>
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	1d11      	adds	r1, r2, #4
 800fa1e:	6019      	str	r1, [r3, #0]
 800fa20:	6816      	ldr	r6, [r2, #0]
 800fa22:	2100      	movs	r1, #0
 800fa24:	0030      	movs	r0, r6
 800fa26:	6862      	ldr	r2, [r4, #4]
 800fa28:	f000 f8dc 	bl	800fbe4 <memchr>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d001      	beq.n	800fa34 <_printf_i+0x1c8>
 800fa30:	1b80      	subs	r0, r0, r6
 800fa32:	6060      	str	r0, [r4, #4]
 800fa34:	6863      	ldr	r3, [r4, #4]
 800fa36:	6123      	str	r3, [r4, #16]
 800fa38:	2300      	movs	r3, #0
 800fa3a:	9a04      	ldr	r2, [sp, #16]
 800fa3c:	7013      	strb	r3, [r2, #0]
 800fa3e:	e7bf      	b.n	800f9c0 <_printf_i+0x154>
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	0032      	movs	r2, r6
 800fa44:	9906      	ldr	r1, [sp, #24]
 800fa46:	9805      	ldr	r0, [sp, #20]
 800fa48:	9d07      	ldr	r5, [sp, #28]
 800fa4a:	47a8      	blx	r5
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d0c1      	beq.n	800f9d4 <_printf_i+0x168>
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	079b      	lsls	r3, r3, #30
 800fa54:	d415      	bmi.n	800fa82 <_printf_i+0x216>
 800fa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa58:	68e0      	ldr	r0, [r4, #12]
 800fa5a:	4298      	cmp	r0, r3
 800fa5c:	dabc      	bge.n	800f9d8 <_printf_i+0x16c>
 800fa5e:	0018      	movs	r0, r3
 800fa60:	e7ba      	b.n	800f9d8 <_printf_i+0x16c>
 800fa62:	0022      	movs	r2, r4
 800fa64:	2301      	movs	r3, #1
 800fa66:	9906      	ldr	r1, [sp, #24]
 800fa68:	9805      	ldr	r0, [sp, #20]
 800fa6a:	9e07      	ldr	r6, [sp, #28]
 800fa6c:	3219      	adds	r2, #25
 800fa6e:	47b0      	blx	r6
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d0af      	beq.n	800f9d4 <_printf_i+0x168>
 800fa74:	3501      	adds	r5, #1
 800fa76:	68e3      	ldr	r3, [r4, #12]
 800fa78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa7a:	1a9b      	subs	r3, r3, r2
 800fa7c:	42ab      	cmp	r3, r5
 800fa7e:	dcf0      	bgt.n	800fa62 <_printf_i+0x1f6>
 800fa80:	e7e9      	b.n	800fa56 <_printf_i+0x1ea>
 800fa82:	2500      	movs	r5, #0
 800fa84:	e7f7      	b.n	800fa76 <_printf_i+0x20a>
 800fa86:	46c0      	nop			; (mov r8, r8)
 800fa88:	080158c5 	.word	0x080158c5
 800fa8c:	080158d6 	.word	0x080158d6

0800fa90 <__sread>:
 800fa90:	b570      	push	{r4, r5, r6, lr}
 800fa92:	000c      	movs	r4, r1
 800fa94:	250e      	movs	r5, #14
 800fa96:	5f49      	ldrsh	r1, [r1, r5]
 800fa98:	f000 f8b0 	bl	800fbfc <_read_r>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	db03      	blt.n	800faa8 <__sread+0x18>
 800faa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800faa2:	181b      	adds	r3, r3, r0
 800faa4:	6563      	str	r3, [r4, #84]	; 0x54
 800faa6:	bd70      	pop	{r4, r5, r6, pc}
 800faa8:	89a3      	ldrh	r3, [r4, #12]
 800faaa:	4a02      	ldr	r2, [pc, #8]	; (800fab4 <__sread+0x24>)
 800faac:	4013      	ands	r3, r2
 800faae:	81a3      	strh	r3, [r4, #12]
 800fab0:	e7f9      	b.n	800faa6 <__sread+0x16>
 800fab2:	46c0      	nop			; (mov r8, r8)
 800fab4:	ffffefff 	.word	0xffffefff

0800fab8 <__swrite>:
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	001f      	movs	r7, r3
 800fabc:	898b      	ldrh	r3, [r1, #12]
 800fabe:	0005      	movs	r5, r0
 800fac0:	000c      	movs	r4, r1
 800fac2:	0016      	movs	r6, r2
 800fac4:	05db      	lsls	r3, r3, #23
 800fac6:	d505      	bpl.n	800fad4 <__swrite+0x1c>
 800fac8:	230e      	movs	r3, #14
 800faca:	5ec9      	ldrsh	r1, [r1, r3]
 800facc:	2200      	movs	r2, #0
 800face:	2302      	movs	r3, #2
 800fad0:	f000 f874 	bl	800fbbc <_lseek_r>
 800fad4:	89a3      	ldrh	r3, [r4, #12]
 800fad6:	4a05      	ldr	r2, [pc, #20]	; (800faec <__swrite+0x34>)
 800fad8:	0028      	movs	r0, r5
 800fada:	4013      	ands	r3, r2
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	0032      	movs	r2, r6
 800fae0:	230e      	movs	r3, #14
 800fae2:	5ee1      	ldrsh	r1, [r4, r3]
 800fae4:	003b      	movs	r3, r7
 800fae6:	f000 f81f 	bl	800fb28 <_write_r>
 800faea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faec:	ffffefff 	.word	0xffffefff

0800faf0 <__sseek>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	000c      	movs	r4, r1
 800faf4:	250e      	movs	r5, #14
 800faf6:	5f49      	ldrsh	r1, [r1, r5]
 800faf8:	f000 f860 	bl	800fbbc <_lseek_r>
 800fafc:	89a3      	ldrh	r3, [r4, #12]
 800fafe:	1c42      	adds	r2, r0, #1
 800fb00:	d103      	bne.n	800fb0a <__sseek+0x1a>
 800fb02:	4a05      	ldr	r2, [pc, #20]	; (800fb18 <__sseek+0x28>)
 800fb04:	4013      	ands	r3, r2
 800fb06:	81a3      	strh	r3, [r4, #12]
 800fb08:	bd70      	pop	{r4, r5, r6, pc}
 800fb0a:	2280      	movs	r2, #128	; 0x80
 800fb0c:	0152      	lsls	r2, r2, #5
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	81a3      	strh	r3, [r4, #12]
 800fb12:	6560      	str	r0, [r4, #84]	; 0x54
 800fb14:	e7f8      	b.n	800fb08 <__sseek+0x18>
 800fb16:	46c0      	nop			; (mov r8, r8)
 800fb18:	ffffefff 	.word	0xffffefff

0800fb1c <__sclose>:
 800fb1c:	b510      	push	{r4, lr}
 800fb1e:	230e      	movs	r3, #14
 800fb20:	5ec9      	ldrsh	r1, [r1, r3]
 800fb22:	f000 f815 	bl	800fb50 <_close_r>
 800fb26:	bd10      	pop	{r4, pc}

0800fb28 <_write_r>:
 800fb28:	b570      	push	{r4, r5, r6, lr}
 800fb2a:	0004      	movs	r4, r0
 800fb2c:	0008      	movs	r0, r1
 800fb2e:	0011      	movs	r1, r2
 800fb30:	001a      	movs	r2, r3
 800fb32:	2300      	movs	r3, #0
 800fb34:	4d05      	ldr	r5, [pc, #20]	; (800fb4c <_write_r+0x24>)
 800fb36:	602b      	str	r3, [r5, #0]
 800fb38:	f7fa fb8f 	bl	800a25a <_write>
 800fb3c:	1c43      	adds	r3, r0, #1
 800fb3e:	d103      	bne.n	800fb48 <_write_r+0x20>
 800fb40:	682b      	ldr	r3, [r5, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d000      	beq.n	800fb48 <_write_r+0x20>
 800fb46:	6023      	str	r3, [r4, #0]
 800fb48:	bd70      	pop	{r4, r5, r6, pc}
 800fb4a:	46c0      	nop			; (mov r8, r8)
 800fb4c:	200007fc 	.word	0x200007fc

0800fb50 <_close_r>:
 800fb50:	2300      	movs	r3, #0
 800fb52:	b570      	push	{r4, r5, r6, lr}
 800fb54:	4d06      	ldr	r5, [pc, #24]	; (800fb70 <_close_r+0x20>)
 800fb56:	0004      	movs	r4, r0
 800fb58:	0008      	movs	r0, r1
 800fb5a:	602b      	str	r3, [r5, #0]
 800fb5c:	f7fa fb99 	bl	800a292 <_close>
 800fb60:	1c43      	adds	r3, r0, #1
 800fb62:	d103      	bne.n	800fb6c <_close_r+0x1c>
 800fb64:	682b      	ldr	r3, [r5, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d000      	beq.n	800fb6c <_close_r+0x1c>
 800fb6a:	6023      	str	r3, [r4, #0]
 800fb6c:	bd70      	pop	{r4, r5, r6, pc}
 800fb6e:	46c0      	nop			; (mov r8, r8)
 800fb70:	200007fc 	.word	0x200007fc

0800fb74 <_fstat_r>:
 800fb74:	2300      	movs	r3, #0
 800fb76:	b570      	push	{r4, r5, r6, lr}
 800fb78:	4d06      	ldr	r5, [pc, #24]	; (800fb94 <_fstat_r+0x20>)
 800fb7a:	0004      	movs	r4, r0
 800fb7c:	0008      	movs	r0, r1
 800fb7e:	0011      	movs	r1, r2
 800fb80:	602b      	str	r3, [r5, #0]
 800fb82:	f7fa fb90 	bl	800a2a6 <_fstat>
 800fb86:	1c43      	adds	r3, r0, #1
 800fb88:	d103      	bne.n	800fb92 <_fstat_r+0x1e>
 800fb8a:	682b      	ldr	r3, [r5, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d000      	beq.n	800fb92 <_fstat_r+0x1e>
 800fb90:	6023      	str	r3, [r4, #0]
 800fb92:	bd70      	pop	{r4, r5, r6, pc}
 800fb94:	200007fc 	.word	0x200007fc

0800fb98 <_isatty_r>:
 800fb98:	2300      	movs	r3, #0
 800fb9a:	b570      	push	{r4, r5, r6, lr}
 800fb9c:	4d06      	ldr	r5, [pc, #24]	; (800fbb8 <_isatty_r+0x20>)
 800fb9e:	0004      	movs	r4, r0
 800fba0:	0008      	movs	r0, r1
 800fba2:	602b      	str	r3, [r5, #0]
 800fba4:	f7fa fb8d 	bl	800a2c2 <_isatty>
 800fba8:	1c43      	adds	r3, r0, #1
 800fbaa:	d103      	bne.n	800fbb4 <_isatty_r+0x1c>
 800fbac:	682b      	ldr	r3, [r5, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d000      	beq.n	800fbb4 <_isatty_r+0x1c>
 800fbb2:	6023      	str	r3, [r4, #0]
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	46c0      	nop			; (mov r8, r8)
 800fbb8:	200007fc 	.word	0x200007fc

0800fbbc <_lseek_r>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	0004      	movs	r4, r0
 800fbc0:	0008      	movs	r0, r1
 800fbc2:	0011      	movs	r1, r2
 800fbc4:	001a      	movs	r2, r3
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	4d05      	ldr	r5, [pc, #20]	; (800fbe0 <_lseek_r+0x24>)
 800fbca:	602b      	str	r3, [r5, #0]
 800fbcc:	f7fa fb82 	bl	800a2d4 <_lseek>
 800fbd0:	1c43      	adds	r3, r0, #1
 800fbd2:	d103      	bne.n	800fbdc <_lseek_r+0x20>
 800fbd4:	682b      	ldr	r3, [r5, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d000      	beq.n	800fbdc <_lseek_r+0x20>
 800fbda:	6023      	str	r3, [r4, #0]
 800fbdc:	bd70      	pop	{r4, r5, r6, pc}
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	200007fc 	.word	0x200007fc

0800fbe4 <memchr>:
 800fbe4:	b2c9      	uxtb	r1, r1
 800fbe6:	1882      	adds	r2, r0, r2
 800fbe8:	4290      	cmp	r0, r2
 800fbea:	d101      	bne.n	800fbf0 <memchr+0xc>
 800fbec:	2000      	movs	r0, #0
 800fbee:	4770      	bx	lr
 800fbf0:	7803      	ldrb	r3, [r0, #0]
 800fbf2:	428b      	cmp	r3, r1
 800fbf4:	d0fb      	beq.n	800fbee <memchr+0xa>
 800fbf6:	3001      	adds	r0, #1
 800fbf8:	e7f6      	b.n	800fbe8 <memchr+0x4>
	...

0800fbfc <_read_r>:
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	0004      	movs	r4, r0
 800fc00:	0008      	movs	r0, r1
 800fc02:	0011      	movs	r1, r2
 800fc04:	001a      	movs	r2, r3
 800fc06:	2300      	movs	r3, #0
 800fc08:	4d05      	ldr	r5, [pc, #20]	; (800fc20 <_read_r+0x24>)
 800fc0a:	602b      	str	r3, [r5, #0]
 800fc0c:	f7fa fb08 	bl	800a220 <_read>
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	d103      	bne.n	800fc1c <_read_r+0x20>
 800fc14:	682b      	ldr	r3, [r5, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d000      	beq.n	800fc1c <_read_r+0x20>
 800fc1a:	6023      	str	r3, [r4, #0]
 800fc1c:	bd70      	pop	{r4, r5, r6, pc}
 800fc1e:	46c0      	nop			; (mov r8, r8)
 800fc20:	200007fc 	.word	0x200007fc

0800fc24 <cos>:
 800fc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc26:	4a1e      	ldr	r2, [pc, #120]	; (800fca0 <cos+0x7c>)
 800fc28:	004b      	lsls	r3, r1, #1
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	085b      	lsrs	r3, r3, #1
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	dc04      	bgt.n	800fc3c <cos+0x18>
 800fc32:	2200      	movs	r2, #0
 800fc34:	2300      	movs	r3, #0
 800fc36:	f000 fd07 	bl	8010648 <__kernel_cos>
 800fc3a:	e006      	b.n	800fc4a <cos+0x26>
 800fc3c:	4a19      	ldr	r2, [pc, #100]	; (800fca4 <cos+0x80>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	dd05      	ble.n	800fc4e <cos+0x2a>
 800fc42:	0002      	movs	r2, r0
 800fc44:	000b      	movs	r3, r1
 800fc46:	f7f2 fcc3 	bl	80025d0 <__aeabi_dsub>
 800fc4a:	b007      	add	sp, #28
 800fc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc4e:	aa02      	add	r2, sp, #8
 800fc50:	f000 fb0e 	bl	8010270 <__ieee754_rem_pio2>
 800fc54:	9c04      	ldr	r4, [sp, #16]
 800fc56:	9d05      	ldr	r5, [sp, #20]
 800fc58:	2303      	movs	r3, #3
 800fc5a:	4003      	ands	r3, r0
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d008      	beq.n	800fc72 <cos+0x4e>
 800fc60:	9802      	ldr	r0, [sp, #8]
 800fc62:	9903      	ldr	r1, [sp, #12]
 800fc64:	2b02      	cmp	r3, #2
 800fc66:	d00f      	beq.n	800fc88 <cos+0x64>
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d112      	bne.n	800fc92 <cos+0x6e>
 800fc6c:	0022      	movs	r2, r4
 800fc6e:	002b      	movs	r3, r5
 800fc70:	e7e1      	b.n	800fc36 <cos+0x12>
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	0022      	movs	r2, r4
 800fc76:	9802      	ldr	r0, [sp, #8]
 800fc78:	9903      	ldr	r1, [sp, #12]
 800fc7a:	002b      	movs	r3, r5
 800fc7c:	f001 f91a 	bl	8010eb4 <__kernel_sin>
 800fc80:	2380      	movs	r3, #128	; 0x80
 800fc82:	061b      	lsls	r3, r3, #24
 800fc84:	18c9      	adds	r1, r1, r3
 800fc86:	e7e0      	b.n	800fc4a <cos+0x26>
 800fc88:	0022      	movs	r2, r4
 800fc8a:	002b      	movs	r3, r5
 800fc8c:	f000 fcdc 	bl	8010648 <__kernel_cos>
 800fc90:	e7f6      	b.n	800fc80 <cos+0x5c>
 800fc92:	2301      	movs	r3, #1
 800fc94:	0022      	movs	r2, r4
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	002b      	movs	r3, r5
 800fc9a:	f001 f90b 	bl	8010eb4 <__kernel_sin>
 800fc9e:	e7d4      	b.n	800fc4a <cos+0x26>
 800fca0:	3fe921fb 	.word	0x3fe921fb
 800fca4:	7fefffff 	.word	0x7fefffff

0800fca8 <sin>:
 800fca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcaa:	4a20      	ldr	r2, [pc, #128]	; (800fd2c <sin+0x84>)
 800fcac:	004b      	lsls	r3, r1, #1
 800fcae:	b087      	sub	sp, #28
 800fcb0:	085b      	lsrs	r3, r3, #1
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	dc06      	bgt.n	800fcc4 <sin+0x1c>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	2200      	movs	r2, #0
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	f001 f8f9 	bl	8010eb4 <__kernel_sin>
 800fcc2:	e006      	b.n	800fcd2 <sin+0x2a>
 800fcc4:	4a1a      	ldr	r2, [pc, #104]	; (800fd30 <sin+0x88>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	dd05      	ble.n	800fcd6 <sin+0x2e>
 800fcca:	0002      	movs	r2, r0
 800fccc:	000b      	movs	r3, r1
 800fcce:	f7f2 fc7f 	bl	80025d0 <__aeabi_dsub>
 800fcd2:	b007      	add	sp, #28
 800fcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd6:	aa02      	add	r2, sp, #8
 800fcd8:	f000 faca 	bl	8010270 <__ieee754_rem_pio2>
 800fcdc:	9c04      	ldr	r4, [sp, #16]
 800fcde:	9d05      	ldr	r5, [sp, #20]
 800fce0:	2303      	movs	r3, #3
 800fce2:	4003      	ands	r3, r0
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d00a      	beq.n	800fcfe <sin+0x56>
 800fce8:	9802      	ldr	r0, [sp, #8]
 800fcea:	9903      	ldr	r1, [sp, #12]
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d00d      	beq.n	800fd0c <sin+0x64>
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d115      	bne.n	800fd20 <sin+0x78>
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	0022      	movs	r2, r4
 800fcfa:	002b      	movs	r3, r5
 800fcfc:	e7df      	b.n	800fcbe <sin+0x16>
 800fcfe:	0022      	movs	r2, r4
 800fd00:	9802      	ldr	r0, [sp, #8]
 800fd02:	9903      	ldr	r1, [sp, #12]
 800fd04:	002b      	movs	r3, r5
 800fd06:	f000 fc9f 	bl	8010648 <__kernel_cos>
 800fd0a:	e7e2      	b.n	800fcd2 <sin+0x2a>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	0022      	movs	r2, r4
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	002b      	movs	r3, r5
 800fd14:	f001 f8ce 	bl	8010eb4 <__kernel_sin>
 800fd18:	2380      	movs	r3, #128	; 0x80
 800fd1a:	061b      	lsls	r3, r3, #24
 800fd1c:	18c9      	adds	r1, r1, r3
 800fd1e:	e7d8      	b.n	800fcd2 <sin+0x2a>
 800fd20:	0022      	movs	r2, r4
 800fd22:	002b      	movs	r3, r5
 800fd24:	f000 fc90 	bl	8010648 <__kernel_cos>
 800fd28:	e7f6      	b.n	800fd18 <sin+0x70>
 800fd2a:	46c0      	nop			; (mov r8, r8)
 800fd2c:	3fe921fb 	.word	0x3fe921fb
 800fd30:	7fefffff 	.word	0x7fefffff

0800fd34 <atan2>:
 800fd34:	b510      	push	{r4, lr}
 800fd36:	f000 f83f 	bl	800fdb8 <__ieee754_atan2>
 800fd3a:	bd10      	pop	{r4, pc}

0800fd3c <log>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	0004      	movs	r4, r0
 800fd40:	000d      	movs	r5, r1
 800fd42:	f000 f8e5 	bl	800ff10 <__ieee754_log>
 800fd46:	4b19      	ldr	r3, [pc, #100]	; (800fdac <log+0x70>)
 800fd48:	0006      	movs	r6, r0
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	000f      	movs	r7, r1
 800fd4e:	b25b      	sxtb	r3, r3
 800fd50:	3301      	adds	r3, #1
 800fd52:	d01d      	beq.n	800fd90 <log+0x54>
 800fd54:	0022      	movs	r2, r4
 800fd56:	002b      	movs	r3, r5
 800fd58:	0020      	movs	r0, r4
 800fd5a:	0029      	movs	r1, r5
 800fd5c:	f7f2 ffca 	bl	8002cf4 <__aeabi_dcmpun>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d115      	bne.n	800fd90 <log+0x54>
 800fd64:	2200      	movs	r2, #0
 800fd66:	2300      	movs	r3, #0
 800fd68:	0020      	movs	r0, r4
 800fd6a:	0029      	movs	r1, r5
 800fd6c:	f7f0 fb74 	bl	8000458 <__aeabi_dcmpgt>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	d10d      	bne.n	800fd90 <log+0x54>
 800fd74:	2200      	movs	r2, #0
 800fd76:	2300      	movs	r3, #0
 800fd78:	0020      	movs	r0, r4
 800fd7a:	0029      	movs	r1, r5
 800fd7c:	f7f0 fb52 	bl	8000424 <__aeabi_dcmpeq>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	d008      	beq.n	800fd96 <log+0x5a>
 800fd84:	f7fe feee 	bl	800eb64 <__errno>
 800fd88:	2322      	movs	r3, #34	; 0x22
 800fd8a:	2600      	movs	r6, #0
 800fd8c:	4f08      	ldr	r7, [pc, #32]	; (800fdb0 <log+0x74>)
 800fd8e:	6003      	str	r3, [r0, #0]
 800fd90:	0030      	movs	r0, r6
 800fd92:	0039      	movs	r1, r7
 800fd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd96:	f7fe fee5 	bl	800eb64 <__errno>
 800fd9a:	2321      	movs	r3, #33	; 0x21
 800fd9c:	6003      	str	r3, [r0, #0]
 800fd9e:	4805      	ldr	r0, [pc, #20]	; (800fdb4 <log+0x78>)
 800fda0:	f001 fb42 	bl	8011428 <nan>
 800fda4:	0006      	movs	r6, r0
 800fda6:	000f      	movs	r7, r1
 800fda8:	e7f2      	b.n	800fd90 <log+0x54>
 800fdaa:	46c0      	nop			; (mov r8, r8)
 800fdac:	20000098 	.word	0x20000098
 800fdb0:	fff00000 	.word	0xfff00000
 800fdb4:	080158b9 	.word	0x080158b9

0800fdb8 <__ieee754_atan2>:
 800fdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdba:	0016      	movs	r6, r2
 800fdbc:	001d      	movs	r5, r3
 800fdbe:	005a      	lsls	r2, r3, #1
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	4273      	negs	r3, r6
 800fdc4:	4333      	orrs	r3, r6
 800fdc6:	4f46      	ldr	r7, [pc, #280]	; (800fee0 <__ieee754_atan2+0x128>)
 800fdc8:	0852      	lsrs	r2, r2, #1
 800fdca:	0fdb      	lsrs	r3, r3, #31
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	42bb      	cmp	r3, r7
 800fdd0:	d809      	bhi.n	800fde6 <__ieee754_atan2+0x2e>
 800fdd2:	4244      	negs	r4, r0
 800fdd4:	004b      	lsls	r3, r1, #1
 800fdd6:	4304      	orrs	r4, r0
 800fdd8:	085b      	lsrs	r3, r3, #1
 800fdda:	0fe4      	lsrs	r4, r4, #31
 800fddc:	9100      	str	r1, [sp, #0]
 800fdde:	9001      	str	r0, [sp, #4]
 800fde0:	431c      	orrs	r4, r3
 800fde2:	42bc      	cmp	r4, r7
 800fde4:	d905      	bls.n	800fdf2 <__ieee754_atan2+0x3a>
 800fde6:	0032      	movs	r2, r6
 800fde8:	002b      	movs	r3, r5
 800fdea:	f7f1 fa15 	bl	8001218 <__aeabi_dadd>
 800fdee:	b003      	add	sp, #12
 800fdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdf2:	4c3c      	ldr	r4, [pc, #240]	; (800fee4 <__ieee754_atan2+0x12c>)
 800fdf4:	192c      	adds	r4, r5, r4
 800fdf6:	4334      	orrs	r4, r6
 800fdf8:	d102      	bne.n	800fe00 <__ieee754_atan2+0x48>
 800fdfa:	f001 f907 	bl	801100c <atan>
 800fdfe:	e7f6      	b.n	800fdee <__ieee754_atan2+0x36>
 800fe00:	17ac      	asrs	r4, r5, #30
 800fe02:	46a4      	mov	ip, r4
 800fe04:	2402      	movs	r4, #2
 800fe06:	4667      	mov	r7, ip
 800fe08:	403c      	ands	r4, r7
 800fe0a:	9f00      	ldr	r7, [sp, #0]
 800fe0c:	0fff      	lsrs	r7, r7, #31
 800fe0e:	433c      	orrs	r4, r7
 800fe10:	9f01      	ldr	r7, [sp, #4]
 800fe12:	431f      	orrs	r7, r3
 800fe14:	d106      	bne.n	800fe24 <__ieee754_atan2+0x6c>
 800fe16:	2c02      	cmp	r4, #2
 800fe18:	d056      	beq.n	800fec8 <__ieee754_atan2+0x110>
 800fe1a:	2c03      	cmp	r4, #3
 800fe1c:	d1e7      	bne.n	800fdee <__ieee754_atan2+0x36>
 800fe1e:	4832      	ldr	r0, [pc, #200]	; (800fee8 <__ieee754_atan2+0x130>)
 800fe20:	4932      	ldr	r1, [pc, #200]	; (800feec <__ieee754_atan2+0x134>)
 800fe22:	e7e4      	b.n	800fdee <__ieee754_atan2+0x36>
 800fe24:	0017      	movs	r7, r2
 800fe26:	4337      	orrs	r7, r6
 800fe28:	d105      	bne.n	800fe36 <__ieee754_atan2+0x7e>
 800fe2a:	9b00      	ldr	r3, [sp, #0]
 800fe2c:	482e      	ldr	r0, [pc, #184]	; (800fee8 <__ieee754_atan2+0x130>)
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da53      	bge.n	800feda <__ieee754_atan2+0x122>
 800fe32:	492f      	ldr	r1, [pc, #188]	; (800fef0 <__ieee754_atan2+0x138>)
 800fe34:	e7db      	b.n	800fdee <__ieee754_atan2+0x36>
 800fe36:	4f2a      	ldr	r7, [pc, #168]	; (800fee0 <__ieee754_atan2+0x128>)
 800fe38:	42ba      	cmp	r2, r7
 800fe3a:	d10f      	bne.n	800fe5c <__ieee754_atan2+0xa4>
 800fe3c:	3c01      	subs	r4, #1
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d107      	bne.n	800fe52 <__ieee754_atan2+0x9a>
 800fe42:	2c02      	cmp	r4, #2
 800fe44:	d843      	bhi.n	800fece <__ieee754_atan2+0x116>
 800fe46:	4b2b      	ldr	r3, [pc, #172]	; (800fef4 <__ieee754_atan2+0x13c>)
 800fe48:	00e4      	lsls	r4, r4, #3
 800fe4a:	191c      	adds	r4, r3, r4
 800fe4c:	6820      	ldr	r0, [r4, #0]
 800fe4e:	6861      	ldr	r1, [r4, #4]
 800fe50:	e7cd      	b.n	800fdee <__ieee754_atan2+0x36>
 800fe52:	2c02      	cmp	r4, #2
 800fe54:	d83e      	bhi.n	800fed4 <__ieee754_atan2+0x11c>
 800fe56:	4b28      	ldr	r3, [pc, #160]	; (800fef8 <__ieee754_atan2+0x140>)
 800fe58:	00e4      	lsls	r4, r4, #3
 800fe5a:	e7f6      	b.n	800fe4a <__ieee754_atan2+0x92>
 800fe5c:	4f20      	ldr	r7, [pc, #128]	; (800fee0 <__ieee754_atan2+0x128>)
 800fe5e:	42bb      	cmp	r3, r7
 800fe60:	d0e3      	beq.n	800fe2a <__ieee754_atan2+0x72>
 800fe62:	1a9b      	subs	r3, r3, r2
 800fe64:	151b      	asrs	r3, r3, #20
 800fe66:	2b3c      	cmp	r3, #60	; 0x3c
 800fe68:	dc18      	bgt.n	800fe9c <__ieee754_atan2+0xe4>
 800fe6a:	2d00      	cmp	r5, #0
 800fe6c:	da01      	bge.n	800fe72 <__ieee754_atan2+0xba>
 800fe6e:	333c      	adds	r3, #60	; 0x3c
 800fe70:	db17      	blt.n	800fea2 <__ieee754_atan2+0xea>
 800fe72:	0032      	movs	r2, r6
 800fe74:	002b      	movs	r3, r5
 800fe76:	f7f1 fd39 	bl	80018ec <__aeabi_ddiv>
 800fe7a:	f001 fa47 	bl	801130c <fabs>
 800fe7e:	f001 f8c5 	bl	801100c <atan>
 800fe82:	2c01      	cmp	r4, #1
 800fe84:	d010      	beq.n	800fea8 <__ieee754_atan2+0xf0>
 800fe86:	2c02      	cmp	r4, #2
 800fe88:	d013      	beq.n	800feb2 <__ieee754_atan2+0xfa>
 800fe8a:	2c00      	cmp	r4, #0
 800fe8c:	d0af      	beq.n	800fdee <__ieee754_atan2+0x36>
 800fe8e:	4a1b      	ldr	r2, [pc, #108]	; (800fefc <__ieee754_atan2+0x144>)
 800fe90:	4b1b      	ldr	r3, [pc, #108]	; (800ff00 <__ieee754_atan2+0x148>)
 800fe92:	f7f2 fb9d 	bl	80025d0 <__aeabi_dsub>
 800fe96:	4a14      	ldr	r2, [pc, #80]	; (800fee8 <__ieee754_atan2+0x130>)
 800fe98:	4b1a      	ldr	r3, [pc, #104]	; (800ff04 <__ieee754_atan2+0x14c>)
 800fe9a:	e012      	b.n	800fec2 <__ieee754_atan2+0x10a>
 800fe9c:	4812      	ldr	r0, [pc, #72]	; (800fee8 <__ieee754_atan2+0x130>)
 800fe9e:	491a      	ldr	r1, [pc, #104]	; (800ff08 <__ieee754_atan2+0x150>)
 800fea0:	e7ef      	b.n	800fe82 <__ieee754_atan2+0xca>
 800fea2:	2000      	movs	r0, #0
 800fea4:	2100      	movs	r1, #0
 800fea6:	e7ec      	b.n	800fe82 <__ieee754_atan2+0xca>
 800fea8:	2480      	movs	r4, #128	; 0x80
 800feaa:	0624      	lsls	r4, r4, #24
 800feac:	190b      	adds	r3, r1, r4
 800feae:	0019      	movs	r1, r3
 800feb0:	e79d      	b.n	800fdee <__ieee754_atan2+0x36>
 800feb2:	4a12      	ldr	r2, [pc, #72]	; (800fefc <__ieee754_atan2+0x144>)
 800feb4:	4b12      	ldr	r3, [pc, #72]	; (800ff00 <__ieee754_atan2+0x148>)
 800feb6:	f7f2 fb8b 	bl	80025d0 <__aeabi_dsub>
 800feba:	0002      	movs	r2, r0
 800febc:	000b      	movs	r3, r1
 800febe:	480a      	ldr	r0, [pc, #40]	; (800fee8 <__ieee754_atan2+0x130>)
 800fec0:	4910      	ldr	r1, [pc, #64]	; (800ff04 <__ieee754_atan2+0x14c>)
 800fec2:	f7f2 fb85 	bl	80025d0 <__aeabi_dsub>
 800fec6:	e792      	b.n	800fdee <__ieee754_atan2+0x36>
 800fec8:	4807      	ldr	r0, [pc, #28]	; (800fee8 <__ieee754_atan2+0x130>)
 800feca:	490e      	ldr	r1, [pc, #56]	; (800ff04 <__ieee754_atan2+0x14c>)
 800fecc:	e78f      	b.n	800fdee <__ieee754_atan2+0x36>
 800fece:	4806      	ldr	r0, [pc, #24]	; (800fee8 <__ieee754_atan2+0x130>)
 800fed0:	490e      	ldr	r1, [pc, #56]	; (800ff0c <__ieee754_atan2+0x154>)
 800fed2:	e78c      	b.n	800fdee <__ieee754_atan2+0x36>
 800fed4:	2000      	movs	r0, #0
 800fed6:	2100      	movs	r1, #0
 800fed8:	e789      	b.n	800fdee <__ieee754_atan2+0x36>
 800feda:	490b      	ldr	r1, [pc, #44]	; (800ff08 <__ieee754_atan2+0x150>)
 800fedc:	e787      	b.n	800fdee <__ieee754_atan2+0x36>
 800fede:	46c0      	nop			; (mov r8, r8)
 800fee0:	7ff00000 	.word	0x7ff00000
 800fee4:	c0100000 	.word	0xc0100000
 800fee8:	54442d18 	.word	0x54442d18
 800feec:	c00921fb 	.word	0xc00921fb
 800fef0:	bff921fb 	.word	0xbff921fb
 800fef4:	080158e8 	.word	0x080158e8
 800fef8:	08015900 	.word	0x08015900
 800fefc:	33145c07 	.word	0x33145c07
 800ff00:	3ca1a626 	.word	0x3ca1a626
 800ff04:	400921fb 	.word	0x400921fb
 800ff08:	3ff921fb 	.word	0x3ff921fb
 800ff0c:	3fe921fb 	.word	0x3fe921fb

0800ff10 <__ieee754_log>:
 800ff10:	2280      	movs	r2, #128	; 0x80
 800ff12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff14:	000b      	movs	r3, r1
 800ff16:	b08d      	sub	sp, #52	; 0x34
 800ff18:	0352      	lsls	r2, r2, #13
 800ff1a:	4291      	cmp	r1, r2
 800ff1c:	da22      	bge.n	800ff64 <__ieee754_log+0x54>
 800ff1e:	004a      	lsls	r2, r1, #1
 800ff20:	0852      	lsrs	r2, r2, #1
 800ff22:	4302      	orrs	r2, r0
 800ff24:	d107      	bne.n	800ff36 <__ieee754_log+0x26>
 800ff26:	2200      	movs	r2, #0
 800ff28:	2300      	movs	r3, #0
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	49b3      	ldr	r1, [pc, #716]	; (80101fc <__ieee754_log+0x2ec>)
 800ff2e:	f7f1 fcdd 	bl	80018ec <__aeabi_ddiv>
 800ff32:	b00d      	add	sp, #52	; 0x34
 800ff34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff36:	2900      	cmp	r1, #0
 800ff38:	da05      	bge.n	800ff46 <__ieee754_log+0x36>
 800ff3a:	0002      	movs	r2, r0
 800ff3c:	f7f2 fb48 	bl	80025d0 <__aeabi_dsub>
 800ff40:	2200      	movs	r2, #0
 800ff42:	2300      	movs	r3, #0
 800ff44:	e7f3      	b.n	800ff2e <__ieee754_log+0x1e>
 800ff46:	4bae      	ldr	r3, [pc, #696]	; (8010200 <__ieee754_log+0x2f0>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f7f2 f8d5 	bl	80020f8 <__aeabi_dmul>
 800ff4e:	2436      	movs	r4, #54	; 0x36
 800ff50:	000b      	movs	r3, r1
 800ff52:	4264      	negs	r4, r4
 800ff54:	4aab      	ldr	r2, [pc, #684]	; (8010204 <__ieee754_log+0x2f4>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	dd06      	ble.n	800ff68 <__ieee754_log+0x58>
 800ff5a:	0002      	movs	r2, r0
 800ff5c:	000b      	movs	r3, r1
 800ff5e:	f7f1 f95b 	bl	8001218 <__aeabi_dadd>
 800ff62:	e7e6      	b.n	800ff32 <__ieee754_log+0x22>
 800ff64:	2400      	movs	r4, #0
 800ff66:	e7f5      	b.n	800ff54 <__ieee754_log+0x44>
 800ff68:	4da7      	ldr	r5, [pc, #668]	; (8010208 <__ieee754_log+0x2f8>)
 800ff6a:	151a      	asrs	r2, r3, #20
 800ff6c:	1952      	adds	r2, r2, r5
 800ff6e:	1912      	adds	r2, r2, r4
 800ff70:	031b      	lsls	r3, r3, #12
 800ff72:	4ca6      	ldr	r4, [pc, #664]	; (801020c <__ieee754_log+0x2fc>)
 800ff74:	0b1b      	lsrs	r3, r3, #12
 800ff76:	9302      	str	r3, [sp, #8]
 800ff78:	191c      	adds	r4, r3, r4
 800ff7a:	2380      	movs	r3, #128	; 0x80
 800ff7c:	035b      	lsls	r3, r3, #13
 800ff7e:	4023      	ands	r3, r4
 800ff80:	4ca3      	ldr	r4, [pc, #652]	; (8010210 <__ieee754_log+0x300>)
 800ff82:	9d02      	ldr	r5, [sp, #8]
 800ff84:	405c      	eors	r4, r3
 800ff86:	151b      	asrs	r3, r3, #20
 800ff88:	189b      	adds	r3, r3, r2
 800ff8a:	4325      	orrs	r5, r4
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	0029      	movs	r1, r5
 800ff92:	4b9f      	ldr	r3, [pc, #636]	; (8010210 <__ieee754_log+0x300>)
 800ff94:	f7f2 fb1c 	bl	80025d0 <__aeabi_dsub>
 800ff98:	9b02      	ldr	r3, [sp, #8]
 800ff9a:	0006      	movs	r6, r0
 800ff9c:	3302      	adds	r3, #2
 800ff9e:	031b      	lsls	r3, r3, #12
 800ffa0:	000f      	movs	r7, r1
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	0b1b      	lsrs	r3, r3, #12
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	dc64      	bgt.n	8010074 <__ieee754_log+0x164>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f7f0 fa3a 	bl	8000424 <__aeabi_dcmpeq>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d019      	beq.n	800ffe8 <__ieee754_log+0xd8>
 800ffb4:	9b00      	ldr	r3, [sp, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d100      	bne.n	800ffbc <__ieee754_log+0xac>
 800ffba:	e11c      	b.n	80101f6 <__ieee754_log+0x2e6>
 800ffbc:	0018      	movs	r0, r3
 800ffbe:	f7f2 feed 	bl	8002d9c <__aeabi_i2d>
 800ffc2:	4a94      	ldr	r2, [pc, #592]	; (8010214 <__ieee754_log+0x304>)
 800ffc4:	4b94      	ldr	r3, [pc, #592]	; (8010218 <__ieee754_log+0x308>)
 800ffc6:	0004      	movs	r4, r0
 800ffc8:	000d      	movs	r5, r1
 800ffca:	f7f2 f895 	bl	80020f8 <__aeabi_dmul>
 800ffce:	4a93      	ldr	r2, [pc, #588]	; (801021c <__ieee754_log+0x30c>)
 800ffd0:	0006      	movs	r6, r0
 800ffd2:	000f      	movs	r7, r1
 800ffd4:	4b92      	ldr	r3, [pc, #584]	; (8010220 <__ieee754_log+0x310>)
 800ffd6:	0020      	movs	r0, r4
 800ffd8:	0029      	movs	r1, r5
 800ffda:	f7f2 f88d 	bl	80020f8 <__aeabi_dmul>
 800ffde:	0002      	movs	r2, r0
 800ffe0:	000b      	movs	r3, r1
 800ffe2:	0030      	movs	r0, r6
 800ffe4:	0039      	movs	r1, r7
 800ffe6:	e7ba      	b.n	800ff5e <__ieee754_log+0x4e>
 800ffe8:	4a8e      	ldr	r2, [pc, #568]	; (8010224 <__ieee754_log+0x314>)
 800ffea:	4b8f      	ldr	r3, [pc, #572]	; (8010228 <__ieee754_log+0x318>)
 800ffec:	0030      	movs	r0, r6
 800ffee:	0039      	movs	r1, r7
 800fff0:	f7f2 f882 	bl	80020f8 <__aeabi_dmul>
 800fff4:	0002      	movs	r2, r0
 800fff6:	000b      	movs	r3, r1
 800fff8:	2000      	movs	r0, #0
 800fffa:	498c      	ldr	r1, [pc, #560]	; (801022c <__ieee754_log+0x31c>)
 800fffc:	f7f2 fae8 	bl	80025d0 <__aeabi_dsub>
 8010000:	0032      	movs	r2, r6
 8010002:	0004      	movs	r4, r0
 8010004:	000d      	movs	r5, r1
 8010006:	003b      	movs	r3, r7
 8010008:	0030      	movs	r0, r6
 801000a:	0039      	movs	r1, r7
 801000c:	f7f2 f874 	bl	80020f8 <__aeabi_dmul>
 8010010:	000b      	movs	r3, r1
 8010012:	0002      	movs	r2, r0
 8010014:	0029      	movs	r1, r5
 8010016:	0020      	movs	r0, r4
 8010018:	f7f2 f86e 	bl	80020f8 <__aeabi_dmul>
 801001c:	9b00      	ldr	r3, [sp, #0]
 801001e:	9002      	str	r0, [sp, #8]
 8010020:	9103      	str	r1, [sp, #12]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <__ieee754_log+0x124>
 8010026:	0002      	movs	r2, r0
 8010028:	000b      	movs	r3, r1
 801002a:	0030      	movs	r0, r6
 801002c:	0039      	movs	r1, r7
 801002e:	f7f2 facf 	bl	80025d0 <__aeabi_dsub>
 8010032:	e77e      	b.n	800ff32 <__ieee754_log+0x22>
 8010034:	9800      	ldr	r0, [sp, #0]
 8010036:	f7f2 feb1 	bl	8002d9c <__aeabi_i2d>
 801003a:	4a76      	ldr	r2, [pc, #472]	; (8010214 <__ieee754_log+0x304>)
 801003c:	4b76      	ldr	r3, [pc, #472]	; (8010218 <__ieee754_log+0x308>)
 801003e:	0004      	movs	r4, r0
 8010040:	000d      	movs	r5, r1
 8010042:	f7f2 f859 	bl	80020f8 <__aeabi_dmul>
 8010046:	4a75      	ldr	r2, [pc, #468]	; (801021c <__ieee754_log+0x30c>)
 8010048:	9000      	str	r0, [sp, #0]
 801004a:	9101      	str	r1, [sp, #4]
 801004c:	4b74      	ldr	r3, [pc, #464]	; (8010220 <__ieee754_log+0x310>)
 801004e:	0020      	movs	r0, r4
 8010050:	0029      	movs	r1, r5
 8010052:	f7f2 f851 	bl	80020f8 <__aeabi_dmul>
 8010056:	0002      	movs	r2, r0
 8010058:	000b      	movs	r3, r1
 801005a:	9802      	ldr	r0, [sp, #8]
 801005c:	9903      	ldr	r1, [sp, #12]
 801005e:	f7f2 fab7 	bl	80025d0 <__aeabi_dsub>
 8010062:	0032      	movs	r2, r6
 8010064:	003b      	movs	r3, r7
 8010066:	f7f2 fab3 	bl	80025d0 <__aeabi_dsub>
 801006a:	0002      	movs	r2, r0
 801006c:	000b      	movs	r3, r1
 801006e:	9800      	ldr	r0, [sp, #0]
 8010070:	9901      	ldr	r1, [sp, #4]
 8010072:	e7dc      	b.n	801002e <__ieee754_log+0x11e>
 8010074:	2380      	movs	r3, #128	; 0x80
 8010076:	05db      	lsls	r3, r3, #23
 8010078:	f7f1 f8ce 	bl	8001218 <__aeabi_dadd>
 801007c:	0002      	movs	r2, r0
 801007e:	000b      	movs	r3, r1
 8010080:	0030      	movs	r0, r6
 8010082:	0039      	movs	r1, r7
 8010084:	f7f1 fc32 	bl	80018ec <__aeabi_ddiv>
 8010088:	9004      	str	r0, [sp, #16]
 801008a:	9105      	str	r1, [sp, #20]
 801008c:	9800      	ldr	r0, [sp, #0]
 801008e:	f7f2 fe85 	bl	8002d9c <__aeabi_i2d>
 8010092:	9a04      	ldr	r2, [sp, #16]
 8010094:	9b05      	ldr	r3, [sp, #20]
 8010096:	9006      	str	r0, [sp, #24]
 8010098:	9107      	str	r1, [sp, #28]
 801009a:	0010      	movs	r0, r2
 801009c:	0019      	movs	r1, r3
 801009e:	f7f2 f82b 	bl	80020f8 <__aeabi_dmul>
 80100a2:	4a63      	ldr	r2, [pc, #396]	; (8010230 <__ieee754_log+0x320>)
 80100a4:	9b02      	ldr	r3, [sp, #8]
 80100a6:	4694      	mov	ip, r2
 80100a8:	4463      	add	r3, ip
 80100aa:	0002      	movs	r2, r0
 80100ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80100ae:	000b      	movs	r3, r1
 80100b0:	9008      	str	r0, [sp, #32]
 80100b2:	9109      	str	r1, [sp, #36]	; 0x24
 80100b4:	f7f2 f820 	bl	80020f8 <__aeabi_dmul>
 80100b8:	0004      	movs	r4, r0
 80100ba:	000d      	movs	r5, r1
 80100bc:	4a5d      	ldr	r2, [pc, #372]	; (8010234 <__ieee754_log+0x324>)
 80100be:	4b5e      	ldr	r3, [pc, #376]	; (8010238 <__ieee754_log+0x328>)
 80100c0:	f7f2 f81a 	bl	80020f8 <__aeabi_dmul>
 80100c4:	4a5d      	ldr	r2, [pc, #372]	; (801023c <__ieee754_log+0x32c>)
 80100c6:	4b5e      	ldr	r3, [pc, #376]	; (8010240 <__ieee754_log+0x330>)
 80100c8:	f7f1 f8a6 	bl	8001218 <__aeabi_dadd>
 80100cc:	0022      	movs	r2, r4
 80100ce:	002b      	movs	r3, r5
 80100d0:	f7f2 f812 	bl	80020f8 <__aeabi_dmul>
 80100d4:	4a5b      	ldr	r2, [pc, #364]	; (8010244 <__ieee754_log+0x334>)
 80100d6:	4b5c      	ldr	r3, [pc, #368]	; (8010248 <__ieee754_log+0x338>)
 80100d8:	f7f1 f89e 	bl	8001218 <__aeabi_dadd>
 80100dc:	0022      	movs	r2, r4
 80100de:	002b      	movs	r3, r5
 80100e0:	f7f2 f80a 	bl	80020f8 <__aeabi_dmul>
 80100e4:	4a59      	ldr	r2, [pc, #356]	; (801024c <__ieee754_log+0x33c>)
 80100e6:	4b5a      	ldr	r3, [pc, #360]	; (8010250 <__ieee754_log+0x340>)
 80100e8:	f7f1 f896 	bl	8001218 <__aeabi_dadd>
 80100ec:	9a08      	ldr	r2, [sp, #32]
 80100ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100f0:	f7f2 f802 	bl	80020f8 <__aeabi_dmul>
 80100f4:	4a57      	ldr	r2, [pc, #348]	; (8010254 <__ieee754_log+0x344>)
 80100f6:	9008      	str	r0, [sp, #32]
 80100f8:	9109      	str	r1, [sp, #36]	; 0x24
 80100fa:	4b57      	ldr	r3, [pc, #348]	; (8010258 <__ieee754_log+0x348>)
 80100fc:	0020      	movs	r0, r4
 80100fe:	0029      	movs	r1, r5
 8010100:	f7f1 fffa 	bl	80020f8 <__aeabi_dmul>
 8010104:	4a55      	ldr	r2, [pc, #340]	; (801025c <__ieee754_log+0x34c>)
 8010106:	4b56      	ldr	r3, [pc, #344]	; (8010260 <__ieee754_log+0x350>)
 8010108:	f7f1 f886 	bl	8001218 <__aeabi_dadd>
 801010c:	0022      	movs	r2, r4
 801010e:	002b      	movs	r3, r5
 8010110:	f7f1 fff2 	bl	80020f8 <__aeabi_dmul>
 8010114:	4a53      	ldr	r2, [pc, #332]	; (8010264 <__ieee754_log+0x354>)
 8010116:	4b54      	ldr	r3, [pc, #336]	; (8010268 <__ieee754_log+0x358>)
 8010118:	f7f1 f87e 	bl	8001218 <__aeabi_dadd>
 801011c:	0022      	movs	r2, r4
 801011e:	002b      	movs	r3, r5
 8010120:	f7f1 ffea 	bl	80020f8 <__aeabi_dmul>
 8010124:	0002      	movs	r2, r0
 8010126:	000b      	movs	r3, r1
 8010128:	9808      	ldr	r0, [sp, #32]
 801012a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801012c:	f7f1 f874 	bl	8001218 <__aeabi_dadd>
 8010130:	9a02      	ldr	r2, [sp, #8]
 8010132:	4b4e      	ldr	r3, [pc, #312]	; (801026c <__ieee754_log+0x35c>)
 8010134:	0004      	movs	r4, r0
 8010136:	1a9b      	subs	r3, r3, r2
 8010138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801013a:	000d      	movs	r5, r1
 801013c:	4313      	orrs	r3, r2
 801013e:	2b00      	cmp	r3, #0
 8010140:	dd34      	ble.n	80101ac <__ieee754_log+0x29c>
 8010142:	2200      	movs	r2, #0
 8010144:	4b39      	ldr	r3, [pc, #228]	; (801022c <__ieee754_log+0x31c>)
 8010146:	0030      	movs	r0, r6
 8010148:	0039      	movs	r1, r7
 801014a:	f7f1 ffd5 	bl	80020f8 <__aeabi_dmul>
 801014e:	0032      	movs	r2, r6
 8010150:	003b      	movs	r3, r7
 8010152:	f7f1 ffd1 	bl	80020f8 <__aeabi_dmul>
 8010156:	0002      	movs	r2, r0
 8010158:	000b      	movs	r3, r1
 801015a:	9002      	str	r0, [sp, #8]
 801015c:	9103      	str	r1, [sp, #12]
 801015e:	0020      	movs	r0, r4
 8010160:	0029      	movs	r1, r5
 8010162:	f7f1 f859 	bl	8001218 <__aeabi_dadd>
 8010166:	9a04      	ldr	r2, [sp, #16]
 8010168:	9b05      	ldr	r3, [sp, #20]
 801016a:	f7f1 ffc5 	bl	80020f8 <__aeabi_dmul>
 801016e:	9b00      	ldr	r3, [sp, #0]
 8010170:	0004      	movs	r4, r0
 8010172:	000d      	movs	r5, r1
 8010174:	2b00      	cmp	r3, #0
 8010176:	d106      	bne.n	8010186 <__ieee754_log+0x276>
 8010178:	0002      	movs	r2, r0
 801017a:	000b      	movs	r3, r1
 801017c:	9802      	ldr	r0, [sp, #8]
 801017e:	9903      	ldr	r1, [sp, #12]
 8010180:	f7f2 fa26 	bl	80025d0 <__aeabi_dsub>
 8010184:	e74f      	b.n	8010026 <__ieee754_log+0x116>
 8010186:	4a23      	ldr	r2, [pc, #140]	; (8010214 <__ieee754_log+0x304>)
 8010188:	4b23      	ldr	r3, [pc, #140]	; (8010218 <__ieee754_log+0x308>)
 801018a:	9806      	ldr	r0, [sp, #24]
 801018c:	9907      	ldr	r1, [sp, #28]
 801018e:	f7f1 ffb3 	bl	80020f8 <__aeabi_dmul>
 8010192:	4a22      	ldr	r2, [pc, #136]	; (801021c <__ieee754_log+0x30c>)
 8010194:	9000      	str	r0, [sp, #0]
 8010196:	9101      	str	r1, [sp, #4]
 8010198:	9806      	ldr	r0, [sp, #24]
 801019a:	9907      	ldr	r1, [sp, #28]
 801019c:	4b20      	ldr	r3, [pc, #128]	; (8010220 <__ieee754_log+0x310>)
 801019e:	f7f1 ffab 	bl	80020f8 <__aeabi_dmul>
 80101a2:	0022      	movs	r2, r4
 80101a4:	002b      	movs	r3, r5
 80101a6:	f7f1 f837 	bl	8001218 <__aeabi_dadd>
 80101aa:	e754      	b.n	8010056 <__ieee754_log+0x146>
 80101ac:	0002      	movs	r2, r0
 80101ae:	000b      	movs	r3, r1
 80101b0:	0030      	movs	r0, r6
 80101b2:	0039      	movs	r1, r7
 80101b4:	f7f2 fa0c 	bl	80025d0 <__aeabi_dsub>
 80101b8:	9a04      	ldr	r2, [sp, #16]
 80101ba:	9b05      	ldr	r3, [sp, #20]
 80101bc:	f7f1 ff9c 	bl	80020f8 <__aeabi_dmul>
 80101c0:	9b00      	ldr	r3, [sp, #0]
 80101c2:	0004      	movs	r4, r0
 80101c4:	000d      	movs	r5, r1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d102      	bne.n	80101d0 <__ieee754_log+0x2c0>
 80101ca:	0002      	movs	r2, r0
 80101cc:	000b      	movs	r3, r1
 80101ce:	e72c      	b.n	801002a <__ieee754_log+0x11a>
 80101d0:	4a10      	ldr	r2, [pc, #64]	; (8010214 <__ieee754_log+0x304>)
 80101d2:	4b11      	ldr	r3, [pc, #68]	; (8010218 <__ieee754_log+0x308>)
 80101d4:	9806      	ldr	r0, [sp, #24]
 80101d6:	9907      	ldr	r1, [sp, #28]
 80101d8:	f7f1 ff8e 	bl	80020f8 <__aeabi_dmul>
 80101dc:	4a0f      	ldr	r2, [pc, #60]	; (801021c <__ieee754_log+0x30c>)
 80101de:	9000      	str	r0, [sp, #0]
 80101e0:	9101      	str	r1, [sp, #4]
 80101e2:	9806      	ldr	r0, [sp, #24]
 80101e4:	9907      	ldr	r1, [sp, #28]
 80101e6:	4b0e      	ldr	r3, [pc, #56]	; (8010220 <__ieee754_log+0x310>)
 80101e8:	f7f1 ff86 	bl	80020f8 <__aeabi_dmul>
 80101ec:	0002      	movs	r2, r0
 80101ee:	000b      	movs	r3, r1
 80101f0:	0020      	movs	r0, r4
 80101f2:	0029      	movs	r1, r5
 80101f4:	e733      	b.n	801005e <__ieee754_log+0x14e>
 80101f6:	2000      	movs	r0, #0
 80101f8:	2100      	movs	r1, #0
 80101fa:	e69a      	b.n	800ff32 <__ieee754_log+0x22>
 80101fc:	c3500000 	.word	0xc3500000
 8010200:	43500000 	.word	0x43500000
 8010204:	7fefffff 	.word	0x7fefffff
 8010208:	fffffc01 	.word	0xfffffc01
 801020c:	00095f64 	.word	0x00095f64
 8010210:	3ff00000 	.word	0x3ff00000
 8010214:	fee00000 	.word	0xfee00000
 8010218:	3fe62e42 	.word	0x3fe62e42
 801021c:	35793c76 	.word	0x35793c76
 8010220:	3dea39ef 	.word	0x3dea39ef
 8010224:	55555555 	.word	0x55555555
 8010228:	3fd55555 	.word	0x3fd55555
 801022c:	3fe00000 	.word	0x3fe00000
 8010230:	fff9eb86 	.word	0xfff9eb86
 8010234:	df3e5244 	.word	0xdf3e5244
 8010238:	3fc2f112 	.word	0x3fc2f112
 801023c:	96cb03de 	.word	0x96cb03de
 8010240:	3fc74664 	.word	0x3fc74664
 8010244:	94229359 	.word	0x94229359
 8010248:	3fd24924 	.word	0x3fd24924
 801024c:	55555593 	.word	0x55555593
 8010250:	3fe55555 	.word	0x3fe55555
 8010254:	d078c69f 	.word	0xd078c69f
 8010258:	3fc39a09 	.word	0x3fc39a09
 801025c:	1d8e78af 	.word	0x1d8e78af
 8010260:	3fcc71c5 	.word	0x3fcc71c5
 8010264:	9997fa04 	.word	0x9997fa04
 8010268:	3fd99999 	.word	0x3fd99999
 801026c:	0006b851 	.word	0x0006b851

08010270 <__ieee754_rem_pio2>:
 8010270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010272:	004b      	lsls	r3, r1, #1
 8010274:	b091      	sub	sp, #68	; 0x44
 8010276:	085b      	lsrs	r3, r3, #1
 8010278:	9302      	str	r3, [sp, #8]
 801027a:	0017      	movs	r7, r2
 801027c:	4bb6      	ldr	r3, [pc, #728]	; (8010558 <__ieee754_rem_pio2+0x2e8>)
 801027e:	9a02      	ldr	r2, [sp, #8]
 8010280:	0004      	movs	r4, r0
 8010282:	000d      	movs	r5, r1
 8010284:	9109      	str	r1, [sp, #36]	; 0x24
 8010286:	429a      	cmp	r2, r3
 8010288:	dc09      	bgt.n	801029e <__ieee754_rem_pio2+0x2e>
 801028a:	0002      	movs	r2, r0
 801028c:	000b      	movs	r3, r1
 801028e:	603a      	str	r2, [r7, #0]
 8010290:	607b      	str	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	2300      	movs	r3, #0
 8010296:	60ba      	str	r2, [r7, #8]
 8010298:	60fb      	str	r3, [r7, #12]
 801029a:	2600      	movs	r6, #0
 801029c:	e025      	b.n	80102ea <__ieee754_rem_pio2+0x7a>
 801029e:	4baf      	ldr	r3, [pc, #700]	; (801055c <__ieee754_rem_pio2+0x2ec>)
 80102a0:	9a02      	ldr	r2, [sp, #8]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	dd00      	ble.n	80102a8 <__ieee754_rem_pio2+0x38>
 80102a6:	e06e      	b.n	8010386 <__ieee754_rem_pio2+0x116>
 80102a8:	4ead      	ldr	r6, [pc, #692]	; (8010560 <__ieee754_rem_pio2+0x2f0>)
 80102aa:	4aae      	ldr	r2, [pc, #696]	; (8010564 <__ieee754_rem_pio2+0x2f4>)
 80102ac:	2d00      	cmp	r5, #0
 80102ae:	dd35      	ble.n	801031c <__ieee754_rem_pio2+0xac>
 80102b0:	0020      	movs	r0, r4
 80102b2:	0029      	movs	r1, r5
 80102b4:	4baa      	ldr	r3, [pc, #680]	; (8010560 <__ieee754_rem_pio2+0x2f0>)
 80102b6:	f7f2 f98b 	bl	80025d0 <__aeabi_dsub>
 80102ba:	9b02      	ldr	r3, [sp, #8]
 80102bc:	0004      	movs	r4, r0
 80102be:	000d      	movs	r5, r1
 80102c0:	42b3      	cmp	r3, r6
 80102c2:	d015      	beq.n	80102f0 <__ieee754_rem_pio2+0x80>
 80102c4:	4aa8      	ldr	r2, [pc, #672]	; (8010568 <__ieee754_rem_pio2+0x2f8>)
 80102c6:	4ba9      	ldr	r3, [pc, #676]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 80102c8:	f7f2 f982 	bl	80025d0 <__aeabi_dsub>
 80102cc:	0002      	movs	r2, r0
 80102ce:	000b      	movs	r3, r1
 80102d0:	0020      	movs	r0, r4
 80102d2:	603a      	str	r2, [r7, #0]
 80102d4:	607b      	str	r3, [r7, #4]
 80102d6:	0029      	movs	r1, r5
 80102d8:	f7f2 f97a 	bl	80025d0 <__aeabi_dsub>
 80102dc:	4aa2      	ldr	r2, [pc, #648]	; (8010568 <__ieee754_rem_pio2+0x2f8>)
 80102de:	4ba3      	ldr	r3, [pc, #652]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 80102e0:	f7f2 f976 	bl	80025d0 <__aeabi_dsub>
 80102e4:	2601      	movs	r6, #1
 80102e6:	60b8      	str	r0, [r7, #8]
 80102e8:	60f9      	str	r1, [r7, #12]
 80102ea:	0030      	movs	r0, r6
 80102ec:	b011      	add	sp, #68	; 0x44
 80102ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102f0:	22d3      	movs	r2, #211	; 0xd3
 80102f2:	4b9e      	ldr	r3, [pc, #632]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 80102f4:	0552      	lsls	r2, r2, #21
 80102f6:	f7f2 f96b 	bl	80025d0 <__aeabi_dsub>
 80102fa:	4a9d      	ldr	r2, [pc, #628]	; (8010570 <__ieee754_rem_pio2+0x300>)
 80102fc:	4b9d      	ldr	r3, [pc, #628]	; (8010574 <__ieee754_rem_pio2+0x304>)
 80102fe:	0004      	movs	r4, r0
 8010300:	000d      	movs	r5, r1
 8010302:	f7f2 f965 	bl	80025d0 <__aeabi_dsub>
 8010306:	0002      	movs	r2, r0
 8010308:	000b      	movs	r3, r1
 801030a:	0020      	movs	r0, r4
 801030c:	603a      	str	r2, [r7, #0]
 801030e:	607b      	str	r3, [r7, #4]
 8010310:	0029      	movs	r1, r5
 8010312:	f7f2 f95d 	bl	80025d0 <__aeabi_dsub>
 8010316:	4a96      	ldr	r2, [pc, #600]	; (8010570 <__ieee754_rem_pio2+0x300>)
 8010318:	4b96      	ldr	r3, [pc, #600]	; (8010574 <__ieee754_rem_pio2+0x304>)
 801031a:	e7e1      	b.n	80102e0 <__ieee754_rem_pio2+0x70>
 801031c:	0020      	movs	r0, r4
 801031e:	0029      	movs	r1, r5
 8010320:	4b8f      	ldr	r3, [pc, #572]	; (8010560 <__ieee754_rem_pio2+0x2f0>)
 8010322:	f7f0 ff79 	bl	8001218 <__aeabi_dadd>
 8010326:	9b02      	ldr	r3, [sp, #8]
 8010328:	0004      	movs	r4, r0
 801032a:	000d      	movs	r5, r1
 801032c:	42b3      	cmp	r3, r6
 801032e:	d014      	beq.n	801035a <__ieee754_rem_pio2+0xea>
 8010330:	4a8d      	ldr	r2, [pc, #564]	; (8010568 <__ieee754_rem_pio2+0x2f8>)
 8010332:	4b8e      	ldr	r3, [pc, #568]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 8010334:	f7f0 ff70 	bl	8001218 <__aeabi_dadd>
 8010338:	0002      	movs	r2, r0
 801033a:	000b      	movs	r3, r1
 801033c:	0020      	movs	r0, r4
 801033e:	603a      	str	r2, [r7, #0]
 8010340:	607b      	str	r3, [r7, #4]
 8010342:	0029      	movs	r1, r5
 8010344:	f7f2 f944 	bl	80025d0 <__aeabi_dsub>
 8010348:	4a87      	ldr	r2, [pc, #540]	; (8010568 <__ieee754_rem_pio2+0x2f8>)
 801034a:	4b88      	ldr	r3, [pc, #544]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 801034c:	f7f0 ff64 	bl	8001218 <__aeabi_dadd>
 8010350:	2601      	movs	r6, #1
 8010352:	60b8      	str	r0, [r7, #8]
 8010354:	60f9      	str	r1, [r7, #12]
 8010356:	4276      	negs	r6, r6
 8010358:	e7c7      	b.n	80102ea <__ieee754_rem_pio2+0x7a>
 801035a:	22d3      	movs	r2, #211	; 0xd3
 801035c:	4b83      	ldr	r3, [pc, #524]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 801035e:	0552      	lsls	r2, r2, #21
 8010360:	f7f0 ff5a 	bl	8001218 <__aeabi_dadd>
 8010364:	4a82      	ldr	r2, [pc, #520]	; (8010570 <__ieee754_rem_pio2+0x300>)
 8010366:	4b83      	ldr	r3, [pc, #524]	; (8010574 <__ieee754_rem_pio2+0x304>)
 8010368:	0004      	movs	r4, r0
 801036a:	000d      	movs	r5, r1
 801036c:	f7f0 ff54 	bl	8001218 <__aeabi_dadd>
 8010370:	0002      	movs	r2, r0
 8010372:	000b      	movs	r3, r1
 8010374:	0020      	movs	r0, r4
 8010376:	603a      	str	r2, [r7, #0]
 8010378:	607b      	str	r3, [r7, #4]
 801037a:	0029      	movs	r1, r5
 801037c:	f7f2 f928 	bl	80025d0 <__aeabi_dsub>
 8010380:	4a7b      	ldr	r2, [pc, #492]	; (8010570 <__ieee754_rem_pio2+0x300>)
 8010382:	4b7c      	ldr	r3, [pc, #496]	; (8010574 <__ieee754_rem_pio2+0x304>)
 8010384:	e7e2      	b.n	801034c <__ieee754_rem_pio2+0xdc>
 8010386:	4b7c      	ldr	r3, [pc, #496]	; (8010578 <__ieee754_rem_pio2+0x308>)
 8010388:	9a02      	ldr	r2, [sp, #8]
 801038a:	429a      	cmp	r2, r3
 801038c:	dd00      	ble.n	8010390 <__ieee754_rem_pio2+0x120>
 801038e:	e0d3      	b.n	8010538 <__ieee754_rem_pio2+0x2c8>
 8010390:	0020      	movs	r0, r4
 8010392:	0029      	movs	r1, r5
 8010394:	f000 ffba 	bl	801130c <fabs>
 8010398:	4a78      	ldr	r2, [pc, #480]	; (801057c <__ieee754_rem_pio2+0x30c>)
 801039a:	4b79      	ldr	r3, [pc, #484]	; (8010580 <__ieee754_rem_pio2+0x310>)
 801039c:	0004      	movs	r4, r0
 801039e:	000d      	movs	r5, r1
 80103a0:	f7f1 feaa 	bl	80020f8 <__aeabi_dmul>
 80103a4:	2200      	movs	r2, #0
 80103a6:	4b77      	ldr	r3, [pc, #476]	; (8010584 <__ieee754_rem_pio2+0x314>)
 80103a8:	f7f0 ff36 	bl	8001218 <__aeabi_dadd>
 80103ac:	f7f2 fcc0 	bl	8002d30 <__aeabi_d2iz>
 80103b0:	0006      	movs	r6, r0
 80103b2:	f7f2 fcf3 	bl	8002d9c <__aeabi_i2d>
 80103b6:	4a6b      	ldr	r2, [pc, #428]	; (8010564 <__ieee754_rem_pio2+0x2f4>)
 80103b8:	4b69      	ldr	r3, [pc, #420]	; (8010560 <__ieee754_rem_pio2+0x2f0>)
 80103ba:	9006      	str	r0, [sp, #24]
 80103bc:	9107      	str	r1, [sp, #28]
 80103be:	f7f1 fe9b 	bl	80020f8 <__aeabi_dmul>
 80103c2:	0002      	movs	r2, r0
 80103c4:	000b      	movs	r3, r1
 80103c6:	0020      	movs	r0, r4
 80103c8:	0029      	movs	r1, r5
 80103ca:	f7f2 f901 	bl	80025d0 <__aeabi_dsub>
 80103ce:	4a66      	ldr	r2, [pc, #408]	; (8010568 <__ieee754_rem_pio2+0x2f8>)
 80103d0:	9004      	str	r0, [sp, #16]
 80103d2:	9105      	str	r1, [sp, #20]
 80103d4:	9806      	ldr	r0, [sp, #24]
 80103d6:	9907      	ldr	r1, [sp, #28]
 80103d8:	4b64      	ldr	r3, [pc, #400]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 80103da:	f7f1 fe8d 	bl	80020f8 <__aeabi_dmul>
 80103de:	0004      	movs	r4, r0
 80103e0:	000d      	movs	r5, r1
 80103e2:	2e1f      	cmp	r6, #31
 80103e4:	dc0f      	bgt.n	8010406 <__ieee754_rem_pio2+0x196>
 80103e6:	4a68      	ldr	r2, [pc, #416]	; (8010588 <__ieee754_rem_pio2+0x318>)
 80103e8:	1e73      	subs	r3, r6, #1
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	589b      	ldr	r3, [r3, r2]
 80103ee:	9a02      	ldr	r2, [sp, #8]
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d008      	beq.n	8010406 <__ieee754_rem_pio2+0x196>
 80103f4:	9804      	ldr	r0, [sp, #16]
 80103f6:	9905      	ldr	r1, [sp, #20]
 80103f8:	0022      	movs	r2, r4
 80103fa:	002b      	movs	r3, r5
 80103fc:	f7f2 f8e8 	bl	80025d0 <__aeabi_dsub>
 8010400:	6038      	str	r0, [r7, #0]
 8010402:	6079      	str	r1, [r7, #4]
 8010404:	e012      	b.n	801042c <__ieee754_rem_pio2+0x1bc>
 8010406:	0022      	movs	r2, r4
 8010408:	9804      	ldr	r0, [sp, #16]
 801040a:	9905      	ldr	r1, [sp, #20]
 801040c:	002b      	movs	r3, r5
 801040e:	f7f2 f8df 	bl	80025d0 <__aeabi_dsub>
 8010412:	9b02      	ldr	r3, [sp, #8]
 8010414:	151b      	asrs	r3, r3, #20
 8010416:	9308      	str	r3, [sp, #32]
 8010418:	9a08      	ldr	r2, [sp, #32]
 801041a:	004b      	lsls	r3, r1, #1
 801041c:	0d5b      	lsrs	r3, r3, #21
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	2b10      	cmp	r3, #16
 8010422:	dc21      	bgt.n	8010468 <__ieee754_rem_pio2+0x1f8>
 8010424:	0002      	movs	r2, r0
 8010426:	000b      	movs	r3, r1
 8010428:	603a      	str	r2, [r7, #0]
 801042a:	607b      	str	r3, [r7, #4]
 801042c:	9804      	ldr	r0, [sp, #16]
 801042e:	9905      	ldr	r1, [sp, #20]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	9302      	str	r3, [sp, #8]
 8010436:	9b02      	ldr	r3, [sp, #8]
 8010438:	f7f2 f8ca 	bl	80025d0 <__aeabi_dsub>
 801043c:	0022      	movs	r2, r4
 801043e:	002b      	movs	r3, r5
 8010440:	f7f2 f8c6 	bl	80025d0 <__aeabi_dsub>
 8010444:	000b      	movs	r3, r1
 8010446:	0002      	movs	r2, r0
 8010448:	60ba      	str	r2, [r7, #8]
 801044a:	60fb      	str	r3, [r7, #12]
 801044c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801044e:	2b00      	cmp	r3, #0
 8010450:	db00      	blt.n	8010454 <__ieee754_rem_pio2+0x1e4>
 8010452:	e74a      	b.n	80102ea <__ieee754_rem_pio2+0x7a>
 8010454:	2280      	movs	r2, #128	; 0x80
 8010456:	0612      	lsls	r2, r2, #24
 8010458:	4694      	mov	ip, r2
 801045a:	9b02      	ldr	r3, [sp, #8]
 801045c:	1889      	adds	r1, r1, r2
 801045e:	4463      	add	r3, ip
 8010460:	607b      	str	r3, [r7, #4]
 8010462:	60b8      	str	r0, [r7, #8]
 8010464:	60f9      	str	r1, [r7, #12]
 8010466:	e776      	b.n	8010356 <__ieee754_rem_pio2+0xe6>
 8010468:	22d3      	movs	r2, #211	; 0xd3
 801046a:	9806      	ldr	r0, [sp, #24]
 801046c:	9907      	ldr	r1, [sp, #28]
 801046e:	4b3f      	ldr	r3, [pc, #252]	; (801056c <__ieee754_rem_pio2+0x2fc>)
 8010470:	0552      	lsls	r2, r2, #21
 8010472:	f7f1 fe41 	bl	80020f8 <__aeabi_dmul>
 8010476:	0004      	movs	r4, r0
 8010478:	000d      	movs	r5, r1
 801047a:	0002      	movs	r2, r0
 801047c:	000b      	movs	r3, r1
 801047e:	9804      	ldr	r0, [sp, #16]
 8010480:	9905      	ldr	r1, [sp, #20]
 8010482:	f7f2 f8a5 	bl	80025d0 <__aeabi_dsub>
 8010486:	0002      	movs	r2, r0
 8010488:	000b      	movs	r3, r1
 801048a:	9002      	str	r0, [sp, #8]
 801048c:	9103      	str	r1, [sp, #12]
 801048e:	9804      	ldr	r0, [sp, #16]
 8010490:	9905      	ldr	r1, [sp, #20]
 8010492:	f7f2 f89d 	bl	80025d0 <__aeabi_dsub>
 8010496:	0022      	movs	r2, r4
 8010498:	002b      	movs	r3, r5
 801049a:	f7f2 f899 	bl	80025d0 <__aeabi_dsub>
 801049e:	0004      	movs	r4, r0
 80104a0:	000d      	movs	r5, r1
 80104a2:	9806      	ldr	r0, [sp, #24]
 80104a4:	9907      	ldr	r1, [sp, #28]
 80104a6:	4a32      	ldr	r2, [pc, #200]	; (8010570 <__ieee754_rem_pio2+0x300>)
 80104a8:	4b32      	ldr	r3, [pc, #200]	; (8010574 <__ieee754_rem_pio2+0x304>)
 80104aa:	f7f1 fe25 	bl	80020f8 <__aeabi_dmul>
 80104ae:	0022      	movs	r2, r4
 80104b0:	002b      	movs	r3, r5
 80104b2:	f7f2 f88d 	bl	80025d0 <__aeabi_dsub>
 80104b6:	0002      	movs	r2, r0
 80104b8:	000b      	movs	r3, r1
 80104ba:	0004      	movs	r4, r0
 80104bc:	000d      	movs	r5, r1
 80104be:	9802      	ldr	r0, [sp, #8]
 80104c0:	9903      	ldr	r1, [sp, #12]
 80104c2:	f7f2 f885 	bl	80025d0 <__aeabi_dsub>
 80104c6:	9a08      	ldr	r2, [sp, #32]
 80104c8:	004b      	lsls	r3, r1, #1
 80104ca:	0d5b      	lsrs	r3, r3, #21
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	2b31      	cmp	r3, #49	; 0x31
 80104d0:	dc08      	bgt.n	80104e4 <__ieee754_rem_pio2+0x274>
 80104d2:	0002      	movs	r2, r0
 80104d4:	000b      	movs	r3, r1
 80104d6:	603a      	str	r2, [r7, #0]
 80104d8:	607b      	str	r3, [r7, #4]
 80104da:	9a02      	ldr	r2, [sp, #8]
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	9204      	str	r2, [sp, #16]
 80104e0:	9305      	str	r3, [sp, #20]
 80104e2:	e7a3      	b.n	801042c <__ieee754_rem_pio2+0x1bc>
 80104e4:	22b8      	movs	r2, #184	; 0xb8
 80104e6:	9806      	ldr	r0, [sp, #24]
 80104e8:	9907      	ldr	r1, [sp, #28]
 80104ea:	4b22      	ldr	r3, [pc, #136]	; (8010574 <__ieee754_rem_pio2+0x304>)
 80104ec:	0592      	lsls	r2, r2, #22
 80104ee:	f7f1 fe03 	bl	80020f8 <__aeabi_dmul>
 80104f2:	0004      	movs	r4, r0
 80104f4:	000d      	movs	r5, r1
 80104f6:	0002      	movs	r2, r0
 80104f8:	000b      	movs	r3, r1
 80104fa:	9802      	ldr	r0, [sp, #8]
 80104fc:	9903      	ldr	r1, [sp, #12]
 80104fe:	f7f2 f867 	bl	80025d0 <__aeabi_dsub>
 8010502:	0002      	movs	r2, r0
 8010504:	000b      	movs	r3, r1
 8010506:	9004      	str	r0, [sp, #16]
 8010508:	9105      	str	r1, [sp, #20]
 801050a:	9802      	ldr	r0, [sp, #8]
 801050c:	9903      	ldr	r1, [sp, #12]
 801050e:	f7f2 f85f 	bl	80025d0 <__aeabi_dsub>
 8010512:	0022      	movs	r2, r4
 8010514:	002b      	movs	r3, r5
 8010516:	f7f2 f85b 	bl	80025d0 <__aeabi_dsub>
 801051a:	0004      	movs	r4, r0
 801051c:	000d      	movs	r5, r1
 801051e:	9806      	ldr	r0, [sp, #24]
 8010520:	9907      	ldr	r1, [sp, #28]
 8010522:	4a1a      	ldr	r2, [pc, #104]	; (801058c <__ieee754_rem_pio2+0x31c>)
 8010524:	4b1a      	ldr	r3, [pc, #104]	; (8010590 <__ieee754_rem_pio2+0x320>)
 8010526:	f7f1 fde7 	bl	80020f8 <__aeabi_dmul>
 801052a:	0022      	movs	r2, r4
 801052c:	002b      	movs	r3, r5
 801052e:	f7f2 f84f 	bl	80025d0 <__aeabi_dsub>
 8010532:	0004      	movs	r4, r0
 8010534:	000d      	movs	r5, r1
 8010536:	e75d      	b.n	80103f4 <__ieee754_rem_pio2+0x184>
 8010538:	4b16      	ldr	r3, [pc, #88]	; (8010594 <__ieee754_rem_pio2+0x324>)
 801053a:	9a02      	ldr	r2, [sp, #8]
 801053c:	429a      	cmp	r2, r3
 801053e:	dd2b      	ble.n	8010598 <__ieee754_rem_pio2+0x328>
 8010540:	0022      	movs	r2, r4
 8010542:	002b      	movs	r3, r5
 8010544:	0020      	movs	r0, r4
 8010546:	0029      	movs	r1, r5
 8010548:	f7f2 f842 	bl	80025d0 <__aeabi_dsub>
 801054c:	60b8      	str	r0, [r7, #8]
 801054e:	60f9      	str	r1, [r7, #12]
 8010550:	6038      	str	r0, [r7, #0]
 8010552:	6079      	str	r1, [r7, #4]
 8010554:	e6a1      	b.n	801029a <__ieee754_rem_pio2+0x2a>
 8010556:	46c0      	nop			; (mov r8, r8)
 8010558:	3fe921fb 	.word	0x3fe921fb
 801055c:	4002d97b 	.word	0x4002d97b
 8010560:	3ff921fb 	.word	0x3ff921fb
 8010564:	54400000 	.word	0x54400000
 8010568:	1a626331 	.word	0x1a626331
 801056c:	3dd0b461 	.word	0x3dd0b461
 8010570:	2e037073 	.word	0x2e037073
 8010574:	3ba3198a 	.word	0x3ba3198a
 8010578:	413921fb 	.word	0x413921fb
 801057c:	6dc9c883 	.word	0x6dc9c883
 8010580:	3fe45f30 	.word	0x3fe45f30
 8010584:	3fe00000 	.word	0x3fe00000
 8010588:	08015918 	.word	0x08015918
 801058c:	252049c1 	.word	0x252049c1
 8010590:	397b839a 	.word	0x397b839a
 8010594:	7fefffff 	.word	0x7fefffff
 8010598:	9a02      	ldr	r2, [sp, #8]
 801059a:	0020      	movs	r0, r4
 801059c:	1516      	asrs	r6, r2, #20
 801059e:	4a27      	ldr	r2, [pc, #156]	; (801063c <__ieee754_rem_pio2+0x3cc>)
 80105a0:	18b6      	adds	r6, r6, r2
 80105a2:	9a02      	ldr	r2, [sp, #8]
 80105a4:	0533      	lsls	r3, r6, #20
 80105a6:	1ad5      	subs	r5, r2, r3
 80105a8:	0029      	movs	r1, r5
 80105aa:	f7f2 fbc1 	bl	8002d30 <__aeabi_d2iz>
 80105ae:	f7f2 fbf5 	bl	8002d9c <__aeabi_i2d>
 80105b2:	0002      	movs	r2, r0
 80105b4:	000b      	movs	r3, r1
 80105b6:	0020      	movs	r0, r4
 80105b8:	0029      	movs	r1, r5
 80105ba:	920a      	str	r2, [sp, #40]	; 0x28
 80105bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80105be:	f7f2 f807 	bl	80025d0 <__aeabi_dsub>
 80105c2:	2200      	movs	r2, #0
 80105c4:	4b1e      	ldr	r3, [pc, #120]	; (8010640 <__ieee754_rem_pio2+0x3d0>)
 80105c6:	f7f1 fd97 	bl	80020f8 <__aeabi_dmul>
 80105ca:	000d      	movs	r5, r1
 80105cc:	0004      	movs	r4, r0
 80105ce:	f7f2 fbaf 	bl	8002d30 <__aeabi_d2iz>
 80105d2:	f7f2 fbe3 	bl	8002d9c <__aeabi_i2d>
 80105d6:	0002      	movs	r2, r0
 80105d8:	000b      	movs	r3, r1
 80105da:	0020      	movs	r0, r4
 80105dc:	0029      	movs	r1, r5
 80105de:	920c      	str	r2, [sp, #48]	; 0x30
 80105e0:	930d      	str	r3, [sp, #52]	; 0x34
 80105e2:	f7f1 fff5 	bl	80025d0 <__aeabi_dsub>
 80105e6:	2200      	movs	r2, #0
 80105e8:	4b15      	ldr	r3, [pc, #84]	; (8010640 <__ieee754_rem_pio2+0x3d0>)
 80105ea:	f7f1 fd85 	bl	80020f8 <__aeabi_dmul>
 80105ee:	2503      	movs	r5, #3
 80105f0:	900e      	str	r0, [sp, #56]	; 0x38
 80105f2:	910f      	str	r1, [sp, #60]	; 0x3c
 80105f4:	ac0a      	add	r4, sp, #40	; 0x28
 80105f6:	2200      	movs	r2, #0
 80105f8:	6920      	ldr	r0, [r4, #16]
 80105fa:	6961      	ldr	r1, [r4, #20]
 80105fc:	2300      	movs	r3, #0
 80105fe:	9502      	str	r5, [sp, #8]
 8010600:	3c08      	subs	r4, #8
 8010602:	3d01      	subs	r5, #1
 8010604:	f7ef ff0e 	bl	8000424 <__aeabi_dcmpeq>
 8010608:	2800      	cmp	r0, #0
 801060a:	d1f4      	bne.n	80105f6 <__ieee754_rem_pio2+0x386>
 801060c:	4b0d      	ldr	r3, [pc, #52]	; (8010644 <__ieee754_rem_pio2+0x3d4>)
 801060e:	0032      	movs	r2, r6
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	2302      	movs	r3, #2
 8010614:	0039      	movs	r1, r7
 8010616:	9300      	str	r3, [sp, #0]
 8010618:	a80a      	add	r0, sp, #40	; 0x28
 801061a:	9b02      	ldr	r3, [sp, #8]
 801061c:	f000 f8d4 	bl	80107c8 <__kernel_rem_pio2>
 8010620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010622:	0006      	movs	r6, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	db00      	blt.n	801062a <__ieee754_rem_pio2+0x3ba>
 8010628:	e65f      	b.n	80102ea <__ieee754_rem_pio2+0x7a>
 801062a:	2280      	movs	r2, #128	; 0x80
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	0612      	lsls	r2, r2, #24
 8010630:	189b      	adds	r3, r3, r2
 8010632:	607b      	str	r3, [r7, #4]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	189b      	adds	r3, r3, r2
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	e68c      	b.n	8010356 <__ieee754_rem_pio2+0xe6>
 801063c:	fffffbea 	.word	0xfffffbea
 8010640:	41700000 	.word	0x41700000
 8010644:	08015998 	.word	0x08015998

08010648 <__kernel_cos>:
 8010648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801064a:	b087      	sub	sp, #28
 801064c:	9204      	str	r2, [sp, #16]
 801064e:	9305      	str	r3, [sp, #20]
 8010650:	004b      	lsls	r3, r1, #1
 8010652:	085b      	lsrs	r3, r3, #1
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	23f9      	movs	r3, #249	; 0xf9
 8010658:	9a00      	ldr	r2, [sp, #0]
 801065a:	0007      	movs	r7, r0
 801065c:	000e      	movs	r6, r1
 801065e:	059b      	lsls	r3, r3, #22
 8010660:	429a      	cmp	r2, r3
 8010662:	da04      	bge.n	801066e <__kernel_cos+0x26>
 8010664:	f7f2 fb64 	bl	8002d30 <__aeabi_d2iz>
 8010668:	2800      	cmp	r0, #0
 801066a:	d100      	bne.n	801066e <__kernel_cos+0x26>
 801066c:	e084      	b.n	8010778 <__kernel_cos+0x130>
 801066e:	003a      	movs	r2, r7
 8010670:	0033      	movs	r3, r6
 8010672:	0038      	movs	r0, r7
 8010674:	0031      	movs	r1, r6
 8010676:	f7f1 fd3f 	bl	80020f8 <__aeabi_dmul>
 801067a:	2200      	movs	r2, #0
 801067c:	4b40      	ldr	r3, [pc, #256]	; (8010780 <__kernel_cos+0x138>)
 801067e:	0004      	movs	r4, r0
 8010680:	000d      	movs	r5, r1
 8010682:	f7f1 fd39 	bl	80020f8 <__aeabi_dmul>
 8010686:	4a3f      	ldr	r2, [pc, #252]	; (8010784 <__kernel_cos+0x13c>)
 8010688:	9002      	str	r0, [sp, #8]
 801068a:	9103      	str	r1, [sp, #12]
 801068c:	4b3e      	ldr	r3, [pc, #248]	; (8010788 <__kernel_cos+0x140>)
 801068e:	0020      	movs	r0, r4
 8010690:	0029      	movs	r1, r5
 8010692:	f7f1 fd31 	bl	80020f8 <__aeabi_dmul>
 8010696:	4a3d      	ldr	r2, [pc, #244]	; (801078c <__kernel_cos+0x144>)
 8010698:	4b3d      	ldr	r3, [pc, #244]	; (8010790 <__kernel_cos+0x148>)
 801069a:	f7f0 fdbd 	bl	8001218 <__aeabi_dadd>
 801069e:	0022      	movs	r2, r4
 80106a0:	002b      	movs	r3, r5
 80106a2:	f7f1 fd29 	bl	80020f8 <__aeabi_dmul>
 80106a6:	4a3b      	ldr	r2, [pc, #236]	; (8010794 <__kernel_cos+0x14c>)
 80106a8:	4b3b      	ldr	r3, [pc, #236]	; (8010798 <__kernel_cos+0x150>)
 80106aa:	f7f1 ff91 	bl	80025d0 <__aeabi_dsub>
 80106ae:	0022      	movs	r2, r4
 80106b0:	002b      	movs	r3, r5
 80106b2:	f7f1 fd21 	bl	80020f8 <__aeabi_dmul>
 80106b6:	4a39      	ldr	r2, [pc, #228]	; (801079c <__kernel_cos+0x154>)
 80106b8:	4b39      	ldr	r3, [pc, #228]	; (80107a0 <__kernel_cos+0x158>)
 80106ba:	f7f0 fdad 	bl	8001218 <__aeabi_dadd>
 80106be:	0022      	movs	r2, r4
 80106c0:	002b      	movs	r3, r5
 80106c2:	f7f1 fd19 	bl	80020f8 <__aeabi_dmul>
 80106c6:	4a37      	ldr	r2, [pc, #220]	; (80107a4 <__kernel_cos+0x15c>)
 80106c8:	4b37      	ldr	r3, [pc, #220]	; (80107a8 <__kernel_cos+0x160>)
 80106ca:	f7f1 ff81 	bl	80025d0 <__aeabi_dsub>
 80106ce:	0022      	movs	r2, r4
 80106d0:	002b      	movs	r3, r5
 80106d2:	f7f1 fd11 	bl	80020f8 <__aeabi_dmul>
 80106d6:	4a35      	ldr	r2, [pc, #212]	; (80107ac <__kernel_cos+0x164>)
 80106d8:	4b35      	ldr	r3, [pc, #212]	; (80107b0 <__kernel_cos+0x168>)
 80106da:	f7f0 fd9d 	bl	8001218 <__aeabi_dadd>
 80106de:	0022      	movs	r2, r4
 80106e0:	002b      	movs	r3, r5
 80106e2:	f7f1 fd09 	bl	80020f8 <__aeabi_dmul>
 80106e6:	0022      	movs	r2, r4
 80106e8:	002b      	movs	r3, r5
 80106ea:	f7f1 fd05 	bl	80020f8 <__aeabi_dmul>
 80106ee:	9a04      	ldr	r2, [sp, #16]
 80106f0:	9b05      	ldr	r3, [sp, #20]
 80106f2:	0004      	movs	r4, r0
 80106f4:	000d      	movs	r5, r1
 80106f6:	0038      	movs	r0, r7
 80106f8:	0031      	movs	r1, r6
 80106fa:	f7f1 fcfd 	bl	80020f8 <__aeabi_dmul>
 80106fe:	0002      	movs	r2, r0
 8010700:	000b      	movs	r3, r1
 8010702:	0020      	movs	r0, r4
 8010704:	0029      	movs	r1, r5
 8010706:	f7f1 ff63 	bl	80025d0 <__aeabi_dsub>
 801070a:	4b2a      	ldr	r3, [pc, #168]	; (80107b4 <__kernel_cos+0x16c>)
 801070c:	9a00      	ldr	r2, [sp, #0]
 801070e:	0004      	movs	r4, r0
 8010710:	000d      	movs	r5, r1
 8010712:	429a      	cmp	r2, r3
 8010714:	dc0d      	bgt.n	8010732 <__kernel_cos+0xea>
 8010716:	0002      	movs	r2, r0
 8010718:	000b      	movs	r3, r1
 801071a:	9802      	ldr	r0, [sp, #8]
 801071c:	9903      	ldr	r1, [sp, #12]
 801071e:	f7f1 ff57 	bl	80025d0 <__aeabi_dsub>
 8010722:	0002      	movs	r2, r0
 8010724:	2000      	movs	r0, #0
 8010726:	000b      	movs	r3, r1
 8010728:	4923      	ldr	r1, [pc, #140]	; (80107b8 <__kernel_cos+0x170>)
 801072a:	f7f1 ff51 	bl	80025d0 <__aeabi_dsub>
 801072e:	b007      	add	sp, #28
 8010730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010732:	4b22      	ldr	r3, [pc, #136]	; (80107bc <__kernel_cos+0x174>)
 8010734:	9a00      	ldr	r2, [sp, #0]
 8010736:	2600      	movs	r6, #0
 8010738:	429a      	cmp	r2, r3
 801073a:	dc1b      	bgt.n	8010774 <__kernel_cos+0x12c>
 801073c:	0013      	movs	r3, r2
 801073e:	4a20      	ldr	r2, [pc, #128]	; (80107c0 <__kernel_cos+0x178>)
 8010740:	4694      	mov	ip, r2
 8010742:	4463      	add	r3, ip
 8010744:	001f      	movs	r7, r3
 8010746:	0032      	movs	r2, r6
 8010748:	003b      	movs	r3, r7
 801074a:	2000      	movs	r0, #0
 801074c:	491a      	ldr	r1, [pc, #104]	; (80107b8 <__kernel_cos+0x170>)
 801074e:	f7f1 ff3f 	bl	80025d0 <__aeabi_dsub>
 8010752:	0032      	movs	r2, r6
 8010754:	003b      	movs	r3, r7
 8010756:	9000      	str	r0, [sp, #0]
 8010758:	9101      	str	r1, [sp, #4]
 801075a:	9802      	ldr	r0, [sp, #8]
 801075c:	9903      	ldr	r1, [sp, #12]
 801075e:	f7f1 ff37 	bl	80025d0 <__aeabi_dsub>
 8010762:	0022      	movs	r2, r4
 8010764:	002b      	movs	r3, r5
 8010766:	f7f1 ff33 	bl	80025d0 <__aeabi_dsub>
 801076a:	0002      	movs	r2, r0
 801076c:	000b      	movs	r3, r1
 801076e:	9800      	ldr	r0, [sp, #0]
 8010770:	9901      	ldr	r1, [sp, #4]
 8010772:	e7da      	b.n	801072a <__kernel_cos+0xe2>
 8010774:	4f13      	ldr	r7, [pc, #76]	; (80107c4 <__kernel_cos+0x17c>)
 8010776:	e7e6      	b.n	8010746 <__kernel_cos+0xfe>
 8010778:	2000      	movs	r0, #0
 801077a:	490f      	ldr	r1, [pc, #60]	; (80107b8 <__kernel_cos+0x170>)
 801077c:	e7d7      	b.n	801072e <__kernel_cos+0xe6>
 801077e:	46c0      	nop			; (mov r8, r8)
 8010780:	3fe00000 	.word	0x3fe00000
 8010784:	be8838d4 	.word	0xbe8838d4
 8010788:	bda8fae9 	.word	0xbda8fae9
 801078c:	bdb4b1c4 	.word	0xbdb4b1c4
 8010790:	3e21ee9e 	.word	0x3e21ee9e
 8010794:	809c52ad 	.word	0x809c52ad
 8010798:	3e927e4f 	.word	0x3e927e4f
 801079c:	19cb1590 	.word	0x19cb1590
 80107a0:	3efa01a0 	.word	0x3efa01a0
 80107a4:	16c15177 	.word	0x16c15177
 80107a8:	3f56c16c 	.word	0x3f56c16c
 80107ac:	5555554c 	.word	0x5555554c
 80107b0:	3fa55555 	.word	0x3fa55555
 80107b4:	3fd33332 	.word	0x3fd33332
 80107b8:	3ff00000 	.word	0x3ff00000
 80107bc:	3fe90000 	.word	0x3fe90000
 80107c0:	ffe00000 	.word	0xffe00000
 80107c4:	3fd20000 	.word	0x3fd20000

080107c8 <__kernel_rem_pio2>:
 80107c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ca:	4cd0      	ldr	r4, [pc, #832]	; (8010b0c <__kernel_rem_pio2+0x344>)
 80107cc:	44a5      	add	sp, r4
 80107ce:	930d      	str	r3, [sp, #52]	; 0x34
 80107d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80107d2:	0014      	movs	r4, r2
 80107d4:	009a      	lsls	r2, r3, #2
 80107d6:	4bce      	ldr	r3, [pc, #824]	; (8010b10 <__kernel_rem_pio2+0x348>)
 80107d8:	900e      	str	r0, [sp, #56]	; 0x38
 80107da:	58d3      	ldr	r3, [r2, r3]
 80107dc:	9107      	str	r1, [sp, #28]
 80107de:	9308      	str	r3, [sp, #32]
 80107e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107e2:	3b01      	subs	r3, #1
 80107e4:	930c      	str	r3, [sp, #48]	; 0x30
 80107e6:	2300      	movs	r3, #0
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	0023      	movs	r3, r4
 80107ec:	3314      	adds	r3, #20
 80107ee:	db04      	blt.n	80107fa <__kernel_rem_pio2+0x32>
 80107f0:	2118      	movs	r1, #24
 80107f2:	1ee0      	subs	r0, r4, #3
 80107f4:	f7ef fd1a 	bl	800022c <__divsi3>
 80107f8:	9000      	str	r0, [sp, #0]
 80107fa:	2218      	movs	r2, #24
 80107fc:	9b00      	ldr	r3, [sp, #0]
 80107fe:	4252      	negs	r2, r2
 8010800:	3301      	adds	r3, #1
 8010802:	435a      	muls	r2, r3
 8010804:	1913      	adds	r3, r2, r4
 8010806:	9302      	str	r3, [sp, #8]
 8010808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801080a:	9b00      	ldr	r3, [sp, #0]
 801080c:	ae26      	add	r6, sp, #152	; 0x98
 801080e:	1a9d      	subs	r5, r3, r2
 8010810:	002c      	movs	r4, r5
 8010812:	9b08      	ldr	r3, [sp, #32]
 8010814:	189f      	adds	r7, r3, r2
 8010816:	1b63      	subs	r3, r4, r5
 8010818:	429f      	cmp	r7, r3
 801081a:	da17      	bge.n	801084c <__kernel_rem_pio2+0x84>
 801081c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801081e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	ab76      	add	r3, sp, #472	; 0x1d8
 8010824:	930a      	str	r3, [sp, #40]	; 0x28
 8010826:	2301      	movs	r3, #1
 8010828:	1a9b      	subs	r3, r3, r2
 801082a:	930b      	str	r3, [sp, #44]	; 0x2c
 801082c:	ab28      	add	r3, sp, #160	; 0xa0
 801082e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010830:	9a04      	ldr	r2, [sp, #16]
 8010832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010834:	189b      	adds	r3, r3, r2
 8010836:	9a08      	ldr	r2, [sp, #32]
 8010838:	429a      	cmp	r2, r3
 801083a:	db31      	blt.n	80108a0 <__kernel_rem_pio2+0xd8>
 801083c:	9b04      	ldr	r3, [sp, #16]
 801083e:	2400      	movs	r4, #0
 8010840:	00de      	lsls	r6, r3, #3
 8010842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010844:	2500      	movs	r5, #0
 8010846:	2700      	movs	r7, #0
 8010848:	199e      	adds	r6, r3, r6
 801084a:	e01e      	b.n	801088a <__kernel_rem_pio2+0xc2>
 801084c:	2c00      	cmp	r4, #0
 801084e:	db07      	blt.n	8010860 <__kernel_rem_pio2+0x98>
 8010850:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8010852:	00a3      	lsls	r3, r4, #2
 8010854:	58d0      	ldr	r0, [r2, r3]
 8010856:	f7f2 faa1 	bl	8002d9c <__aeabi_i2d>
 801085a:	c603      	stmia	r6!, {r0, r1}
 801085c:	3401      	adds	r4, #1
 801085e:	e7da      	b.n	8010816 <__kernel_rem_pio2+0x4e>
 8010860:	2000      	movs	r0, #0
 8010862:	2100      	movs	r1, #0
 8010864:	e7f9      	b.n	801085a <__kernel_rem_pio2+0x92>
 8010866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010868:	00f9      	lsls	r1, r7, #3
 801086a:	1859      	adds	r1, r3, r1
 801086c:	6808      	ldr	r0, [r1, #0]
 801086e:	6849      	ldr	r1, [r1, #4]
 8010870:	6832      	ldr	r2, [r6, #0]
 8010872:	6873      	ldr	r3, [r6, #4]
 8010874:	f7f1 fc40 	bl	80020f8 <__aeabi_dmul>
 8010878:	0002      	movs	r2, r0
 801087a:	000b      	movs	r3, r1
 801087c:	0020      	movs	r0, r4
 801087e:	0029      	movs	r1, r5
 8010880:	f7f0 fcca 	bl	8001218 <__aeabi_dadd>
 8010884:	0004      	movs	r4, r0
 8010886:	000d      	movs	r5, r1
 8010888:	3701      	adds	r7, #1
 801088a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801088c:	3e08      	subs	r6, #8
 801088e:	429f      	cmp	r7, r3
 8010890:	dde9      	ble.n	8010866 <__kernel_rem_pio2+0x9e>
 8010892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010894:	c330      	stmia	r3!, {r4, r5}
 8010896:	930a      	str	r3, [sp, #40]	; 0x28
 8010898:	9b04      	ldr	r3, [sp, #16]
 801089a:	3301      	adds	r3, #1
 801089c:	9304      	str	r3, [sp, #16]
 801089e:	e7c7      	b.n	8010830 <__kernel_rem_pio2+0x68>
 80108a0:	9b08      	ldr	r3, [sp, #32]
 80108a2:	aa12      	add	r2, sp, #72	; 0x48
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	189b      	adds	r3, r3, r2
 80108a8:	9310      	str	r3, [sp, #64]	; 0x40
 80108aa:	9b00      	ldr	r3, [sp, #0]
 80108ac:	0098      	lsls	r0, r3, #2
 80108ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80108b0:	181b      	adds	r3, r3, r0
 80108b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80108b4:	9b08      	ldr	r3, [sp, #32]
 80108b6:	9304      	str	r3, [sp, #16]
 80108b8:	9b04      	ldr	r3, [sp, #16]
 80108ba:	aa76      	add	r2, sp, #472	; 0x1d8
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	18d3      	adds	r3, r2, r3
 80108c0:	681c      	ldr	r4, [r3, #0]
 80108c2:	685d      	ldr	r5, [r3, #4]
 80108c4:	ab12      	add	r3, sp, #72	; 0x48
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80108ca:	9b04      	ldr	r3, [sp, #16]
 80108cc:	9211      	str	r2, [sp, #68]	; 0x44
 80108ce:	930a      	str	r3, [sp, #40]	; 0x28
 80108d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	dc74      	bgt.n	80109c0 <__kernel_rem_pio2+0x1f8>
 80108d6:	0020      	movs	r0, r4
 80108d8:	0029      	movs	r1, r5
 80108da:	9a02      	ldr	r2, [sp, #8]
 80108dc:	f000 fdaa 	bl	8011434 <scalbn>
 80108e0:	23ff      	movs	r3, #255	; 0xff
 80108e2:	2200      	movs	r2, #0
 80108e4:	059b      	lsls	r3, r3, #22
 80108e6:	0004      	movs	r4, r0
 80108e8:	000d      	movs	r5, r1
 80108ea:	f7f1 fc05 	bl	80020f8 <__aeabi_dmul>
 80108ee:	f000 fd11 	bl	8011314 <floor>
 80108f2:	2200      	movs	r2, #0
 80108f4:	4b87      	ldr	r3, [pc, #540]	; (8010b14 <__kernel_rem_pio2+0x34c>)
 80108f6:	f7f1 fbff 	bl	80020f8 <__aeabi_dmul>
 80108fa:	0002      	movs	r2, r0
 80108fc:	000b      	movs	r3, r1
 80108fe:	0020      	movs	r0, r4
 8010900:	0029      	movs	r1, r5
 8010902:	f7f1 fe65 	bl	80025d0 <__aeabi_dsub>
 8010906:	000d      	movs	r5, r1
 8010908:	0004      	movs	r4, r0
 801090a:	f7f2 fa11 	bl	8002d30 <__aeabi_d2iz>
 801090e:	900b      	str	r0, [sp, #44]	; 0x2c
 8010910:	f7f2 fa44 	bl	8002d9c <__aeabi_i2d>
 8010914:	000b      	movs	r3, r1
 8010916:	0002      	movs	r2, r0
 8010918:	0029      	movs	r1, r5
 801091a:	0020      	movs	r0, r4
 801091c:	f7f1 fe58 	bl	80025d0 <__aeabi_dsub>
 8010920:	9b02      	ldr	r3, [sp, #8]
 8010922:	0006      	movs	r6, r0
 8010924:	000f      	movs	r7, r1
 8010926:	2b00      	cmp	r3, #0
 8010928:	dd74      	ble.n	8010a14 <__kernel_rem_pio2+0x24c>
 801092a:	2118      	movs	r1, #24
 801092c:	9b04      	ldr	r3, [sp, #16]
 801092e:	aa12      	add	r2, sp, #72	; 0x48
 8010930:	3b01      	subs	r3, #1
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	589a      	ldr	r2, [r3, r2]
 8010936:	9802      	ldr	r0, [sp, #8]
 8010938:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801093a:	1a09      	subs	r1, r1, r0
 801093c:	0010      	movs	r0, r2
 801093e:	4108      	asrs	r0, r1
 8010940:	1824      	adds	r4, r4, r0
 8010942:	4088      	lsls	r0, r1
 8010944:	a912      	add	r1, sp, #72	; 0x48
 8010946:	1a12      	subs	r2, r2, r0
 8010948:	505a      	str	r2, [r3, r1]
 801094a:	2317      	movs	r3, #23
 801094c:	9902      	ldr	r1, [sp, #8]
 801094e:	940b      	str	r4, [sp, #44]	; 0x2c
 8010950:	1a5b      	subs	r3, r3, r1
 8010952:	411a      	asrs	r2, r3
 8010954:	920a      	str	r2, [sp, #40]	; 0x28
 8010956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010958:	2b00      	cmp	r3, #0
 801095a:	dd6d      	ble.n	8010a38 <__kernel_rem_pio2+0x270>
 801095c:	2200      	movs	r2, #0
 801095e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010960:	2080      	movs	r0, #128	; 0x80
 8010962:	3301      	adds	r3, #1
 8010964:	930b      	str	r3, [sp, #44]	; 0x2c
 8010966:	4b6c      	ldr	r3, [pc, #432]	; (8010b18 <__kernel_rem_pio2+0x350>)
 8010968:	0014      	movs	r4, r2
 801096a:	469c      	mov	ip, r3
 801096c:	2501      	movs	r5, #1
 801096e:	0440      	lsls	r0, r0, #17
 8010970:	9b04      	ldr	r3, [sp, #16]
 8010972:	4293      	cmp	r3, r2
 8010974:	dd00      	ble.n	8010978 <__kernel_rem_pio2+0x1b0>
 8010976:	e098      	b.n	8010aaa <__kernel_rem_pio2+0x2e2>
 8010978:	9b02      	ldr	r3, [sp, #8]
 801097a:	2b00      	cmp	r3, #0
 801097c:	dd05      	ble.n	801098a <__kernel_rem_pio2+0x1c2>
 801097e:	2b01      	cmp	r3, #1
 8010980:	d100      	bne.n	8010984 <__kernel_rem_pio2+0x1bc>
 8010982:	e0a8      	b.n	8010ad6 <__kernel_rem_pio2+0x30e>
 8010984:	2b02      	cmp	r3, #2
 8010986:	d100      	bne.n	801098a <__kernel_rem_pio2+0x1c2>
 8010988:	e0b0      	b.n	8010aec <__kernel_rem_pio2+0x324>
 801098a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801098c:	2b02      	cmp	r3, #2
 801098e:	d153      	bne.n	8010a38 <__kernel_rem_pio2+0x270>
 8010990:	0032      	movs	r2, r6
 8010992:	003b      	movs	r3, r7
 8010994:	2000      	movs	r0, #0
 8010996:	4961      	ldr	r1, [pc, #388]	; (8010b1c <__kernel_rem_pio2+0x354>)
 8010998:	f7f1 fe1a 	bl	80025d0 <__aeabi_dsub>
 801099c:	0006      	movs	r6, r0
 801099e:	000f      	movs	r7, r1
 80109a0:	2c00      	cmp	r4, #0
 80109a2:	d049      	beq.n	8010a38 <__kernel_rem_pio2+0x270>
 80109a4:	9a02      	ldr	r2, [sp, #8]
 80109a6:	2000      	movs	r0, #0
 80109a8:	495c      	ldr	r1, [pc, #368]	; (8010b1c <__kernel_rem_pio2+0x354>)
 80109aa:	f000 fd43 	bl	8011434 <scalbn>
 80109ae:	0002      	movs	r2, r0
 80109b0:	000b      	movs	r3, r1
 80109b2:	0030      	movs	r0, r6
 80109b4:	0039      	movs	r1, r7
 80109b6:	f7f1 fe0b 	bl	80025d0 <__aeabi_dsub>
 80109ba:	0006      	movs	r6, r0
 80109bc:	000f      	movs	r7, r1
 80109be:	e03b      	b.n	8010a38 <__kernel_rem_pio2+0x270>
 80109c0:	2200      	movs	r2, #0
 80109c2:	4b57      	ldr	r3, [pc, #348]	; (8010b20 <__kernel_rem_pio2+0x358>)
 80109c4:	0020      	movs	r0, r4
 80109c6:	0029      	movs	r1, r5
 80109c8:	f7f1 fb96 	bl	80020f8 <__aeabi_dmul>
 80109cc:	f7f2 f9b0 	bl	8002d30 <__aeabi_d2iz>
 80109d0:	f7f2 f9e4 	bl	8002d9c <__aeabi_i2d>
 80109d4:	2200      	movs	r2, #0
 80109d6:	4b53      	ldr	r3, [pc, #332]	; (8010b24 <__kernel_rem_pio2+0x35c>)
 80109d8:	0006      	movs	r6, r0
 80109da:	000f      	movs	r7, r1
 80109dc:	f7f1 fb8c 	bl	80020f8 <__aeabi_dmul>
 80109e0:	0002      	movs	r2, r0
 80109e2:	000b      	movs	r3, r1
 80109e4:	0020      	movs	r0, r4
 80109e6:	0029      	movs	r1, r5
 80109e8:	f7f1 fdf2 	bl	80025d0 <__aeabi_dsub>
 80109ec:	f7f2 f9a0 	bl	8002d30 <__aeabi_d2iz>
 80109f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80109f4:	c301      	stmia	r3!, {r0}
 80109f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80109f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109fa:	0030      	movs	r0, r6
 80109fc:	3b01      	subs	r3, #1
 80109fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010a00:	00db      	lsls	r3, r3, #3
 8010a02:	18d3      	adds	r3, r2, r3
 8010a04:	0039      	movs	r1, r7
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	f7f0 fc05 	bl	8001218 <__aeabi_dadd>
 8010a0e:	0004      	movs	r4, r0
 8010a10:	000d      	movs	r5, r1
 8010a12:	e75d      	b.n	80108d0 <__kernel_rem_pio2+0x108>
 8010a14:	9b02      	ldr	r3, [sp, #8]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d107      	bne.n	8010a2a <__kernel_rem_pio2+0x262>
 8010a1a:	9b04      	ldr	r3, [sp, #16]
 8010a1c:	aa12      	add	r2, sp, #72	; 0x48
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	5898      	ldr	r0, [r3, r2]
 8010a24:	15c3      	asrs	r3, r0, #23
 8010a26:	930a      	str	r3, [sp, #40]	; 0x28
 8010a28:	e795      	b.n	8010956 <__kernel_rem_pio2+0x18e>
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	4b3e      	ldr	r3, [pc, #248]	; (8010b28 <__kernel_rem_pio2+0x360>)
 8010a2e:	f7ef fd1d 	bl	800046c <__aeabi_dcmpge>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d136      	bne.n	8010aa4 <__kernel_rem_pio2+0x2dc>
 8010a36:	900a      	str	r0, [sp, #40]	; 0x28
 8010a38:	2200      	movs	r2, #0
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	0030      	movs	r0, r6
 8010a3e:	0039      	movs	r1, r7
 8010a40:	f7ef fcf0 	bl	8000424 <__aeabi_dcmpeq>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d100      	bne.n	8010a4a <__kernel_rem_pio2+0x282>
 8010a48:	e0b9      	b.n	8010bbe <__kernel_rem_pio2+0x3f6>
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	9b04      	ldr	r3, [sp, #16]
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	9908      	ldr	r1, [sp, #32]
 8010a54:	428b      	cmp	r3, r1
 8010a56:	da52      	bge.n	8010afe <__kernel_rem_pio2+0x336>
 8010a58:	2a00      	cmp	r2, #0
 8010a5a:	d100      	bne.n	8010a5e <__kernel_rem_pio2+0x296>
 8010a5c:	e095      	b.n	8010b8a <__kernel_rem_pio2+0x3c2>
 8010a5e:	9b02      	ldr	r3, [sp, #8]
 8010a60:	aa12      	add	r2, sp, #72	; 0x48
 8010a62:	3b18      	subs	r3, #24
 8010a64:	9302      	str	r3, [sp, #8]
 8010a66:	9b00      	ldr	r3, [sp, #0]
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	589b      	ldr	r3, [r3, r2]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d100      	bne.n	8010a72 <__kernel_rem_pio2+0x2aa>
 8010a70:	e0a1      	b.n	8010bb6 <__kernel_rem_pio2+0x3ee>
 8010a72:	2000      	movs	r0, #0
 8010a74:	9a02      	ldr	r2, [sp, #8]
 8010a76:	4929      	ldr	r1, [pc, #164]	; (8010b1c <__kernel_rem_pio2+0x354>)
 8010a78:	f000 fcdc 	bl	8011434 <scalbn>
 8010a7c:	0006      	movs	r6, r0
 8010a7e:	000f      	movs	r7, r1
 8010a80:	9c00      	ldr	r4, [sp, #0]
 8010a82:	2c00      	cmp	r4, #0
 8010a84:	db00      	blt.n	8010a88 <__kernel_rem_pio2+0x2c0>
 8010a86:	e0d9      	b.n	8010c3c <__kernel_rem_pio2+0x474>
 8010a88:	2600      	movs	r6, #0
 8010a8a:	9d00      	ldr	r5, [sp, #0]
 8010a8c:	2d00      	cmp	r5, #0
 8010a8e:	da00      	bge.n	8010a92 <__kernel_rem_pio2+0x2ca>
 8010a90:	e10c      	b.n	8010cac <__kernel_rem_pio2+0x4e4>
 8010a92:	ab76      	add	r3, sp, #472	; 0x1d8
 8010a94:	00ef      	lsls	r7, r5, #3
 8010a96:	2400      	movs	r4, #0
 8010a98:	18ff      	adds	r7, r7, r3
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	9302      	str	r3, [sp, #8]
 8010a9e:	9403      	str	r4, [sp, #12]
 8010aa0:	2400      	movs	r4, #0
 8010aa2:	e0f4      	b.n	8010c8e <__kernel_rem_pio2+0x4c6>
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8010aa8:	e758      	b.n	801095c <__kernel_rem_pio2+0x194>
 8010aaa:	9b00      	ldr	r3, [sp, #0]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2c00      	cmp	r4, #0
 8010ab0:	d10b      	bne.n	8010aca <__kernel_rem_pio2+0x302>
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d003      	beq.n	8010abe <__kernel_rem_pio2+0x2f6>
 8010ab6:	9c00      	ldr	r4, [sp, #0]
 8010ab8:	1ac3      	subs	r3, r0, r3
 8010aba:	6023      	str	r3, [r4, #0]
 8010abc:	002b      	movs	r3, r5
 8010abe:	9c00      	ldr	r4, [sp, #0]
 8010ac0:	3201      	adds	r2, #1
 8010ac2:	3404      	adds	r4, #4
 8010ac4:	9400      	str	r4, [sp, #0]
 8010ac6:	001c      	movs	r4, r3
 8010ac8:	e752      	b.n	8010970 <__kernel_rem_pio2+0x1a8>
 8010aca:	4661      	mov	r1, ip
 8010acc:	1acb      	subs	r3, r1, r3
 8010ace:	9900      	ldr	r1, [sp, #0]
 8010ad0:	600b      	str	r3, [r1, #0]
 8010ad2:	0023      	movs	r3, r4
 8010ad4:	e7f3      	b.n	8010abe <__kernel_rem_pio2+0x2f6>
 8010ad6:	9b04      	ldr	r3, [sp, #16]
 8010ad8:	aa12      	add	r2, sp, #72	; 0x48
 8010ada:	3b01      	subs	r3, #1
 8010adc:	009b      	lsls	r3, r3, #2
 8010ade:	589a      	ldr	r2, [r3, r2]
 8010ae0:	9200      	str	r2, [sp, #0]
 8010ae2:	0252      	lsls	r2, r2, #9
 8010ae4:	0a52      	lsrs	r2, r2, #9
 8010ae6:	a912      	add	r1, sp, #72	; 0x48
 8010ae8:	505a      	str	r2, [r3, r1]
 8010aea:	e74e      	b.n	801098a <__kernel_rem_pio2+0x1c2>
 8010aec:	9b04      	ldr	r3, [sp, #16]
 8010aee:	aa12      	add	r2, sp, #72	; 0x48
 8010af0:	3b01      	subs	r3, #1
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	589a      	ldr	r2, [r3, r2]
 8010af6:	9200      	str	r2, [sp, #0]
 8010af8:	0292      	lsls	r2, r2, #10
 8010afa:	0a92      	lsrs	r2, r2, #10
 8010afc:	e7f3      	b.n	8010ae6 <__kernel_rem_pio2+0x31e>
 8010afe:	0099      	lsls	r1, r3, #2
 8010b00:	a812      	add	r0, sp, #72	; 0x48
 8010b02:	5809      	ldr	r1, [r1, r0]
 8010b04:	3b01      	subs	r3, #1
 8010b06:	430a      	orrs	r2, r1
 8010b08:	e7a3      	b.n	8010a52 <__kernel_rem_pio2+0x28a>
 8010b0a:	46c0      	nop			; (mov r8, r8)
 8010b0c:	fffffd84 	.word	0xfffffd84
 8010b10:	08015ae0 	.word	0x08015ae0
 8010b14:	40200000 	.word	0x40200000
 8010b18:	00ffffff 	.word	0x00ffffff
 8010b1c:	3ff00000 	.word	0x3ff00000
 8010b20:	3e700000 	.word	0x3e700000
 8010b24:	41700000 	.word	0x41700000
 8010b28:	3fe00000 	.word	0x3fe00000
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010b30:	009a      	lsls	r2, r3, #2
 8010b32:	4252      	negs	r2, r2
 8010b34:	588a      	ldr	r2, [r1, r2]
 8010b36:	2a00      	cmp	r2, #0
 8010b38:	d0f8      	beq.n	8010b2c <__kernel_rem_pio2+0x364>
 8010b3a:	9a04      	ldr	r2, [sp, #16]
 8010b3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010b3e:	1c57      	adds	r7, r2, #1
 8010b40:	1854      	adds	r4, r2, r1
 8010b42:	00e4      	lsls	r4, r4, #3
 8010b44:	aa26      	add	r2, sp, #152	; 0x98
 8010b46:	1914      	adds	r4, r2, r4
 8010b48:	9a04      	ldr	r2, [sp, #16]
 8010b4a:	18d3      	adds	r3, r2, r3
 8010b4c:	9304      	str	r3, [sp, #16]
 8010b4e:	9b04      	ldr	r3, [sp, #16]
 8010b50:	42bb      	cmp	r3, r7
 8010b52:	da00      	bge.n	8010b56 <__kernel_rem_pio2+0x38e>
 8010b54:	e6b0      	b.n	80108b8 <__kernel_rem_pio2+0xf0>
 8010b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b58:	00bb      	lsls	r3, r7, #2
 8010b5a:	58d0      	ldr	r0, [r2, r3]
 8010b5c:	f7f2 f91e 	bl	8002d9c <__aeabi_i2d>
 8010b60:	2200      	movs	r2, #0
 8010b62:	2300      	movs	r3, #0
 8010b64:	0026      	movs	r6, r4
 8010b66:	2500      	movs	r5, #0
 8010b68:	6020      	str	r0, [r4, #0]
 8010b6a:	6061      	str	r1, [r4, #4]
 8010b6c:	9200      	str	r2, [sp, #0]
 8010b6e:	9301      	str	r3, [sp, #4]
 8010b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b72:	429d      	cmp	r5, r3
 8010b74:	dd0b      	ble.n	8010b8e <__kernel_rem_pio2+0x3c6>
 8010b76:	00fb      	lsls	r3, r7, #3
 8010b78:	aa76      	add	r2, sp, #472	; 0x1d8
 8010b7a:	18d3      	adds	r3, r2, r3
 8010b7c:	3701      	adds	r7, #1
 8010b7e:	9900      	ldr	r1, [sp, #0]
 8010b80:	9a01      	ldr	r2, [sp, #4]
 8010b82:	3408      	adds	r4, #8
 8010b84:	6019      	str	r1, [r3, #0]
 8010b86:	605a      	str	r2, [r3, #4]
 8010b88:	e7e1      	b.n	8010b4e <__kernel_rem_pio2+0x386>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e7cf      	b.n	8010b2e <__kernel_rem_pio2+0x366>
 8010b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b90:	00e9      	lsls	r1, r5, #3
 8010b92:	1859      	adds	r1, r3, r1
 8010b94:	6808      	ldr	r0, [r1, #0]
 8010b96:	6849      	ldr	r1, [r1, #4]
 8010b98:	6832      	ldr	r2, [r6, #0]
 8010b9a:	6873      	ldr	r3, [r6, #4]
 8010b9c:	f7f1 faac 	bl	80020f8 <__aeabi_dmul>
 8010ba0:	0002      	movs	r2, r0
 8010ba2:	000b      	movs	r3, r1
 8010ba4:	9800      	ldr	r0, [sp, #0]
 8010ba6:	9901      	ldr	r1, [sp, #4]
 8010ba8:	f7f0 fb36 	bl	8001218 <__aeabi_dadd>
 8010bac:	3501      	adds	r5, #1
 8010bae:	9000      	str	r0, [sp, #0]
 8010bb0:	9101      	str	r1, [sp, #4]
 8010bb2:	3e08      	subs	r6, #8
 8010bb4:	e7dc      	b.n	8010b70 <__kernel_rem_pio2+0x3a8>
 8010bb6:	9b00      	ldr	r3, [sp, #0]
 8010bb8:	3b01      	subs	r3, #1
 8010bba:	9300      	str	r3, [sp, #0]
 8010bbc:	e74f      	b.n	8010a5e <__kernel_rem_pio2+0x296>
 8010bbe:	9b02      	ldr	r3, [sp, #8]
 8010bc0:	0030      	movs	r0, r6
 8010bc2:	425a      	negs	r2, r3
 8010bc4:	0039      	movs	r1, r7
 8010bc6:	f000 fc35 	bl	8011434 <scalbn>
 8010bca:	2200      	movs	r2, #0
 8010bcc:	4bb6      	ldr	r3, [pc, #728]	; (8010ea8 <__kernel_rem_pio2+0x6e0>)
 8010bce:	0004      	movs	r4, r0
 8010bd0:	000d      	movs	r5, r1
 8010bd2:	f7ef fc4b 	bl	800046c <__aeabi_dcmpge>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d025      	beq.n	8010c26 <__kernel_rem_pio2+0x45e>
 8010bda:	2200      	movs	r2, #0
 8010bdc:	4bb3      	ldr	r3, [pc, #716]	; (8010eac <__kernel_rem_pio2+0x6e4>)
 8010bde:	0020      	movs	r0, r4
 8010be0:	0029      	movs	r1, r5
 8010be2:	f7f1 fa89 	bl	80020f8 <__aeabi_dmul>
 8010be6:	f7f2 f8a3 	bl	8002d30 <__aeabi_d2iz>
 8010bea:	9b04      	ldr	r3, [sp, #16]
 8010bec:	0006      	movs	r6, r0
 8010bee:	009f      	lsls	r7, r3, #2
 8010bf0:	f7f2 f8d4 	bl	8002d9c <__aeabi_i2d>
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	4bac      	ldr	r3, [pc, #688]	; (8010ea8 <__kernel_rem_pio2+0x6e0>)
 8010bf8:	f7f1 fa7e 	bl	80020f8 <__aeabi_dmul>
 8010bfc:	0002      	movs	r2, r0
 8010bfe:	000b      	movs	r3, r1
 8010c00:	0020      	movs	r0, r4
 8010c02:	0029      	movs	r1, r5
 8010c04:	f7f1 fce4 	bl	80025d0 <__aeabi_dsub>
 8010c08:	f7f2 f892 	bl	8002d30 <__aeabi_d2iz>
 8010c0c:	ab12      	add	r3, sp, #72	; 0x48
 8010c0e:	51d8      	str	r0, [r3, r7]
 8010c10:	9b04      	ldr	r3, [sp, #16]
 8010c12:	aa12      	add	r2, sp, #72	; 0x48
 8010c14:	3301      	adds	r3, #1
 8010c16:	9300      	str	r3, [sp, #0]
 8010c18:	9b02      	ldr	r3, [sp, #8]
 8010c1a:	3318      	adds	r3, #24
 8010c1c:	9302      	str	r3, [sp, #8]
 8010c1e:	9b00      	ldr	r3, [sp, #0]
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	509e      	str	r6, [r3, r2]
 8010c24:	e725      	b.n	8010a72 <__kernel_rem_pio2+0x2aa>
 8010c26:	9b04      	ldr	r3, [sp, #16]
 8010c28:	0020      	movs	r0, r4
 8010c2a:	0029      	movs	r1, r5
 8010c2c:	009e      	lsls	r6, r3, #2
 8010c2e:	f7f2 f87f 	bl	8002d30 <__aeabi_d2iz>
 8010c32:	ab12      	add	r3, sp, #72	; 0x48
 8010c34:	5198      	str	r0, [r3, r6]
 8010c36:	9b04      	ldr	r3, [sp, #16]
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	e71a      	b.n	8010a72 <__kernel_rem_pio2+0x2aa>
 8010c3c:	00e5      	lsls	r5, r4, #3
 8010c3e:	ab76      	add	r3, sp, #472	; 0x1d8
 8010c40:	aa12      	add	r2, sp, #72	; 0x48
 8010c42:	195d      	adds	r5, r3, r5
 8010c44:	00a3      	lsls	r3, r4, #2
 8010c46:	5898      	ldr	r0, [r3, r2]
 8010c48:	f7f2 f8a8 	bl	8002d9c <__aeabi_i2d>
 8010c4c:	0032      	movs	r2, r6
 8010c4e:	003b      	movs	r3, r7
 8010c50:	f7f1 fa52 	bl	80020f8 <__aeabi_dmul>
 8010c54:	2200      	movs	r2, #0
 8010c56:	6028      	str	r0, [r5, #0]
 8010c58:	6069      	str	r1, [r5, #4]
 8010c5a:	4b94      	ldr	r3, [pc, #592]	; (8010eac <__kernel_rem_pio2+0x6e4>)
 8010c5c:	0030      	movs	r0, r6
 8010c5e:	0039      	movs	r1, r7
 8010c60:	f7f1 fa4a 	bl	80020f8 <__aeabi_dmul>
 8010c64:	3c01      	subs	r4, #1
 8010c66:	0006      	movs	r6, r0
 8010c68:	000f      	movs	r7, r1
 8010c6a:	e70a      	b.n	8010a82 <__kernel_rem_pio2+0x2ba>
 8010c6c:	4b90      	ldr	r3, [pc, #576]	; (8010eb0 <__kernel_rem_pio2+0x6e8>)
 8010c6e:	00e1      	lsls	r1, r4, #3
 8010c70:	1859      	adds	r1, r3, r1
 8010c72:	6808      	ldr	r0, [r1, #0]
 8010c74:	6849      	ldr	r1, [r1, #4]
 8010c76:	cf0c      	ldmia	r7!, {r2, r3}
 8010c78:	f7f1 fa3e 	bl	80020f8 <__aeabi_dmul>
 8010c7c:	0002      	movs	r2, r0
 8010c7e:	000b      	movs	r3, r1
 8010c80:	9802      	ldr	r0, [sp, #8]
 8010c82:	9903      	ldr	r1, [sp, #12]
 8010c84:	f7f0 fac8 	bl	8001218 <__aeabi_dadd>
 8010c88:	9002      	str	r0, [sp, #8]
 8010c8a:	9103      	str	r1, [sp, #12]
 8010c8c:	3401      	adds	r4, #1
 8010c8e:	9b08      	ldr	r3, [sp, #32]
 8010c90:	429c      	cmp	r4, r3
 8010c92:	dc01      	bgt.n	8010c98 <__kernel_rem_pio2+0x4d0>
 8010c94:	42a6      	cmp	r6, r4
 8010c96:	dae9      	bge.n	8010c6c <__kernel_rem_pio2+0x4a4>
 8010c98:	00f3      	lsls	r3, r6, #3
 8010c9a:	aa4e      	add	r2, sp, #312	; 0x138
 8010c9c:	18d3      	adds	r3, r2, r3
 8010c9e:	3d01      	subs	r5, #1
 8010ca0:	9902      	ldr	r1, [sp, #8]
 8010ca2:	9a03      	ldr	r2, [sp, #12]
 8010ca4:	3601      	adds	r6, #1
 8010ca6:	6019      	str	r1, [r3, #0]
 8010ca8:	605a      	str	r2, [r3, #4]
 8010caa:	e6ef      	b.n	8010a8c <__kernel_rem_pio2+0x2c4>
 8010cac:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	dc0b      	bgt.n	8010cca <__kernel_rem_pio2+0x502>
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	dd00      	ble.n	8010cb8 <__kernel_rem_pio2+0x4f0>
 8010cb6:	e08a      	b.n	8010dce <__kernel_rem_pio2+0x606>
 8010cb8:	d055      	beq.n	8010d66 <__kernel_rem_pio2+0x59e>
 8010cba:	2007      	movs	r0, #7
 8010cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cbe:	4003      	ands	r3, r0
 8010cc0:	0018      	movs	r0, r3
 8010cc2:	239f      	movs	r3, #159	; 0x9f
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	449d      	add	sp, r3
 8010cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cca:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010ccc:	2b03      	cmp	r3, #3
 8010cce:	d1f4      	bne.n	8010cba <__kernel_rem_pio2+0x4f2>
 8010cd0:	9b00      	ldr	r3, [sp, #0]
 8010cd2:	00dc      	lsls	r4, r3, #3
 8010cd4:	ab4e      	add	r3, sp, #312	; 0x138
 8010cd6:	191c      	adds	r4, r3, r4
 8010cd8:	0025      	movs	r5, r4
 8010cda:	9b00      	ldr	r3, [sp, #0]
 8010cdc:	9302      	str	r3, [sp, #8]
 8010cde:	9b02      	ldr	r3, [sp, #8]
 8010ce0:	3d08      	subs	r5, #8
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	dd00      	ble.n	8010ce8 <__kernel_rem_pio2+0x520>
 8010ce6:	e083      	b.n	8010df0 <__kernel_rem_pio2+0x628>
 8010ce8:	9d00      	ldr	r5, [sp, #0]
 8010cea:	3c08      	subs	r4, #8
 8010cec:	2d01      	cmp	r5, #1
 8010cee:	dd00      	ble.n	8010cf2 <__kernel_rem_pio2+0x52a>
 8010cf0:	e0a0      	b.n	8010e34 <__kernel_rem_pio2+0x66c>
 8010cf2:	2400      	movs	r4, #0
 8010cf4:	0021      	movs	r1, r4
 8010cf6:	9b00      	ldr	r3, [sp, #0]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	dd00      	ble.n	8010cfe <__kernel_rem_pio2+0x536>
 8010cfc:	e0b8      	b.n	8010e70 <__kernel_rem_pio2+0x6a8>
 8010cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d00:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8010d02:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8010d04:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8010d06:	9851      	ldr	r0, [sp, #324]	; 0x144
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d000      	beq.n	8010d0e <__kernel_rem_pio2+0x546>
 8010d0c:	e0be      	b.n	8010e8c <__kernel_rem_pio2+0x6c4>
 8010d0e:	0033      	movs	r3, r6
 8010d10:	003a      	movs	r2, r7
 8010d12:	9e07      	ldr	r6, [sp, #28]
 8010d14:	6032      	str	r2, [r6, #0]
 8010d16:	6073      	str	r3, [r6, #4]
 8010d18:	002a      	movs	r2, r5
 8010d1a:	0003      	movs	r3, r0
 8010d1c:	60b2      	str	r2, [r6, #8]
 8010d1e:	60f3      	str	r3, [r6, #12]
 8010d20:	0022      	movs	r2, r4
 8010d22:	000b      	movs	r3, r1
 8010d24:	6132      	str	r2, [r6, #16]
 8010d26:	6173      	str	r3, [r6, #20]
 8010d28:	e7c7      	b.n	8010cba <__kernel_rem_pio2+0x4f2>
 8010d2a:	9b00      	ldr	r3, [sp, #0]
 8010d2c:	aa4e      	add	r2, sp, #312	; 0x138
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	18d3      	adds	r3, r2, r3
 8010d32:	0028      	movs	r0, r5
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	0021      	movs	r1, r4
 8010d3a:	f7f0 fa6d 	bl	8001218 <__aeabi_dadd>
 8010d3e:	0005      	movs	r5, r0
 8010d40:	000c      	movs	r4, r1
 8010d42:	9b00      	ldr	r3, [sp, #0]
 8010d44:	3b01      	subs	r3, #1
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	9b00      	ldr	r3, [sp, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	daed      	bge.n	8010d2a <__kernel_rem_pio2+0x562>
 8010d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d002      	beq.n	8010d5a <__kernel_rem_pio2+0x592>
 8010d54:	2380      	movs	r3, #128	; 0x80
 8010d56:	061b      	lsls	r3, r3, #24
 8010d58:	18e4      	adds	r4, r4, r3
 8010d5a:	002a      	movs	r2, r5
 8010d5c:	0023      	movs	r3, r4
 8010d5e:	9907      	ldr	r1, [sp, #28]
 8010d60:	600a      	str	r2, [r1, #0]
 8010d62:	604b      	str	r3, [r1, #4]
 8010d64:	e7a9      	b.n	8010cba <__kernel_rem_pio2+0x4f2>
 8010d66:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8010d68:	002c      	movs	r4, r5
 8010d6a:	e7ed      	b.n	8010d48 <__kernel_rem_pio2+0x580>
 8010d6c:	00e3      	lsls	r3, r4, #3
 8010d6e:	aa4e      	add	r2, sp, #312	; 0x138
 8010d70:	18d3      	adds	r3, r2, r3
 8010d72:	0030      	movs	r0, r6
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	0029      	movs	r1, r5
 8010d7a:	f7f0 fa4d 	bl	8001218 <__aeabi_dadd>
 8010d7e:	0006      	movs	r6, r0
 8010d80:	000d      	movs	r5, r1
 8010d82:	3c01      	subs	r4, #1
 8010d84:	2c00      	cmp	r4, #0
 8010d86:	daf1      	bge.n	8010d6c <__kernel_rem_pio2+0x5a4>
 8010d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d8a:	0029      	movs	r1, r5
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <__kernel_rem_pio2+0x5ce>
 8010d90:	2380      	movs	r3, #128	; 0x80
 8010d92:	061b      	lsls	r3, r3, #24
 8010d94:	18e9      	adds	r1, r5, r3
 8010d96:	0032      	movs	r2, r6
 8010d98:	000b      	movs	r3, r1
 8010d9a:	9907      	ldr	r1, [sp, #28]
 8010d9c:	2401      	movs	r4, #1
 8010d9e:	600a      	str	r2, [r1, #0]
 8010da0:	604b      	str	r3, [r1, #4]
 8010da2:	984e      	ldr	r0, [sp, #312]	; 0x138
 8010da4:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8010da6:	002b      	movs	r3, r5
 8010da8:	f7f1 fc12 	bl	80025d0 <__aeabi_dsub>
 8010dac:	0006      	movs	r6, r0
 8010dae:	000d      	movs	r5, r1
 8010db0:	9b00      	ldr	r3, [sp, #0]
 8010db2:	42a3      	cmp	r3, r4
 8010db4:	da0f      	bge.n	8010dd6 <__kernel_rem_pio2+0x60e>
 8010db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <__kernel_rem_pio2+0x5fa>
 8010dbc:	2380      	movs	r3, #128	; 0x80
 8010dbe:	061b      	lsls	r3, r3, #24
 8010dc0:	18ed      	adds	r5, r5, r3
 8010dc2:	0032      	movs	r2, r6
 8010dc4:	002b      	movs	r3, r5
 8010dc6:	9907      	ldr	r1, [sp, #28]
 8010dc8:	608a      	str	r2, [r1, #8]
 8010dca:	60cb      	str	r3, [r1, #12]
 8010dcc:	e775      	b.n	8010cba <__kernel_rem_pio2+0x4f2>
 8010dce:	2600      	movs	r6, #0
 8010dd0:	9c00      	ldr	r4, [sp, #0]
 8010dd2:	0035      	movs	r5, r6
 8010dd4:	e7d6      	b.n	8010d84 <__kernel_rem_pio2+0x5bc>
 8010dd6:	00e3      	lsls	r3, r4, #3
 8010dd8:	aa4e      	add	r2, sp, #312	; 0x138
 8010dda:	18d3      	adds	r3, r2, r3
 8010ddc:	0030      	movs	r0, r6
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	0029      	movs	r1, r5
 8010de4:	f7f0 fa18 	bl	8001218 <__aeabi_dadd>
 8010de8:	3401      	adds	r4, #1
 8010dea:	0006      	movs	r6, r0
 8010dec:	000d      	movs	r5, r1
 8010dee:	e7df      	b.n	8010db0 <__kernel_rem_pio2+0x5e8>
 8010df0:	9b02      	ldr	r3, [sp, #8]
 8010df2:	68ae      	ldr	r6, [r5, #8]
 8010df4:	68ef      	ldr	r7, [r5, #12]
 8010df6:	3b01      	subs	r3, #1
 8010df8:	9302      	str	r3, [sp, #8]
 8010dfa:	682a      	ldr	r2, [r5, #0]
 8010dfc:	686b      	ldr	r3, [r5, #4]
 8010dfe:	9204      	str	r2, [sp, #16]
 8010e00:	9305      	str	r3, [sp, #20]
 8010e02:	9804      	ldr	r0, [sp, #16]
 8010e04:	9905      	ldr	r1, [sp, #20]
 8010e06:	0032      	movs	r2, r6
 8010e08:	003b      	movs	r3, r7
 8010e0a:	f7f0 fa05 	bl	8001218 <__aeabi_dadd>
 8010e0e:	0002      	movs	r2, r0
 8010e10:	000b      	movs	r3, r1
 8010e12:	9008      	str	r0, [sp, #32]
 8010e14:	9109      	str	r1, [sp, #36]	; 0x24
 8010e16:	9804      	ldr	r0, [sp, #16]
 8010e18:	9905      	ldr	r1, [sp, #20]
 8010e1a:	f7f1 fbd9 	bl	80025d0 <__aeabi_dsub>
 8010e1e:	0032      	movs	r2, r6
 8010e20:	003b      	movs	r3, r7
 8010e22:	f7f0 f9f9 	bl	8001218 <__aeabi_dadd>
 8010e26:	9a08      	ldr	r2, [sp, #32]
 8010e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e2a:	60a8      	str	r0, [r5, #8]
 8010e2c:	60e9      	str	r1, [r5, #12]
 8010e2e:	602a      	str	r2, [r5, #0]
 8010e30:	606b      	str	r3, [r5, #4]
 8010e32:	e754      	b.n	8010cde <__kernel_rem_pio2+0x516>
 8010e34:	6826      	ldr	r6, [r4, #0]
 8010e36:	6867      	ldr	r7, [r4, #4]
 8010e38:	68a2      	ldr	r2, [r4, #8]
 8010e3a:	68e3      	ldr	r3, [r4, #12]
 8010e3c:	0030      	movs	r0, r6
 8010e3e:	0039      	movs	r1, r7
 8010e40:	9202      	str	r2, [sp, #8]
 8010e42:	9303      	str	r3, [sp, #12]
 8010e44:	f7f0 f9e8 	bl	8001218 <__aeabi_dadd>
 8010e48:	0002      	movs	r2, r0
 8010e4a:	000b      	movs	r3, r1
 8010e4c:	9004      	str	r0, [sp, #16]
 8010e4e:	9105      	str	r1, [sp, #20]
 8010e50:	0030      	movs	r0, r6
 8010e52:	0039      	movs	r1, r7
 8010e54:	f7f1 fbbc 	bl	80025d0 <__aeabi_dsub>
 8010e58:	9a02      	ldr	r2, [sp, #8]
 8010e5a:	9b03      	ldr	r3, [sp, #12]
 8010e5c:	f7f0 f9dc 	bl	8001218 <__aeabi_dadd>
 8010e60:	9a04      	ldr	r2, [sp, #16]
 8010e62:	9b05      	ldr	r3, [sp, #20]
 8010e64:	60a0      	str	r0, [r4, #8]
 8010e66:	60e1      	str	r1, [r4, #12]
 8010e68:	6022      	str	r2, [r4, #0]
 8010e6a:	6063      	str	r3, [r4, #4]
 8010e6c:	3d01      	subs	r5, #1
 8010e6e:	e73c      	b.n	8010cea <__kernel_rem_pio2+0x522>
 8010e70:	9b00      	ldr	r3, [sp, #0]
 8010e72:	aa4e      	add	r2, sp, #312	; 0x138
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	18d3      	adds	r3, r2, r3
 8010e78:	0020      	movs	r0, r4
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	f7f0 f9cb 	bl	8001218 <__aeabi_dadd>
 8010e82:	9b00      	ldr	r3, [sp, #0]
 8010e84:	0004      	movs	r4, r0
 8010e86:	3b01      	subs	r3, #1
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	e734      	b.n	8010cf6 <__kernel_rem_pio2+0x52e>
 8010e8c:	9b07      	ldr	r3, [sp, #28]
 8010e8e:	9a07      	ldr	r2, [sp, #28]
 8010e90:	601f      	str	r7, [r3, #0]
 8010e92:	2380      	movs	r3, #128	; 0x80
 8010e94:	061b      	lsls	r3, r3, #24
 8010e96:	18f6      	adds	r6, r6, r3
 8010e98:	18c0      	adds	r0, r0, r3
 8010e9a:	18c9      	adds	r1, r1, r3
 8010e9c:	6056      	str	r6, [r2, #4]
 8010e9e:	6095      	str	r5, [r2, #8]
 8010ea0:	60d0      	str	r0, [r2, #12]
 8010ea2:	6114      	str	r4, [r2, #16]
 8010ea4:	6151      	str	r1, [r2, #20]
 8010ea6:	e708      	b.n	8010cba <__kernel_rem_pio2+0x4f2>
 8010ea8:	41700000 	.word	0x41700000
 8010eac:	3e700000 	.word	0x3e700000
 8010eb0:	08015aa0 	.word	0x08015aa0

08010eb4 <__kernel_sin>:
 8010eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eb6:	b089      	sub	sp, #36	; 0x24
 8010eb8:	9202      	str	r2, [sp, #8]
 8010eba:	9303      	str	r3, [sp, #12]
 8010ebc:	22f9      	movs	r2, #249	; 0xf9
 8010ebe:	004b      	lsls	r3, r1, #1
 8010ec0:	0007      	movs	r7, r0
 8010ec2:	000e      	movs	r6, r1
 8010ec4:	085b      	lsrs	r3, r3, #1
 8010ec6:	0592      	lsls	r2, r2, #22
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	da03      	bge.n	8010ed4 <__kernel_sin+0x20>
 8010ecc:	f7f1 ff30 	bl	8002d30 <__aeabi_d2iz>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d04c      	beq.n	8010f6e <__kernel_sin+0xba>
 8010ed4:	003a      	movs	r2, r7
 8010ed6:	0033      	movs	r3, r6
 8010ed8:	0038      	movs	r0, r7
 8010eda:	0031      	movs	r1, r6
 8010edc:	f7f1 f90c 	bl	80020f8 <__aeabi_dmul>
 8010ee0:	0004      	movs	r4, r0
 8010ee2:	000d      	movs	r5, r1
 8010ee4:	0002      	movs	r2, r0
 8010ee6:	000b      	movs	r3, r1
 8010ee8:	0038      	movs	r0, r7
 8010eea:	0031      	movs	r1, r6
 8010eec:	f7f1 f904 	bl	80020f8 <__aeabi_dmul>
 8010ef0:	4a39      	ldr	r2, [pc, #228]	; (8010fd8 <__kernel_sin+0x124>)
 8010ef2:	9000      	str	r0, [sp, #0]
 8010ef4:	9101      	str	r1, [sp, #4]
 8010ef6:	4b39      	ldr	r3, [pc, #228]	; (8010fdc <__kernel_sin+0x128>)
 8010ef8:	0020      	movs	r0, r4
 8010efa:	0029      	movs	r1, r5
 8010efc:	f7f1 f8fc 	bl	80020f8 <__aeabi_dmul>
 8010f00:	4a37      	ldr	r2, [pc, #220]	; (8010fe0 <__kernel_sin+0x12c>)
 8010f02:	4b38      	ldr	r3, [pc, #224]	; (8010fe4 <__kernel_sin+0x130>)
 8010f04:	f7f1 fb64 	bl	80025d0 <__aeabi_dsub>
 8010f08:	0022      	movs	r2, r4
 8010f0a:	002b      	movs	r3, r5
 8010f0c:	f7f1 f8f4 	bl	80020f8 <__aeabi_dmul>
 8010f10:	4a35      	ldr	r2, [pc, #212]	; (8010fe8 <__kernel_sin+0x134>)
 8010f12:	4b36      	ldr	r3, [pc, #216]	; (8010fec <__kernel_sin+0x138>)
 8010f14:	f7f0 f980 	bl	8001218 <__aeabi_dadd>
 8010f18:	0022      	movs	r2, r4
 8010f1a:	002b      	movs	r3, r5
 8010f1c:	f7f1 f8ec 	bl	80020f8 <__aeabi_dmul>
 8010f20:	4a33      	ldr	r2, [pc, #204]	; (8010ff0 <__kernel_sin+0x13c>)
 8010f22:	4b34      	ldr	r3, [pc, #208]	; (8010ff4 <__kernel_sin+0x140>)
 8010f24:	f7f1 fb54 	bl	80025d0 <__aeabi_dsub>
 8010f28:	0022      	movs	r2, r4
 8010f2a:	002b      	movs	r3, r5
 8010f2c:	f7f1 f8e4 	bl	80020f8 <__aeabi_dmul>
 8010f30:	4b31      	ldr	r3, [pc, #196]	; (8010ff8 <__kernel_sin+0x144>)
 8010f32:	4a32      	ldr	r2, [pc, #200]	; (8010ffc <__kernel_sin+0x148>)
 8010f34:	f7f0 f970 	bl	8001218 <__aeabi_dadd>
 8010f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f3a:	9004      	str	r0, [sp, #16]
 8010f3c:	9105      	str	r1, [sp, #20]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d119      	bne.n	8010f76 <__kernel_sin+0xc2>
 8010f42:	0002      	movs	r2, r0
 8010f44:	000b      	movs	r3, r1
 8010f46:	0020      	movs	r0, r4
 8010f48:	0029      	movs	r1, r5
 8010f4a:	f7f1 f8d5 	bl	80020f8 <__aeabi_dmul>
 8010f4e:	4a2c      	ldr	r2, [pc, #176]	; (8011000 <__kernel_sin+0x14c>)
 8010f50:	4b2c      	ldr	r3, [pc, #176]	; (8011004 <__kernel_sin+0x150>)
 8010f52:	f7f1 fb3d 	bl	80025d0 <__aeabi_dsub>
 8010f56:	9a00      	ldr	r2, [sp, #0]
 8010f58:	9b01      	ldr	r3, [sp, #4]
 8010f5a:	f7f1 f8cd 	bl	80020f8 <__aeabi_dmul>
 8010f5e:	0002      	movs	r2, r0
 8010f60:	000b      	movs	r3, r1
 8010f62:	0038      	movs	r0, r7
 8010f64:	0031      	movs	r1, r6
 8010f66:	f7f0 f957 	bl	8001218 <__aeabi_dadd>
 8010f6a:	0007      	movs	r7, r0
 8010f6c:	000e      	movs	r6, r1
 8010f6e:	0038      	movs	r0, r7
 8010f70:	0031      	movs	r1, r6
 8010f72:	b009      	add	sp, #36	; 0x24
 8010f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f76:	2200      	movs	r2, #0
 8010f78:	9802      	ldr	r0, [sp, #8]
 8010f7a:	9903      	ldr	r1, [sp, #12]
 8010f7c:	4b22      	ldr	r3, [pc, #136]	; (8011008 <__kernel_sin+0x154>)
 8010f7e:	f7f1 f8bb 	bl	80020f8 <__aeabi_dmul>
 8010f82:	9a04      	ldr	r2, [sp, #16]
 8010f84:	9b05      	ldr	r3, [sp, #20]
 8010f86:	9006      	str	r0, [sp, #24]
 8010f88:	9107      	str	r1, [sp, #28]
 8010f8a:	9800      	ldr	r0, [sp, #0]
 8010f8c:	9901      	ldr	r1, [sp, #4]
 8010f8e:	f7f1 f8b3 	bl	80020f8 <__aeabi_dmul>
 8010f92:	0002      	movs	r2, r0
 8010f94:	000b      	movs	r3, r1
 8010f96:	9806      	ldr	r0, [sp, #24]
 8010f98:	9907      	ldr	r1, [sp, #28]
 8010f9a:	f7f1 fb19 	bl	80025d0 <__aeabi_dsub>
 8010f9e:	0022      	movs	r2, r4
 8010fa0:	002b      	movs	r3, r5
 8010fa2:	f7f1 f8a9 	bl	80020f8 <__aeabi_dmul>
 8010fa6:	9a02      	ldr	r2, [sp, #8]
 8010fa8:	9b03      	ldr	r3, [sp, #12]
 8010faa:	f7f1 fb11 	bl	80025d0 <__aeabi_dsub>
 8010fae:	4a14      	ldr	r2, [pc, #80]	; (8011000 <__kernel_sin+0x14c>)
 8010fb0:	0004      	movs	r4, r0
 8010fb2:	000d      	movs	r5, r1
 8010fb4:	9800      	ldr	r0, [sp, #0]
 8010fb6:	9901      	ldr	r1, [sp, #4]
 8010fb8:	4b12      	ldr	r3, [pc, #72]	; (8011004 <__kernel_sin+0x150>)
 8010fba:	f7f1 f89d 	bl	80020f8 <__aeabi_dmul>
 8010fbe:	0002      	movs	r2, r0
 8010fc0:	000b      	movs	r3, r1
 8010fc2:	0020      	movs	r0, r4
 8010fc4:	0029      	movs	r1, r5
 8010fc6:	f7f0 f927 	bl	8001218 <__aeabi_dadd>
 8010fca:	0002      	movs	r2, r0
 8010fcc:	000b      	movs	r3, r1
 8010fce:	0038      	movs	r0, r7
 8010fd0:	0031      	movs	r1, r6
 8010fd2:	f7f1 fafd 	bl	80025d0 <__aeabi_dsub>
 8010fd6:	e7c8      	b.n	8010f6a <__kernel_sin+0xb6>
 8010fd8:	5acfd57c 	.word	0x5acfd57c
 8010fdc:	3de5d93a 	.word	0x3de5d93a
 8010fe0:	8a2b9ceb 	.word	0x8a2b9ceb
 8010fe4:	3e5ae5e6 	.word	0x3e5ae5e6
 8010fe8:	57b1fe7d 	.word	0x57b1fe7d
 8010fec:	3ec71de3 	.word	0x3ec71de3
 8010ff0:	19c161d5 	.word	0x19c161d5
 8010ff4:	3f2a01a0 	.word	0x3f2a01a0
 8010ff8:	3f811111 	.word	0x3f811111
 8010ffc:	1110f8a6 	.word	0x1110f8a6
 8011000:	55555549 	.word	0x55555549
 8011004:	3fc55555 	.word	0x3fc55555
 8011008:	3fe00000 	.word	0x3fe00000

0801100c <atan>:
 801100c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801100e:	4b98      	ldr	r3, [pc, #608]	; (8011270 <atan+0x264>)
 8011010:	b085      	sub	sp, #20
 8011012:	004e      	lsls	r6, r1, #1
 8011014:	0004      	movs	r4, r0
 8011016:	000d      	movs	r5, r1
 8011018:	9103      	str	r1, [sp, #12]
 801101a:	0876      	lsrs	r6, r6, #1
 801101c:	429e      	cmp	r6, r3
 801101e:	dd18      	ble.n	8011052 <atan+0x46>
 8011020:	4b94      	ldr	r3, [pc, #592]	; (8011274 <atan+0x268>)
 8011022:	429e      	cmp	r6, r3
 8011024:	dc02      	bgt.n	801102c <atan+0x20>
 8011026:	d10a      	bne.n	801103e <atan+0x32>
 8011028:	2800      	cmp	r0, #0
 801102a:	d008      	beq.n	801103e <atan+0x32>
 801102c:	0022      	movs	r2, r4
 801102e:	002b      	movs	r3, r5
 8011030:	0020      	movs	r0, r4
 8011032:	0029      	movs	r1, r5
 8011034:	f7f0 f8f0 	bl	8001218 <__aeabi_dadd>
 8011038:	0004      	movs	r4, r0
 801103a:	000d      	movs	r5, r1
 801103c:	e005      	b.n	801104a <atan+0x3e>
 801103e:	9b03      	ldr	r3, [sp, #12]
 8011040:	4c8d      	ldr	r4, [pc, #564]	; (8011278 <atan+0x26c>)
 8011042:	2b00      	cmp	r3, #0
 8011044:	dd00      	ble.n	8011048 <atan+0x3c>
 8011046:	e110      	b.n	801126a <atan+0x25e>
 8011048:	4d8c      	ldr	r5, [pc, #560]	; (801127c <atan+0x270>)
 801104a:	0020      	movs	r0, r4
 801104c:	0029      	movs	r1, r5
 801104e:	b005      	add	sp, #20
 8011050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011052:	4b8b      	ldr	r3, [pc, #556]	; (8011280 <atan+0x274>)
 8011054:	429e      	cmp	r6, r3
 8011056:	dc0f      	bgt.n	8011078 <atan+0x6c>
 8011058:	4b8a      	ldr	r3, [pc, #552]	; (8011284 <atan+0x278>)
 801105a:	429e      	cmp	r6, r3
 801105c:	dc09      	bgt.n	8011072 <atan+0x66>
 801105e:	4a8a      	ldr	r2, [pc, #552]	; (8011288 <atan+0x27c>)
 8011060:	4b8a      	ldr	r3, [pc, #552]	; (801128c <atan+0x280>)
 8011062:	f7f0 f8d9 	bl	8001218 <__aeabi_dadd>
 8011066:	2200      	movs	r2, #0
 8011068:	4b89      	ldr	r3, [pc, #548]	; (8011290 <atan+0x284>)
 801106a:	f7ef f9f5 	bl	8000458 <__aeabi_dcmpgt>
 801106e:	2800      	cmp	r0, #0
 8011070:	d1eb      	bne.n	801104a <atan+0x3e>
 8011072:	2301      	movs	r3, #1
 8011074:	425b      	negs	r3, r3
 8011076:	e025      	b.n	80110c4 <atan+0xb8>
 8011078:	f000 f948 	bl	801130c <fabs>
 801107c:	4b85      	ldr	r3, [pc, #532]	; (8011294 <atan+0x288>)
 801107e:	0004      	movs	r4, r0
 8011080:	000d      	movs	r5, r1
 8011082:	429e      	cmp	r6, r3
 8011084:	dd00      	ble.n	8011088 <atan+0x7c>
 8011086:	e0aa      	b.n	80111de <atan+0x1d2>
 8011088:	4b83      	ldr	r3, [pc, #524]	; (8011298 <atan+0x28c>)
 801108a:	429e      	cmp	r6, r3
 801108c:	dd00      	ble.n	8011090 <atan+0x84>
 801108e:	e090      	b.n	80111b2 <atan+0x1a6>
 8011090:	0002      	movs	r2, r0
 8011092:	000b      	movs	r3, r1
 8011094:	f7f0 f8c0 	bl	8001218 <__aeabi_dadd>
 8011098:	2200      	movs	r2, #0
 801109a:	4b7d      	ldr	r3, [pc, #500]	; (8011290 <atan+0x284>)
 801109c:	f7f1 fa98 	bl	80025d0 <__aeabi_dsub>
 80110a0:	2380      	movs	r3, #128	; 0x80
 80110a2:	0006      	movs	r6, r0
 80110a4:	000f      	movs	r7, r1
 80110a6:	2200      	movs	r2, #0
 80110a8:	0020      	movs	r0, r4
 80110aa:	0029      	movs	r1, r5
 80110ac:	05db      	lsls	r3, r3, #23
 80110ae:	f7f0 f8b3 	bl	8001218 <__aeabi_dadd>
 80110b2:	000b      	movs	r3, r1
 80110b4:	0002      	movs	r2, r0
 80110b6:	0039      	movs	r1, r7
 80110b8:	0030      	movs	r0, r6
 80110ba:	f7f0 fc17 	bl	80018ec <__aeabi_ddiv>
 80110be:	2300      	movs	r3, #0
 80110c0:	0004      	movs	r4, r0
 80110c2:	000d      	movs	r5, r1
 80110c4:	0022      	movs	r2, r4
 80110c6:	9302      	str	r3, [sp, #8]
 80110c8:	0020      	movs	r0, r4
 80110ca:	002b      	movs	r3, r5
 80110cc:	0029      	movs	r1, r5
 80110ce:	f7f1 f813 	bl	80020f8 <__aeabi_dmul>
 80110d2:	0002      	movs	r2, r0
 80110d4:	000b      	movs	r3, r1
 80110d6:	9000      	str	r0, [sp, #0]
 80110d8:	9101      	str	r1, [sp, #4]
 80110da:	f7f1 f80d 	bl	80020f8 <__aeabi_dmul>
 80110de:	0006      	movs	r6, r0
 80110e0:	000f      	movs	r7, r1
 80110e2:	4a6e      	ldr	r2, [pc, #440]	; (801129c <atan+0x290>)
 80110e4:	4b6e      	ldr	r3, [pc, #440]	; (80112a0 <atan+0x294>)
 80110e6:	f7f1 f807 	bl	80020f8 <__aeabi_dmul>
 80110ea:	4a6e      	ldr	r2, [pc, #440]	; (80112a4 <atan+0x298>)
 80110ec:	4b6e      	ldr	r3, [pc, #440]	; (80112a8 <atan+0x29c>)
 80110ee:	f7f0 f893 	bl	8001218 <__aeabi_dadd>
 80110f2:	0032      	movs	r2, r6
 80110f4:	003b      	movs	r3, r7
 80110f6:	f7f0 ffff 	bl	80020f8 <__aeabi_dmul>
 80110fa:	4a6c      	ldr	r2, [pc, #432]	; (80112ac <atan+0x2a0>)
 80110fc:	4b6c      	ldr	r3, [pc, #432]	; (80112b0 <atan+0x2a4>)
 80110fe:	f7f0 f88b 	bl	8001218 <__aeabi_dadd>
 8011102:	0032      	movs	r2, r6
 8011104:	003b      	movs	r3, r7
 8011106:	f7f0 fff7 	bl	80020f8 <__aeabi_dmul>
 801110a:	4a6a      	ldr	r2, [pc, #424]	; (80112b4 <atan+0x2a8>)
 801110c:	4b6a      	ldr	r3, [pc, #424]	; (80112b8 <atan+0x2ac>)
 801110e:	f7f0 f883 	bl	8001218 <__aeabi_dadd>
 8011112:	0032      	movs	r2, r6
 8011114:	003b      	movs	r3, r7
 8011116:	f7f0 ffef 	bl	80020f8 <__aeabi_dmul>
 801111a:	4a68      	ldr	r2, [pc, #416]	; (80112bc <atan+0x2b0>)
 801111c:	4b68      	ldr	r3, [pc, #416]	; (80112c0 <atan+0x2b4>)
 801111e:	f7f0 f87b 	bl	8001218 <__aeabi_dadd>
 8011122:	0032      	movs	r2, r6
 8011124:	003b      	movs	r3, r7
 8011126:	f7f0 ffe7 	bl	80020f8 <__aeabi_dmul>
 801112a:	4a66      	ldr	r2, [pc, #408]	; (80112c4 <atan+0x2b8>)
 801112c:	4b66      	ldr	r3, [pc, #408]	; (80112c8 <atan+0x2bc>)
 801112e:	f7f0 f873 	bl	8001218 <__aeabi_dadd>
 8011132:	9a00      	ldr	r2, [sp, #0]
 8011134:	9b01      	ldr	r3, [sp, #4]
 8011136:	f7f0 ffdf 	bl	80020f8 <__aeabi_dmul>
 801113a:	4a64      	ldr	r2, [pc, #400]	; (80112cc <atan+0x2c0>)
 801113c:	9000      	str	r0, [sp, #0]
 801113e:	9101      	str	r1, [sp, #4]
 8011140:	4b63      	ldr	r3, [pc, #396]	; (80112d0 <atan+0x2c4>)
 8011142:	0030      	movs	r0, r6
 8011144:	0039      	movs	r1, r7
 8011146:	f7f0 ffd7 	bl	80020f8 <__aeabi_dmul>
 801114a:	4a62      	ldr	r2, [pc, #392]	; (80112d4 <atan+0x2c8>)
 801114c:	4b62      	ldr	r3, [pc, #392]	; (80112d8 <atan+0x2cc>)
 801114e:	f7f1 fa3f 	bl	80025d0 <__aeabi_dsub>
 8011152:	0032      	movs	r2, r6
 8011154:	003b      	movs	r3, r7
 8011156:	f7f0 ffcf 	bl	80020f8 <__aeabi_dmul>
 801115a:	4a60      	ldr	r2, [pc, #384]	; (80112dc <atan+0x2d0>)
 801115c:	4b60      	ldr	r3, [pc, #384]	; (80112e0 <atan+0x2d4>)
 801115e:	f7f1 fa37 	bl	80025d0 <__aeabi_dsub>
 8011162:	0032      	movs	r2, r6
 8011164:	003b      	movs	r3, r7
 8011166:	f7f0 ffc7 	bl	80020f8 <__aeabi_dmul>
 801116a:	4a5e      	ldr	r2, [pc, #376]	; (80112e4 <atan+0x2d8>)
 801116c:	4b5e      	ldr	r3, [pc, #376]	; (80112e8 <atan+0x2dc>)
 801116e:	f7f1 fa2f 	bl	80025d0 <__aeabi_dsub>
 8011172:	0032      	movs	r2, r6
 8011174:	003b      	movs	r3, r7
 8011176:	f7f0 ffbf 	bl	80020f8 <__aeabi_dmul>
 801117a:	4a5c      	ldr	r2, [pc, #368]	; (80112ec <atan+0x2e0>)
 801117c:	4b5c      	ldr	r3, [pc, #368]	; (80112f0 <atan+0x2e4>)
 801117e:	f7f1 fa27 	bl	80025d0 <__aeabi_dsub>
 8011182:	0032      	movs	r2, r6
 8011184:	003b      	movs	r3, r7
 8011186:	f7f0 ffb7 	bl	80020f8 <__aeabi_dmul>
 801118a:	0002      	movs	r2, r0
 801118c:	000b      	movs	r3, r1
 801118e:	9800      	ldr	r0, [sp, #0]
 8011190:	9901      	ldr	r1, [sp, #4]
 8011192:	f7f0 f841 	bl	8001218 <__aeabi_dadd>
 8011196:	002b      	movs	r3, r5
 8011198:	0022      	movs	r2, r4
 801119a:	f7f0 ffad 	bl	80020f8 <__aeabi_dmul>
 801119e:	9b02      	ldr	r3, [sp, #8]
 80111a0:	3301      	adds	r3, #1
 80111a2:	d143      	bne.n	801122c <atan+0x220>
 80111a4:	0002      	movs	r2, r0
 80111a6:	000b      	movs	r3, r1
 80111a8:	0020      	movs	r0, r4
 80111aa:	0029      	movs	r1, r5
 80111ac:	f7f1 fa10 	bl	80025d0 <__aeabi_dsub>
 80111b0:	e742      	b.n	8011038 <atan+0x2c>
 80111b2:	2200      	movs	r2, #0
 80111b4:	4b36      	ldr	r3, [pc, #216]	; (8011290 <atan+0x284>)
 80111b6:	f7f1 fa0b 	bl	80025d0 <__aeabi_dsub>
 80111ba:	2200      	movs	r2, #0
 80111bc:	0006      	movs	r6, r0
 80111be:	000f      	movs	r7, r1
 80111c0:	0020      	movs	r0, r4
 80111c2:	0029      	movs	r1, r5
 80111c4:	4b32      	ldr	r3, [pc, #200]	; (8011290 <atan+0x284>)
 80111c6:	f7f0 f827 	bl	8001218 <__aeabi_dadd>
 80111ca:	000b      	movs	r3, r1
 80111cc:	0002      	movs	r2, r0
 80111ce:	0039      	movs	r1, r7
 80111d0:	0030      	movs	r0, r6
 80111d2:	f7f0 fb8b 	bl	80018ec <__aeabi_ddiv>
 80111d6:	2301      	movs	r3, #1
 80111d8:	0004      	movs	r4, r0
 80111da:	000d      	movs	r5, r1
 80111dc:	e772      	b.n	80110c4 <atan+0xb8>
 80111de:	4b45      	ldr	r3, [pc, #276]	; (80112f4 <atan+0x2e8>)
 80111e0:	429e      	cmp	r6, r3
 80111e2:	dc19      	bgt.n	8011218 <atan+0x20c>
 80111e4:	2200      	movs	r2, #0
 80111e6:	4b44      	ldr	r3, [pc, #272]	; (80112f8 <atan+0x2ec>)
 80111e8:	f7f1 f9f2 	bl	80025d0 <__aeabi_dsub>
 80111ec:	2200      	movs	r2, #0
 80111ee:	0006      	movs	r6, r0
 80111f0:	000f      	movs	r7, r1
 80111f2:	0020      	movs	r0, r4
 80111f4:	0029      	movs	r1, r5
 80111f6:	4b40      	ldr	r3, [pc, #256]	; (80112f8 <atan+0x2ec>)
 80111f8:	f7f0 ff7e 	bl	80020f8 <__aeabi_dmul>
 80111fc:	2200      	movs	r2, #0
 80111fe:	4b24      	ldr	r3, [pc, #144]	; (8011290 <atan+0x284>)
 8011200:	f7f0 f80a 	bl	8001218 <__aeabi_dadd>
 8011204:	000b      	movs	r3, r1
 8011206:	0002      	movs	r2, r0
 8011208:	0039      	movs	r1, r7
 801120a:	0030      	movs	r0, r6
 801120c:	f7f0 fb6e 	bl	80018ec <__aeabi_ddiv>
 8011210:	2302      	movs	r3, #2
 8011212:	0004      	movs	r4, r0
 8011214:	000d      	movs	r5, r1
 8011216:	e755      	b.n	80110c4 <atan+0xb8>
 8011218:	000b      	movs	r3, r1
 801121a:	0002      	movs	r2, r0
 801121c:	4937      	ldr	r1, [pc, #220]	; (80112fc <atan+0x2f0>)
 801121e:	2000      	movs	r0, #0
 8011220:	f7f0 fb64 	bl	80018ec <__aeabi_ddiv>
 8011224:	2303      	movs	r3, #3
 8011226:	0004      	movs	r4, r0
 8011228:	000d      	movs	r5, r1
 801122a:	e74b      	b.n	80110c4 <atan+0xb8>
 801122c:	9b02      	ldr	r3, [sp, #8]
 801122e:	4f34      	ldr	r7, [pc, #208]	; (8011300 <atan+0x2f4>)
 8011230:	00de      	lsls	r6, r3, #3
 8011232:	4b34      	ldr	r3, [pc, #208]	; (8011304 <atan+0x2f8>)
 8011234:	19bf      	adds	r7, r7, r6
 8011236:	199e      	adds	r6, r3, r6
 8011238:	6832      	ldr	r2, [r6, #0]
 801123a:	6873      	ldr	r3, [r6, #4]
 801123c:	f7f1 f9c8 	bl	80025d0 <__aeabi_dsub>
 8011240:	0022      	movs	r2, r4
 8011242:	002b      	movs	r3, r5
 8011244:	f7f1 f9c4 	bl	80025d0 <__aeabi_dsub>
 8011248:	000b      	movs	r3, r1
 801124a:	0002      	movs	r2, r0
 801124c:	6838      	ldr	r0, [r7, #0]
 801124e:	6879      	ldr	r1, [r7, #4]
 8011250:	f7f1 f9be 	bl	80025d0 <__aeabi_dsub>
 8011254:	9b03      	ldr	r3, [sp, #12]
 8011256:	0004      	movs	r4, r0
 8011258:	000d      	movs	r5, r1
 801125a:	2b00      	cmp	r3, #0
 801125c:	db00      	blt.n	8011260 <atan+0x254>
 801125e:	e6f4      	b.n	801104a <atan+0x3e>
 8011260:	2180      	movs	r1, #128	; 0x80
 8011262:	0609      	lsls	r1, r1, #24
 8011264:	186b      	adds	r3, r5, r1
 8011266:	001d      	movs	r5, r3
 8011268:	e6ef      	b.n	801104a <atan+0x3e>
 801126a:	4d27      	ldr	r5, [pc, #156]	; (8011308 <atan+0x2fc>)
 801126c:	e6ed      	b.n	801104a <atan+0x3e>
 801126e:	46c0      	nop			; (mov r8, r8)
 8011270:	440fffff 	.word	0x440fffff
 8011274:	7ff00000 	.word	0x7ff00000
 8011278:	54442d18 	.word	0x54442d18
 801127c:	bff921fb 	.word	0xbff921fb
 8011280:	3fdbffff 	.word	0x3fdbffff
 8011284:	3e1fffff 	.word	0x3e1fffff
 8011288:	8800759c 	.word	0x8800759c
 801128c:	7e37e43c 	.word	0x7e37e43c
 8011290:	3ff00000 	.word	0x3ff00000
 8011294:	3ff2ffff 	.word	0x3ff2ffff
 8011298:	3fe5ffff 	.word	0x3fe5ffff
 801129c:	e322da11 	.word	0xe322da11
 80112a0:	3f90ad3a 	.word	0x3f90ad3a
 80112a4:	24760deb 	.word	0x24760deb
 80112a8:	3fa97b4b 	.word	0x3fa97b4b
 80112ac:	a0d03d51 	.word	0xa0d03d51
 80112b0:	3fb10d66 	.word	0x3fb10d66
 80112b4:	c54c206e 	.word	0xc54c206e
 80112b8:	3fb745cd 	.word	0x3fb745cd
 80112bc:	920083ff 	.word	0x920083ff
 80112c0:	3fc24924 	.word	0x3fc24924
 80112c4:	5555550d 	.word	0x5555550d
 80112c8:	3fd55555 	.word	0x3fd55555
 80112cc:	2c6a6c2f 	.word	0x2c6a6c2f
 80112d0:	bfa2b444 	.word	0xbfa2b444
 80112d4:	52defd9a 	.word	0x52defd9a
 80112d8:	3fadde2d 	.word	0x3fadde2d
 80112dc:	af749a6d 	.word	0xaf749a6d
 80112e0:	3fb3b0f2 	.word	0x3fb3b0f2
 80112e4:	fe231671 	.word	0xfe231671
 80112e8:	3fbc71c6 	.word	0x3fbc71c6
 80112ec:	9998ebc4 	.word	0x9998ebc4
 80112f0:	3fc99999 	.word	0x3fc99999
 80112f4:	40037fff 	.word	0x40037fff
 80112f8:	3ff80000 	.word	0x3ff80000
 80112fc:	bff00000 	.word	0xbff00000
 8011300:	08015af0 	.word	0x08015af0
 8011304:	08015b10 	.word	0x08015b10
 8011308:	3ff921fb 	.word	0x3ff921fb

0801130c <fabs>:
 801130c:	004b      	lsls	r3, r1, #1
 801130e:	0859      	lsrs	r1, r3, #1
 8011310:	4770      	bx	lr
	...

08011314 <floor>:
 8011314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011316:	004b      	lsls	r3, r1, #1
 8011318:	4a3d      	ldr	r2, [pc, #244]	; (8011410 <floor+0xfc>)
 801131a:	0d5b      	lsrs	r3, r3, #21
 801131c:	189f      	adds	r7, r3, r2
 801131e:	4684      	mov	ip, r0
 8011320:	000e      	movs	r6, r1
 8011322:	000d      	movs	r5, r1
 8011324:	0004      	movs	r4, r0
 8011326:	9001      	str	r0, [sp, #4]
 8011328:	2f13      	cmp	r7, #19
 801132a:	dc34      	bgt.n	8011396 <floor+0x82>
 801132c:	2f00      	cmp	r7, #0
 801132e:	da16      	bge.n	801135e <floor+0x4a>
 8011330:	4a38      	ldr	r2, [pc, #224]	; (8011414 <floor+0x100>)
 8011332:	4b39      	ldr	r3, [pc, #228]	; (8011418 <floor+0x104>)
 8011334:	4660      	mov	r0, ip
 8011336:	0031      	movs	r1, r6
 8011338:	f7ef ff6e 	bl	8001218 <__aeabi_dadd>
 801133c:	2200      	movs	r2, #0
 801133e:	2300      	movs	r3, #0
 8011340:	f7ef f88a 	bl	8000458 <__aeabi_dcmpgt>
 8011344:	2800      	cmp	r0, #0
 8011346:	d007      	beq.n	8011358 <floor+0x44>
 8011348:	2e00      	cmp	r6, #0
 801134a:	da5d      	bge.n	8011408 <floor+0xf4>
 801134c:	0073      	lsls	r3, r6, #1
 801134e:	085b      	lsrs	r3, r3, #1
 8011350:	431c      	orrs	r4, r3
 8011352:	d001      	beq.n	8011358 <floor+0x44>
 8011354:	2400      	movs	r4, #0
 8011356:	4d31      	ldr	r5, [pc, #196]	; (801141c <floor+0x108>)
 8011358:	46a4      	mov	ip, r4
 801135a:	002e      	movs	r6, r5
 801135c:	e029      	b.n	80113b2 <floor+0x9e>
 801135e:	4b30      	ldr	r3, [pc, #192]	; (8011420 <floor+0x10c>)
 8011360:	413b      	asrs	r3, r7
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	400b      	ands	r3, r1
 8011366:	4303      	orrs	r3, r0
 8011368:	d023      	beq.n	80113b2 <floor+0x9e>
 801136a:	4a2a      	ldr	r2, [pc, #168]	; (8011414 <floor+0x100>)
 801136c:	4b2a      	ldr	r3, [pc, #168]	; (8011418 <floor+0x104>)
 801136e:	4660      	mov	r0, ip
 8011370:	0031      	movs	r1, r6
 8011372:	f7ef ff51 	bl	8001218 <__aeabi_dadd>
 8011376:	2200      	movs	r2, #0
 8011378:	2300      	movs	r3, #0
 801137a:	f7ef f86d 	bl	8000458 <__aeabi_dcmpgt>
 801137e:	2800      	cmp	r0, #0
 8011380:	d0ea      	beq.n	8011358 <floor+0x44>
 8011382:	2e00      	cmp	r6, #0
 8011384:	da03      	bge.n	801138e <floor+0x7a>
 8011386:	2380      	movs	r3, #128	; 0x80
 8011388:	035b      	lsls	r3, r3, #13
 801138a:	413b      	asrs	r3, r7
 801138c:	18f5      	adds	r5, r6, r3
 801138e:	9b00      	ldr	r3, [sp, #0]
 8011390:	2400      	movs	r4, #0
 8011392:	439d      	bics	r5, r3
 8011394:	e7e0      	b.n	8011358 <floor+0x44>
 8011396:	2f33      	cmp	r7, #51	; 0x33
 8011398:	dd0f      	ble.n	80113ba <floor+0xa6>
 801139a:	2380      	movs	r3, #128	; 0x80
 801139c:	00db      	lsls	r3, r3, #3
 801139e:	429f      	cmp	r7, r3
 80113a0:	d107      	bne.n	80113b2 <floor+0x9e>
 80113a2:	0002      	movs	r2, r0
 80113a4:	000b      	movs	r3, r1
 80113a6:	4660      	mov	r0, ip
 80113a8:	0031      	movs	r1, r6
 80113aa:	f7ef ff35 	bl	8001218 <__aeabi_dadd>
 80113ae:	4684      	mov	ip, r0
 80113b0:	000e      	movs	r6, r1
 80113b2:	4660      	mov	r0, ip
 80113b4:	0031      	movs	r1, r6
 80113b6:	b003      	add	sp, #12
 80113b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ba:	4a1a      	ldr	r2, [pc, #104]	; (8011424 <floor+0x110>)
 80113bc:	189b      	adds	r3, r3, r2
 80113be:	2201      	movs	r2, #1
 80113c0:	4252      	negs	r2, r2
 80113c2:	40da      	lsrs	r2, r3
 80113c4:	9200      	str	r2, [sp, #0]
 80113c6:	4210      	tst	r0, r2
 80113c8:	d0f3      	beq.n	80113b2 <floor+0x9e>
 80113ca:	4a12      	ldr	r2, [pc, #72]	; (8011414 <floor+0x100>)
 80113cc:	4b12      	ldr	r3, [pc, #72]	; (8011418 <floor+0x104>)
 80113ce:	4660      	mov	r0, ip
 80113d0:	0031      	movs	r1, r6
 80113d2:	f7ef ff21 	bl	8001218 <__aeabi_dadd>
 80113d6:	2200      	movs	r2, #0
 80113d8:	2300      	movs	r3, #0
 80113da:	f7ef f83d 	bl	8000458 <__aeabi_dcmpgt>
 80113de:	2800      	cmp	r0, #0
 80113e0:	d0ba      	beq.n	8011358 <floor+0x44>
 80113e2:	2e00      	cmp	r6, #0
 80113e4:	da02      	bge.n	80113ec <floor+0xd8>
 80113e6:	2f14      	cmp	r7, #20
 80113e8:	d103      	bne.n	80113f2 <floor+0xde>
 80113ea:	3501      	adds	r5, #1
 80113ec:	9b00      	ldr	r3, [sp, #0]
 80113ee:	439c      	bics	r4, r3
 80113f0:	e7b2      	b.n	8011358 <floor+0x44>
 80113f2:	2334      	movs	r3, #52	; 0x34
 80113f4:	1bdf      	subs	r7, r3, r7
 80113f6:	3b33      	subs	r3, #51	; 0x33
 80113f8:	40bb      	lsls	r3, r7
 80113fa:	18e4      	adds	r4, r4, r3
 80113fc:	9b01      	ldr	r3, [sp, #4]
 80113fe:	429c      	cmp	r4, r3
 8011400:	419b      	sbcs	r3, r3
 8011402:	425b      	negs	r3, r3
 8011404:	18f5      	adds	r5, r6, r3
 8011406:	e7f1      	b.n	80113ec <floor+0xd8>
 8011408:	2400      	movs	r4, #0
 801140a:	0025      	movs	r5, r4
 801140c:	e7a4      	b.n	8011358 <floor+0x44>
 801140e:	46c0      	nop			; (mov r8, r8)
 8011410:	fffffc01 	.word	0xfffffc01
 8011414:	8800759c 	.word	0x8800759c
 8011418:	7e37e43c 	.word	0x7e37e43c
 801141c:	bff00000 	.word	0xbff00000
 8011420:	000fffff 	.word	0x000fffff
 8011424:	fffffbed 	.word	0xfffffbed

08011428 <nan>:
 8011428:	2000      	movs	r0, #0
 801142a:	4901      	ldr	r1, [pc, #4]	; (8011430 <nan+0x8>)
 801142c:	4770      	bx	lr
 801142e:	46c0      	nop			; (mov r8, r8)
 8011430:	7ff80000 	.word	0x7ff80000

08011434 <scalbn>:
 8011434:	004b      	lsls	r3, r1, #1
 8011436:	b570      	push	{r4, r5, r6, lr}
 8011438:	0d5b      	lsrs	r3, r3, #21
 801143a:	0014      	movs	r4, r2
 801143c:	000a      	movs	r2, r1
 801143e:	2b00      	cmp	r3, #0
 8011440:	d10d      	bne.n	801145e <scalbn+0x2a>
 8011442:	004b      	lsls	r3, r1, #1
 8011444:	085b      	lsrs	r3, r3, #1
 8011446:	4303      	orrs	r3, r0
 8011448:	d010      	beq.n	801146c <scalbn+0x38>
 801144a:	4b27      	ldr	r3, [pc, #156]	; (80114e8 <scalbn+0xb4>)
 801144c:	2200      	movs	r2, #0
 801144e:	f7f0 fe53 	bl	80020f8 <__aeabi_dmul>
 8011452:	4b26      	ldr	r3, [pc, #152]	; (80114ec <scalbn+0xb8>)
 8011454:	429c      	cmp	r4, r3
 8011456:	da0a      	bge.n	801146e <scalbn+0x3a>
 8011458:	4a25      	ldr	r2, [pc, #148]	; (80114f0 <scalbn+0xbc>)
 801145a:	4b26      	ldr	r3, [pc, #152]	; (80114f4 <scalbn+0xc0>)
 801145c:	e019      	b.n	8011492 <scalbn+0x5e>
 801145e:	4d26      	ldr	r5, [pc, #152]	; (80114f8 <scalbn+0xc4>)
 8011460:	42ab      	cmp	r3, r5
 8011462:	d108      	bne.n	8011476 <scalbn+0x42>
 8011464:	0002      	movs	r2, r0
 8011466:	000b      	movs	r3, r1
 8011468:	f7ef fed6 	bl	8001218 <__aeabi_dadd>
 801146c:	bd70      	pop	{r4, r5, r6, pc}
 801146e:	000a      	movs	r2, r1
 8011470:	004b      	lsls	r3, r1, #1
 8011472:	0d5b      	lsrs	r3, r3, #21
 8011474:	3b36      	subs	r3, #54	; 0x36
 8011476:	4d21      	ldr	r5, [pc, #132]	; (80114fc <scalbn+0xc8>)
 8011478:	18e3      	adds	r3, r4, r3
 801147a:	42ab      	cmp	r3, r5
 801147c:	dd0c      	ble.n	8011498 <scalbn+0x64>
 801147e:	4c20      	ldr	r4, [pc, #128]	; (8011500 <scalbn+0xcc>)
 8011480:	4d20      	ldr	r5, [pc, #128]	; (8011504 <scalbn+0xd0>)
 8011482:	2900      	cmp	r1, #0
 8011484:	da01      	bge.n	801148a <scalbn+0x56>
 8011486:	4c1e      	ldr	r4, [pc, #120]	; (8011500 <scalbn+0xcc>)
 8011488:	4d1f      	ldr	r5, [pc, #124]	; (8011508 <scalbn+0xd4>)
 801148a:	0020      	movs	r0, r4
 801148c:	0029      	movs	r1, r5
 801148e:	4a1c      	ldr	r2, [pc, #112]	; (8011500 <scalbn+0xcc>)
 8011490:	4b1c      	ldr	r3, [pc, #112]	; (8011504 <scalbn+0xd0>)
 8011492:	f7f0 fe31 	bl	80020f8 <__aeabi_dmul>
 8011496:	e7e9      	b.n	801146c <scalbn+0x38>
 8011498:	2b00      	cmp	r3, #0
 801149a:	dd05      	ble.n	80114a8 <scalbn+0x74>
 801149c:	4c1b      	ldr	r4, [pc, #108]	; (801150c <scalbn+0xd8>)
 801149e:	051b      	lsls	r3, r3, #20
 80114a0:	4022      	ands	r2, r4
 80114a2:	431a      	orrs	r2, r3
 80114a4:	0011      	movs	r1, r2
 80114a6:	e7e1      	b.n	801146c <scalbn+0x38>
 80114a8:	001d      	movs	r5, r3
 80114aa:	3535      	adds	r5, #53	; 0x35
 80114ac:	da13      	bge.n	80114d6 <scalbn+0xa2>
 80114ae:	4a18      	ldr	r2, [pc, #96]	; (8011510 <scalbn+0xdc>)
 80114b0:	0fcb      	lsrs	r3, r1, #31
 80114b2:	4294      	cmp	r4, r2
 80114b4:	dd08      	ble.n	80114c8 <scalbn+0x94>
 80114b6:	4812      	ldr	r0, [pc, #72]	; (8011500 <scalbn+0xcc>)
 80114b8:	4912      	ldr	r1, [pc, #72]	; (8011504 <scalbn+0xd0>)
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d001      	beq.n	80114c2 <scalbn+0x8e>
 80114be:	4810      	ldr	r0, [pc, #64]	; (8011500 <scalbn+0xcc>)
 80114c0:	4911      	ldr	r1, [pc, #68]	; (8011508 <scalbn+0xd4>)
 80114c2:	4a0f      	ldr	r2, [pc, #60]	; (8011500 <scalbn+0xcc>)
 80114c4:	4b0f      	ldr	r3, [pc, #60]	; (8011504 <scalbn+0xd0>)
 80114c6:	e7e4      	b.n	8011492 <scalbn+0x5e>
 80114c8:	4809      	ldr	r0, [pc, #36]	; (80114f0 <scalbn+0xbc>)
 80114ca:	490a      	ldr	r1, [pc, #40]	; (80114f4 <scalbn+0xc0>)
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d0c3      	beq.n	8011458 <scalbn+0x24>
 80114d0:	4807      	ldr	r0, [pc, #28]	; (80114f0 <scalbn+0xbc>)
 80114d2:	4910      	ldr	r1, [pc, #64]	; (8011514 <scalbn+0xe0>)
 80114d4:	e7c0      	b.n	8011458 <scalbn+0x24>
 80114d6:	4c0d      	ldr	r4, [pc, #52]	; (801150c <scalbn+0xd8>)
 80114d8:	3336      	adds	r3, #54	; 0x36
 80114da:	4022      	ands	r2, r4
 80114dc:	051b      	lsls	r3, r3, #20
 80114de:	4313      	orrs	r3, r2
 80114e0:	0019      	movs	r1, r3
 80114e2:	2200      	movs	r2, #0
 80114e4:	4b0c      	ldr	r3, [pc, #48]	; (8011518 <scalbn+0xe4>)
 80114e6:	e7d4      	b.n	8011492 <scalbn+0x5e>
 80114e8:	43500000 	.word	0x43500000
 80114ec:	ffff3cb0 	.word	0xffff3cb0
 80114f0:	c2f8f359 	.word	0xc2f8f359
 80114f4:	01a56e1f 	.word	0x01a56e1f
 80114f8:	000007ff 	.word	0x000007ff
 80114fc:	000007fe 	.word	0x000007fe
 8011500:	8800759c 	.word	0x8800759c
 8011504:	7e37e43c 	.word	0x7e37e43c
 8011508:	fe37e43c 	.word	0xfe37e43c
 801150c:	800fffff 	.word	0x800fffff
 8011510:	0000c350 	.word	0x0000c350
 8011514:	81a56e1f 	.word	0x81a56e1f
 8011518:	3c900000 	.word	0x3c900000

0801151c <_init>:
 801151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151e:	46c0      	nop			; (mov r8, r8)
 8011520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011522:	bc08      	pop	{r3}
 8011524:	469e      	mov	lr, r3
 8011526:	4770      	bx	lr

08011528 <_fini>:
 8011528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152a:	46c0      	nop			; (mov r8, r8)
 801152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801152e:	bc08      	pop	{r3}
 8011530:	469e      	mov	lr, r3
 8011532:	4770      	bx	lr
