
chrono.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000045f8  08011460  08011460  00021460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a58  08015a58  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  08015a58  08015a58  00025a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a60  08015a60  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a60  08015a60  00025a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a64  08015a64  00025a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08015a68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  2000009c  08015b04  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08015b04  000306f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b42  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056b4  00000000  00000000  00057c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0005d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0005ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020edd  00000000  00000000  00060538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026e5b  00000000  00000000  00081415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9373  00000000  00000000  000a8270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001615e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c5c  00000000  00000000  00161638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08011444 	.word	0x08011444

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	08011444 	.word	0x08011444

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fdff 	bl	8002018 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fd49 	bl	8001ebc <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fdf1 	bl	8002018 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fde7 	bl	8002018 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd6b 	bl	8001f34 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd61 	bl	8001f34 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f864 	bl	8000584 <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_lmul>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	0415      	lsls	r5, r2, #16
 80004cc:	0c2d      	lsrs	r5, r5, #16
 80004ce:	000f      	movs	r7, r1
 80004d0:	0001      	movs	r1, r0
 80004d2:	002e      	movs	r6, r5
 80004d4:	46c6      	mov	lr, r8
 80004d6:	4684      	mov	ip, r0
 80004d8:	0400      	lsls	r0, r0, #16
 80004da:	0c14      	lsrs	r4, r2, #16
 80004dc:	0c00      	lsrs	r0, r0, #16
 80004de:	0c09      	lsrs	r1, r1, #16
 80004e0:	4346      	muls	r6, r0
 80004e2:	434d      	muls	r5, r1
 80004e4:	4360      	muls	r0, r4
 80004e6:	4361      	muls	r1, r4
 80004e8:	1940      	adds	r0, r0, r5
 80004ea:	0c34      	lsrs	r4, r6, #16
 80004ec:	1824      	adds	r4, r4, r0
 80004ee:	b500      	push	{lr}
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	d903      	bls.n	80004fc <__aeabi_lmul+0x34>
 80004f4:	2080      	movs	r0, #128	; 0x80
 80004f6:	0240      	lsls	r0, r0, #9
 80004f8:	4680      	mov	r8, r0
 80004fa:	4441      	add	r1, r8
 80004fc:	0c25      	lsrs	r5, r4, #16
 80004fe:	186d      	adds	r5, r5, r1
 8000500:	4661      	mov	r1, ip
 8000502:	4359      	muls	r1, r3
 8000504:	437a      	muls	r2, r7
 8000506:	0430      	lsls	r0, r6, #16
 8000508:	1949      	adds	r1, r1, r5
 800050a:	0424      	lsls	r4, r4, #16
 800050c:	0c00      	lsrs	r0, r0, #16
 800050e:	1820      	adds	r0, r4, r0
 8000510:	1889      	adds	r1, r1, r2
 8000512:	bc80      	pop	{r7}
 8000514:	46b8      	mov	r8, r7
 8000516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	; 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f002 fd92 	bl	8003048 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 fdd3 	bl	80010d4 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fc05 	bl	8000d44 <__aeabi_fsub>
 800053a:	f000 fdcb 	bl	80010d4 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff8b 	bl	800046c <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f002 fbe7 	bl	8002d30 <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f002 f830 	bl	80025d0 <__aeabi_dsub>
 8000570:	f002 fbde 	bl	8002d30 <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__gnu_ldivmod_helper>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	46ce      	mov	lr, r9
 8000588:	4647      	mov	r7, r8
 800058a:	b580      	push	{r7, lr}
 800058c:	4691      	mov	r9, r2
 800058e:	4698      	mov	r8, r3
 8000590:	0004      	movs	r4, r0
 8000592:	000d      	movs	r5, r1
 8000594:	f002 fd80 	bl	8003098 <__divdi3>
 8000598:	0007      	movs	r7, r0
 800059a:	000e      	movs	r6, r1
 800059c:	0002      	movs	r2, r0
 800059e:	000b      	movs	r3, r1
 80005a0:	4648      	mov	r0, r9
 80005a2:	4641      	mov	r1, r8
 80005a4:	f7ff ff90 	bl	80004c8 <__aeabi_lmul>
 80005a8:	1a24      	subs	r4, r4, r0
 80005aa:	418d      	sbcs	r5, r1
 80005ac:	9b08      	ldr	r3, [sp, #32]
 80005ae:	0038      	movs	r0, r7
 80005b0:	0031      	movs	r1, r6
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	605d      	str	r5, [r3, #4]
 80005b6:	bcc0      	pop	{r6, r7}
 80005b8:	46b9      	mov	r9, r7
 80005ba:	46b0      	mov	r8, r6
 80005bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)

080005c0 <__aeabi_fadd>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	4646      	mov	r6, r8
 80005c4:	46d6      	mov	lr, sl
 80005c6:	464f      	mov	r7, r9
 80005c8:	024d      	lsls	r5, r1, #9
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	b5c0      	push	{r6, r7, lr}
 80005ce:	0a52      	lsrs	r2, r2, #9
 80005d0:	0a6e      	lsrs	r6, r5, #9
 80005d2:	0047      	lsls	r7, r0, #1
 80005d4:	46b0      	mov	r8, r6
 80005d6:	0e3f      	lsrs	r7, r7, #24
 80005d8:	004e      	lsls	r6, r1, #1
 80005da:	0fc4      	lsrs	r4, r0, #31
 80005dc:	00d0      	lsls	r0, r2, #3
 80005de:	4694      	mov	ip, r2
 80005e0:	003b      	movs	r3, r7
 80005e2:	4682      	mov	sl, r0
 80005e4:	0e36      	lsrs	r6, r6, #24
 80005e6:	0fc9      	lsrs	r1, r1, #31
 80005e8:	09ad      	lsrs	r5, r5, #6
 80005ea:	428c      	cmp	r4, r1
 80005ec:	d06d      	beq.n	80006ca <__aeabi_fadd+0x10a>
 80005ee:	1bb8      	subs	r0, r7, r6
 80005f0:	4681      	mov	r9, r0
 80005f2:	2800      	cmp	r0, #0
 80005f4:	dd4d      	ble.n	8000692 <__aeabi_fadd+0xd2>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x3c>
 80005fa:	e088      	b.n	800070e <__aeabi_fadd+0x14e>
 80005fc:	2fff      	cmp	r7, #255	; 0xff
 80005fe:	d05a      	beq.n	80006b6 <__aeabi_fadd+0xf6>
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	04db      	lsls	r3, r3, #19
 8000604:	431d      	orrs	r5, r3
 8000606:	464b      	mov	r3, r9
 8000608:	2201      	movs	r2, #1
 800060a:	2b1b      	cmp	r3, #27
 800060c:	dc0a      	bgt.n	8000624 <__aeabi_fadd+0x64>
 800060e:	002b      	movs	r3, r5
 8000610:	464a      	mov	r2, r9
 8000612:	4649      	mov	r1, r9
 8000614:	40d3      	lsrs	r3, r2
 8000616:	2220      	movs	r2, #32
 8000618:	1a52      	subs	r2, r2, r1
 800061a:	4095      	lsls	r5, r2
 800061c:	002a      	movs	r2, r5
 800061e:	1e55      	subs	r5, r2, #1
 8000620:	41aa      	sbcs	r2, r5
 8000622:	431a      	orrs	r2, r3
 8000624:	4653      	mov	r3, sl
 8000626:	1a9a      	subs	r2, r3, r2
 8000628:	0153      	lsls	r3, r2, #5
 800062a:	d400      	bmi.n	800062e <__aeabi_fadd+0x6e>
 800062c:	e0b9      	b.n	80007a2 <__aeabi_fadd+0x1e2>
 800062e:	0192      	lsls	r2, r2, #6
 8000630:	0996      	lsrs	r6, r2, #6
 8000632:	0030      	movs	r0, r6
 8000634:	f002 fd12 	bl	800305c <__clzsi2>
 8000638:	3805      	subs	r0, #5
 800063a:	4086      	lsls	r6, r0
 800063c:	4287      	cmp	r7, r0
 800063e:	dd00      	ble.n	8000642 <__aeabi_fadd+0x82>
 8000640:	e0d4      	b.n	80007ec <__aeabi_fadd+0x22c>
 8000642:	0033      	movs	r3, r6
 8000644:	1bc7      	subs	r7, r0, r7
 8000646:	2020      	movs	r0, #32
 8000648:	3701      	adds	r7, #1
 800064a:	40fb      	lsrs	r3, r7
 800064c:	1bc7      	subs	r7, r0, r7
 800064e:	40be      	lsls	r6, r7
 8000650:	0032      	movs	r2, r6
 8000652:	1e56      	subs	r6, r2, #1
 8000654:	41b2      	sbcs	r2, r6
 8000656:	2700      	movs	r7, #0
 8000658:	431a      	orrs	r2, r3
 800065a:	0753      	lsls	r3, r2, #29
 800065c:	d004      	beq.n	8000668 <__aeabi_fadd+0xa8>
 800065e:	230f      	movs	r3, #15
 8000660:	4013      	ands	r3, r2
 8000662:	2b04      	cmp	r3, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0xa8>
 8000666:	3204      	adds	r2, #4
 8000668:	0153      	lsls	r3, r2, #5
 800066a:	d400      	bmi.n	800066e <__aeabi_fadd+0xae>
 800066c:	e09c      	b.n	80007a8 <__aeabi_fadd+0x1e8>
 800066e:	1c7b      	adds	r3, r7, #1
 8000670:	2ffe      	cmp	r7, #254	; 0xfe
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0xb6>
 8000674:	e09a      	b.n	80007ac <__aeabi_fadd+0x1ec>
 8000676:	0192      	lsls	r2, r2, #6
 8000678:	0a52      	lsrs	r2, r2, #9
 800067a:	4694      	mov	ip, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	05d8      	lsls	r0, r3, #23
 8000680:	4663      	mov	r3, ip
 8000682:	07e4      	lsls	r4, r4, #31
 8000684:	4318      	orrs	r0, r3
 8000686:	4320      	orrs	r0, r4
 8000688:	bce0      	pop	{r5, r6, r7}
 800068a:	46ba      	mov	sl, r7
 800068c:	46b1      	mov	r9, r6
 800068e:	46a8      	mov	r8, r5
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000692:	2800      	cmp	r0, #0
 8000694:	d049      	beq.n	800072a <__aeabi_fadd+0x16a>
 8000696:	1bf3      	subs	r3, r6, r7
 8000698:	2f00      	cmp	r7, #0
 800069a:	d000      	beq.n	800069e <__aeabi_fadd+0xde>
 800069c:	e0b6      	b.n	800080c <__aeabi_fadd+0x24c>
 800069e:	4652      	mov	r2, sl
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d060      	beq.n	8000766 <__aeabi_fadd+0x1a6>
 80006a4:	3b01      	subs	r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0xec>
 80006aa:	e0fc      	b.n	80008a6 <__aeabi_fadd+0x2e6>
 80006ac:	2eff      	cmp	r6, #255	; 0xff
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fadd+0xf2>
 80006b0:	e0b4      	b.n	800081c <__aeabi_fadd+0x25c>
 80006b2:	000c      	movs	r4, r1
 80006b4:	4642      	mov	r2, r8
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d078      	beq.n	80007ac <__aeabi_fadd+0x1ec>
 80006ba:	2080      	movs	r0, #128	; 0x80
 80006bc:	03c0      	lsls	r0, r0, #15
 80006be:	4310      	orrs	r0, r2
 80006c0:	0242      	lsls	r2, r0, #9
 80006c2:	0a53      	lsrs	r3, r2, #9
 80006c4:	469c      	mov	ip, r3
 80006c6:	23ff      	movs	r3, #255	; 0xff
 80006c8:	e7d9      	b.n	800067e <__aeabi_fadd+0xbe>
 80006ca:	1bb9      	subs	r1, r7, r6
 80006cc:	2900      	cmp	r1, #0
 80006ce:	dd71      	ble.n	80007b4 <__aeabi_fadd+0x1f4>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d03f      	beq.n	8000754 <__aeabi_fadd+0x194>
 80006d4:	2fff      	cmp	r7, #255	; 0xff
 80006d6:	d0ee      	beq.n	80006b6 <__aeabi_fadd+0xf6>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	04db      	lsls	r3, r3, #19
 80006dc:	431d      	orrs	r5, r3
 80006de:	2201      	movs	r2, #1
 80006e0:	291b      	cmp	r1, #27
 80006e2:	dc07      	bgt.n	80006f4 <__aeabi_fadd+0x134>
 80006e4:	002a      	movs	r2, r5
 80006e6:	2320      	movs	r3, #32
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	408d      	lsls	r5, r1
 80006ee:	1e6b      	subs	r3, r5, #1
 80006f0:	419d      	sbcs	r5, r3
 80006f2:	432a      	orrs	r2, r5
 80006f4:	4452      	add	r2, sl
 80006f6:	0153      	lsls	r3, r2, #5
 80006f8:	d553      	bpl.n	80007a2 <__aeabi_fadd+0x1e2>
 80006fa:	3701      	adds	r7, #1
 80006fc:	2fff      	cmp	r7, #255	; 0xff
 80006fe:	d055      	beq.n	80007ac <__aeabi_fadd+0x1ec>
 8000700:	2301      	movs	r3, #1
 8000702:	497b      	ldr	r1, [pc, #492]	; (80008f0 <__aeabi_fadd+0x330>)
 8000704:	4013      	ands	r3, r2
 8000706:	0852      	lsrs	r2, r2, #1
 8000708:	400a      	ands	r2, r1
 800070a:	431a      	orrs	r2, r3
 800070c:	e7a5      	b.n	800065a <__aeabi_fadd+0x9a>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d02c      	beq.n	800076c <__aeabi_fadd+0x1ac>
 8000712:	2301      	movs	r3, #1
 8000714:	425b      	negs	r3, r3
 8000716:	469c      	mov	ip, r3
 8000718:	44e1      	add	r9, ip
 800071a:	464b      	mov	r3, r9
 800071c:	2b00      	cmp	r3, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x162>
 8000720:	e0ad      	b.n	800087e <__aeabi_fadd+0x2be>
 8000722:	2fff      	cmp	r7, #255	; 0xff
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x168>
 8000726:	e76e      	b.n	8000606 <__aeabi_fadd+0x46>
 8000728:	e7c5      	b.n	80006b6 <__aeabi_fadd+0xf6>
 800072a:	20fe      	movs	r0, #254	; 0xfe
 800072c:	1c7e      	adds	r6, r7, #1
 800072e:	4230      	tst	r0, r6
 8000730:	d160      	bne.n	80007f4 <__aeabi_fadd+0x234>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x178>
 8000736:	e093      	b.n	8000860 <__aeabi_fadd+0x2a0>
 8000738:	4652      	mov	r2, sl
 800073a:	2a00      	cmp	r2, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x180>
 800073e:	e0b6      	b.n	80008ae <__aeabi_fadd+0x2ee>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d09c      	beq.n	800067e <__aeabi_fadd+0xbe>
 8000744:	1b52      	subs	r2, r2, r5
 8000746:	0150      	lsls	r0, r2, #5
 8000748:	d400      	bmi.n	800074c <__aeabi_fadd+0x18c>
 800074a:	e0c3      	b.n	80008d4 <__aeabi_fadd+0x314>
 800074c:	4653      	mov	r3, sl
 800074e:	000c      	movs	r4, r1
 8000750:	1aea      	subs	r2, r5, r3
 8000752:	e782      	b.n	800065a <__aeabi_fadd+0x9a>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d009      	beq.n	800076c <__aeabi_fadd+0x1ac>
 8000758:	3901      	subs	r1, #1
 800075a:	2900      	cmp	r1, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x1a0>
 800075e:	e08b      	b.n	8000878 <__aeabi_fadd+0x2b8>
 8000760:	2fff      	cmp	r7, #255	; 0xff
 8000762:	d1bc      	bne.n	80006de <__aeabi_fadd+0x11e>
 8000764:	e7a7      	b.n	80006b6 <__aeabi_fadd+0xf6>
 8000766:	000c      	movs	r4, r1
 8000768:	4642      	mov	r2, r8
 800076a:	0037      	movs	r7, r6
 800076c:	2fff      	cmp	r7, #255	; 0xff
 800076e:	d0a2      	beq.n	80006b6 <__aeabi_fadd+0xf6>
 8000770:	0252      	lsls	r2, r2, #9
 8000772:	0a53      	lsrs	r3, r2, #9
 8000774:	469c      	mov	ip, r3
 8000776:	b2fb      	uxtb	r3, r7
 8000778:	e781      	b.n	800067e <__aeabi_fadd+0xbe>
 800077a:	21fe      	movs	r1, #254	; 0xfe
 800077c:	3701      	adds	r7, #1
 800077e:	4239      	tst	r1, r7
 8000780:	d165      	bne.n	800084e <__aeabi_fadd+0x28e>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d17e      	bne.n	8000884 <__aeabi_fadd+0x2c4>
 8000786:	2800      	cmp	r0, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x1cc>
 800078a:	e0aa      	b.n	80008e2 <__aeabi_fadd+0x322>
 800078c:	2d00      	cmp	r5, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0x1d2>
 8000790:	e775      	b.n	800067e <__aeabi_fadd+0xbe>
 8000792:	002a      	movs	r2, r5
 8000794:	4452      	add	r2, sl
 8000796:	2700      	movs	r7, #0
 8000798:	0153      	lsls	r3, r2, #5
 800079a:	d502      	bpl.n	80007a2 <__aeabi_fadd+0x1e2>
 800079c:	4b55      	ldr	r3, [pc, #340]	; (80008f4 <__aeabi_fadd+0x334>)
 800079e:	3701      	adds	r7, #1
 80007a0:	401a      	ands	r2, r3
 80007a2:	0753      	lsls	r3, r2, #29
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fadd+0x1e8>
 80007a6:	e75a      	b.n	800065e <__aeabi_fadd+0x9e>
 80007a8:	08d2      	lsrs	r2, r2, #3
 80007aa:	e7df      	b.n	800076c <__aeabi_fadd+0x1ac>
 80007ac:	2200      	movs	r2, #0
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	4694      	mov	ip, r2
 80007b2:	e764      	b.n	800067e <__aeabi_fadd+0xbe>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d0e0      	beq.n	800077a <__aeabi_fadd+0x1ba>
 80007b8:	1bf3      	subs	r3, r6, r7
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d03e      	beq.n	800083c <__aeabi_fadd+0x27c>
 80007be:	2eff      	cmp	r6, #255	; 0xff
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x204>
 80007c2:	e777      	b.n	80006b4 <__aeabi_fadd+0xf4>
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0001      	movs	r1, r0
 80007c8:	04d2      	lsls	r2, r2, #19
 80007ca:	4311      	orrs	r1, r2
 80007cc:	468a      	mov	sl, r1
 80007ce:	2201      	movs	r2, #1
 80007d0:	2b1b      	cmp	r3, #27
 80007d2:	dc08      	bgt.n	80007e6 <__aeabi_fadd+0x226>
 80007d4:	4652      	mov	r2, sl
 80007d6:	2120      	movs	r1, #32
 80007d8:	4650      	mov	r0, sl
 80007da:	40da      	lsrs	r2, r3
 80007dc:	1acb      	subs	r3, r1, r3
 80007de:	4098      	lsls	r0, r3
 80007e0:	1e43      	subs	r3, r0, #1
 80007e2:	4198      	sbcs	r0, r3
 80007e4:	4302      	orrs	r2, r0
 80007e6:	0037      	movs	r7, r6
 80007e8:	1952      	adds	r2, r2, r5
 80007ea:	e784      	b.n	80006f6 <__aeabi_fadd+0x136>
 80007ec:	4a41      	ldr	r2, [pc, #260]	; (80008f4 <__aeabi_fadd+0x334>)
 80007ee:	1a3f      	subs	r7, r7, r0
 80007f0:	4032      	ands	r2, r6
 80007f2:	e732      	b.n	800065a <__aeabi_fadd+0x9a>
 80007f4:	4653      	mov	r3, sl
 80007f6:	1b5e      	subs	r6, r3, r5
 80007f8:	0173      	lsls	r3, r6, #5
 80007fa:	d42d      	bmi.n	8000858 <__aeabi_fadd+0x298>
 80007fc:	2e00      	cmp	r6, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fadd+0x242>
 8000800:	e717      	b.n	8000632 <__aeabi_fadd+0x72>
 8000802:	2200      	movs	r2, #0
 8000804:	2400      	movs	r4, #0
 8000806:	2300      	movs	r3, #0
 8000808:	4694      	mov	ip, r2
 800080a:	e738      	b.n	800067e <__aeabi_fadd+0xbe>
 800080c:	2eff      	cmp	r6, #255	; 0xff
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x252>
 8000810:	e74f      	b.n	80006b2 <__aeabi_fadd+0xf2>
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	4650      	mov	r0, sl
 8000816:	04d2      	lsls	r2, r2, #19
 8000818:	4310      	orrs	r0, r2
 800081a:	4682      	mov	sl, r0
 800081c:	2201      	movs	r2, #1
 800081e:	2b1b      	cmp	r3, #27
 8000820:	dc08      	bgt.n	8000834 <__aeabi_fadd+0x274>
 8000822:	4652      	mov	r2, sl
 8000824:	2420      	movs	r4, #32
 8000826:	4650      	mov	r0, sl
 8000828:	40da      	lsrs	r2, r3
 800082a:	1ae3      	subs	r3, r4, r3
 800082c:	4098      	lsls	r0, r3
 800082e:	1e43      	subs	r3, r0, #1
 8000830:	4198      	sbcs	r0, r3
 8000832:	4302      	orrs	r2, r0
 8000834:	000c      	movs	r4, r1
 8000836:	0037      	movs	r7, r6
 8000838:	1aaa      	subs	r2, r5, r2
 800083a:	e6f5      	b.n	8000628 <__aeabi_fadd+0x68>
 800083c:	2800      	cmp	r0, #0
 800083e:	d093      	beq.n	8000768 <__aeabi_fadd+0x1a8>
 8000840:	3b01      	subs	r3, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	d04f      	beq.n	80008e6 <__aeabi_fadd+0x326>
 8000846:	2eff      	cmp	r6, #255	; 0xff
 8000848:	d1c1      	bne.n	80007ce <__aeabi_fadd+0x20e>
 800084a:	4642      	mov	r2, r8
 800084c:	e733      	b.n	80006b6 <__aeabi_fadd+0xf6>
 800084e:	2fff      	cmp	r7, #255	; 0xff
 8000850:	d0ac      	beq.n	80007ac <__aeabi_fadd+0x1ec>
 8000852:	4455      	add	r5, sl
 8000854:	086a      	lsrs	r2, r5, #1
 8000856:	e7a4      	b.n	80007a2 <__aeabi_fadd+0x1e2>
 8000858:	4653      	mov	r3, sl
 800085a:	000c      	movs	r4, r1
 800085c:	1aee      	subs	r6, r5, r3
 800085e:	e6e8      	b.n	8000632 <__aeabi_fadd+0x72>
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d128      	bne.n	80008b8 <__aeabi_fadd+0x2f8>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d000      	beq.n	800086c <__aeabi_fadd+0x2ac>
 800086a:	e722      	b.n	80006b2 <__aeabi_fadd+0xf2>
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	03db      	lsls	r3, r3, #15
 8000870:	469c      	mov	ip, r3
 8000872:	2400      	movs	r4, #0
 8000874:	23ff      	movs	r3, #255	; 0xff
 8000876:	e702      	b.n	800067e <__aeabi_fadd+0xbe>
 8000878:	002a      	movs	r2, r5
 800087a:	4452      	add	r2, sl
 800087c:	e73b      	b.n	80006f6 <__aeabi_fadd+0x136>
 800087e:	4653      	mov	r3, sl
 8000880:	1b5a      	subs	r2, r3, r5
 8000882:	e6d1      	b.n	8000628 <__aeabi_fadd+0x68>
 8000884:	2800      	cmp	r0, #0
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x2ca>
 8000888:	e714      	b.n	80006b4 <__aeabi_fadd+0xf4>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x2d0>
 800088e:	e712      	b.n	80006b6 <__aeabi_fadd+0xf6>
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	03db      	lsls	r3, r3, #15
 8000894:	421a      	tst	r2, r3
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0x2da>
 8000898:	e70d      	b.n	80006b6 <__aeabi_fadd+0xf6>
 800089a:	4641      	mov	r1, r8
 800089c:	4219      	tst	r1, r3
 800089e:	d000      	beq.n	80008a2 <__aeabi_fadd+0x2e2>
 80008a0:	e709      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008a2:	4642      	mov	r2, r8
 80008a4:	e707      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008a6:	000c      	movs	r4, r1
 80008a8:	0037      	movs	r7, r6
 80008aa:	1aaa      	subs	r2, r5, r2
 80008ac:	e6bc      	b.n	8000628 <__aeabi_fadd+0x68>
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d013      	beq.n	80008da <__aeabi_fadd+0x31a>
 80008b2:	000c      	movs	r4, r1
 80008b4:	46c4      	mov	ip, r8
 80008b6:	e6e2      	b.n	800067e <__aeabi_fadd+0xbe>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x2fe>
 80008bc:	e6fb      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	03db      	lsls	r3, r3, #15
 80008c2:	421a      	tst	r2, r3
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x308>
 80008c6:	e6f6      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008c8:	4640      	mov	r0, r8
 80008ca:	4218      	tst	r0, r3
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x310>
 80008ce:	e6f2      	b.n	80006b6 <__aeabi_fadd+0xf6>
 80008d0:	000c      	movs	r4, r1
 80008d2:	e6ef      	b.n	80006b4 <__aeabi_fadd+0xf4>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_fadd+0x31a>
 80008d8:	e763      	b.n	80007a2 <__aeabi_fadd+0x1e2>
 80008da:	2200      	movs	r2, #0
 80008dc:	2400      	movs	r4, #0
 80008de:	4694      	mov	ip, r2
 80008e0:	e6cd      	b.n	800067e <__aeabi_fadd+0xbe>
 80008e2:	46c4      	mov	ip, r8
 80008e4:	e6cb      	b.n	800067e <__aeabi_fadd+0xbe>
 80008e6:	002a      	movs	r2, r5
 80008e8:	0037      	movs	r7, r6
 80008ea:	4452      	add	r2, sl
 80008ec:	e703      	b.n	80006f6 <__aeabi_fadd+0x136>
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	7dffffff 	.word	0x7dffffff
 80008f4:	fbffffff 	.word	0xfbffffff

080008f8 <__aeabi_fdiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	464f      	mov	r7, r9
 80008fc:	4646      	mov	r6, r8
 80008fe:	46d6      	mov	lr, sl
 8000900:	0245      	lsls	r5, r0, #9
 8000902:	b5c0      	push	{r6, r7, lr}
 8000904:	0047      	lsls	r7, r0, #1
 8000906:	1c0c      	adds	r4, r1, #0
 8000908:	0a6d      	lsrs	r5, r5, #9
 800090a:	0e3f      	lsrs	r7, r7, #24
 800090c:	0fc6      	lsrs	r6, r0, #31
 800090e:	2f00      	cmp	r7, #0
 8000910:	d066      	beq.n	80009e0 <__aeabi_fdiv+0xe8>
 8000912:	2fff      	cmp	r7, #255	; 0xff
 8000914:	d06c      	beq.n	80009f0 <__aeabi_fdiv+0xf8>
 8000916:	2300      	movs	r3, #0
 8000918:	00ea      	lsls	r2, r5, #3
 800091a:	2580      	movs	r5, #128	; 0x80
 800091c:	4699      	mov	r9, r3
 800091e:	469a      	mov	sl, r3
 8000920:	04ed      	lsls	r5, r5, #19
 8000922:	4315      	orrs	r5, r2
 8000924:	3f7f      	subs	r7, #127	; 0x7f
 8000926:	0260      	lsls	r0, r4, #9
 8000928:	0061      	lsls	r1, r4, #1
 800092a:	0a43      	lsrs	r3, r0, #9
 800092c:	4698      	mov	r8, r3
 800092e:	0e09      	lsrs	r1, r1, #24
 8000930:	0fe4      	lsrs	r4, r4, #31
 8000932:	2900      	cmp	r1, #0
 8000934:	d048      	beq.n	80009c8 <__aeabi_fdiv+0xd0>
 8000936:	29ff      	cmp	r1, #255	; 0xff
 8000938:	d010      	beq.n	800095c <__aeabi_fdiv+0x64>
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	00d8      	lsls	r0, r3, #3
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4302      	orrs	r2, r0
 8000942:	4690      	mov	r8, r2
 8000944:	2000      	movs	r0, #0
 8000946:	397f      	subs	r1, #127	; 0x7f
 8000948:	464a      	mov	r2, r9
 800094a:	0033      	movs	r3, r6
 800094c:	1a7f      	subs	r7, r7, r1
 800094e:	4302      	orrs	r2, r0
 8000950:	496c      	ldr	r1, [pc, #432]	; (8000b04 <__aeabi_fdiv+0x20c>)
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	588a      	ldr	r2, [r1, r2]
 8000956:	4063      	eors	r3, r4
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4697      	mov	pc, r2
 800095c:	2b00      	cmp	r3, #0
 800095e:	d16d      	bne.n	8000a3c <__aeabi_fdiv+0x144>
 8000960:	2002      	movs	r0, #2
 8000962:	3fff      	subs	r7, #255	; 0xff
 8000964:	e033      	b.n	80009ce <__aeabi_fdiv+0xd6>
 8000966:	2300      	movs	r3, #0
 8000968:	4698      	mov	r8, r3
 800096a:	0026      	movs	r6, r4
 800096c:	4645      	mov	r5, r8
 800096e:	4682      	mov	sl, r0
 8000970:	4653      	mov	r3, sl
 8000972:	2b02      	cmp	r3, #2
 8000974:	d100      	bne.n	8000978 <__aeabi_fdiv+0x80>
 8000976:	e07f      	b.n	8000a78 <__aeabi_fdiv+0x180>
 8000978:	2b03      	cmp	r3, #3
 800097a:	d100      	bne.n	800097e <__aeabi_fdiv+0x86>
 800097c:	e094      	b.n	8000aa8 <__aeabi_fdiv+0x1b0>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d017      	beq.n	80009b2 <__aeabi_fdiv+0xba>
 8000982:	0038      	movs	r0, r7
 8000984:	307f      	adds	r0, #127	; 0x7f
 8000986:	2800      	cmp	r0, #0
 8000988:	dd5f      	ble.n	8000a4a <__aeabi_fdiv+0x152>
 800098a:	076b      	lsls	r3, r5, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fdiv+0xa0>
 800098e:	230f      	movs	r3, #15
 8000990:	402b      	ands	r3, r5
 8000992:	2b04      	cmp	r3, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fdiv+0xa0>
 8000996:	3504      	adds	r5, #4
 8000998:	012b      	lsls	r3, r5, #4
 800099a:	d503      	bpl.n	80009a4 <__aeabi_fdiv+0xac>
 800099c:	0038      	movs	r0, r7
 800099e:	4b5a      	ldr	r3, [pc, #360]	; (8000b08 <__aeabi_fdiv+0x210>)
 80009a0:	3080      	adds	r0, #128	; 0x80
 80009a2:	401d      	ands	r5, r3
 80009a4:	28fe      	cmp	r0, #254	; 0xfe
 80009a6:	dc67      	bgt.n	8000a78 <__aeabi_fdiv+0x180>
 80009a8:	01ad      	lsls	r5, r5, #6
 80009aa:	0a6d      	lsrs	r5, r5, #9
 80009ac:	b2c0      	uxtb	r0, r0
 80009ae:	e002      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 80009b0:	001e      	movs	r6, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	2500      	movs	r5, #0
 80009b6:	05c0      	lsls	r0, r0, #23
 80009b8:	4328      	orrs	r0, r5
 80009ba:	07f6      	lsls	r6, r6, #31
 80009bc:	4330      	orrs	r0, r6
 80009be:	bce0      	pop	{r5, r6, r7}
 80009c0:	46ba      	mov	sl, r7
 80009c2:	46b1      	mov	r9, r6
 80009c4:	46a8      	mov	r8, r5
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d12b      	bne.n	8000a24 <__aeabi_fdiv+0x12c>
 80009cc:	2001      	movs	r0, #1
 80009ce:	464a      	mov	r2, r9
 80009d0:	0033      	movs	r3, r6
 80009d2:	494e      	ldr	r1, [pc, #312]	; (8000b0c <__aeabi_fdiv+0x214>)
 80009d4:	4302      	orrs	r2, r0
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	588a      	ldr	r2, [r1, r2]
 80009da:	4063      	eors	r3, r4
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	4697      	mov	pc, r2
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d113      	bne.n	8000a0c <__aeabi_fdiv+0x114>
 80009e4:	2304      	movs	r3, #4
 80009e6:	4699      	mov	r9, r3
 80009e8:	3b03      	subs	r3, #3
 80009ea:	2700      	movs	r7, #0
 80009ec:	469a      	mov	sl, r3
 80009ee:	e79a      	b.n	8000926 <__aeabi_fdiv+0x2e>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d105      	bne.n	8000a00 <__aeabi_fdiv+0x108>
 80009f4:	2308      	movs	r3, #8
 80009f6:	4699      	mov	r9, r3
 80009f8:	3b06      	subs	r3, #6
 80009fa:	27ff      	movs	r7, #255	; 0xff
 80009fc:	469a      	mov	sl, r3
 80009fe:	e792      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a00:	230c      	movs	r3, #12
 8000a02:	4699      	mov	r9, r3
 8000a04:	3b09      	subs	r3, #9
 8000a06:	27ff      	movs	r7, #255	; 0xff
 8000a08:	469a      	mov	sl, r3
 8000a0a:	e78c      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a0c:	0028      	movs	r0, r5
 8000a0e:	f002 fb25 	bl	800305c <__clzsi2>
 8000a12:	2776      	movs	r7, #118	; 0x76
 8000a14:	1f43      	subs	r3, r0, #5
 8000a16:	409d      	lsls	r5, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	427f      	negs	r7, r7
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	469a      	mov	sl, r3
 8000a20:	1a3f      	subs	r7, r7, r0
 8000a22:	e780      	b.n	8000926 <__aeabi_fdiv+0x2e>
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 fb19 	bl	800305c <__clzsi2>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	1f43      	subs	r3, r0, #5
 8000a2e:	2176      	movs	r1, #118	; 0x76
 8000a30:	409a      	lsls	r2, r3
 8000a32:	4249      	negs	r1, r1
 8000a34:	1a09      	subs	r1, r1, r0
 8000a36:	4690      	mov	r8, r2
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e785      	b.n	8000948 <__aeabi_fdiv+0x50>
 8000a3c:	21ff      	movs	r1, #255	; 0xff
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e782      	b.n	8000948 <__aeabi_fdiv+0x50>
 8000a42:	001e      	movs	r6, r3
 8000a44:	20ff      	movs	r0, #255	; 0xff
 8000a46:	2500      	movs	r5, #0
 8000a48:	e7b5      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	2b1b      	cmp	r3, #27
 8000a50:	dcaf      	bgt.n	80009b2 <__aeabi_fdiv+0xba>
 8000a52:	379e      	adds	r7, #158	; 0x9e
 8000a54:	0029      	movs	r1, r5
 8000a56:	40bd      	lsls	r5, r7
 8000a58:	40d9      	lsrs	r1, r3
 8000a5a:	1e6a      	subs	r2, r5, #1
 8000a5c:	4195      	sbcs	r5, r2
 8000a5e:	430d      	orrs	r5, r1
 8000a60:	076b      	lsls	r3, r5, #29
 8000a62:	d004      	beq.n	8000a6e <__aeabi_fdiv+0x176>
 8000a64:	230f      	movs	r3, #15
 8000a66:	402b      	ands	r3, r5
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fdiv+0x176>
 8000a6c:	3504      	adds	r5, #4
 8000a6e:	016b      	lsls	r3, r5, #5
 8000a70:	d544      	bpl.n	8000afc <__aeabi_fdiv+0x204>
 8000a72:	2001      	movs	r0, #1
 8000a74:	2500      	movs	r5, #0
 8000a76:	e79e      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a78:	20ff      	movs	r0, #255	; 0xff
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	e79b      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a7e:	2580      	movs	r5, #128	; 0x80
 8000a80:	2600      	movs	r6, #0
 8000a82:	20ff      	movs	r0, #255	; 0xff
 8000a84:	03ed      	lsls	r5, r5, #15
 8000a86:	e796      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	2080      	movs	r0, #128	; 0x80
 8000a8e:	03c0      	lsls	r0, r0, #15
 8000a90:	4205      	tst	r5, r0
 8000a92:	d009      	beq.n	8000aa8 <__aeabi_fdiv+0x1b0>
 8000a94:	4643      	mov	r3, r8
 8000a96:	4203      	tst	r3, r0
 8000a98:	d106      	bne.n	8000aa8 <__aeabi_fdiv+0x1b0>
 8000a9a:	4645      	mov	r5, r8
 8000a9c:	4305      	orrs	r5, r0
 8000a9e:	026d      	lsls	r5, r5, #9
 8000aa0:	0026      	movs	r6, r4
 8000aa2:	20ff      	movs	r0, #255	; 0xff
 8000aa4:	0a6d      	lsrs	r5, r5, #9
 8000aa6:	e786      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000aa8:	2080      	movs	r0, #128	; 0x80
 8000aaa:	03c0      	lsls	r0, r0, #15
 8000aac:	4305      	orrs	r5, r0
 8000aae:	026d      	lsls	r5, r5, #9
 8000ab0:	20ff      	movs	r0, #255	; 0xff
 8000ab2:	0a6d      	lsrs	r5, r5, #9
 8000ab4:	e77f      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	016a      	lsls	r2, r5, #5
 8000aba:	0148      	lsls	r0, r1, #5
 8000abc:	4282      	cmp	r2, r0
 8000abe:	d219      	bcs.n	8000af4 <__aeabi_fdiv+0x1fc>
 8000ac0:	211b      	movs	r1, #27
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	3f01      	subs	r7, #1
 8000ac6:	2601      	movs	r6, #1
 8000ac8:	0014      	movs	r4, r2
 8000aca:	006d      	lsls	r5, r5, #1
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	db01      	blt.n	8000ad6 <__aeabi_fdiv+0x1de>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	d801      	bhi.n	8000ada <__aeabi_fdiv+0x1e2>
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	4335      	orrs	r5, r6
 8000ada:	3901      	subs	r1, #1
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d1f3      	bne.n	8000ac8 <__aeabi_fdiv+0x1d0>
 8000ae0:	1e50      	subs	r0, r2, #1
 8000ae2:	4182      	sbcs	r2, r0
 8000ae4:	0038      	movs	r0, r7
 8000ae6:	307f      	adds	r0, #127	; 0x7f
 8000ae8:	001e      	movs	r6, r3
 8000aea:	4315      	orrs	r5, r2
 8000aec:	2800      	cmp	r0, #0
 8000aee:	dd00      	ble.n	8000af2 <__aeabi_fdiv+0x1fa>
 8000af0:	e74b      	b.n	800098a <__aeabi_fdiv+0x92>
 8000af2:	e7aa      	b.n	8000a4a <__aeabi_fdiv+0x152>
 8000af4:	211a      	movs	r1, #26
 8000af6:	2501      	movs	r5, #1
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	e7e4      	b.n	8000ac6 <__aeabi_fdiv+0x1ce>
 8000afc:	01ad      	lsls	r5, r5, #6
 8000afe:	2000      	movs	r0, #0
 8000b00:	0a6d      	lsrs	r5, r5, #9
 8000b02:	e758      	b.n	80009b6 <__aeabi_fdiv+0xbe>
 8000b04:	080118a0 	.word	0x080118a0
 8000b08:	f7ffffff 	.word	0xf7ffffff
 8000b0c:	080118e0 	.word	0x080118e0

08000b10 <__aeabi_fmul>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	4657      	mov	r7, sl
 8000b14:	464e      	mov	r6, r9
 8000b16:	4645      	mov	r5, r8
 8000b18:	46de      	mov	lr, fp
 8000b1a:	0244      	lsls	r4, r0, #9
 8000b1c:	b5e0      	push	{r5, r6, r7, lr}
 8000b1e:	0045      	lsls	r5, r0, #1
 8000b20:	1c0f      	adds	r7, r1, #0
 8000b22:	0a64      	lsrs	r4, r4, #9
 8000b24:	0e2d      	lsrs	r5, r5, #24
 8000b26:	0fc6      	lsrs	r6, r0, #31
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d047      	beq.n	8000bbc <__aeabi_fmul+0xac>
 8000b2c:	2dff      	cmp	r5, #255	; 0xff
 8000b2e:	d04d      	beq.n	8000bcc <__aeabi_fmul+0xbc>
 8000b30:	2300      	movs	r3, #0
 8000b32:	2080      	movs	r0, #128	; 0x80
 8000b34:	469a      	mov	sl, r3
 8000b36:	469b      	mov	fp, r3
 8000b38:	00e4      	lsls	r4, r4, #3
 8000b3a:	04c0      	lsls	r0, r0, #19
 8000b3c:	4304      	orrs	r4, r0
 8000b3e:	3d7f      	subs	r5, #127	; 0x7f
 8000b40:	0278      	lsls	r0, r7, #9
 8000b42:	0a43      	lsrs	r3, r0, #9
 8000b44:	4699      	mov	r9, r3
 8000b46:	007a      	lsls	r2, r7, #1
 8000b48:	0ffb      	lsrs	r3, r7, #31
 8000b4a:	4698      	mov	r8, r3
 8000b4c:	0e12      	lsrs	r2, r2, #24
 8000b4e:	464b      	mov	r3, r9
 8000b50:	d044      	beq.n	8000bdc <__aeabi_fmul+0xcc>
 8000b52:	2aff      	cmp	r2, #255	; 0xff
 8000b54:	d011      	beq.n	8000b7a <__aeabi_fmul+0x6a>
 8000b56:	00d8      	lsls	r0, r3, #3
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	04db      	lsls	r3, r3, #19
 8000b5c:	4303      	orrs	r3, r0
 8000b5e:	4699      	mov	r9, r3
 8000b60:	2000      	movs	r0, #0
 8000b62:	3a7f      	subs	r2, #127	; 0x7f
 8000b64:	18ad      	adds	r5, r5, r2
 8000b66:	4647      	mov	r7, r8
 8000b68:	4653      	mov	r3, sl
 8000b6a:	4077      	eors	r7, r6
 8000b6c:	1c69      	adds	r1, r5, #1
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d83f      	bhi.n	8000bf2 <__aeabi_fmul+0xe2>
 8000b72:	4a72      	ldr	r2, [pc, #456]	; (8000d3c <__aeabi_fmul+0x22c>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	58d3      	ldr	r3, [r2, r3]
 8000b78:	469f      	mov	pc, r3
 8000b7a:	35ff      	adds	r5, #255	; 0xff
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fmul+0x72>
 8000b80:	e079      	b.n	8000c76 <__aeabi_fmul+0x166>
 8000b82:	4652      	mov	r2, sl
 8000b84:	2302      	movs	r3, #2
 8000b86:	431a      	orrs	r2, r3
 8000b88:	4692      	mov	sl, r2
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	e7eb      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000b8e:	4647      	mov	r7, r8
 8000b90:	464c      	mov	r4, r9
 8000b92:	4683      	mov	fp, r0
 8000b94:	465b      	mov	r3, fp
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d028      	beq.n	8000bec <__aeabi_fmul+0xdc>
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fmul+0x90>
 8000b9e:	e0c6      	b.n	8000d2e <__aeabi_fmul+0x21e>
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d14f      	bne.n	8000c44 <__aeabi_fmul+0x134>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	05c0      	lsls	r0, r0, #23
 8000baa:	07ff      	lsls	r7, r7, #31
 8000bac:	4320      	orrs	r0, r4
 8000bae:	4338      	orrs	r0, r7
 8000bb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb2:	46bb      	mov	fp, r7
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	46a9      	mov	r9, r5
 8000bb8:	46a0      	mov	r8, r4
 8000bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d171      	bne.n	8000ca4 <__aeabi_fmul+0x194>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	469a      	mov	sl, r3
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	469b      	mov	fp, r3
 8000bca:	e7b9      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d163      	bne.n	8000c98 <__aeabi_fmul+0x188>
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	3b06      	subs	r3, #6
 8000bd6:	25ff      	movs	r5, #255	; 0xff
 8000bd8:	469b      	mov	fp, r3
 8000bda:	e7b1      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__aeabi_fmul+0x172>
 8000be0:	4652      	mov	r2, sl
 8000be2:	3301      	adds	r3, #1
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4692      	mov	sl, r2
 8000be8:	2001      	movs	r0, #1
 8000bea:	e7bc      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	2400      	movs	r4, #0
 8000bf0:	e7da      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	0c26      	lsrs	r6, r4, #16
 8000bf6:	0424      	lsls	r4, r4, #16
 8000bf8:	0c22      	lsrs	r2, r4, #16
 8000bfa:	0404      	lsls	r4, r0, #16
 8000bfc:	0c24      	lsrs	r4, r4, #16
 8000bfe:	464b      	mov	r3, r9
 8000c00:	0020      	movs	r0, r4
 8000c02:	0c1b      	lsrs	r3, r3, #16
 8000c04:	4350      	muls	r0, r2
 8000c06:	4374      	muls	r4, r6
 8000c08:	435a      	muls	r2, r3
 8000c0a:	435e      	muls	r6, r3
 8000c0c:	1912      	adds	r2, r2, r4
 8000c0e:	0c03      	lsrs	r3, r0, #16
 8000c10:	189b      	adds	r3, r3, r2
 8000c12:	429c      	cmp	r4, r3
 8000c14:	d903      	bls.n	8000c1e <__aeabi_fmul+0x10e>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0252      	lsls	r2, r2, #9
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	4466      	add	r6, ip
 8000c1e:	0400      	lsls	r0, r0, #16
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	0c00      	lsrs	r0, r0, #16
 8000c24:	1812      	adds	r2, r2, r0
 8000c26:	0194      	lsls	r4, r2, #6
 8000c28:	1e60      	subs	r0, r4, #1
 8000c2a:	4184      	sbcs	r4, r0
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	0e92      	lsrs	r2, r2, #26
 8000c30:	199b      	adds	r3, r3, r6
 8000c32:	4314      	orrs	r4, r2
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	431c      	orrs	r4, r3
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	d572      	bpl.n	8000d22 <__aeabi_fmul+0x212>
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	0863      	lsrs	r3, r4, #1
 8000c40:	4004      	ands	r4, r0
 8000c42:	431c      	orrs	r4, r3
 8000c44:	0008      	movs	r0, r1
 8000c46:	307f      	adds	r0, #127	; 0x7f
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	dd3c      	ble.n	8000cc6 <__aeabi_fmul+0x1b6>
 8000c4c:	0763      	lsls	r3, r4, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fmul+0x14a>
 8000c50:	230f      	movs	r3, #15
 8000c52:	4023      	ands	r3, r4
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fmul+0x14a>
 8000c58:	3404      	adds	r4, #4
 8000c5a:	0123      	lsls	r3, r4, #4
 8000c5c:	d503      	bpl.n	8000c66 <__aeabi_fmul+0x156>
 8000c5e:	3180      	adds	r1, #128	; 0x80
 8000c60:	0008      	movs	r0, r1
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <__aeabi_fmul+0x230>)
 8000c64:	401c      	ands	r4, r3
 8000c66:	28fe      	cmp	r0, #254	; 0xfe
 8000c68:	dcc0      	bgt.n	8000bec <__aeabi_fmul+0xdc>
 8000c6a:	01a4      	lsls	r4, r4, #6
 8000c6c:	0a64      	lsrs	r4, r4, #9
 8000c6e:	b2c0      	uxtb	r0, r0
 8000c70:	e79a      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000c72:	0037      	movs	r7, r6
 8000c74:	e78e      	b.n	8000b94 <__aeabi_fmul+0x84>
 8000c76:	4652      	mov	r2, sl
 8000c78:	2303      	movs	r3, #3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	4692      	mov	sl, r2
 8000c7e:	2003      	movs	r0, #3
 8000c80:	e771      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000c82:	4648      	mov	r0, r9
 8000c84:	f002 f9ea 	bl	800305c <__clzsi2>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	1f43      	subs	r3, r0, #5
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	1a2d      	subs	r5, r5, r0
 8000c90:	4691      	mov	r9, r2
 8000c92:	2000      	movs	r0, #0
 8000c94:	3d76      	subs	r5, #118	; 0x76
 8000c96:	e766      	b.n	8000b66 <__aeabi_fmul+0x56>
 8000c98:	230c      	movs	r3, #12
 8000c9a:	469a      	mov	sl, r3
 8000c9c:	3b09      	subs	r3, #9
 8000c9e:	25ff      	movs	r5, #255	; 0xff
 8000ca0:	469b      	mov	fp, r3
 8000ca2:	e74d      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000ca4:	0020      	movs	r0, r4
 8000ca6:	f002 f9d9 	bl	800305c <__clzsi2>
 8000caa:	2576      	movs	r5, #118	; 0x76
 8000cac:	1f43      	subs	r3, r0, #5
 8000cae:	409c      	lsls	r4, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	426d      	negs	r5, r5
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	469b      	mov	fp, r3
 8000cb8:	1a2d      	subs	r5, r5, r0
 8000cba:	e741      	b.n	8000b40 <__aeabi_fmul+0x30>
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	2700      	movs	r7, #0
 8000cc0:	20ff      	movs	r0, #255	; 0xff
 8000cc2:	03e4      	lsls	r4, r4, #15
 8000cc4:	e770      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	1a1b      	subs	r3, r3, r0
 8000cca:	2b1b      	cmp	r3, #27
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_fmul+0x1c0>
 8000cce:	e769      	b.n	8000ba4 <__aeabi_fmul+0x94>
 8000cd0:	319e      	adds	r1, #158	; 0x9e
 8000cd2:	0020      	movs	r0, r4
 8000cd4:	408c      	lsls	r4, r1
 8000cd6:	40d8      	lsrs	r0, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4304      	orrs	r4, r0
 8000cde:	0763      	lsls	r3, r4, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fmul+0x1dc>
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4023      	ands	r3, r4
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fmul+0x1dc>
 8000cea:	3404      	adds	r4, #4
 8000cec:	0163      	lsls	r3, r4, #5
 8000cee:	d51a      	bpl.n	8000d26 <__aeabi_fmul+0x216>
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	2400      	movs	r4, #0
 8000cf4:	e758      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000cf6:	2080      	movs	r0, #128	; 0x80
 8000cf8:	03c0      	lsls	r0, r0, #15
 8000cfa:	4204      	tst	r4, r0
 8000cfc:	d009      	beq.n	8000d12 <__aeabi_fmul+0x202>
 8000cfe:	464b      	mov	r3, r9
 8000d00:	4203      	tst	r3, r0
 8000d02:	d106      	bne.n	8000d12 <__aeabi_fmul+0x202>
 8000d04:	464c      	mov	r4, r9
 8000d06:	4304      	orrs	r4, r0
 8000d08:	0264      	lsls	r4, r4, #9
 8000d0a:	4647      	mov	r7, r8
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	0a64      	lsrs	r4, r4, #9
 8000d10:	e74a      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d12:	2080      	movs	r0, #128	; 0x80
 8000d14:	03c0      	lsls	r0, r0, #15
 8000d16:	4304      	orrs	r4, r0
 8000d18:	0264      	lsls	r4, r4, #9
 8000d1a:	0037      	movs	r7, r6
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	0a64      	lsrs	r4, r4, #9
 8000d20:	e742      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d22:	0029      	movs	r1, r5
 8000d24:	e78e      	b.n	8000c44 <__aeabi_fmul+0x134>
 8000d26:	01a4      	lsls	r4, r4, #6
 8000d28:	2000      	movs	r0, #0
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	e73c      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	03c0      	lsls	r0, r0, #15
 8000d32:	4304      	orrs	r4, r0
 8000d34:	0264      	lsls	r4, r4, #9
 8000d36:	20ff      	movs	r0, #255	; 0xff
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	e735      	b.n	8000ba8 <__aeabi_fmul+0x98>
 8000d3c:	08011920 	.word	0x08011920
 8000d40:	f7ffffff 	.word	0xf7ffffff

08000d44 <__aeabi_fsub>:
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	4646      	mov	r6, r8
 8000d48:	46d6      	mov	lr, sl
 8000d4a:	464f      	mov	r7, r9
 8000d4c:	0243      	lsls	r3, r0, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	00da      	lsls	r2, r3, #3
 8000d52:	4694      	mov	ip, r2
 8000d54:	024a      	lsls	r2, r1, #9
 8000d56:	b5c0      	push	{r6, r7, lr}
 8000d58:	0044      	lsls	r4, r0, #1
 8000d5a:	0a56      	lsrs	r6, r2, #9
 8000d5c:	1c05      	adds	r5, r0, #0
 8000d5e:	46b0      	mov	r8, r6
 8000d60:	0e24      	lsrs	r4, r4, #24
 8000d62:	004e      	lsls	r6, r1, #1
 8000d64:	0992      	lsrs	r2, r2, #6
 8000d66:	001f      	movs	r7, r3
 8000d68:	0020      	movs	r0, r4
 8000d6a:	4692      	mov	sl, r2
 8000d6c:	0fed      	lsrs	r5, r5, #31
 8000d6e:	0e36      	lsrs	r6, r6, #24
 8000d70:	0fc9      	lsrs	r1, r1, #31
 8000d72:	2eff      	cmp	r6, #255	; 0xff
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x34>
 8000d76:	e07f      	b.n	8000e78 <__aeabi_fsub+0x134>
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4051      	eors	r1, r2
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d051      	beq.n	8000e24 <__aeabi_fsub+0xe0>
 8000d80:	1ba2      	subs	r2, r4, r6
 8000d82:	4691      	mov	r9, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_fsub+0x46>
 8000d88:	e07e      	b.n	8000e88 <__aeabi_fsub+0x144>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x4c>
 8000d8e:	e099      	b.n	8000ec4 <__aeabi_fsub+0x180>
 8000d90:	2cff      	cmp	r4, #255	; 0xff
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x52>
 8000d94:	e08c      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	4652      	mov	r2, sl
 8000d9a:	04db      	lsls	r3, r3, #19
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	464a      	mov	r2, r9
 8000da2:	2301      	movs	r3, #1
 8000da4:	2a1b      	cmp	r2, #27
 8000da6:	dc08      	bgt.n	8000dba <__aeabi_fsub+0x76>
 8000da8:	4653      	mov	r3, sl
 8000daa:	2120      	movs	r1, #32
 8000dac:	40d3      	lsrs	r3, r2
 8000dae:	1a89      	subs	r1, r1, r2
 8000db0:	4652      	mov	r2, sl
 8000db2:	408a      	lsls	r2, r1
 8000db4:	1e51      	subs	r1, r2, #1
 8000db6:	418a      	sbcs	r2, r1
 8000db8:	4313      	orrs	r3, r2
 8000dba:	4662      	mov	r2, ip
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	015a      	lsls	r2, r3, #5
 8000dc0:	d400      	bmi.n	8000dc4 <__aeabi_fsub+0x80>
 8000dc2:	e0f3      	b.n	8000fac <__aeabi_fsub+0x268>
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	099e      	lsrs	r6, r3, #6
 8000dc8:	0030      	movs	r0, r6
 8000dca:	f002 f947 	bl	800305c <__clzsi2>
 8000dce:	3805      	subs	r0, #5
 8000dd0:	4086      	lsls	r6, r0
 8000dd2:	4284      	cmp	r4, r0
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_fsub+0x94>
 8000dd6:	e0f7      	b.n	8000fc8 <__aeabi_fsub+0x284>
 8000dd8:	0032      	movs	r2, r6
 8000dda:	1b04      	subs	r4, r0, r4
 8000ddc:	2020      	movs	r0, #32
 8000dde:	3401      	adds	r4, #1
 8000de0:	40e2      	lsrs	r2, r4
 8000de2:	1b04      	subs	r4, r0, r4
 8000de4:	40a6      	lsls	r6, r4
 8000de6:	0033      	movs	r3, r6
 8000de8:	1e5e      	subs	r6, r3, #1
 8000dea:	41b3      	sbcs	r3, r6
 8000dec:	2400      	movs	r4, #0
 8000dee:	4313      	orrs	r3, r2
 8000df0:	075a      	lsls	r2, r3, #29
 8000df2:	d004      	beq.n	8000dfe <__aeabi_fsub+0xba>
 8000df4:	220f      	movs	r2, #15
 8000df6:	401a      	ands	r2, r3
 8000df8:	2a04      	cmp	r2, #4
 8000dfa:	d000      	beq.n	8000dfe <__aeabi_fsub+0xba>
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	015a      	lsls	r2, r3, #5
 8000e00:	d400      	bmi.n	8000e04 <__aeabi_fsub+0xc0>
 8000e02:	e0d6      	b.n	8000fb2 <__aeabi_fsub+0x26e>
 8000e04:	1c62      	adds	r2, r4, #1
 8000e06:	2cfe      	cmp	r4, #254	; 0xfe
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0xc8>
 8000e0a:	e0da      	b.n	8000fc2 <__aeabi_fsub+0x27e>
 8000e0c:	019b      	lsls	r3, r3, #6
 8000e0e:	0a5f      	lsrs	r7, r3, #9
 8000e10:	b2d0      	uxtb	r0, r2
 8000e12:	05c0      	lsls	r0, r0, #23
 8000e14:	4338      	orrs	r0, r7
 8000e16:	07ed      	lsls	r5, r5, #31
 8000e18:	4328      	orrs	r0, r5
 8000e1a:	bce0      	pop	{r5, r6, r7}
 8000e1c:	46ba      	mov	sl, r7
 8000e1e:	46b1      	mov	r9, r6
 8000e20:	46a8      	mov	r8, r5
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e24:	1ba2      	subs	r2, r4, r6
 8000e26:	4691      	mov	r9, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	dd63      	ble.n	8000ef4 <__aeabi_fsub+0x1b0>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0xee>
 8000e30:	e099      	b.n	8000f66 <__aeabi_fsub+0x222>
 8000e32:	2cff      	cmp	r4, #255	; 0xff
 8000e34:	d03c      	beq.n	8000eb0 <__aeabi_fsub+0x16c>
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	4652      	mov	r2, sl
 8000e3a:	04db      	lsls	r3, r3, #19
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	4692      	mov	sl, r2
 8000e40:	464a      	mov	r2, r9
 8000e42:	2301      	movs	r3, #1
 8000e44:	2a1b      	cmp	r2, #27
 8000e46:	dc08      	bgt.n	8000e5a <__aeabi_fsub+0x116>
 8000e48:	4653      	mov	r3, sl
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	40d3      	lsrs	r3, r2
 8000e4e:	1a89      	subs	r1, r1, r2
 8000e50:	4652      	mov	r2, sl
 8000e52:	408a      	lsls	r2, r1
 8000e54:	1e51      	subs	r1, r2, #1
 8000e56:	418a      	sbcs	r2, r1
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	015a      	lsls	r2, r3, #5
 8000e5e:	d400      	bmi.n	8000e62 <__aeabi_fsub+0x11e>
 8000e60:	e0a4      	b.n	8000fac <__aeabi_fsub+0x268>
 8000e62:	3401      	adds	r4, #1
 8000e64:	2cff      	cmp	r4, #255	; 0xff
 8000e66:	d100      	bne.n	8000e6a <__aeabi_fsub+0x126>
 8000e68:	e0ab      	b.n	8000fc2 <__aeabi_fsub+0x27e>
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4997      	ldr	r1, [pc, #604]	; (80010cc <__aeabi_fsub+0x388>)
 8000e6e:	401a      	ands	r2, r3
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	400b      	ands	r3, r1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	e7bb      	b.n	8000df0 <__aeabi_fsub+0xac>
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d032      	beq.n	8000ee2 <__aeabi_fsub+0x19e>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d035      	beq.n	8000eec <__aeabi_fsub+0x1a8>
 8000e80:	22ff      	movs	r2, #255	; 0xff
 8000e82:	4252      	negs	r2, r2
 8000e84:	4691      	mov	r9, r2
 8000e86:	44a1      	add	r9, r4
 8000e88:	464a      	mov	r2, r9
 8000e8a:	2a00      	cmp	r2, #0
 8000e8c:	d051      	beq.n	8000f32 <__aeabi_fsub+0x1ee>
 8000e8e:	1b30      	subs	r0, r6, r4
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d000      	beq.n	8000e96 <__aeabi_fsub+0x152>
 8000e94:	e09c      	b.n	8000fd0 <__aeabi_fsub+0x28c>
 8000e96:	4663      	mov	r3, ip
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_fsub+0x15a>
 8000e9c:	e0df      	b.n	800105e <__aeabi_fsub+0x31a>
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x162>
 8000ea4:	e0f7      	b.n	8001096 <__aeabi_fsub+0x352>
 8000ea6:	2eff      	cmp	r6, #255	; 0xff
 8000ea8:	d000      	beq.n	8000eac <__aeabi_fsub+0x168>
 8000eaa:	e099      	b.n	8000fe0 <__aeabi_fsub+0x29c>
 8000eac:	000d      	movs	r5, r1
 8000eae:	4643      	mov	r3, r8
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x172>
 8000eb4:	e085      	b.n	8000fc2 <__aeabi_fsub+0x27e>
 8000eb6:	2780      	movs	r7, #128	; 0x80
 8000eb8:	03ff      	lsls	r7, r7, #15
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	027f      	lsls	r7, r7, #9
 8000ebe:	20ff      	movs	r0, #255	; 0xff
 8000ec0:	0a7f      	lsrs	r7, r7, #9
 8000ec2:	e7a6      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d074      	beq.n	8000fb4 <__aeabi_fsub+0x270>
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4252      	negs	r2, r2
 8000ece:	4690      	mov	r8, r2
 8000ed0:	44c1      	add	r9, r8
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_fsub+0x196>
 8000ed8:	e0c8      	b.n	800106c <__aeabi_fsub+0x328>
 8000eda:	2cff      	cmp	r4, #255	; 0xff
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fsub+0x19c>
 8000ede:	e75f      	b.n	8000da0 <__aeabi_fsub+0x5c>
 8000ee0:	e7e6      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4051      	eors	r1, r2
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d000      	beq.n	8000eec <__aeabi_fsub+0x1a8>
 8000eea:	e749      	b.n	8000d80 <__aeabi_fsub+0x3c>
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	4252      	negs	r2, r2
 8000ef0:	4691      	mov	r9, r2
 8000ef2:	44a1      	add	r9, r4
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d043      	beq.n	8000f82 <__aeabi_fsub+0x23e>
 8000efa:	1b31      	subs	r1, r6, r4
 8000efc:	2c00      	cmp	r4, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x1be>
 8000f00:	e08c      	b.n	800101c <__aeabi_fsub+0x2d8>
 8000f02:	2eff      	cmp	r6, #255	; 0xff
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x1c4>
 8000f06:	e092      	b.n	800102e <__aeabi_fsub+0x2ea>
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	04db      	lsls	r3, r3, #19
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	4694      	mov	ip, r2
 8000f12:	2301      	movs	r3, #1
 8000f14:	291b      	cmp	r1, #27
 8000f16:	dc09      	bgt.n	8000f2c <__aeabi_fsub+0x1e8>
 8000f18:	2020      	movs	r0, #32
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	1a41      	subs	r1, r0, r1
 8000f22:	408a      	lsls	r2, r1
 8000f24:	0011      	movs	r1, r2
 8000f26:	1e48      	subs	r0, r1, #1
 8000f28:	4181      	sbcs	r1, r0
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	0034      	movs	r4, r6
 8000f2e:	4453      	add	r3, sl
 8000f30:	e794      	b.n	8000e5c <__aeabi_fsub+0x118>
 8000f32:	22fe      	movs	r2, #254	; 0xfe
 8000f34:	1c66      	adds	r6, r4, #1
 8000f36:	4232      	tst	r2, r6
 8000f38:	d164      	bne.n	8001004 <__aeabi_fsub+0x2c0>
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x1fc>
 8000f3e:	e082      	b.n	8001046 <__aeabi_fsub+0x302>
 8000f40:	4663      	mov	r3, ip
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x204>
 8000f46:	e0ab      	b.n	80010a0 <__aeabi_fsub+0x35c>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fsub+0x20c>
 8000f4e:	e760      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000f50:	4663      	mov	r3, ip
 8000f52:	4652      	mov	r2, sl
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	d400      	bmi.n	8000f5c <__aeabi_fsub+0x218>
 8000f5a:	e0aa      	b.n	80010b2 <__aeabi_fsub+0x36e>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	4652      	mov	r2, sl
 8000f60:	000d      	movs	r5, r1
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	e744      	b.n	8000df0 <__aeabi_fsub+0xac>
 8000f66:	4652      	mov	r2, sl
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d023      	beq.n	8000fb4 <__aeabi_fsub+0x270>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4252      	negs	r2, r2
 8000f70:	4690      	mov	r8, r2
 8000f72:	44c1      	add	r9, r8
 8000f74:	464a      	mov	r2, r9
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d075      	beq.n	8001066 <__aeabi_fsub+0x322>
 8000f7a:	2cff      	cmp	r4, #255	; 0xff
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fsub+0x23c>
 8000f7e:	e75f      	b.n	8000e40 <__aeabi_fsub+0xfc>
 8000f80:	e796      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000f82:	26fe      	movs	r6, #254	; 0xfe
 8000f84:	3401      	adds	r4, #1
 8000f86:	4226      	tst	r6, r4
 8000f88:	d153      	bne.n	8001032 <__aeabi_fsub+0x2ee>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d172      	bne.n	8001074 <__aeabi_fsub+0x330>
 8000f8e:	4663      	mov	r3, ip
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x252>
 8000f94:	e093      	b.n	80010be <__aeabi_fsub+0x37a>
 8000f96:	4653      	mov	r3, sl
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x25a>
 8000f9c:	e739      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	d502      	bpl.n	8000fac <__aeabi_fsub+0x268>
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <__aeabi_fsub+0x38c>)
 8000fa8:	3401      	adds	r4, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	075a      	lsls	r2, r3, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x26e>
 8000fb0:	e720      	b.n	8000df4 <__aeabi_fsub+0xb0>
 8000fb2:	08db      	lsrs	r3, r3, #3
 8000fb4:	2cff      	cmp	r4, #255	; 0xff
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x276>
 8000fb8:	e77a      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	0a5f      	lsrs	r7, r3, #9
 8000fbe:	b2e0      	uxtb	r0, r4
 8000fc0:	e727      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000fc2:	20ff      	movs	r0, #255	; 0xff
 8000fc4:	2700      	movs	r7, #0
 8000fc6:	e724      	b.n	8000e12 <__aeabi_fsub+0xce>
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <__aeabi_fsub+0x38c>)
 8000fca:	1a24      	subs	r4, r4, r0
 8000fcc:	4033      	ands	r3, r6
 8000fce:	e70f      	b.n	8000df0 <__aeabi_fsub+0xac>
 8000fd0:	2eff      	cmp	r6, #255	; 0xff
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x292>
 8000fd4:	e76a      	b.n	8000eac <__aeabi_fsub+0x168>
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	4662      	mov	r2, ip
 8000fda:	04db      	lsls	r3, r3, #19
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4694      	mov	ip, r2
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	281b      	cmp	r0, #27
 8000fe4:	dc09      	bgt.n	8000ffa <__aeabi_fsub+0x2b6>
 8000fe6:	2420      	movs	r4, #32
 8000fe8:	4663      	mov	r3, ip
 8000fea:	4662      	mov	r2, ip
 8000fec:	40c3      	lsrs	r3, r0
 8000fee:	1a20      	subs	r0, r4, r0
 8000ff0:	4082      	lsls	r2, r0
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	1e44      	subs	r4, r0, #1
 8000ff6:	41a0      	sbcs	r0, r4
 8000ff8:	4303      	orrs	r3, r0
 8000ffa:	4652      	mov	r2, sl
 8000ffc:	000d      	movs	r5, r1
 8000ffe:	0034      	movs	r4, r6
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	e6dc      	b.n	8000dbe <__aeabi_fsub+0x7a>
 8001004:	4663      	mov	r3, ip
 8001006:	4652      	mov	r2, sl
 8001008:	1a9e      	subs	r6, r3, r2
 800100a:	0173      	lsls	r3, r6, #5
 800100c:	d417      	bmi.n	800103e <__aeabi_fsub+0x2fa>
 800100e:	2e00      	cmp	r6, #0
 8001010:	d000      	beq.n	8001014 <__aeabi_fsub+0x2d0>
 8001012:	e6d9      	b.n	8000dc8 <__aeabi_fsub+0x84>
 8001014:	2500      	movs	r5, #0
 8001016:	2000      	movs	r0, #0
 8001018:	2700      	movs	r7, #0
 800101a:	e6fa      	b.n	8000e12 <__aeabi_fsub+0xce>
 800101c:	4663      	mov	r3, ip
 800101e:	2b00      	cmp	r3, #0
 8001020:	d044      	beq.n	80010ac <__aeabi_fsub+0x368>
 8001022:	3901      	subs	r1, #1
 8001024:	2900      	cmp	r1, #0
 8001026:	d04c      	beq.n	80010c2 <__aeabi_fsub+0x37e>
 8001028:	2eff      	cmp	r6, #255	; 0xff
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x2ea>
 800102c:	e771      	b.n	8000f12 <__aeabi_fsub+0x1ce>
 800102e:	4643      	mov	r3, r8
 8001030:	e73e      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8001032:	2cff      	cmp	r4, #255	; 0xff
 8001034:	d0c5      	beq.n	8000fc2 <__aeabi_fsub+0x27e>
 8001036:	4652      	mov	r2, sl
 8001038:	4462      	add	r2, ip
 800103a:	0853      	lsrs	r3, r2, #1
 800103c:	e7b6      	b.n	8000fac <__aeabi_fsub+0x268>
 800103e:	4663      	mov	r3, ip
 8001040:	000d      	movs	r5, r1
 8001042:	1ad6      	subs	r6, r2, r3
 8001044:	e6c0      	b.n	8000dc8 <__aeabi_fsub+0x84>
 8001046:	4662      	mov	r2, ip
 8001048:	2a00      	cmp	r2, #0
 800104a:	d116      	bne.n	800107a <__aeabi_fsub+0x336>
 800104c:	4653      	mov	r3, sl
 800104e:	2b00      	cmp	r3, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_fsub+0x310>
 8001052:	e72b      	b.n	8000eac <__aeabi_fsub+0x168>
 8001054:	2780      	movs	r7, #128	; 0x80
 8001056:	2500      	movs	r5, #0
 8001058:	20ff      	movs	r0, #255	; 0xff
 800105a:	03ff      	lsls	r7, r7, #15
 800105c:	e6d9      	b.n	8000e12 <__aeabi_fsub+0xce>
 800105e:	000d      	movs	r5, r1
 8001060:	4643      	mov	r3, r8
 8001062:	0034      	movs	r4, r6
 8001064:	e7a6      	b.n	8000fb4 <__aeabi_fsub+0x270>
 8001066:	4653      	mov	r3, sl
 8001068:	4463      	add	r3, ip
 800106a:	e6f7      	b.n	8000e5c <__aeabi_fsub+0x118>
 800106c:	4663      	mov	r3, ip
 800106e:	4652      	mov	r2, sl
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	e6a4      	b.n	8000dbe <__aeabi_fsub+0x7a>
 8001074:	4662      	mov	r2, ip
 8001076:	2a00      	cmp	r2, #0
 8001078:	d0d9      	beq.n	800102e <__aeabi_fsub+0x2ea>
 800107a:	4652      	mov	r2, sl
 800107c:	2a00      	cmp	r2, #0
 800107e:	d100      	bne.n	8001082 <__aeabi_fsub+0x33e>
 8001080:	e716      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	03d2      	lsls	r2, r2, #15
 8001086:	4213      	tst	r3, r2
 8001088:	d100      	bne.n	800108c <__aeabi_fsub+0x348>
 800108a:	e711      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 800108c:	4640      	mov	r0, r8
 800108e:	4210      	tst	r0, r2
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x350>
 8001092:	e70d      	b.n	8000eb0 <__aeabi_fsub+0x16c>
 8001094:	e70a      	b.n	8000eac <__aeabi_fsub+0x168>
 8001096:	4652      	mov	r2, sl
 8001098:	000d      	movs	r5, r1
 800109a:	0034      	movs	r4, r6
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	e68e      	b.n	8000dbe <__aeabi_fsub+0x7a>
 80010a0:	4653      	mov	r3, sl
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d008      	beq.n	80010b8 <__aeabi_fsub+0x374>
 80010a6:	000d      	movs	r5, r1
 80010a8:	4647      	mov	r7, r8
 80010aa:	e6b2      	b.n	8000e12 <__aeabi_fsub+0xce>
 80010ac:	4643      	mov	r3, r8
 80010ae:	0034      	movs	r4, r6
 80010b0:	e780      	b.n	8000fb4 <__aeabi_fsub+0x270>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x374>
 80010b6:	e779      	b.n	8000fac <__aeabi_fsub+0x268>
 80010b8:	2500      	movs	r5, #0
 80010ba:	2700      	movs	r7, #0
 80010bc:	e6a9      	b.n	8000e12 <__aeabi_fsub+0xce>
 80010be:	4647      	mov	r7, r8
 80010c0:	e6a7      	b.n	8000e12 <__aeabi_fsub+0xce>
 80010c2:	4653      	mov	r3, sl
 80010c4:	0034      	movs	r4, r6
 80010c6:	4463      	add	r3, ip
 80010c8:	e6c8      	b.n	8000e5c <__aeabi_fsub+0x118>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	7dffffff 	.word	0x7dffffff
 80010d0:	fbffffff 	.word	0xfbffffff

080010d4 <__aeabi_f2iz>:
 80010d4:	0241      	lsls	r1, r0, #9
 80010d6:	0042      	lsls	r2, r0, #1
 80010d8:	0fc3      	lsrs	r3, r0, #31
 80010da:	0a49      	lsrs	r1, r1, #9
 80010dc:	2000      	movs	r0, #0
 80010de:	0e12      	lsrs	r2, r2, #24
 80010e0:	2a7e      	cmp	r2, #126	; 0x7e
 80010e2:	d903      	bls.n	80010ec <__aeabi_f2iz+0x18>
 80010e4:	2a9d      	cmp	r2, #157	; 0x9d
 80010e6:	d902      	bls.n	80010ee <__aeabi_f2iz+0x1a>
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <__aeabi_f2iz+0x3c>)
 80010ea:	1898      	adds	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	2080      	movs	r0, #128	; 0x80
 80010f0:	0400      	lsls	r0, r0, #16
 80010f2:	4301      	orrs	r1, r0
 80010f4:	2a95      	cmp	r2, #149	; 0x95
 80010f6:	dc07      	bgt.n	8001108 <__aeabi_f2iz+0x34>
 80010f8:	2096      	movs	r0, #150	; 0x96
 80010fa:	1a82      	subs	r2, r0, r2
 80010fc:	40d1      	lsrs	r1, r2
 80010fe:	4248      	negs	r0, r1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f3      	bne.n	80010ec <__aeabi_f2iz+0x18>
 8001104:	0008      	movs	r0, r1
 8001106:	e7f1      	b.n	80010ec <__aeabi_f2iz+0x18>
 8001108:	3a96      	subs	r2, #150	; 0x96
 800110a:	4091      	lsls	r1, r2
 800110c:	e7f7      	b.n	80010fe <__aeabi_f2iz+0x2a>
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	7fffffff 	.word	0x7fffffff

08001114 <__aeabi_i2f>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	2800      	cmp	r0, #0
 8001118:	d013      	beq.n	8001142 <__aeabi_i2f+0x2e>
 800111a:	17c3      	asrs	r3, r0, #31
 800111c:	18c5      	adds	r5, r0, r3
 800111e:	405d      	eors	r5, r3
 8001120:	0fc4      	lsrs	r4, r0, #31
 8001122:	0028      	movs	r0, r5
 8001124:	f001 ff9a 	bl	800305c <__clzsi2>
 8001128:	239e      	movs	r3, #158	; 0x9e
 800112a:	0001      	movs	r1, r0
 800112c:	1a1b      	subs	r3, r3, r0
 800112e:	2b96      	cmp	r3, #150	; 0x96
 8001130:	dc0f      	bgt.n	8001152 <__aeabi_i2f+0x3e>
 8001132:	2808      	cmp	r0, #8
 8001134:	dd01      	ble.n	800113a <__aeabi_i2f+0x26>
 8001136:	3908      	subs	r1, #8
 8001138:	408d      	lsls	r5, r1
 800113a:	026d      	lsls	r5, r5, #9
 800113c:	0a6d      	lsrs	r5, r5, #9
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	e002      	b.n	8001148 <__aeabi_i2f+0x34>
 8001142:	2400      	movs	r4, #0
 8001144:	2000      	movs	r0, #0
 8001146:	2500      	movs	r5, #0
 8001148:	05c0      	lsls	r0, r0, #23
 800114a:	4328      	orrs	r0, r5
 800114c:	07e4      	lsls	r4, r4, #31
 800114e:	4320      	orrs	r0, r4
 8001150:	bd70      	pop	{r4, r5, r6, pc}
 8001152:	2b99      	cmp	r3, #153	; 0x99
 8001154:	dd0b      	ble.n	800116e <__aeabi_i2f+0x5a>
 8001156:	2205      	movs	r2, #5
 8001158:	002e      	movs	r6, r5
 800115a:	1a12      	subs	r2, r2, r0
 800115c:	40d6      	lsrs	r6, r2
 800115e:	0002      	movs	r2, r0
 8001160:	321b      	adds	r2, #27
 8001162:	4095      	lsls	r5, r2
 8001164:	0028      	movs	r0, r5
 8001166:	1e45      	subs	r5, r0, #1
 8001168:	41a8      	sbcs	r0, r5
 800116a:	0035      	movs	r5, r6
 800116c:	4305      	orrs	r5, r0
 800116e:	2905      	cmp	r1, #5
 8001170:	dd01      	ble.n	8001176 <__aeabi_i2f+0x62>
 8001172:	1f4a      	subs	r2, r1, #5
 8001174:	4095      	lsls	r5, r2
 8001176:	002a      	movs	r2, r5
 8001178:	4e08      	ldr	r6, [pc, #32]	; (800119c <__aeabi_i2f+0x88>)
 800117a:	4032      	ands	r2, r6
 800117c:	0768      	lsls	r0, r5, #29
 800117e:	d009      	beq.n	8001194 <__aeabi_i2f+0x80>
 8001180:	200f      	movs	r0, #15
 8001182:	4028      	ands	r0, r5
 8001184:	2804      	cmp	r0, #4
 8001186:	d005      	beq.n	8001194 <__aeabi_i2f+0x80>
 8001188:	3204      	adds	r2, #4
 800118a:	0150      	lsls	r0, r2, #5
 800118c:	d502      	bpl.n	8001194 <__aeabi_i2f+0x80>
 800118e:	239f      	movs	r3, #159	; 0x9f
 8001190:	4032      	ands	r2, r6
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	0192      	lsls	r2, r2, #6
 8001196:	0a55      	lsrs	r5, r2, #9
 8001198:	b2d8      	uxtb	r0, r3
 800119a:	e7d5      	b.n	8001148 <__aeabi_i2f+0x34>
 800119c:	fbffffff 	.word	0xfbffffff

080011a0 <__aeabi_ui2f>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	1e05      	subs	r5, r0, #0
 80011a4:	d00e      	beq.n	80011c4 <__aeabi_ui2f+0x24>
 80011a6:	f001 ff59 	bl	800305c <__clzsi2>
 80011aa:	239e      	movs	r3, #158	; 0x9e
 80011ac:	0004      	movs	r4, r0
 80011ae:	1a1b      	subs	r3, r3, r0
 80011b0:	2b96      	cmp	r3, #150	; 0x96
 80011b2:	dc0c      	bgt.n	80011ce <__aeabi_ui2f+0x2e>
 80011b4:	2808      	cmp	r0, #8
 80011b6:	dd01      	ble.n	80011bc <__aeabi_ui2f+0x1c>
 80011b8:	3c08      	subs	r4, #8
 80011ba:	40a5      	lsls	r5, r4
 80011bc:	026d      	lsls	r5, r5, #9
 80011be:	0a6d      	lsrs	r5, r5, #9
 80011c0:	b2d8      	uxtb	r0, r3
 80011c2:	e001      	b.n	80011c8 <__aeabi_ui2f+0x28>
 80011c4:	2000      	movs	r0, #0
 80011c6:	2500      	movs	r5, #0
 80011c8:	05c0      	lsls	r0, r0, #23
 80011ca:	4328      	orrs	r0, r5
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
 80011ce:	2b99      	cmp	r3, #153	; 0x99
 80011d0:	dd09      	ble.n	80011e6 <__aeabi_ui2f+0x46>
 80011d2:	0002      	movs	r2, r0
 80011d4:	0029      	movs	r1, r5
 80011d6:	321b      	adds	r2, #27
 80011d8:	4091      	lsls	r1, r2
 80011da:	1e4a      	subs	r2, r1, #1
 80011dc:	4191      	sbcs	r1, r2
 80011de:	2205      	movs	r2, #5
 80011e0:	1a12      	subs	r2, r2, r0
 80011e2:	40d5      	lsrs	r5, r2
 80011e4:	430d      	orrs	r5, r1
 80011e6:	2c05      	cmp	r4, #5
 80011e8:	dd01      	ble.n	80011ee <__aeabi_ui2f+0x4e>
 80011ea:	1f62      	subs	r2, r4, #5
 80011ec:	4095      	lsls	r5, r2
 80011ee:	0029      	movs	r1, r5
 80011f0:	4e08      	ldr	r6, [pc, #32]	; (8001214 <__aeabi_ui2f+0x74>)
 80011f2:	4031      	ands	r1, r6
 80011f4:	076a      	lsls	r2, r5, #29
 80011f6:	d009      	beq.n	800120c <__aeabi_ui2f+0x6c>
 80011f8:	200f      	movs	r0, #15
 80011fa:	4028      	ands	r0, r5
 80011fc:	2804      	cmp	r0, #4
 80011fe:	d005      	beq.n	800120c <__aeabi_ui2f+0x6c>
 8001200:	3104      	adds	r1, #4
 8001202:	014a      	lsls	r2, r1, #5
 8001204:	d502      	bpl.n	800120c <__aeabi_ui2f+0x6c>
 8001206:	239f      	movs	r3, #159	; 0x9f
 8001208:	4031      	ands	r1, r6
 800120a:	1b1b      	subs	r3, r3, r4
 800120c:	0189      	lsls	r1, r1, #6
 800120e:	0a4d      	lsrs	r5, r1, #9
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	e7d9      	b.n	80011c8 <__aeabi_ui2f+0x28>
 8001214:	fbffffff 	.word	0xfbffffff

08001218 <__aeabi_dadd>:
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	464f      	mov	r7, r9
 800121c:	46d6      	mov	lr, sl
 800121e:	4646      	mov	r6, r8
 8001220:	000d      	movs	r5, r1
 8001222:	0001      	movs	r1, r0
 8001224:	0018      	movs	r0, r3
 8001226:	b5c0      	push	{r6, r7, lr}
 8001228:	0017      	movs	r7, r2
 800122a:	032b      	lsls	r3, r5, #12
 800122c:	0a5a      	lsrs	r2, r3, #9
 800122e:	0f4b      	lsrs	r3, r1, #29
 8001230:	4313      	orrs	r3, r2
 8001232:	00ca      	lsls	r2, r1, #3
 8001234:	4691      	mov	r9, r2
 8001236:	0302      	lsls	r2, r0, #12
 8001238:	006e      	lsls	r6, r5, #1
 800123a:	0041      	lsls	r1, r0, #1
 800123c:	0a52      	lsrs	r2, r2, #9
 800123e:	0fec      	lsrs	r4, r5, #31
 8001240:	0f7d      	lsrs	r5, r7, #29
 8001242:	4315      	orrs	r5, r2
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	0d49      	lsrs	r1, r1, #21
 8001248:	0fc0      	lsrs	r0, r0, #31
 800124a:	4682      	mov	sl, r0
 800124c:	46ac      	mov	ip, r5
 800124e:	00ff      	lsls	r7, r7, #3
 8001250:	1a72      	subs	r2, r6, r1
 8001252:	4284      	cmp	r4, r0
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x40>
 8001256:	e098      	b.n	800138a <__aeabi_dadd+0x172>
 8001258:	2a00      	cmp	r2, #0
 800125a:	dc00      	bgt.n	800125e <__aeabi_dadd+0x46>
 800125c:	e081      	b.n	8001362 <__aeabi_dadd+0x14a>
 800125e:	2900      	cmp	r1, #0
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x4c>
 8001262:	e0b6      	b.n	80013d2 <__aeabi_dadd+0x1ba>
 8001264:	49c9      	ldr	r1, [pc, #804]	; (800158c <__aeabi_dadd+0x374>)
 8001266:	428e      	cmp	r6, r1
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x54>
 800126a:	e172      	b.n	8001552 <__aeabi_dadd+0x33a>
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0028      	movs	r0, r5
 8001270:	0409      	lsls	r1, r1, #16
 8001272:	4308      	orrs	r0, r1
 8001274:	4684      	mov	ip, r0
 8001276:	2a38      	cmp	r2, #56	; 0x38
 8001278:	dd00      	ble.n	800127c <__aeabi_dadd+0x64>
 800127a:	e15e      	b.n	800153a <__aeabi_dadd+0x322>
 800127c:	2a1f      	cmp	r2, #31
 800127e:	dd00      	ble.n	8001282 <__aeabi_dadd+0x6a>
 8001280:	e1ee      	b.n	8001660 <__aeabi_dadd+0x448>
 8001282:	2020      	movs	r0, #32
 8001284:	0039      	movs	r1, r7
 8001286:	4665      	mov	r5, ip
 8001288:	1a80      	subs	r0, r0, r2
 800128a:	4087      	lsls	r7, r0
 800128c:	40d1      	lsrs	r1, r2
 800128e:	4085      	lsls	r5, r0
 8001290:	430d      	orrs	r5, r1
 8001292:	0039      	movs	r1, r7
 8001294:	1e4f      	subs	r7, r1, #1
 8001296:	41b9      	sbcs	r1, r7
 8001298:	4667      	mov	r7, ip
 800129a:	40d7      	lsrs	r7, r2
 800129c:	4329      	orrs	r1, r5
 800129e:	1bdb      	subs	r3, r3, r7
 80012a0:	464a      	mov	r2, r9
 80012a2:	1a55      	subs	r5, r2, r1
 80012a4:	45a9      	cmp	r9, r5
 80012a6:	4189      	sbcs	r1, r1
 80012a8:	4249      	negs	r1, r1
 80012aa:	1a5b      	subs	r3, r3, r1
 80012ac:	4698      	mov	r8, r3
 80012ae:	4643      	mov	r3, r8
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	d400      	bmi.n	80012b6 <__aeabi_dadd+0x9e>
 80012b4:	e0cc      	b.n	8001450 <__aeabi_dadd+0x238>
 80012b6:	4643      	mov	r3, r8
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	4698      	mov	r8, r3
 80012be:	4643      	mov	r3, r8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0xae>
 80012c4:	e12c      	b.n	8001520 <__aeabi_dadd+0x308>
 80012c6:	4640      	mov	r0, r8
 80012c8:	f001 fec8 	bl	800305c <__clzsi2>
 80012cc:	0001      	movs	r1, r0
 80012ce:	3908      	subs	r1, #8
 80012d0:	2220      	movs	r2, #32
 80012d2:	0028      	movs	r0, r5
 80012d4:	4643      	mov	r3, r8
 80012d6:	1a52      	subs	r2, r2, r1
 80012d8:	408b      	lsls	r3, r1
 80012da:	40d0      	lsrs	r0, r2
 80012dc:	408d      	lsls	r5, r1
 80012de:	4303      	orrs	r3, r0
 80012e0:	428e      	cmp	r6, r1
 80012e2:	dd00      	ble.n	80012e6 <__aeabi_dadd+0xce>
 80012e4:	e117      	b.n	8001516 <__aeabi_dadd+0x2fe>
 80012e6:	1b8e      	subs	r6, r1, r6
 80012e8:	1c72      	adds	r2, r6, #1
 80012ea:	2a1f      	cmp	r2, #31
 80012ec:	dd00      	ble.n	80012f0 <__aeabi_dadd+0xd8>
 80012ee:	e1a7      	b.n	8001640 <__aeabi_dadd+0x428>
 80012f0:	2120      	movs	r1, #32
 80012f2:	0018      	movs	r0, r3
 80012f4:	002e      	movs	r6, r5
 80012f6:	1a89      	subs	r1, r1, r2
 80012f8:	408d      	lsls	r5, r1
 80012fa:	4088      	lsls	r0, r1
 80012fc:	40d6      	lsrs	r6, r2
 80012fe:	40d3      	lsrs	r3, r2
 8001300:	1e69      	subs	r1, r5, #1
 8001302:	418d      	sbcs	r5, r1
 8001304:	4330      	orrs	r0, r6
 8001306:	4698      	mov	r8, r3
 8001308:	2600      	movs	r6, #0
 800130a:	4305      	orrs	r5, r0
 800130c:	076b      	lsls	r3, r5, #29
 800130e:	d009      	beq.n	8001324 <__aeabi_dadd+0x10c>
 8001310:	230f      	movs	r3, #15
 8001312:	402b      	ands	r3, r5
 8001314:	2b04      	cmp	r3, #4
 8001316:	d005      	beq.n	8001324 <__aeabi_dadd+0x10c>
 8001318:	1d2b      	adds	r3, r5, #4
 800131a:	42ab      	cmp	r3, r5
 800131c:	41ad      	sbcs	r5, r5
 800131e:	426d      	negs	r5, r5
 8001320:	44a8      	add	r8, r5
 8001322:	001d      	movs	r5, r3
 8001324:	4643      	mov	r3, r8
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	d400      	bmi.n	800132c <__aeabi_dadd+0x114>
 800132a:	e094      	b.n	8001456 <__aeabi_dadd+0x23e>
 800132c:	4b97      	ldr	r3, [pc, #604]	; (800158c <__aeabi_dadd+0x374>)
 800132e:	1c72      	adds	r2, r6, #1
 8001330:	429a      	cmp	r2, r3
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x11e>
 8001334:	e09d      	b.n	8001472 <__aeabi_dadd+0x25a>
 8001336:	4641      	mov	r1, r8
 8001338:	4b95      	ldr	r3, [pc, #596]	; (8001590 <__aeabi_dadd+0x378>)
 800133a:	08ed      	lsrs	r5, r5, #3
 800133c:	4019      	ands	r1, r3
 800133e:	000b      	movs	r3, r1
 8001340:	0552      	lsls	r2, r2, #21
 8001342:	0749      	lsls	r1, r1, #29
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4329      	orrs	r1, r5
 8001348:	0b1b      	lsrs	r3, r3, #12
 800134a:	0d52      	lsrs	r2, r2, #21
 800134c:	0512      	lsls	r2, r2, #20
 800134e:	4313      	orrs	r3, r2
 8001350:	07e4      	lsls	r4, r4, #31
 8001352:	4323      	orrs	r3, r4
 8001354:	0008      	movs	r0, r1
 8001356:	0019      	movs	r1, r3
 8001358:	bce0      	pop	{r5, r6, r7}
 800135a:	46ba      	mov	sl, r7
 800135c:	46b1      	mov	r9, r6
 800135e:	46a8      	mov	r8, r5
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	2a00      	cmp	r2, #0
 8001364:	d043      	beq.n	80013ee <__aeabi_dadd+0x1d6>
 8001366:	1b8a      	subs	r2, r1, r6
 8001368:	2e00      	cmp	r6, #0
 800136a:	d000      	beq.n	800136e <__aeabi_dadd+0x156>
 800136c:	e12a      	b.n	80015c4 <__aeabi_dadd+0x3ac>
 800136e:	464c      	mov	r4, r9
 8001370:	431c      	orrs	r4, r3
 8001372:	d100      	bne.n	8001376 <__aeabi_dadd+0x15e>
 8001374:	e1d1      	b.n	800171a <__aeabi_dadd+0x502>
 8001376:	1e54      	subs	r4, r2, #1
 8001378:	2a01      	cmp	r2, #1
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x166>
 800137c:	e21f      	b.n	80017be <__aeabi_dadd+0x5a6>
 800137e:	4d83      	ldr	r5, [pc, #524]	; (800158c <__aeabi_dadd+0x374>)
 8001380:	42aa      	cmp	r2, r5
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x16e>
 8001384:	e272      	b.n	800186c <__aeabi_dadd+0x654>
 8001386:	0022      	movs	r2, r4
 8001388:	e123      	b.n	80015d2 <__aeabi_dadd+0x3ba>
 800138a:	2a00      	cmp	r2, #0
 800138c:	dc00      	bgt.n	8001390 <__aeabi_dadd+0x178>
 800138e:	e098      	b.n	80014c2 <__aeabi_dadd+0x2aa>
 8001390:	2900      	cmp	r1, #0
 8001392:	d042      	beq.n	800141a <__aeabi_dadd+0x202>
 8001394:	497d      	ldr	r1, [pc, #500]	; (800158c <__aeabi_dadd+0x374>)
 8001396:	428e      	cmp	r6, r1
 8001398:	d100      	bne.n	800139c <__aeabi_dadd+0x184>
 800139a:	e0da      	b.n	8001552 <__aeabi_dadd+0x33a>
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0028      	movs	r0, r5
 80013a0:	0409      	lsls	r1, r1, #16
 80013a2:	4308      	orrs	r0, r1
 80013a4:	4684      	mov	ip, r0
 80013a6:	2a38      	cmp	r2, #56	; 0x38
 80013a8:	dd00      	ble.n	80013ac <__aeabi_dadd+0x194>
 80013aa:	e129      	b.n	8001600 <__aeabi_dadd+0x3e8>
 80013ac:	2a1f      	cmp	r2, #31
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_dadd+0x19a>
 80013b0:	e187      	b.n	80016c2 <__aeabi_dadd+0x4aa>
 80013b2:	0011      	movs	r1, r2
 80013b4:	4665      	mov	r5, ip
 80013b6:	3920      	subs	r1, #32
 80013b8:	40cd      	lsrs	r5, r1
 80013ba:	2a20      	cmp	r2, #32
 80013bc:	d004      	beq.n	80013c8 <__aeabi_dadd+0x1b0>
 80013be:	2040      	movs	r0, #64	; 0x40
 80013c0:	4661      	mov	r1, ip
 80013c2:	1a82      	subs	r2, r0, r2
 80013c4:	4091      	lsls	r1, r2
 80013c6:	430f      	orrs	r7, r1
 80013c8:	0039      	movs	r1, r7
 80013ca:	1e4f      	subs	r7, r1, #1
 80013cc:	41b9      	sbcs	r1, r7
 80013ce:	430d      	orrs	r5, r1
 80013d0:	e11b      	b.n	800160a <__aeabi_dadd+0x3f2>
 80013d2:	0029      	movs	r1, r5
 80013d4:	4339      	orrs	r1, r7
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x1c2>
 80013d8:	e0b5      	b.n	8001546 <__aeabi_dadd+0x32e>
 80013da:	1e51      	subs	r1, r2, #1
 80013dc:	2a01      	cmp	r2, #1
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x1ca>
 80013e0:	e1ab      	b.n	800173a <__aeabi_dadd+0x522>
 80013e2:	486a      	ldr	r0, [pc, #424]	; (800158c <__aeabi_dadd+0x374>)
 80013e4:	4282      	cmp	r2, r0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x1d2>
 80013e8:	e1b2      	b.n	8001750 <__aeabi_dadd+0x538>
 80013ea:	000a      	movs	r2, r1
 80013ec:	e743      	b.n	8001276 <__aeabi_dadd+0x5e>
 80013ee:	4969      	ldr	r1, [pc, #420]	; (8001594 <__aeabi_dadd+0x37c>)
 80013f0:	1c75      	adds	r5, r6, #1
 80013f2:	420d      	tst	r5, r1
 80013f4:	d000      	beq.n	80013f8 <__aeabi_dadd+0x1e0>
 80013f6:	e0cf      	b.n	8001598 <__aeabi_dadd+0x380>
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x1e6>
 80013fc:	e193      	b.n	8001726 <__aeabi_dadd+0x50e>
 80013fe:	4649      	mov	r1, r9
 8001400:	4319      	orrs	r1, r3
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x1ee>
 8001404:	e1d1      	b.n	80017aa <__aeabi_dadd+0x592>
 8001406:	4661      	mov	r1, ip
 8001408:	4339      	orrs	r1, r7
 800140a:	d000      	beq.n	800140e <__aeabi_dadd+0x1f6>
 800140c:	e1e3      	b.n	80017d6 <__aeabi_dadd+0x5be>
 800140e:	4649      	mov	r1, r9
 8001410:	0758      	lsls	r0, r3, #29
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	4301      	orrs	r1, r0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e026      	b.n	8001468 <__aeabi_dadd+0x250>
 800141a:	0029      	movs	r1, r5
 800141c:	4339      	orrs	r1, r7
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x20a>
 8001420:	e091      	b.n	8001546 <__aeabi_dadd+0x32e>
 8001422:	1e51      	subs	r1, r2, #1
 8001424:	2a01      	cmp	r2, #1
 8001426:	d005      	beq.n	8001434 <__aeabi_dadd+0x21c>
 8001428:	4858      	ldr	r0, [pc, #352]	; (800158c <__aeabi_dadd+0x374>)
 800142a:	4282      	cmp	r2, r0
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x218>
 800142e:	e18f      	b.n	8001750 <__aeabi_dadd+0x538>
 8001430:	000a      	movs	r2, r1
 8001432:	e7b8      	b.n	80013a6 <__aeabi_dadd+0x18e>
 8001434:	003d      	movs	r5, r7
 8001436:	444d      	add	r5, r9
 8001438:	454d      	cmp	r5, r9
 800143a:	4189      	sbcs	r1, r1
 800143c:	4463      	add	r3, ip
 800143e:	4698      	mov	r8, r3
 8001440:	4249      	negs	r1, r1
 8001442:	4488      	add	r8, r1
 8001444:	4643      	mov	r3, r8
 8001446:	2602      	movs	r6, #2
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	d500      	bpl.n	800144e <__aeabi_dadd+0x236>
 800144c:	e0eb      	b.n	8001626 <__aeabi_dadd+0x40e>
 800144e:	3e01      	subs	r6, #1
 8001450:	076b      	lsls	r3, r5, #29
 8001452:	d000      	beq.n	8001456 <__aeabi_dadd+0x23e>
 8001454:	e75c      	b.n	8001310 <__aeabi_dadd+0xf8>
 8001456:	4643      	mov	r3, r8
 8001458:	08e9      	lsrs	r1, r5, #3
 800145a:	075a      	lsls	r2, r3, #29
 800145c:	4311      	orrs	r1, r2
 800145e:	0032      	movs	r2, r6
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	484a      	ldr	r0, [pc, #296]	; (800158c <__aeabi_dadd+0x374>)
 8001464:	4282      	cmp	r2, r0
 8001466:	d021      	beq.n	80014ac <__aeabi_dadd+0x294>
 8001468:	031b      	lsls	r3, r3, #12
 800146a:	0552      	lsls	r2, r2, #21
 800146c:	0b1b      	lsrs	r3, r3, #12
 800146e:	0d52      	lsrs	r2, r2, #21
 8001470:	e76c      	b.n	800134c <__aeabi_dadd+0x134>
 8001472:	2300      	movs	r3, #0
 8001474:	2100      	movs	r1, #0
 8001476:	e769      	b.n	800134c <__aeabi_dadd+0x134>
 8001478:	002a      	movs	r2, r5
 800147a:	433a      	orrs	r2, r7
 800147c:	d069      	beq.n	8001552 <__aeabi_dadd+0x33a>
 800147e:	464a      	mov	r2, r9
 8001480:	0758      	lsls	r0, r3, #29
 8001482:	08d1      	lsrs	r1, r2, #3
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	4308      	orrs	r0, r1
 800148c:	421a      	tst	r2, r3
 800148e:	d007      	beq.n	80014a0 <__aeabi_dadd+0x288>
 8001490:	0029      	movs	r1, r5
 8001492:	08ed      	lsrs	r5, r5, #3
 8001494:	421d      	tst	r5, r3
 8001496:	d103      	bne.n	80014a0 <__aeabi_dadd+0x288>
 8001498:	002a      	movs	r2, r5
 800149a:	08ff      	lsrs	r7, r7, #3
 800149c:	0748      	lsls	r0, r1, #29
 800149e:	4338      	orrs	r0, r7
 80014a0:	0f43      	lsrs	r3, r0, #29
 80014a2:	00c1      	lsls	r1, r0, #3
 80014a4:	075b      	lsls	r3, r3, #29
 80014a6:	08c9      	lsrs	r1, r1, #3
 80014a8:	4319      	orrs	r1, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	d100      	bne.n	80014b4 <__aeabi_dadd+0x29c>
 80014b2:	e213      	b.n	80018dc <__aeabi_dadd+0x6c4>
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0312      	lsls	r2, r2, #12
 80014b8:	4313      	orrs	r3, r2
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <__aeabi_dadd+0x374>)
 80014be:	0b1b      	lsrs	r3, r3, #12
 80014c0:	e744      	b.n	800134c <__aeabi_dadd+0x134>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d04b      	beq.n	800155e <__aeabi_dadd+0x346>
 80014c6:	1b8a      	subs	r2, r1, r6
 80014c8:	2e00      	cmp	r6, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x2b6>
 80014cc:	e0e7      	b.n	800169e <__aeabi_dadd+0x486>
 80014ce:	482f      	ldr	r0, [pc, #188]	; (800158c <__aeabi_dadd+0x374>)
 80014d0:	4281      	cmp	r1, r0
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x2be>
 80014d4:	e195      	b.n	8001802 <__aeabi_dadd+0x5ea>
 80014d6:	2080      	movs	r0, #128	; 0x80
 80014d8:	0400      	lsls	r0, r0, #16
 80014da:	4303      	orrs	r3, r0
 80014dc:	2a38      	cmp	r2, #56	; 0x38
 80014de:	dd00      	ble.n	80014e2 <__aeabi_dadd+0x2ca>
 80014e0:	e143      	b.n	800176a <__aeabi_dadd+0x552>
 80014e2:	2a1f      	cmp	r2, #31
 80014e4:	dd00      	ble.n	80014e8 <__aeabi_dadd+0x2d0>
 80014e6:	e1db      	b.n	80018a0 <__aeabi_dadd+0x688>
 80014e8:	2020      	movs	r0, #32
 80014ea:	001d      	movs	r5, r3
 80014ec:	464e      	mov	r6, r9
 80014ee:	1a80      	subs	r0, r0, r2
 80014f0:	4085      	lsls	r5, r0
 80014f2:	40d6      	lsrs	r6, r2
 80014f4:	4335      	orrs	r5, r6
 80014f6:	464e      	mov	r6, r9
 80014f8:	4086      	lsls	r6, r0
 80014fa:	0030      	movs	r0, r6
 80014fc:	40d3      	lsrs	r3, r2
 80014fe:	1e46      	subs	r6, r0, #1
 8001500:	41b0      	sbcs	r0, r6
 8001502:	449c      	add	ip, r3
 8001504:	4305      	orrs	r5, r0
 8001506:	19ed      	adds	r5, r5, r7
 8001508:	42bd      	cmp	r5, r7
 800150a:	419b      	sbcs	r3, r3
 800150c:	425b      	negs	r3, r3
 800150e:	4463      	add	r3, ip
 8001510:	4698      	mov	r8, r3
 8001512:	000e      	movs	r6, r1
 8001514:	e07f      	b.n	8001616 <__aeabi_dadd+0x3fe>
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <__aeabi_dadd+0x378>)
 8001518:	1a76      	subs	r6, r6, r1
 800151a:	4013      	ands	r3, r2
 800151c:	4698      	mov	r8, r3
 800151e:	e6f5      	b.n	800130c <__aeabi_dadd+0xf4>
 8001520:	0028      	movs	r0, r5
 8001522:	f001 fd9b 	bl	800305c <__clzsi2>
 8001526:	0001      	movs	r1, r0
 8001528:	3118      	adds	r1, #24
 800152a:	291f      	cmp	r1, #31
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x318>
 800152e:	e6cf      	b.n	80012d0 <__aeabi_dadd+0xb8>
 8001530:	002b      	movs	r3, r5
 8001532:	3808      	subs	r0, #8
 8001534:	4083      	lsls	r3, r0
 8001536:	2500      	movs	r5, #0
 8001538:	e6d2      	b.n	80012e0 <__aeabi_dadd+0xc8>
 800153a:	4662      	mov	r2, ip
 800153c:	433a      	orrs	r2, r7
 800153e:	0011      	movs	r1, r2
 8001540:	1e4f      	subs	r7, r1, #1
 8001542:	41b9      	sbcs	r1, r7
 8001544:	e6ac      	b.n	80012a0 <__aeabi_dadd+0x88>
 8001546:	4649      	mov	r1, r9
 8001548:	0758      	lsls	r0, r3, #29
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	4301      	orrs	r1, r0
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	e787      	b.n	8001462 <__aeabi_dadd+0x24a>
 8001552:	4649      	mov	r1, r9
 8001554:	075a      	lsls	r2, r3, #29
 8001556:	08c9      	lsrs	r1, r1, #3
 8001558:	4311      	orrs	r1, r2
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	e7a6      	b.n	80014ac <__aeabi_dadd+0x294>
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <__aeabi_dadd+0x37c>)
 8001560:	1c70      	adds	r0, r6, #1
 8001562:	4208      	tst	r0, r1
 8001564:	d000      	beq.n	8001568 <__aeabi_dadd+0x350>
 8001566:	e0bb      	b.n	80016e0 <__aeabi_dadd+0x4c8>
 8001568:	2e00      	cmp	r6, #0
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x356>
 800156c:	e114      	b.n	8001798 <__aeabi_dadd+0x580>
 800156e:	4649      	mov	r1, r9
 8001570:	4319      	orrs	r1, r3
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x35e>
 8001574:	e175      	b.n	8001862 <__aeabi_dadd+0x64a>
 8001576:	0029      	movs	r1, r5
 8001578:	4339      	orrs	r1, r7
 800157a:	d000      	beq.n	800157e <__aeabi_dadd+0x366>
 800157c:	e17e      	b.n	800187c <__aeabi_dadd+0x664>
 800157e:	4649      	mov	r1, r9
 8001580:	0758      	lsls	r0, r3, #29
 8001582:	08c9      	lsrs	r1, r1, #3
 8001584:	4301      	orrs	r1, r0
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	e76e      	b.n	8001468 <__aeabi_dadd+0x250>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	000007ff 	.word	0x000007ff
 8001590:	ff7fffff 	.word	0xff7fffff
 8001594:	000007fe 	.word	0x000007fe
 8001598:	4649      	mov	r1, r9
 800159a:	1bcd      	subs	r5, r1, r7
 800159c:	4661      	mov	r1, ip
 800159e:	1a58      	subs	r0, r3, r1
 80015a0:	45a9      	cmp	r9, r5
 80015a2:	4189      	sbcs	r1, r1
 80015a4:	4249      	negs	r1, r1
 80015a6:	4688      	mov	r8, r1
 80015a8:	0001      	movs	r1, r0
 80015aa:	4640      	mov	r0, r8
 80015ac:	1a09      	subs	r1, r1, r0
 80015ae:	4688      	mov	r8, r1
 80015b0:	0209      	lsls	r1, r1, #8
 80015b2:	d500      	bpl.n	80015b6 <__aeabi_dadd+0x39e>
 80015b4:	e0a6      	b.n	8001704 <__aeabi_dadd+0x4ec>
 80015b6:	4641      	mov	r1, r8
 80015b8:	4329      	orrs	r1, r5
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x3a6>
 80015bc:	e67f      	b.n	80012be <__aeabi_dadd+0xa6>
 80015be:	2300      	movs	r3, #0
 80015c0:	2400      	movs	r4, #0
 80015c2:	e751      	b.n	8001468 <__aeabi_dadd+0x250>
 80015c4:	4cc7      	ldr	r4, [pc, #796]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80015c6:	42a1      	cmp	r1, r4
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x3b4>
 80015ca:	e0c7      	b.n	800175c <__aeabi_dadd+0x544>
 80015cc:	2480      	movs	r4, #128	; 0x80
 80015ce:	0424      	lsls	r4, r4, #16
 80015d0:	4323      	orrs	r3, r4
 80015d2:	2a38      	cmp	r2, #56	; 0x38
 80015d4:	dc54      	bgt.n	8001680 <__aeabi_dadd+0x468>
 80015d6:	2a1f      	cmp	r2, #31
 80015d8:	dd00      	ble.n	80015dc <__aeabi_dadd+0x3c4>
 80015da:	e0cc      	b.n	8001776 <__aeabi_dadd+0x55e>
 80015dc:	2420      	movs	r4, #32
 80015de:	4648      	mov	r0, r9
 80015e0:	1aa4      	subs	r4, r4, r2
 80015e2:	001d      	movs	r5, r3
 80015e4:	464e      	mov	r6, r9
 80015e6:	40a0      	lsls	r0, r4
 80015e8:	40d6      	lsrs	r6, r2
 80015ea:	40a5      	lsls	r5, r4
 80015ec:	0004      	movs	r4, r0
 80015ee:	40d3      	lsrs	r3, r2
 80015f0:	4662      	mov	r2, ip
 80015f2:	4335      	orrs	r5, r6
 80015f4:	1e66      	subs	r6, r4, #1
 80015f6:	41b4      	sbcs	r4, r6
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	469c      	mov	ip, r3
 80015fc:	4325      	orrs	r5, r4
 80015fe:	e044      	b.n	800168a <__aeabi_dadd+0x472>
 8001600:	4662      	mov	r2, ip
 8001602:	433a      	orrs	r2, r7
 8001604:	0015      	movs	r5, r2
 8001606:	1e6f      	subs	r7, r5, #1
 8001608:	41bd      	sbcs	r5, r7
 800160a:	444d      	add	r5, r9
 800160c:	454d      	cmp	r5, r9
 800160e:	4189      	sbcs	r1, r1
 8001610:	4249      	negs	r1, r1
 8001612:	4688      	mov	r8, r1
 8001614:	4498      	add	r8, r3
 8001616:	4643      	mov	r3, r8
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	d400      	bmi.n	800161e <__aeabi_dadd+0x406>
 800161c:	e718      	b.n	8001450 <__aeabi_dadd+0x238>
 800161e:	4bb1      	ldr	r3, [pc, #708]	; (80018e4 <__aeabi_dadd+0x6cc>)
 8001620:	3601      	adds	r6, #1
 8001622:	429e      	cmp	r6, r3
 8001624:	d049      	beq.n	80016ba <__aeabi_dadd+0x4a2>
 8001626:	4642      	mov	r2, r8
 8001628:	4baf      	ldr	r3, [pc, #700]	; (80018e8 <__aeabi_dadd+0x6d0>)
 800162a:	2101      	movs	r1, #1
 800162c:	401a      	ands	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	086a      	lsrs	r2, r5, #1
 8001632:	400d      	ands	r5, r1
 8001634:	4315      	orrs	r5, r2
 8001636:	07d9      	lsls	r1, r3, #31
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	4698      	mov	r8, r3
 800163c:	430d      	orrs	r5, r1
 800163e:	e665      	b.n	800130c <__aeabi_dadd+0xf4>
 8001640:	0018      	movs	r0, r3
 8001642:	3e1f      	subs	r6, #31
 8001644:	40f0      	lsrs	r0, r6
 8001646:	2a20      	cmp	r2, #32
 8001648:	d003      	beq.n	8001652 <__aeabi_dadd+0x43a>
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	1a8a      	subs	r2, r1, r2
 800164e:	4093      	lsls	r3, r2
 8001650:	431d      	orrs	r5, r3
 8001652:	1e69      	subs	r1, r5, #1
 8001654:	418d      	sbcs	r5, r1
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4698      	mov	r8, r3
 800165c:	4305      	orrs	r5, r0
 800165e:	e6f7      	b.n	8001450 <__aeabi_dadd+0x238>
 8001660:	0011      	movs	r1, r2
 8001662:	4665      	mov	r5, ip
 8001664:	3920      	subs	r1, #32
 8001666:	40cd      	lsrs	r5, r1
 8001668:	2a20      	cmp	r2, #32
 800166a:	d004      	beq.n	8001676 <__aeabi_dadd+0x45e>
 800166c:	2040      	movs	r0, #64	; 0x40
 800166e:	4661      	mov	r1, ip
 8001670:	1a82      	subs	r2, r0, r2
 8001672:	4091      	lsls	r1, r2
 8001674:	430f      	orrs	r7, r1
 8001676:	0039      	movs	r1, r7
 8001678:	1e4f      	subs	r7, r1, #1
 800167a:	41b9      	sbcs	r1, r7
 800167c:	4329      	orrs	r1, r5
 800167e:	e60f      	b.n	80012a0 <__aeabi_dadd+0x88>
 8001680:	464a      	mov	r2, r9
 8001682:	4313      	orrs	r3, r2
 8001684:	001d      	movs	r5, r3
 8001686:	1e6b      	subs	r3, r5, #1
 8001688:	419d      	sbcs	r5, r3
 800168a:	1b7d      	subs	r5, r7, r5
 800168c:	42af      	cmp	r7, r5
 800168e:	419b      	sbcs	r3, r3
 8001690:	4662      	mov	r2, ip
 8001692:	425b      	negs	r3, r3
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4698      	mov	r8, r3
 8001698:	4654      	mov	r4, sl
 800169a:	000e      	movs	r6, r1
 800169c:	e607      	b.n	80012ae <__aeabi_dadd+0x96>
 800169e:	4648      	mov	r0, r9
 80016a0:	4318      	orrs	r0, r3
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x48e>
 80016a4:	e0b3      	b.n	800180e <__aeabi_dadd+0x5f6>
 80016a6:	1e50      	subs	r0, r2, #1
 80016a8:	2a01      	cmp	r2, #1
 80016aa:	d100      	bne.n	80016ae <__aeabi_dadd+0x496>
 80016ac:	e10d      	b.n	80018ca <__aeabi_dadd+0x6b2>
 80016ae:	4d8d      	ldr	r5, [pc, #564]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80016b0:	42aa      	cmp	r2, r5
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x49e>
 80016b4:	e0a5      	b.n	8001802 <__aeabi_dadd+0x5ea>
 80016b6:	0002      	movs	r2, r0
 80016b8:	e710      	b.n	80014dc <__aeabi_dadd+0x2c4>
 80016ba:	0032      	movs	r2, r6
 80016bc:	2300      	movs	r3, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	e644      	b.n	800134c <__aeabi_dadd+0x134>
 80016c2:	2120      	movs	r1, #32
 80016c4:	0038      	movs	r0, r7
 80016c6:	1a89      	subs	r1, r1, r2
 80016c8:	4665      	mov	r5, ip
 80016ca:	408f      	lsls	r7, r1
 80016cc:	408d      	lsls	r5, r1
 80016ce:	40d0      	lsrs	r0, r2
 80016d0:	1e79      	subs	r1, r7, #1
 80016d2:	418f      	sbcs	r7, r1
 80016d4:	4305      	orrs	r5, r0
 80016d6:	433d      	orrs	r5, r7
 80016d8:	4667      	mov	r7, ip
 80016da:	40d7      	lsrs	r7, r2
 80016dc:	19db      	adds	r3, r3, r7
 80016de:	e794      	b.n	800160a <__aeabi_dadd+0x3f2>
 80016e0:	4a80      	ldr	r2, [pc, #512]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dadd+0x4d0>
 80016e6:	e0ec      	b.n	80018c2 <__aeabi_dadd+0x6aa>
 80016e8:	0039      	movs	r1, r7
 80016ea:	4449      	add	r1, r9
 80016ec:	4549      	cmp	r1, r9
 80016ee:	4192      	sbcs	r2, r2
 80016f0:	4463      	add	r3, ip
 80016f2:	4252      	negs	r2, r2
 80016f4:	189b      	adds	r3, r3, r2
 80016f6:	07dd      	lsls	r5, r3, #31
 80016f8:	0849      	lsrs	r1, r1, #1
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	4698      	mov	r8, r3
 80016fe:	0006      	movs	r6, r0
 8001700:	430d      	orrs	r5, r1
 8001702:	e6a5      	b.n	8001450 <__aeabi_dadd+0x238>
 8001704:	464a      	mov	r2, r9
 8001706:	1abd      	subs	r5, r7, r2
 8001708:	42af      	cmp	r7, r5
 800170a:	4189      	sbcs	r1, r1
 800170c:	4662      	mov	r2, ip
 800170e:	4249      	negs	r1, r1
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	4698      	mov	r8, r3
 8001716:	4654      	mov	r4, sl
 8001718:	e5d1      	b.n	80012be <__aeabi_dadd+0xa6>
 800171a:	076c      	lsls	r4, r5, #29
 800171c:	08f9      	lsrs	r1, r7, #3
 800171e:	4321      	orrs	r1, r4
 8001720:	08eb      	lsrs	r3, r5, #3
 8001722:	0004      	movs	r4, r0
 8001724:	e69d      	b.n	8001462 <__aeabi_dadd+0x24a>
 8001726:	464a      	mov	r2, r9
 8001728:	431a      	orrs	r2, r3
 800172a:	d175      	bne.n	8001818 <__aeabi_dadd+0x600>
 800172c:	4661      	mov	r1, ip
 800172e:	4339      	orrs	r1, r7
 8001730:	d114      	bne.n	800175c <__aeabi_dadd+0x544>
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	2400      	movs	r4, #0
 8001736:	031b      	lsls	r3, r3, #12
 8001738:	e6bc      	b.n	80014b4 <__aeabi_dadd+0x29c>
 800173a:	464a      	mov	r2, r9
 800173c:	1bd5      	subs	r5, r2, r7
 800173e:	45a9      	cmp	r9, r5
 8001740:	4189      	sbcs	r1, r1
 8001742:	4662      	mov	r2, ip
 8001744:	4249      	negs	r1, r1
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	1a5b      	subs	r3, r3, r1
 800174a:	4698      	mov	r8, r3
 800174c:	2601      	movs	r6, #1
 800174e:	e5ae      	b.n	80012ae <__aeabi_dadd+0x96>
 8001750:	464a      	mov	r2, r9
 8001752:	08d1      	lsrs	r1, r2, #3
 8001754:	075a      	lsls	r2, r3, #29
 8001756:	4311      	orrs	r1, r2
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	e6a7      	b.n	80014ac <__aeabi_dadd+0x294>
 800175c:	4663      	mov	r3, ip
 800175e:	08f9      	lsrs	r1, r7, #3
 8001760:	075a      	lsls	r2, r3, #29
 8001762:	4654      	mov	r4, sl
 8001764:	4311      	orrs	r1, r2
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	e6a0      	b.n	80014ac <__aeabi_dadd+0x294>
 800176a:	464a      	mov	r2, r9
 800176c:	4313      	orrs	r3, r2
 800176e:	001d      	movs	r5, r3
 8001770:	1e6b      	subs	r3, r5, #1
 8001772:	419d      	sbcs	r5, r3
 8001774:	e6c7      	b.n	8001506 <__aeabi_dadd+0x2ee>
 8001776:	0014      	movs	r4, r2
 8001778:	001e      	movs	r6, r3
 800177a:	3c20      	subs	r4, #32
 800177c:	40e6      	lsrs	r6, r4
 800177e:	2a20      	cmp	r2, #32
 8001780:	d005      	beq.n	800178e <__aeabi_dadd+0x576>
 8001782:	2440      	movs	r4, #64	; 0x40
 8001784:	1aa2      	subs	r2, r4, r2
 8001786:	4093      	lsls	r3, r2
 8001788:	464a      	mov	r2, r9
 800178a:	431a      	orrs	r2, r3
 800178c:	4691      	mov	r9, r2
 800178e:	464d      	mov	r5, r9
 8001790:	1e6b      	subs	r3, r5, #1
 8001792:	419d      	sbcs	r5, r3
 8001794:	4335      	orrs	r5, r6
 8001796:	e778      	b.n	800168a <__aeabi_dadd+0x472>
 8001798:	464a      	mov	r2, r9
 800179a:	431a      	orrs	r2, r3
 800179c:	d000      	beq.n	80017a0 <__aeabi_dadd+0x588>
 800179e:	e66b      	b.n	8001478 <__aeabi_dadd+0x260>
 80017a0:	076b      	lsls	r3, r5, #29
 80017a2:	08f9      	lsrs	r1, r7, #3
 80017a4:	4319      	orrs	r1, r3
 80017a6:	08eb      	lsrs	r3, r5, #3
 80017a8:	e680      	b.n	80014ac <__aeabi_dadd+0x294>
 80017aa:	4661      	mov	r1, ip
 80017ac:	4339      	orrs	r1, r7
 80017ae:	d054      	beq.n	800185a <__aeabi_dadd+0x642>
 80017b0:	4663      	mov	r3, ip
 80017b2:	08f9      	lsrs	r1, r7, #3
 80017b4:	075c      	lsls	r4, r3, #29
 80017b6:	4321      	orrs	r1, r4
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	0004      	movs	r4, r0
 80017bc:	e654      	b.n	8001468 <__aeabi_dadd+0x250>
 80017be:	464a      	mov	r2, r9
 80017c0:	1abd      	subs	r5, r7, r2
 80017c2:	42af      	cmp	r7, r5
 80017c4:	4189      	sbcs	r1, r1
 80017c6:	4662      	mov	r2, ip
 80017c8:	4249      	negs	r1, r1
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	1a5b      	subs	r3, r3, r1
 80017ce:	4698      	mov	r8, r3
 80017d0:	0004      	movs	r4, r0
 80017d2:	2601      	movs	r6, #1
 80017d4:	e56b      	b.n	80012ae <__aeabi_dadd+0x96>
 80017d6:	464a      	mov	r2, r9
 80017d8:	1bd5      	subs	r5, r2, r7
 80017da:	45a9      	cmp	r9, r5
 80017dc:	4189      	sbcs	r1, r1
 80017de:	4662      	mov	r2, ip
 80017e0:	4249      	negs	r1, r1
 80017e2:	1a9a      	subs	r2, r3, r2
 80017e4:	1a52      	subs	r2, r2, r1
 80017e6:	4690      	mov	r8, r2
 80017e8:	0212      	lsls	r2, r2, #8
 80017ea:	d532      	bpl.n	8001852 <__aeabi_dadd+0x63a>
 80017ec:	464a      	mov	r2, r9
 80017ee:	1abd      	subs	r5, r7, r2
 80017f0:	42af      	cmp	r7, r5
 80017f2:	4189      	sbcs	r1, r1
 80017f4:	4662      	mov	r2, ip
 80017f6:	4249      	negs	r1, r1
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	1a5b      	subs	r3, r3, r1
 80017fc:	4698      	mov	r8, r3
 80017fe:	0004      	movs	r4, r0
 8001800:	e584      	b.n	800130c <__aeabi_dadd+0xf4>
 8001802:	4663      	mov	r3, ip
 8001804:	08f9      	lsrs	r1, r7, #3
 8001806:	075a      	lsls	r2, r3, #29
 8001808:	4311      	orrs	r1, r2
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	e64e      	b.n	80014ac <__aeabi_dadd+0x294>
 800180e:	08f9      	lsrs	r1, r7, #3
 8001810:	0768      	lsls	r0, r5, #29
 8001812:	4301      	orrs	r1, r0
 8001814:	08eb      	lsrs	r3, r5, #3
 8001816:	e624      	b.n	8001462 <__aeabi_dadd+0x24a>
 8001818:	4662      	mov	r2, ip
 800181a:	433a      	orrs	r2, r7
 800181c:	d100      	bne.n	8001820 <__aeabi_dadd+0x608>
 800181e:	e698      	b.n	8001552 <__aeabi_dadd+0x33a>
 8001820:	464a      	mov	r2, r9
 8001822:	08d1      	lsrs	r1, r2, #3
 8001824:	075a      	lsls	r2, r3, #29
 8001826:	4311      	orrs	r1, r2
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	031b      	lsls	r3, r3, #12
 800182e:	421a      	tst	r2, r3
 8001830:	d008      	beq.n	8001844 <__aeabi_dadd+0x62c>
 8001832:	4660      	mov	r0, ip
 8001834:	08c5      	lsrs	r5, r0, #3
 8001836:	421d      	tst	r5, r3
 8001838:	d104      	bne.n	8001844 <__aeabi_dadd+0x62c>
 800183a:	4654      	mov	r4, sl
 800183c:	002a      	movs	r2, r5
 800183e:	08f9      	lsrs	r1, r7, #3
 8001840:	0743      	lsls	r3, r0, #29
 8001842:	4319      	orrs	r1, r3
 8001844:	0f4b      	lsrs	r3, r1, #29
 8001846:	00c9      	lsls	r1, r1, #3
 8001848:	075b      	lsls	r3, r3, #29
 800184a:	08c9      	lsrs	r1, r1, #3
 800184c:	4319      	orrs	r1, r3
 800184e:	0013      	movs	r3, r2
 8001850:	e62c      	b.n	80014ac <__aeabi_dadd+0x294>
 8001852:	4641      	mov	r1, r8
 8001854:	4329      	orrs	r1, r5
 8001856:	d000      	beq.n	800185a <__aeabi_dadd+0x642>
 8001858:	e5fa      	b.n	8001450 <__aeabi_dadd+0x238>
 800185a:	2300      	movs	r3, #0
 800185c:	000a      	movs	r2, r1
 800185e:	2400      	movs	r4, #0
 8001860:	e602      	b.n	8001468 <__aeabi_dadd+0x250>
 8001862:	076b      	lsls	r3, r5, #29
 8001864:	08f9      	lsrs	r1, r7, #3
 8001866:	4319      	orrs	r1, r3
 8001868:	08eb      	lsrs	r3, r5, #3
 800186a:	e5fd      	b.n	8001468 <__aeabi_dadd+0x250>
 800186c:	4663      	mov	r3, ip
 800186e:	08f9      	lsrs	r1, r7, #3
 8001870:	075b      	lsls	r3, r3, #29
 8001872:	4319      	orrs	r1, r3
 8001874:	4663      	mov	r3, ip
 8001876:	0004      	movs	r4, r0
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	e617      	b.n	80014ac <__aeabi_dadd+0x294>
 800187c:	003d      	movs	r5, r7
 800187e:	444d      	add	r5, r9
 8001880:	4463      	add	r3, ip
 8001882:	454d      	cmp	r5, r9
 8001884:	4189      	sbcs	r1, r1
 8001886:	4698      	mov	r8, r3
 8001888:	4249      	negs	r1, r1
 800188a:	4488      	add	r8, r1
 800188c:	4643      	mov	r3, r8
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_dadd+0x67c>
 8001892:	e5dd      	b.n	8001450 <__aeabi_dadd+0x238>
 8001894:	4642      	mov	r2, r8
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <__aeabi_dadd+0x6d0>)
 8001898:	2601      	movs	r6, #1
 800189a:	401a      	ands	r2, r3
 800189c:	4690      	mov	r8, r2
 800189e:	e5d7      	b.n	8001450 <__aeabi_dadd+0x238>
 80018a0:	0010      	movs	r0, r2
 80018a2:	001e      	movs	r6, r3
 80018a4:	3820      	subs	r0, #32
 80018a6:	40c6      	lsrs	r6, r0
 80018a8:	2a20      	cmp	r2, #32
 80018aa:	d005      	beq.n	80018b8 <__aeabi_dadd+0x6a0>
 80018ac:	2040      	movs	r0, #64	; 0x40
 80018ae:	1a82      	subs	r2, r0, r2
 80018b0:	4093      	lsls	r3, r2
 80018b2:	464a      	mov	r2, r9
 80018b4:	431a      	orrs	r2, r3
 80018b6:	4691      	mov	r9, r2
 80018b8:	464d      	mov	r5, r9
 80018ba:	1e6b      	subs	r3, r5, #1
 80018bc:	419d      	sbcs	r5, r3
 80018be:	4335      	orrs	r5, r6
 80018c0:	e621      	b.n	8001506 <__aeabi_dadd+0x2ee>
 80018c2:	0002      	movs	r2, r0
 80018c4:	2300      	movs	r3, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	e540      	b.n	800134c <__aeabi_dadd+0x134>
 80018ca:	464a      	mov	r2, r9
 80018cc:	19d5      	adds	r5, r2, r7
 80018ce:	42bd      	cmp	r5, r7
 80018d0:	4189      	sbcs	r1, r1
 80018d2:	4463      	add	r3, ip
 80018d4:	4698      	mov	r8, r3
 80018d6:	4249      	negs	r1, r1
 80018d8:	4488      	add	r8, r1
 80018da:	e5b3      	b.n	8001444 <__aeabi_dadd+0x22c>
 80018dc:	2100      	movs	r1, #0
 80018de:	4a01      	ldr	r2, [pc, #4]	; (80018e4 <__aeabi_dadd+0x6cc>)
 80018e0:	000b      	movs	r3, r1
 80018e2:	e533      	b.n	800134c <__aeabi_dadd+0x134>
 80018e4:	000007ff 	.word	0x000007ff
 80018e8:	ff7fffff 	.word	0xff7fffff

080018ec <__aeabi_ddiv>:
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	4657      	mov	r7, sl
 80018f0:	464e      	mov	r6, r9
 80018f2:	4645      	mov	r5, r8
 80018f4:	46de      	mov	lr, fp
 80018f6:	b5e0      	push	{r5, r6, r7, lr}
 80018f8:	4681      	mov	r9, r0
 80018fa:	0005      	movs	r5, r0
 80018fc:	030c      	lsls	r4, r1, #12
 80018fe:	0048      	lsls	r0, r1, #1
 8001900:	4692      	mov	sl, r2
 8001902:	001f      	movs	r7, r3
 8001904:	b085      	sub	sp, #20
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	0d40      	lsrs	r0, r0, #21
 800190a:	0fce      	lsrs	r6, r1, #31
 800190c:	2800      	cmp	r0, #0
 800190e:	d059      	beq.n	80019c4 <__aeabi_ddiv+0xd8>
 8001910:	4b87      	ldr	r3, [pc, #540]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001912:	4298      	cmp	r0, r3
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x2c>
 8001916:	e098      	b.n	8001a4a <__aeabi_ddiv+0x15e>
 8001918:	0f6b      	lsrs	r3, r5, #29
 800191a:	00e4      	lsls	r4, r4, #3
 800191c:	431c      	orrs	r4, r3
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	4323      	orrs	r3, r4
 8001924:	4698      	mov	r8, r3
 8001926:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <__aeabi_ddiv+0x248>)
 8001928:	00ed      	lsls	r5, r5, #3
 800192a:	469b      	mov	fp, r3
 800192c:	2300      	movs	r3, #0
 800192e:	4699      	mov	r9, r3
 8001930:	4483      	add	fp, r0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	033c      	lsls	r4, r7, #12
 8001936:	007b      	lsls	r3, r7, #1
 8001938:	4650      	mov	r0, sl
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	0d5b      	lsrs	r3, r3, #21
 800193e:	0fff      	lsrs	r7, r7, #31
 8001940:	2b00      	cmp	r3, #0
 8001942:	d067      	beq.n	8001a14 <__aeabi_ddiv+0x128>
 8001944:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d018      	beq.n	800197c <__aeabi_ddiv+0x90>
 800194a:	497a      	ldr	r1, [pc, #488]	; (8001b34 <__aeabi_ddiv+0x248>)
 800194c:	0f42      	lsrs	r2, r0, #29
 800194e:	468c      	mov	ip, r1
 8001950:	00e4      	lsls	r4, r4, #3
 8001952:	4659      	mov	r1, fp
 8001954:	4314      	orrs	r4, r2
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	4463      	add	r3, ip
 800195a:	0412      	lsls	r2, r2, #16
 800195c:	1acb      	subs	r3, r1, r3
 800195e:	4314      	orrs	r4, r2
 8001960:	469b      	mov	fp, r3
 8001962:	00c2      	lsls	r2, r0, #3
 8001964:	2000      	movs	r0, #0
 8001966:	0033      	movs	r3, r6
 8001968:	407b      	eors	r3, r7
 800196a:	469a      	mov	sl, r3
 800196c:	464b      	mov	r3, r9
 800196e:	2b0f      	cmp	r3, #15
 8001970:	d900      	bls.n	8001974 <__aeabi_ddiv+0x88>
 8001972:	e0ef      	b.n	8001b54 <__aeabi_ddiv+0x268>
 8001974:	4970      	ldr	r1, [pc, #448]	; (8001b38 <__aeabi_ddiv+0x24c>)
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	58cb      	ldr	r3, [r1, r3]
 800197a:	469f      	mov	pc, r3
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <__aeabi_ddiv+0x250>)
 800197e:	4652      	mov	r2, sl
 8001980:	469c      	mov	ip, r3
 8001982:	4322      	orrs	r2, r4
 8001984:	44e3      	add	fp, ip
 8001986:	2a00      	cmp	r2, #0
 8001988:	d000      	beq.n	800198c <__aeabi_ddiv+0xa0>
 800198a:	e095      	b.n	8001ab8 <__aeabi_ddiv+0x1cc>
 800198c:	4649      	mov	r1, r9
 800198e:	2302      	movs	r3, #2
 8001990:	4319      	orrs	r1, r3
 8001992:	4689      	mov	r9, r1
 8001994:	2400      	movs	r4, #0
 8001996:	2002      	movs	r0, #2
 8001998:	e7e5      	b.n	8001966 <__aeabi_ddiv+0x7a>
 800199a:	2300      	movs	r3, #0
 800199c:	2400      	movs	r4, #0
 800199e:	2500      	movs	r5, #0
 80019a0:	4652      	mov	r2, sl
 80019a2:	051b      	lsls	r3, r3, #20
 80019a4:	4323      	orrs	r3, r4
 80019a6:	07d2      	lsls	r2, r2, #31
 80019a8:	4313      	orrs	r3, r2
 80019aa:	0028      	movs	r0, r5
 80019ac:	0019      	movs	r1, r3
 80019ae:	b005      	add	sp, #20
 80019b0:	bcf0      	pop	{r4, r5, r6, r7}
 80019b2:	46bb      	mov	fp, r7
 80019b4:	46b2      	mov	sl, r6
 80019b6:	46a9      	mov	r9, r5
 80019b8:	46a0      	mov	r8, r4
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019bc:	2400      	movs	r4, #0
 80019be:	2500      	movs	r5, #0
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <__aeabi_ddiv+0x244>)
 80019c2:	e7ed      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 80019c4:	464b      	mov	r3, r9
 80019c6:	4323      	orrs	r3, r4
 80019c8:	4698      	mov	r8, r3
 80019ca:	d100      	bne.n	80019ce <__aeabi_ddiv+0xe2>
 80019cc:	e089      	b.n	8001ae2 <__aeabi_ddiv+0x1f6>
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0xe8>
 80019d2:	e1e0      	b.n	8001d96 <__aeabi_ddiv+0x4aa>
 80019d4:	0020      	movs	r0, r4
 80019d6:	f001 fb41 	bl	800305c <__clzsi2>
 80019da:	0001      	movs	r1, r0
 80019dc:	0002      	movs	r2, r0
 80019de:	390b      	subs	r1, #11
 80019e0:	231d      	movs	r3, #29
 80019e2:	1a5b      	subs	r3, r3, r1
 80019e4:	4649      	mov	r1, r9
 80019e6:	0010      	movs	r0, r2
 80019e8:	40d9      	lsrs	r1, r3
 80019ea:	3808      	subs	r0, #8
 80019ec:	4084      	lsls	r4, r0
 80019ee:	000b      	movs	r3, r1
 80019f0:	464d      	mov	r5, r9
 80019f2:	4323      	orrs	r3, r4
 80019f4:	4698      	mov	r8, r3
 80019f6:	4085      	lsls	r5, r0
 80019f8:	4851      	ldr	r0, [pc, #324]	; (8001b40 <__aeabi_ddiv+0x254>)
 80019fa:	033c      	lsls	r4, r7, #12
 80019fc:	1a83      	subs	r3, r0, r2
 80019fe:	469b      	mov	fp, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	4699      	mov	r9, r3
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	007b      	lsls	r3, r7, #1
 8001a08:	4650      	mov	r0, sl
 8001a0a:	0b24      	lsrs	r4, r4, #12
 8001a0c:	0d5b      	lsrs	r3, r3, #21
 8001a0e:	0fff      	lsrs	r7, r7, #31
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d197      	bne.n	8001944 <__aeabi_ddiv+0x58>
 8001a14:	4652      	mov	r2, sl
 8001a16:	4322      	orrs	r2, r4
 8001a18:	d055      	beq.n	8001ac6 <__aeabi_ddiv+0x1da>
 8001a1a:	2c00      	cmp	r4, #0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_ddiv+0x134>
 8001a1e:	e1ca      	b.n	8001db6 <__aeabi_ddiv+0x4ca>
 8001a20:	0020      	movs	r0, r4
 8001a22:	f001 fb1b 	bl	800305c <__clzsi2>
 8001a26:	0002      	movs	r2, r0
 8001a28:	3a0b      	subs	r2, #11
 8001a2a:	231d      	movs	r3, #29
 8001a2c:	0001      	movs	r1, r0
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	4652      	mov	r2, sl
 8001a32:	3908      	subs	r1, #8
 8001a34:	40da      	lsrs	r2, r3
 8001a36:	408c      	lsls	r4, r1
 8001a38:	4314      	orrs	r4, r2
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	408a      	lsls	r2, r1
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <__aeabi_ddiv+0x258>)
 8001a40:	4458      	add	r0, fp
 8001a42:	469b      	mov	fp, r3
 8001a44:	4483      	add	fp, r0
 8001a46:	2000      	movs	r0, #0
 8001a48:	e78d      	b.n	8001966 <__aeabi_ddiv+0x7a>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	4323      	orrs	r3, r4
 8001a4e:	4698      	mov	r8, r3
 8001a50:	d140      	bne.n	8001ad4 <__aeabi_ddiv+0x1e8>
 8001a52:	2308      	movs	r3, #8
 8001a54:	4699      	mov	r9, r3
 8001a56:	3b06      	subs	r3, #6
 8001a58:	2500      	movs	r5, #0
 8001a5a:	4683      	mov	fp, r0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	e769      	b.n	8001934 <__aeabi_ddiv+0x48>
 8001a60:	46b2      	mov	sl, r6
 8001a62:	9b00      	ldr	r3, [sp, #0]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d0a9      	beq.n	80019bc <__aeabi_ddiv+0xd0>
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_ddiv+0x182>
 8001a6c:	e211      	b.n	8001e92 <__aeabi_ddiv+0x5a6>
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d093      	beq.n	800199a <__aeabi_ddiv+0xae>
 8001a72:	4a35      	ldr	r2, [pc, #212]	; (8001b48 <__aeabi_ddiv+0x25c>)
 8001a74:	445a      	add	r2, fp
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	dc00      	bgt.n	8001a7c <__aeabi_ddiv+0x190>
 8001a7a:	e13c      	b.n	8001cf6 <__aeabi_ddiv+0x40a>
 8001a7c:	076b      	lsls	r3, r5, #29
 8001a7e:	d000      	beq.n	8001a82 <__aeabi_ddiv+0x196>
 8001a80:	e1a7      	b.n	8001dd2 <__aeabi_ddiv+0x4e6>
 8001a82:	08ed      	lsrs	r5, r5, #3
 8001a84:	4643      	mov	r3, r8
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	d506      	bpl.n	8001a98 <__aeabi_ddiv+0x1ac>
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <__aeabi_ddiv+0x260>)
 8001a8e:	401a      	ands	r2, r3
 8001a90:	4690      	mov	r8, r2
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	00d2      	lsls	r2, r2, #3
 8001a96:	445a      	add	r2, fp
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <__aeabi_ddiv+0x264>)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dc8e      	bgt.n	80019bc <__aeabi_ddiv+0xd0>
 8001a9e:	4643      	mov	r3, r8
 8001aa0:	0552      	lsls	r2, r2, #21
 8001aa2:	0758      	lsls	r0, r3, #29
 8001aa4:	025c      	lsls	r4, r3, #9
 8001aa6:	4305      	orrs	r5, r0
 8001aa8:	0b24      	lsrs	r4, r4, #12
 8001aaa:	0d53      	lsrs	r3, r2, #21
 8001aac:	e778      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001aae:	46ba      	mov	sl, r7
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	0015      	movs	r5, r2
 8001ab4:	9000      	str	r0, [sp, #0]
 8001ab6:	e7d4      	b.n	8001a62 <__aeabi_ddiv+0x176>
 8001ab8:	464a      	mov	r2, r9
 8001aba:	2303      	movs	r3, #3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	4691      	mov	r9, r2
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	4652      	mov	r2, sl
 8001ac4:	e74f      	b.n	8001966 <__aeabi_ddiv+0x7a>
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	2301      	movs	r3, #1
 8001aca:	4319      	orrs	r1, r3
 8001acc:	4689      	mov	r9, r1
 8001ace:	2400      	movs	r4, #0
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	e748      	b.n	8001966 <__aeabi_ddiv+0x7a>
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	3b09      	subs	r3, #9
 8001ada:	46a0      	mov	r8, r4
 8001adc:	4683      	mov	fp, r0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	e728      	b.n	8001934 <__aeabi_ddiv+0x48>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	469b      	mov	fp, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	2500      	movs	r5, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	e720      	b.n	8001934 <__aeabi_ddiv+0x48>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2480      	movs	r4, #128	; 0x80
 8001af6:	469a      	mov	sl, r3
 8001af8:	2500      	movs	r5, #0
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001afc:	0324      	lsls	r4, r4, #12
 8001afe:	e74f      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	4641      	mov	r1, r8
 8001b04:	031b      	lsls	r3, r3, #12
 8001b06:	4219      	tst	r1, r3
 8001b08:	d008      	beq.n	8001b1c <__aeabi_ddiv+0x230>
 8001b0a:	421c      	tst	r4, r3
 8001b0c:	d106      	bne.n	8001b1c <__aeabi_ddiv+0x230>
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	46ba      	mov	sl, r7
 8001b14:	0015      	movs	r5, r2
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001b18:	0b24      	lsrs	r4, r4, #12
 8001b1a:	e741      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001b1c:	2480      	movs	r4, #128	; 0x80
 8001b1e:	4643      	mov	r3, r8
 8001b20:	0324      	lsls	r4, r4, #12
 8001b22:	431c      	orrs	r4, r3
 8001b24:	0324      	lsls	r4, r4, #12
 8001b26:	46b2      	mov	sl, r6
 8001b28:	4b01      	ldr	r3, [pc, #4]	; (8001b30 <__aeabi_ddiv+0x244>)
 8001b2a:	0b24      	lsrs	r4, r4, #12
 8001b2c:	e738      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	000007ff 	.word	0x000007ff
 8001b34:	fffffc01 	.word	0xfffffc01
 8001b38:	08011960 	.word	0x08011960
 8001b3c:	fffff801 	.word	0xfffff801
 8001b40:	fffffc0d 	.word	0xfffffc0d
 8001b44:	000003f3 	.word	0x000003f3
 8001b48:	000003ff 	.word	0x000003ff
 8001b4c:	feffffff 	.word	0xfeffffff
 8001b50:	000007fe 	.word	0x000007fe
 8001b54:	4544      	cmp	r4, r8
 8001b56:	d200      	bcs.n	8001b5a <__aeabi_ddiv+0x26e>
 8001b58:	e116      	b.n	8001d88 <__aeabi_ddiv+0x49c>
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x272>
 8001b5c:	e111      	b.n	8001d82 <__aeabi_ddiv+0x496>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	425b      	negs	r3, r3
 8001b62:	469c      	mov	ip, r3
 8001b64:	002e      	movs	r6, r5
 8001b66:	4640      	mov	r0, r8
 8001b68:	2500      	movs	r5, #0
 8001b6a:	44e3      	add	fp, ip
 8001b6c:	0223      	lsls	r3, r4, #8
 8001b6e:	0e14      	lsrs	r4, r2, #24
 8001b70:	431c      	orrs	r4, r3
 8001b72:	0c1b      	lsrs	r3, r3, #16
 8001b74:	4699      	mov	r9, r3
 8001b76:	0423      	lsls	r3, r4, #16
 8001b78:	0c1f      	lsrs	r7, r3, #16
 8001b7a:	0212      	lsls	r2, r2, #8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	9701      	str	r7, [sp, #4]
 8001b82:	f7fe fb4f 	bl	8000224 <__aeabi_uidivmod>
 8001b86:	0002      	movs	r2, r0
 8001b88:	437a      	muls	r2, r7
 8001b8a:	040b      	lsls	r3, r1, #16
 8001b8c:	0c31      	lsrs	r1, r6, #16
 8001b8e:	4680      	mov	r8, r0
 8001b90:	4319      	orrs	r1, r3
 8001b92:	428a      	cmp	r2, r1
 8001b94:	d90b      	bls.n	8001bae <__aeabi_ddiv+0x2c2>
 8001b96:	2301      	movs	r3, #1
 8001b98:	425b      	negs	r3, r3
 8001b9a:	469c      	mov	ip, r3
 8001b9c:	1909      	adds	r1, r1, r4
 8001b9e:	44e0      	add	r8, ip
 8001ba0:	428c      	cmp	r4, r1
 8001ba2:	d804      	bhi.n	8001bae <__aeabi_ddiv+0x2c2>
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d902      	bls.n	8001bae <__aeabi_ddiv+0x2c2>
 8001ba8:	1e83      	subs	r3, r0, #2
 8001baa:	4698      	mov	r8, r3
 8001bac:	1909      	adds	r1, r1, r4
 8001bae:	1a88      	subs	r0, r1, r2
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	f7fe fb37 	bl	8000224 <__aeabi_uidivmod>
 8001bb6:	0409      	lsls	r1, r1, #16
 8001bb8:	468c      	mov	ip, r1
 8001bba:	0431      	lsls	r1, r6, #16
 8001bbc:	4666      	mov	r6, ip
 8001bbe:	9a01      	ldr	r2, [sp, #4]
 8001bc0:	0c09      	lsrs	r1, r1, #16
 8001bc2:	4342      	muls	r2, r0
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	4331      	orrs	r1, r6
 8001bc8:	428a      	cmp	r2, r1
 8001bca:	d904      	bls.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001bcc:	1909      	adds	r1, r1, r4
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	428c      	cmp	r4, r1
 8001bd2:	d800      	bhi.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001bd4:	e111      	b.n	8001dfa <__aeabi_ddiv+0x50e>
 8001bd6:	1a89      	subs	r1, r1, r2
 8001bd8:	4642      	mov	r2, r8
 8001bda:	9e00      	ldr	r6, [sp, #0]
 8001bdc:	0412      	lsls	r2, r2, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	0c33      	lsrs	r3, r6, #16
 8001be2:	001f      	movs	r7, r3
 8001be4:	0c10      	lsrs	r0, r2, #16
 8001be6:	4690      	mov	r8, r2
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	0413      	lsls	r3, r2, #16
 8001bec:	0432      	lsls	r2, r6, #16
 8001bee:	0c16      	lsrs	r6, r2, #16
 8001bf0:	0032      	movs	r2, r6
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	435a      	muls	r2, r3
 8001bf6:	9603      	str	r6, [sp, #12]
 8001bf8:	437b      	muls	r3, r7
 8001bfa:	4346      	muls	r6, r0
 8001bfc:	4378      	muls	r0, r7
 8001bfe:	0c17      	lsrs	r7, r2, #16
 8001c00:	46bc      	mov	ip, r7
 8001c02:	199b      	adds	r3, r3, r6
 8001c04:	4463      	add	r3, ip
 8001c06:	429e      	cmp	r6, r3
 8001c08:	d903      	bls.n	8001c12 <__aeabi_ddiv+0x326>
 8001c0a:	2680      	movs	r6, #128	; 0x80
 8001c0c:	0276      	lsls	r6, r6, #9
 8001c0e:	46b4      	mov	ip, r6
 8001c10:	4460      	add	r0, ip
 8001c12:	0c1e      	lsrs	r6, r3, #16
 8001c14:	1830      	adds	r0, r6, r0
 8001c16:	0416      	lsls	r6, r2, #16
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	0c36      	lsrs	r6, r6, #16
 8001c1c:	199e      	adds	r6, r3, r6
 8001c1e:	4281      	cmp	r1, r0
 8001c20:	d200      	bcs.n	8001c24 <__aeabi_ddiv+0x338>
 8001c22:	e09c      	b.n	8001d5e <__aeabi_ddiv+0x472>
 8001c24:	d100      	bne.n	8001c28 <__aeabi_ddiv+0x33c>
 8001c26:	e097      	b.n	8001d58 <__aeabi_ddiv+0x46c>
 8001c28:	1bae      	subs	r6, r5, r6
 8001c2a:	1a09      	subs	r1, r1, r0
 8001c2c:	42b5      	cmp	r5, r6
 8001c2e:	4180      	sbcs	r0, r0
 8001c30:	4240      	negs	r0, r0
 8001c32:	1a08      	subs	r0, r1, r0
 8001c34:	4284      	cmp	r4, r0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0x34e>
 8001c38:	e111      	b.n	8001e5e <__aeabi_ddiv+0x572>
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	f7fe faf2 	bl	8000224 <__aeabi_uidivmod>
 8001c40:	9a01      	ldr	r2, [sp, #4]
 8001c42:	040b      	lsls	r3, r1, #16
 8001c44:	4342      	muls	r2, r0
 8001c46:	0c31      	lsrs	r1, r6, #16
 8001c48:	0005      	movs	r5, r0
 8001c4a:	4319      	orrs	r1, r3
 8001c4c:	428a      	cmp	r2, r1
 8001c4e:	d907      	bls.n	8001c60 <__aeabi_ddiv+0x374>
 8001c50:	1909      	adds	r1, r1, r4
 8001c52:	3d01      	subs	r5, #1
 8001c54:	428c      	cmp	r4, r1
 8001c56:	d803      	bhi.n	8001c60 <__aeabi_ddiv+0x374>
 8001c58:	428a      	cmp	r2, r1
 8001c5a:	d901      	bls.n	8001c60 <__aeabi_ddiv+0x374>
 8001c5c:	1e85      	subs	r5, r0, #2
 8001c5e:	1909      	adds	r1, r1, r4
 8001c60:	1a88      	subs	r0, r1, r2
 8001c62:	4649      	mov	r1, r9
 8001c64:	f7fe fade 	bl	8000224 <__aeabi_uidivmod>
 8001c68:	0409      	lsls	r1, r1, #16
 8001c6a:	468c      	mov	ip, r1
 8001c6c:	0431      	lsls	r1, r6, #16
 8001c6e:	4666      	mov	r6, ip
 8001c70:	9a01      	ldr	r2, [sp, #4]
 8001c72:	0c09      	lsrs	r1, r1, #16
 8001c74:	4342      	muls	r2, r0
 8001c76:	0003      	movs	r3, r0
 8001c78:	4331      	orrs	r1, r6
 8001c7a:	428a      	cmp	r2, r1
 8001c7c:	d907      	bls.n	8001c8e <__aeabi_ddiv+0x3a2>
 8001c7e:	1909      	adds	r1, r1, r4
 8001c80:	3b01      	subs	r3, #1
 8001c82:	428c      	cmp	r4, r1
 8001c84:	d803      	bhi.n	8001c8e <__aeabi_ddiv+0x3a2>
 8001c86:	428a      	cmp	r2, r1
 8001c88:	d901      	bls.n	8001c8e <__aeabi_ddiv+0x3a2>
 8001c8a:	1e83      	subs	r3, r0, #2
 8001c8c:	1909      	adds	r1, r1, r4
 8001c8e:	9e03      	ldr	r6, [sp, #12]
 8001c90:	1a89      	subs	r1, r1, r2
 8001c92:	0032      	movs	r2, r6
 8001c94:	042d      	lsls	r5, r5, #16
 8001c96:	431d      	orrs	r5, r3
 8001c98:	9f02      	ldr	r7, [sp, #8]
 8001c9a:	042b      	lsls	r3, r5, #16
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	435a      	muls	r2, r3
 8001ca0:	437b      	muls	r3, r7
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	0c28      	lsrs	r0, r5, #16
 8001ca6:	4346      	muls	r6, r0
 8001ca8:	0c13      	lsrs	r3, r2, #16
 8001caa:	44b4      	add	ip, r6
 8001cac:	4463      	add	r3, ip
 8001cae:	4378      	muls	r0, r7
 8001cb0:	429e      	cmp	r6, r3
 8001cb2:	d903      	bls.n	8001cbc <__aeabi_ddiv+0x3d0>
 8001cb4:	2680      	movs	r6, #128	; 0x80
 8001cb6:	0276      	lsls	r6, r6, #9
 8001cb8:	46b4      	mov	ip, r6
 8001cba:	4460      	add	r0, ip
 8001cbc:	0c1e      	lsrs	r6, r3, #16
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	0c12      	lsrs	r2, r2, #16
 8001cc4:	1830      	adds	r0, r6, r0
 8001cc6:	189b      	adds	r3, r3, r2
 8001cc8:	4281      	cmp	r1, r0
 8001cca:	d306      	bcc.n	8001cda <__aeabi_ddiv+0x3ee>
 8001ccc:	d002      	beq.n	8001cd4 <__aeabi_ddiv+0x3e8>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	431d      	orrs	r5, r3
 8001cd2:	e6ce      	b.n	8001a72 <__aeabi_ddiv+0x186>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_ddiv+0x3ee>
 8001cd8:	e6cb      	b.n	8001a72 <__aeabi_ddiv+0x186>
 8001cda:	1861      	adds	r1, r4, r1
 8001cdc:	1e6e      	subs	r6, r5, #1
 8001cde:	42a1      	cmp	r1, r4
 8001ce0:	d200      	bcs.n	8001ce4 <__aeabi_ddiv+0x3f8>
 8001ce2:	e0a4      	b.n	8001e2e <__aeabi_ddiv+0x542>
 8001ce4:	4281      	cmp	r1, r0
 8001ce6:	d200      	bcs.n	8001cea <__aeabi_ddiv+0x3fe>
 8001ce8:	e0c9      	b.n	8001e7e <__aeabi_ddiv+0x592>
 8001cea:	d100      	bne.n	8001cee <__aeabi_ddiv+0x402>
 8001cec:	e0d9      	b.n	8001ea2 <__aeabi_ddiv+0x5b6>
 8001cee:	0035      	movs	r5, r6
 8001cf0:	e7ed      	b.n	8001cce <__aeabi_ddiv+0x3e2>
 8001cf2:	2501      	movs	r5, #1
 8001cf4:	426d      	negs	r5, r5
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	1a89      	subs	r1, r1, r2
 8001cfa:	2938      	cmp	r1, #56	; 0x38
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_ddiv+0x414>
 8001cfe:	e64c      	b.n	800199a <__aeabi_ddiv+0xae>
 8001d00:	291f      	cmp	r1, #31
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_ddiv+0x41a>
 8001d04:	e07f      	b.n	8001e06 <__aeabi_ddiv+0x51a>
 8001d06:	231f      	movs	r3, #31
 8001d08:	425b      	negs	r3, r3
 8001d0a:	1a9a      	subs	r2, r3, r2
 8001d0c:	4643      	mov	r3, r8
 8001d0e:	40d3      	lsrs	r3, r2
 8001d10:	2920      	cmp	r1, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_ddiv+0x432>
 8001d14:	4644      	mov	r4, r8
 8001d16:	4a65      	ldr	r2, [pc, #404]	; (8001eac <__aeabi_ddiv+0x5c0>)
 8001d18:	445a      	add	r2, fp
 8001d1a:	4094      	lsls	r4, r2
 8001d1c:	4325      	orrs	r5, r4
 8001d1e:	1e6a      	subs	r2, r5, #1
 8001d20:	4195      	sbcs	r5, r2
 8001d22:	2207      	movs	r2, #7
 8001d24:	432b      	orrs	r3, r5
 8001d26:	0015      	movs	r5, r2
 8001d28:	2400      	movs	r4, #0
 8001d2a:	401d      	ands	r5, r3
 8001d2c:	421a      	tst	r2, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_ddiv+0x446>
 8001d30:	e0a1      	b.n	8001e76 <__aeabi_ddiv+0x58a>
 8001d32:	220f      	movs	r2, #15
 8001d34:	2400      	movs	r4, #0
 8001d36:	401a      	ands	r2, r3
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_ddiv+0x452>
 8001d3c:	e098      	b.n	8001e70 <__aeabi_ddiv+0x584>
 8001d3e:	1d1a      	adds	r2, r3, #4
 8001d40:	429a      	cmp	r2, r3
 8001d42:	419b      	sbcs	r3, r3
 8001d44:	425b      	negs	r3, r3
 8001d46:	18e4      	adds	r4, r4, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	0222      	lsls	r2, r4, #8
 8001d4c:	d400      	bmi.n	8001d50 <__aeabi_ddiv+0x464>
 8001d4e:	e08f      	b.n	8001e70 <__aeabi_ddiv+0x584>
 8001d50:	2301      	movs	r3, #1
 8001d52:	2400      	movs	r4, #0
 8001d54:	2500      	movs	r5, #0
 8001d56:	e623      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001d58:	42b5      	cmp	r5, r6
 8001d5a:	d300      	bcc.n	8001d5e <__aeabi_ddiv+0x472>
 8001d5c:	e764      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001d5e:	4643      	mov	r3, r8
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	9b00      	ldr	r3, [sp, #0]
 8001d64:	469c      	mov	ip, r3
 8001d66:	4465      	add	r5, ip
 8001d68:	001f      	movs	r7, r3
 8001d6a:	429d      	cmp	r5, r3
 8001d6c:	419b      	sbcs	r3, r3
 8001d6e:	425b      	negs	r3, r3
 8001d70:	191b      	adds	r3, r3, r4
 8001d72:	18c9      	adds	r1, r1, r3
 8001d74:	428c      	cmp	r4, r1
 8001d76:	d23a      	bcs.n	8001dee <__aeabi_ddiv+0x502>
 8001d78:	4288      	cmp	r0, r1
 8001d7a:	d863      	bhi.n	8001e44 <__aeabi_ddiv+0x558>
 8001d7c:	d060      	beq.n	8001e40 <__aeabi_ddiv+0x554>
 8001d7e:	4690      	mov	r8, r2
 8001d80:	e752      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001d82:	42aa      	cmp	r2, r5
 8001d84:	d900      	bls.n	8001d88 <__aeabi_ddiv+0x49c>
 8001d86:	e6ea      	b.n	8001b5e <__aeabi_ddiv+0x272>
 8001d88:	4643      	mov	r3, r8
 8001d8a:	07de      	lsls	r6, r3, #31
 8001d8c:	0858      	lsrs	r0, r3, #1
 8001d8e:	086b      	lsrs	r3, r5, #1
 8001d90:	431e      	orrs	r6, r3
 8001d92:	07ed      	lsls	r5, r5, #31
 8001d94:	e6ea      	b.n	8001b6c <__aeabi_ddiv+0x280>
 8001d96:	4648      	mov	r0, r9
 8001d98:	f001 f960 	bl	800305c <__clzsi2>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	0002      	movs	r2, r0
 8001da0:	3115      	adds	r1, #21
 8001da2:	3220      	adds	r2, #32
 8001da4:	291c      	cmp	r1, #28
 8001da6:	dc00      	bgt.n	8001daa <__aeabi_ddiv+0x4be>
 8001da8:	e61a      	b.n	80019e0 <__aeabi_ddiv+0xf4>
 8001daa:	464b      	mov	r3, r9
 8001dac:	3808      	subs	r0, #8
 8001dae:	4083      	lsls	r3, r0
 8001db0:	2500      	movs	r5, #0
 8001db2:	4698      	mov	r8, r3
 8001db4:	e620      	b.n	80019f8 <__aeabi_ddiv+0x10c>
 8001db6:	f001 f951 	bl	800305c <__clzsi2>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	3215      	adds	r2, #21
 8001dc0:	3020      	adds	r0, #32
 8001dc2:	2a1c      	cmp	r2, #28
 8001dc4:	dc00      	bgt.n	8001dc8 <__aeabi_ddiv+0x4dc>
 8001dc6:	e630      	b.n	8001a2a <__aeabi_ddiv+0x13e>
 8001dc8:	4654      	mov	r4, sl
 8001dca:	3b08      	subs	r3, #8
 8001dcc:	2200      	movs	r2, #0
 8001dce:	409c      	lsls	r4, r3
 8001dd0:	e635      	b.n	8001a3e <__aeabi_ddiv+0x152>
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	402b      	ands	r3, r5
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x4f0>
 8001dda:	e652      	b.n	8001a82 <__aeabi_ddiv+0x196>
 8001ddc:	2305      	movs	r3, #5
 8001dde:	425b      	negs	r3, r3
 8001de0:	42ab      	cmp	r3, r5
 8001de2:	419b      	sbcs	r3, r3
 8001de4:	3504      	adds	r5, #4
 8001de6:	425b      	negs	r3, r3
 8001de8:	08ed      	lsrs	r5, r5, #3
 8001dea:	4498      	add	r8, r3
 8001dec:	e64a      	b.n	8001a84 <__aeabi_ddiv+0x198>
 8001dee:	428c      	cmp	r4, r1
 8001df0:	d1c5      	bne.n	8001d7e <__aeabi_ddiv+0x492>
 8001df2:	42af      	cmp	r7, r5
 8001df4:	d9c0      	bls.n	8001d78 <__aeabi_ddiv+0x48c>
 8001df6:	4690      	mov	r8, r2
 8001df8:	e716      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	d800      	bhi.n	8001e00 <__aeabi_ddiv+0x514>
 8001dfe:	e6ea      	b.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001e00:	1e83      	subs	r3, r0, #2
 8001e02:	1909      	adds	r1, r1, r4
 8001e04:	e6e7      	b.n	8001bd6 <__aeabi_ddiv+0x2ea>
 8001e06:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <__aeabi_ddiv+0x5c4>)
 8001e08:	0028      	movs	r0, r5
 8001e0a:	445a      	add	r2, fp
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	4095      	lsls	r5, r2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	40c8      	lsrs	r0, r1
 8001e14:	1e6a      	subs	r2, r5, #1
 8001e16:	4195      	sbcs	r5, r2
 8001e18:	4644      	mov	r4, r8
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	432b      	orrs	r3, r5
 8001e1e:	40cc      	lsrs	r4, r1
 8001e20:	075a      	lsls	r2, r3, #29
 8001e22:	d092      	beq.n	8001d4a <__aeabi_ddiv+0x45e>
 8001e24:	220f      	movs	r2, #15
 8001e26:	401a      	ands	r2, r3
 8001e28:	2a04      	cmp	r2, #4
 8001e2a:	d188      	bne.n	8001d3e <__aeabi_ddiv+0x452>
 8001e2c:	e78d      	b.n	8001d4a <__aeabi_ddiv+0x45e>
 8001e2e:	0035      	movs	r5, r6
 8001e30:	4281      	cmp	r1, r0
 8001e32:	d000      	beq.n	8001e36 <__aeabi_ddiv+0x54a>
 8001e34:	e74b      	b.n	8001cce <__aeabi_ddiv+0x3e2>
 8001e36:	9a00      	ldr	r2, [sp, #0]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_ddiv+0x552>
 8001e3c:	e747      	b.n	8001cce <__aeabi_ddiv+0x3e2>
 8001e3e:	e618      	b.n	8001a72 <__aeabi_ddiv+0x186>
 8001e40:	42ae      	cmp	r6, r5
 8001e42:	d99c      	bls.n	8001d7e <__aeabi_ddiv+0x492>
 8001e44:	2302      	movs	r3, #2
 8001e46:	425b      	negs	r3, r3
 8001e48:	469c      	mov	ip, r3
 8001e4a:	9b00      	ldr	r3, [sp, #0]
 8001e4c:	44e0      	add	r8, ip
 8001e4e:	469c      	mov	ip, r3
 8001e50:	4465      	add	r5, ip
 8001e52:	429d      	cmp	r5, r3
 8001e54:	419b      	sbcs	r3, r3
 8001e56:	425b      	negs	r3, r3
 8001e58:	191b      	adds	r3, r3, r4
 8001e5a:	18c9      	adds	r1, r1, r3
 8001e5c:	e6e4      	b.n	8001c28 <__aeabi_ddiv+0x33c>
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <__aeabi_ddiv+0x5c8>)
 8001e60:	445a      	add	r2, fp
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	dc00      	bgt.n	8001e68 <__aeabi_ddiv+0x57c>
 8001e66:	e744      	b.n	8001cf2 <__aeabi_ddiv+0x406>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	4498      	add	r8, r3
 8001e6e:	e609      	b.n	8001a84 <__aeabi_ddiv+0x198>
 8001e70:	0765      	lsls	r5, r4, #29
 8001e72:	0264      	lsls	r4, r4, #9
 8001e74:	0b24      	lsrs	r4, r4, #12
 8001e76:	08db      	lsrs	r3, r3, #3
 8001e78:	431d      	orrs	r5, r3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e590      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001e7e:	9e00      	ldr	r6, [sp, #0]
 8001e80:	3d02      	subs	r5, #2
 8001e82:	0072      	lsls	r2, r6, #1
 8001e84:	42b2      	cmp	r2, r6
 8001e86:	41bf      	sbcs	r7, r7
 8001e88:	427f      	negs	r7, r7
 8001e8a:	193c      	adds	r4, r7, r4
 8001e8c:	1909      	adds	r1, r1, r4
 8001e8e:	9200      	str	r2, [sp, #0]
 8001e90:	e7ce      	b.n	8001e30 <__aeabi_ddiv+0x544>
 8001e92:	2480      	movs	r4, #128	; 0x80
 8001e94:	4643      	mov	r3, r8
 8001e96:	0324      	lsls	r4, r4, #12
 8001e98:	431c      	orrs	r4, r3
 8001e9a:	0324      	lsls	r4, r4, #12
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <__aeabi_ddiv+0x5cc>)
 8001e9e:	0b24      	lsrs	r4, r4, #12
 8001ea0:	e57e      	b.n	80019a0 <__aeabi_ddiv+0xb4>
 8001ea2:	9a00      	ldr	r2, [sp, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3ea      	bcc.n	8001e7e <__aeabi_ddiv+0x592>
 8001ea8:	0035      	movs	r5, r6
 8001eaa:	e7c4      	b.n	8001e36 <__aeabi_ddiv+0x54a>
 8001eac:	0000043e 	.word	0x0000043e
 8001eb0:	0000041e 	.word	0x0000041e
 8001eb4:	000003ff 	.word	0x000003ff
 8001eb8:	000007ff 	.word	0x000007ff

08001ebc <__eqdf2>:
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	464f      	mov	r7, r9
 8001ec0:	4646      	mov	r6, r8
 8001ec2:	46d6      	mov	lr, sl
 8001ec4:	4694      	mov	ip, r2
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	031a      	lsls	r2, r3, #12
 8001eca:	0b12      	lsrs	r2, r2, #12
 8001ecc:	4d18      	ldr	r5, [pc, #96]	; (8001f30 <__eqdf2+0x74>)
 8001ece:	b5c0      	push	{r6, r7, lr}
 8001ed0:	004c      	lsls	r4, r1, #1
 8001ed2:	030f      	lsls	r7, r1, #12
 8001ed4:	4692      	mov	sl, r2
 8001ed6:	005a      	lsls	r2, r3, #1
 8001ed8:	0006      	movs	r6, r0
 8001eda:	4680      	mov	r8, r0
 8001edc:	0b3f      	lsrs	r7, r7, #12
 8001ede:	2001      	movs	r0, #1
 8001ee0:	0d64      	lsrs	r4, r4, #21
 8001ee2:	0fc9      	lsrs	r1, r1, #31
 8001ee4:	0d52      	lsrs	r2, r2, #21
 8001ee6:	0fdb      	lsrs	r3, r3, #31
 8001ee8:	42ac      	cmp	r4, r5
 8001eea:	d00a      	beq.n	8001f02 <__eqdf2+0x46>
 8001eec:	42aa      	cmp	r2, r5
 8001eee:	d003      	beq.n	8001ef8 <__eqdf2+0x3c>
 8001ef0:	4294      	cmp	r4, r2
 8001ef2:	d101      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001ef4:	4557      	cmp	r7, sl
 8001ef6:	d00d      	beq.n	8001f14 <__eqdf2+0x58>
 8001ef8:	bce0      	pop	{r5, r6, r7}
 8001efa:	46ba      	mov	sl, r7
 8001efc:	46b1      	mov	r9, r6
 8001efe:	46a8      	mov	r8, r5
 8001f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f02:	003d      	movs	r5, r7
 8001f04:	4335      	orrs	r5, r6
 8001f06:	d1f7      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f08:	42a2      	cmp	r2, r4
 8001f0a:	d1f5      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f0c:	4652      	mov	r2, sl
 8001f0e:	4665      	mov	r5, ip
 8001f10:	432a      	orrs	r2, r5
 8001f12:	d1f1      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f14:	2001      	movs	r0, #1
 8001f16:	45c8      	cmp	r8, r9
 8001f18:	d1ee      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f1a:	4299      	cmp	r1, r3
 8001f1c:	d006      	beq.n	8001f2c <__eqdf2+0x70>
 8001f1e:	2c00      	cmp	r4, #0
 8001f20:	d1ea      	bne.n	8001ef8 <__eqdf2+0x3c>
 8001f22:	433e      	orrs	r6, r7
 8001f24:	0030      	movs	r0, r6
 8001f26:	1e46      	subs	r6, r0, #1
 8001f28:	41b0      	sbcs	r0, r6
 8001f2a:	e7e5      	b.n	8001ef8 <__eqdf2+0x3c>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7e3      	b.n	8001ef8 <__eqdf2+0x3c>
 8001f30:	000007ff 	.word	0x000007ff

08001f34 <__gedf2>:
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	464e      	mov	r6, r9
 8001f38:	4645      	mov	r5, r8
 8001f3a:	4657      	mov	r7, sl
 8001f3c:	46de      	mov	lr, fp
 8001f3e:	0004      	movs	r4, r0
 8001f40:	0018      	movs	r0, r3
 8001f42:	b5e0      	push	{r5, r6, r7, lr}
 8001f44:	0016      	movs	r6, r2
 8001f46:	031b      	lsls	r3, r3, #12
 8001f48:	0b1b      	lsrs	r3, r3, #12
 8001f4a:	4d32      	ldr	r5, [pc, #200]	; (8002014 <__gedf2+0xe0>)
 8001f4c:	030f      	lsls	r7, r1, #12
 8001f4e:	004a      	lsls	r2, r1, #1
 8001f50:	4699      	mov	r9, r3
 8001f52:	0043      	lsls	r3, r0, #1
 8001f54:	46a4      	mov	ip, r4
 8001f56:	46b0      	mov	r8, r6
 8001f58:	0b3f      	lsrs	r7, r7, #12
 8001f5a:	0d52      	lsrs	r2, r2, #21
 8001f5c:	0fc9      	lsrs	r1, r1, #31
 8001f5e:	0d5b      	lsrs	r3, r3, #21
 8001f60:	0fc0      	lsrs	r0, r0, #31
 8001f62:	42aa      	cmp	r2, r5
 8001f64:	d029      	beq.n	8001fba <__gedf2+0x86>
 8001f66:	42ab      	cmp	r3, r5
 8001f68:	d018      	beq.n	8001f9c <__gedf2+0x68>
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d12a      	bne.n	8001fc4 <__gedf2+0x90>
 8001f6e:	433c      	orrs	r4, r7
 8001f70:	46a3      	mov	fp, r4
 8001f72:	4265      	negs	r5, r4
 8001f74:	4165      	adcs	r5, r4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <__gedf2+0x4c>
 8001f7a:	464c      	mov	r4, r9
 8001f7c:	4326      	orrs	r6, r4
 8001f7e:	d027      	beq.n	8001fd0 <__gedf2+0x9c>
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	d115      	bne.n	8001fb0 <__gedf2+0x7c>
 8001f84:	4281      	cmp	r1, r0
 8001f86:	d028      	beq.n	8001fda <__gedf2+0xa6>
 8001f88:	2002      	movs	r0, #2
 8001f8a:	3901      	subs	r1, #1
 8001f8c:	4008      	ands	r0, r1
 8001f8e:	3801      	subs	r0, #1
 8001f90:	bcf0      	pop	{r4, r5, r6, r7}
 8001f92:	46bb      	mov	fp, r7
 8001f94:	46b2      	mov	sl, r6
 8001f96:	46a9      	mov	r9, r5
 8001f98:	46a0      	mov	r8, r4
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9c:	464d      	mov	r5, r9
 8001f9e:	432e      	orrs	r6, r5
 8001fa0:	d12f      	bne.n	8002002 <__gedf2+0xce>
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	d1ee      	bne.n	8001f84 <__gedf2+0x50>
 8001fa6:	433c      	orrs	r4, r7
 8001fa8:	4265      	negs	r5, r4
 8001faa:	4165      	adcs	r5, r4
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	d0e9      	beq.n	8001f84 <__gedf2+0x50>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d1ed      	bne.n	8001f90 <__gedf2+0x5c>
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	e7ea      	b.n	8001f90 <__gedf2+0x5c>
 8001fba:	003d      	movs	r5, r7
 8001fbc:	4325      	orrs	r5, r4
 8001fbe:	d120      	bne.n	8002002 <__gedf2+0xce>
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d0eb      	beq.n	8001f9c <__gedf2+0x68>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1dd      	bne.n	8001f84 <__gedf2+0x50>
 8001fc8:	464c      	mov	r4, r9
 8001fca:	4326      	orrs	r6, r4
 8001fcc:	d1da      	bne.n	8001f84 <__gedf2+0x50>
 8001fce:	e7db      	b.n	8001f88 <__gedf2+0x54>
 8001fd0:	465b      	mov	r3, fp
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0db      	beq.n	8001f90 <__gedf2+0x5c>
 8001fd8:	e7d6      	b.n	8001f88 <__gedf2+0x54>
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dc0a      	bgt.n	8001ff4 <__gedf2+0xc0>
 8001fde:	dbe7      	blt.n	8001fb0 <__gedf2+0x7c>
 8001fe0:	454f      	cmp	r7, r9
 8001fe2:	d8d1      	bhi.n	8001f88 <__gedf2+0x54>
 8001fe4:	d010      	beq.n	8002008 <__gedf2+0xd4>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	454f      	cmp	r7, r9
 8001fea:	d2d1      	bcs.n	8001f90 <__gedf2+0x5c>
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d0e1      	beq.n	8001fb4 <__gedf2+0x80>
 8001ff0:	0008      	movs	r0, r1
 8001ff2:	e7cd      	b.n	8001f90 <__gedf2+0x5c>
 8001ff4:	4243      	negs	r3, r0
 8001ff6:	4158      	adcs	r0, r3
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	4240      	negs	r0, r0
 8001ffc:	4018      	ands	r0, r3
 8001ffe:	3801      	subs	r0, #1
 8002000:	e7c6      	b.n	8001f90 <__gedf2+0x5c>
 8002002:	2002      	movs	r0, #2
 8002004:	4240      	negs	r0, r0
 8002006:	e7c3      	b.n	8001f90 <__gedf2+0x5c>
 8002008:	45c4      	cmp	ip, r8
 800200a:	d8bd      	bhi.n	8001f88 <__gedf2+0x54>
 800200c:	2000      	movs	r0, #0
 800200e:	45c4      	cmp	ip, r8
 8002010:	d2be      	bcs.n	8001f90 <__gedf2+0x5c>
 8002012:	e7eb      	b.n	8001fec <__gedf2+0xb8>
 8002014:	000007ff 	.word	0x000007ff

08002018 <__ledf2>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	464e      	mov	r6, r9
 800201c:	4645      	mov	r5, r8
 800201e:	4657      	mov	r7, sl
 8002020:	46de      	mov	lr, fp
 8002022:	0004      	movs	r4, r0
 8002024:	0018      	movs	r0, r3
 8002026:	b5e0      	push	{r5, r6, r7, lr}
 8002028:	0016      	movs	r6, r2
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	0b1b      	lsrs	r3, r3, #12
 800202e:	4d31      	ldr	r5, [pc, #196]	; (80020f4 <__ledf2+0xdc>)
 8002030:	030f      	lsls	r7, r1, #12
 8002032:	004a      	lsls	r2, r1, #1
 8002034:	4699      	mov	r9, r3
 8002036:	0043      	lsls	r3, r0, #1
 8002038:	46a4      	mov	ip, r4
 800203a:	46b0      	mov	r8, r6
 800203c:	0b3f      	lsrs	r7, r7, #12
 800203e:	0d52      	lsrs	r2, r2, #21
 8002040:	0fc9      	lsrs	r1, r1, #31
 8002042:	0d5b      	lsrs	r3, r3, #21
 8002044:	0fc0      	lsrs	r0, r0, #31
 8002046:	42aa      	cmp	r2, r5
 8002048:	d011      	beq.n	800206e <__ledf2+0x56>
 800204a:	42ab      	cmp	r3, r5
 800204c:	d014      	beq.n	8002078 <__ledf2+0x60>
 800204e:	2a00      	cmp	r2, #0
 8002050:	d12f      	bne.n	80020b2 <__ledf2+0x9a>
 8002052:	433c      	orrs	r4, r7
 8002054:	46a3      	mov	fp, r4
 8002056:	4265      	negs	r5, r4
 8002058:	4165      	adcs	r5, r4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d114      	bne.n	8002088 <__ledf2+0x70>
 800205e:	464c      	mov	r4, r9
 8002060:	4326      	orrs	r6, r4
 8002062:	d111      	bne.n	8002088 <__ledf2+0x70>
 8002064:	465b      	mov	r3, fp
 8002066:	2000      	movs	r0, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <__ledf2+0x84>
 800206c:	e010      	b.n	8002090 <__ledf2+0x78>
 800206e:	003d      	movs	r5, r7
 8002070:	4325      	orrs	r5, r4
 8002072:	d112      	bne.n	800209a <__ledf2+0x82>
 8002074:	4293      	cmp	r3, r2
 8002076:	d11c      	bne.n	80020b2 <__ledf2+0x9a>
 8002078:	464d      	mov	r5, r9
 800207a:	432e      	orrs	r6, r5
 800207c:	d10d      	bne.n	800209a <__ledf2+0x82>
 800207e:	2a00      	cmp	r2, #0
 8002080:	d104      	bne.n	800208c <__ledf2+0x74>
 8002082:	433c      	orrs	r4, r7
 8002084:	4265      	negs	r5, r4
 8002086:	4165      	adcs	r5, r4
 8002088:	2d00      	cmp	r5, #0
 800208a:	d10d      	bne.n	80020a8 <__ledf2+0x90>
 800208c:	4281      	cmp	r1, r0
 800208e:	d016      	beq.n	80020be <__ledf2+0xa6>
 8002090:	2002      	movs	r0, #2
 8002092:	3901      	subs	r1, #1
 8002094:	4008      	ands	r0, r1
 8002096:	3801      	subs	r0, #1
 8002098:	e000      	b.n	800209c <__ledf2+0x84>
 800209a:	2002      	movs	r0, #2
 800209c:	bcf0      	pop	{r4, r5, r6, r7}
 800209e:	46bb      	mov	fp, r7
 80020a0:	46b2      	mov	sl, r6
 80020a2:	46a9      	mov	r9, r5
 80020a4:	46a0      	mov	r8, r4
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1f7      	bne.n	800209c <__ledf2+0x84>
 80020ac:	2001      	movs	r0, #1
 80020ae:	4240      	negs	r0, r0
 80020b0:	e7f4      	b.n	800209c <__ledf2+0x84>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ea      	bne.n	800208c <__ledf2+0x74>
 80020b6:	464c      	mov	r4, r9
 80020b8:	4326      	orrs	r6, r4
 80020ba:	d1e7      	bne.n	800208c <__ledf2+0x74>
 80020bc:	e7e8      	b.n	8002090 <__ledf2+0x78>
 80020be:	429a      	cmp	r2, r3
 80020c0:	dd06      	ble.n	80020d0 <__ledf2+0xb8>
 80020c2:	4243      	negs	r3, r0
 80020c4:	4158      	adcs	r0, r3
 80020c6:	2302      	movs	r3, #2
 80020c8:	4240      	negs	r0, r0
 80020ca:	4018      	ands	r0, r3
 80020cc:	3801      	subs	r0, #1
 80020ce:	e7e5      	b.n	800209c <__ledf2+0x84>
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbe9      	blt.n	80020a8 <__ledf2+0x90>
 80020d4:	454f      	cmp	r7, r9
 80020d6:	d8db      	bhi.n	8002090 <__ledf2+0x78>
 80020d8:	d006      	beq.n	80020e8 <__ledf2+0xd0>
 80020da:	2000      	movs	r0, #0
 80020dc:	454f      	cmp	r7, r9
 80020de:	d2dd      	bcs.n	800209c <__ledf2+0x84>
 80020e0:	2900      	cmp	r1, #0
 80020e2:	d0e3      	beq.n	80020ac <__ledf2+0x94>
 80020e4:	0008      	movs	r0, r1
 80020e6:	e7d9      	b.n	800209c <__ledf2+0x84>
 80020e8:	45c4      	cmp	ip, r8
 80020ea:	d8d1      	bhi.n	8002090 <__ledf2+0x78>
 80020ec:	2000      	movs	r0, #0
 80020ee:	45c4      	cmp	ip, r8
 80020f0:	d2d4      	bcs.n	800209c <__ledf2+0x84>
 80020f2:	e7f5      	b.n	80020e0 <__ledf2+0xc8>
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__aeabi_dmul>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	4657      	mov	r7, sl
 80020fc:	464e      	mov	r6, r9
 80020fe:	4645      	mov	r5, r8
 8002100:	46de      	mov	lr, fp
 8002102:	b5e0      	push	{r5, r6, r7, lr}
 8002104:	4698      	mov	r8, r3
 8002106:	030c      	lsls	r4, r1, #12
 8002108:	004b      	lsls	r3, r1, #1
 800210a:	0006      	movs	r6, r0
 800210c:	4692      	mov	sl, r2
 800210e:	b087      	sub	sp, #28
 8002110:	0b24      	lsrs	r4, r4, #12
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	0fcf      	lsrs	r7, r1, #31
 8002116:	2b00      	cmp	r3, #0
 8002118:	d06c      	beq.n	80021f4 <__aeabi_dmul+0xfc>
 800211a:	4add      	ldr	r2, [pc, #884]	; (8002490 <__aeabi_dmul+0x398>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <__aeabi_dmul+0x2a>
 8002120:	e086      	b.n	8002230 <__aeabi_dmul+0x138>
 8002122:	0f42      	lsrs	r2, r0, #29
 8002124:	00e4      	lsls	r4, r4, #3
 8002126:	4314      	orrs	r4, r2
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	0412      	lsls	r2, r2, #16
 800212c:	4314      	orrs	r4, r2
 800212e:	4ad9      	ldr	r2, [pc, #868]	; (8002494 <__aeabi_dmul+0x39c>)
 8002130:	00c5      	lsls	r5, r0, #3
 8002132:	4694      	mov	ip, r2
 8002134:	4463      	add	r3, ip
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	4699      	mov	r9, r3
 800213c:	469b      	mov	fp, r3
 800213e:	4643      	mov	r3, r8
 8002140:	4642      	mov	r2, r8
 8002142:	031e      	lsls	r6, r3, #12
 8002144:	0fd2      	lsrs	r2, r2, #31
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4650      	mov	r0, sl
 800214a:	4690      	mov	r8, r2
 800214c:	0b36      	lsrs	r6, r6, #12
 800214e:	0d5b      	lsrs	r3, r3, #21
 8002150:	d100      	bne.n	8002154 <__aeabi_dmul+0x5c>
 8002152:	e078      	b.n	8002246 <__aeabi_dmul+0x14e>
 8002154:	4ace      	ldr	r2, [pc, #824]	; (8002490 <__aeabi_dmul+0x398>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01d      	beq.n	8002196 <__aeabi_dmul+0x9e>
 800215a:	49ce      	ldr	r1, [pc, #824]	; (8002494 <__aeabi_dmul+0x39c>)
 800215c:	0f42      	lsrs	r2, r0, #29
 800215e:	468c      	mov	ip, r1
 8002160:	9900      	ldr	r1, [sp, #0]
 8002162:	4463      	add	r3, ip
 8002164:	00f6      	lsls	r6, r6, #3
 8002166:	468c      	mov	ip, r1
 8002168:	4316      	orrs	r6, r2
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	449c      	add	ip, r3
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	4663      	mov	r3, ip
 8002172:	4316      	orrs	r6, r2
 8002174:	00c2      	lsls	r2, r0, #3
 8002176:	2000      	movs	r0, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	9900      	ldr	r1, [sp, #0]
 800217c:	4643      	mov	r3, r8
 800217e:	3101      	adds	r1, #1
 8002180:	468c      	mov	ip, r1
 8002182:	4649      	mov	r1, r9
 8002184:	407b      	eors	r3, r7
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	290f      	cmp	r1, #15
 800218a:	d900      	bls.n	800218e <__aeabi_dmul+0x96>
 800218c:	e07e      	b.n	800228c <__aeabi_dmul+0x194>
 800218e:	4bc2      	ldr	r3, [pc, #776]	; (8002498 <__aeabi_dmul+0x3a0>)
 8002190:	0089      	lsls	r1, r1, #2
 8002192:	5859      	ldr	r1, [r3, r1]
 8002194:	468f      	mov	pc, r1
 8002196:	4652      	mov	r2, sl
 8002198:	9b00      	ldr	r3, [sp, #0]
 800219a:	4332      	orrs	r2, r6
 800219c:	d000      	beq.n	80021a0 <__aeabi_dmul+0xa8>
 800219e:	e156      	b.n	800244e <__aeabi_dmul+0x356>
 80021a0:	49bb      	ldr	r1, [pc, #748]	; (8002490 <__aeabi_dmul+0x398>)
 80021a2:	2600      	movs	r6, #0
 80021a4:	468c      	mov	ip, r1
 80021a6:	4463      	add	r3, ip
 80021a8:	4649      	mov	r1, r9
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	4319      	orrs	r1, r3
 80021b0:	4689      	mov	r9, r1
 80021b2:	2002      	movs	r0, #2
 80021b4:	e7e1      	b.n	800217a <__aeabi_dmul+0x82>
 80021b6:	4643      	mov	r3, r8
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	0034      	movs	r4, r6
 80021bc:	0015      	movs	r5, r2
 80021be:	4683      	mov	fp, r0
 80021c0:	465b      	mov	r3, fp
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d05e      	beq.n	8002284 <__aeabi_dmul+0x18c>
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d100      	bne.n	80021cc <__aeabi_dmul+0xd4>
 80021ca:	e1f3      	b.n	80025b4 <__aeabi_dmul+0x4bc>
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d000      	beq.n	80021d2 <__aeabi_dmul+0xda>
 80021d0:	e118      	b.n	8002404 <__aeabi_dmul+0x30c>
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	2500      	movs	r5, #0
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	0512      	lsls	r2, r2, #20
 80021dc:	4322      	orrs	r2, r4
 80021de:	07db      	lsls	r3, r3, #31
 80021e0:	431a      	orrs	r2, r3
 80021e2:	0028      	movs	r0, r5
 80021e4:	0011      	movs	r1, r2
 80021e6:	b007      	add	sp, #28
 80021e8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ea:	46bb      	mov	fp, r7
 80021ec:	46b2      	mov	sl, r6
 80021ee:	46a9      	mov	r9, r5
 80021f0:	46a0      	mov	r8, r4
 80021f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f4:	0025      	movs	r5, r4
 80021f6:	4305      	orrs	r5, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dmul+0x104>
 80021fa:	e141      	b.n	8002480 <__aeabi_dmul+0x388>
 80021fc:	2c00      	cmp	r4, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dmul+0x10a>
 8002200:	e1ad      	b.n	800255e <__aeabi_dmul+0x466>
 8002202:	0020      	movs	r0, r4
 8002204:	f000 ff2a 	bl	800305c <__clzsi2>
 8002208:	0001      	movs	r1, r0
 800220a:	0002      	movs	r2, r0
 800220c:	390b      	subs	r1, #11
 800220e:	231d      	movs	r3, #29
 8002210:	0010      	movs	r0, r2
 8002212:	1a5b      	subs	r3, r3, r1
 8002214:	0031      	movs	r1, r6
 8002216:	0035      	movs	r5, r6
 8002218:	3808      	subs	r0, #8
 800221a:	4084      	lsls	r4, r0
 800221c:	40d9      	lsrs	r1, r3
 800221e:	4085      	lsls	r5, r0
 8002220:	430c      	orrs	r4, r1
 8002222:	489e      	ldr	r0, [pc, #632]	; (800249c <__aeabi_dmul+0x3a4>)
 8002224:	1a83      	subs	r3, r0, r2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	4699      	mov	r9, r3
 800222c:	469b      	mov	fp, r3
 800222e:	e786      	b.n	800213e <__aeabi_dmul+0x46>
 8002230:	0005      	movs	r5, r0
 8002232:	4325      	orrs	r5, r4
 8002234:	d000      	beq.n	8002238 <__aeabi_dmul+0x140>
 8002236:	e11c      	b.n	8002472 <__aeabi_dmul+0x37a>
 8002238:	2208      	movs	r2, #8
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2302      	movs	r3, #2
 800223e:	2400      	movs	r4, #0
 8002240:	4691      	mov	r9, r2
 8002242:	469b      	mov	fp, r3
 8002244:	e77b      	b.n	800213e <__aeabi_dmul+0x46>
 8002246:	4652      	mov	r2, sl
 8002248:	4332      	orrs	r2, r6
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x156>
 800224c:	e10a      	b.n	8002464 <__aeabi_dmul+0x36c>
 800224e:	2e00      	cmp	r6, #0
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0x15c>
 8002252:	e176      	b.n	8002542 <__aeabi_dmul+0x44a>
 8002254:	0030      	movs	r0, r6
 8002256:	f000 ff01 	bl	800305c <__clzsi2>
 800225a:	0002      	movs	r2, r0
 800225c:	3a0b      	subs	r2, #11
 800225e:	231d      	movs	r3, #29
 8002260:	0001      	movs	r1, r0
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	4652      	mov	r2, sl
 8002266:	3908      	subs	r1, #8
 8002268:	40da      	lsrs	r2, r3
 800226a:	408e      	lsls	r6, r1
 800226c:	4316      	orrs	r6, r2
 800226e:	4652      	mov	r2, sl
 8002270:	408a      	lsls	r2, r1
 8002272:	9b00      	ldr	r3, [sp, #0]
 8002274:	4989      	ldr	r1, [pc, #548]	; (800249c <__aeabi_dmul+0x3a4>)
 8002276:	1a18      	subs	r0, r3, r0
 8002278:	0003      	movs	r3, r0
 800227a:	468c      	mov	ip, r1
 800227c:	4463      	add	r3, ip
 800227e:	2000      	movs	r0, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	e77a      	b.n	800217a <__aeabi_dmul+0x82>
 8002284:	2400      	movs	r4, #0
 8002286:	2500      	movs	r5, #0
 8002288:	4a81      	ldr	r2, [pc, #516]	; (8002490 <__aeabi_dmul+0x398>)
 800228a:	e7a5      	b.n	80021d8 <__aeabi_dmul+0xe0>
 800228c:	0c2f      	lsrs	r7, r5, #16
 800228e:	042d      	lsls	r5, r5, #16
 8002290:	0c2d      	lsrs	r5, r5, #16
 8002292:	002b      	movs	r3, r5
 8002294:	0c11      	lsrs	r1, r2, #16
 8002296:	0412      	lsls	r2, r2, #16
 8002298:	0c12      	lsrs	r2, r2, #16
 800229a:	4353      	muls	r3, r2
 800229c:	4698      	mov	r8, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	0028      	movs	r0, r5
 80022a2:	437b      	muls	r3, r7
 80022a4:	4699      	mov	r9, r3
 80022a6:	4348      	muls	r0, r1
 80022a8:	4448      	add	r0, r9
 80022aa:	4683      	mov	fp, r0
 80022ac:	4640      	mov	r0, r8
 80022ae:	000b      	movs	r3, r1
 80022b0:	0c00      	lsrs	r0, r0, #16
 80022b2:	4682      	mov	sl, r0
 80022b4:	4658      	mov	r0, fp
 80022b6:	437b      	muls	r3, r7
 80022b8:	4450      	add	r0, sl
 80022ba:	9302      	str	r3, [sp, #8]
 80022bc:	4581      	cmp	r9, r0
 80022be:	d906      	bls.n	80022ce <__aeabi_dmul+0x1d6>
 80022c0:	469a      	mov	sl, r3
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	4699      	mov	r9, r3
 80022c8:	44ca      	add	sl, r9
 80022ca:	4653      	mov	r3, sl
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	0c03      	lsrs	r3, r0, #16
 80022d0:	469b      	mov	fp, r3
 80022d2:	4643      	mov	r3, r8
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	0400      	lsls	r0, r0, #16
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	4698      	mov	r8, r3
 80022dc:	0003      	movs	r3, r0
 80022de:	4443      	add	r3, r8
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	0c33      	lsrs	r3, r6, #16
 80022e4:	4699      	mov	r9, r3
 80022e6:	002b      	movs	r3, r5
 80022e8:	0436      	lsls	r6, r6, #16
 80022ea:	0c36      	lsrs	r6, r6, #16
 80022ec:	4373      	muls	r3, r6
 80022ee:	4698      	mov	r8, r3
 80022f0:	0033      	movs	r3, r6
 80022f2:	437b      	muls	r3, r7
 80022f4:	469a      	mov	sl, r3
 80022f6:	464b      	mov	r3, r9
 80022f8:	435d      	muls	r5, r3
 80022fa:	435f      	muls	r7, r3
 80022fc:	4643      	mov	r3, r8
 80022fe:	4455      	add	r5, sl
 8002300:	0c18      	lsrs	r0, r3, #16
 8002302:	1940      	adds	r0, r0, r5
 8002304:	4582      	cmp	sl, r0
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x218>
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	469a      	mov	sl, r3
 800230e:	4457      	add	r7, sl
 8002310:	0c05      	lsrs	r5, r0, #16
 8002312:	19eb      	adds	r3, r5, r7
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	4643      	mov	r3, r8
 8002318:	041d      	lsls	r5, r3, #16
 800231a:	0c2d      	lsrs	r5, r5, #16
 800231c:	0400      	lsls	r0, r0, #16
 800231e:	1940      	adds	r0, r0, r5
 8002320:	0c25      	lsrs	r5, r4, #16
 8002322:	0424      	lsls	r4, r4, #16
 8002324:	0c24      	lsrs	r4, r4, #16
 8002326:	0027      	movs	r7, r4
 8002328:	4357      	muls	r7, r2
 800232a:	436a      	muls	r2, r5
 800232c:	4690      	mov	r8, r2
 800232e:	002a      	movs	r2, r5
 8002330:	0c3b      	lsrs	r3, r7, #16
 8002332:	469a      	mov	sl, r3
 8002334:	434a      	muls	r2, r1
 8002336:	4361      	muls	r1, r4
 8002338:	4441      	add	r1, r8
 800233a:	4451      	add	r1, sl
 800233c:	4483      	add	fp, r0
 800233e:	4588      	cmp	r8, r1
 8002340:	d903      	bls.n	800234a <__aeabi_dmul+0x252>
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	4698      	mov	r8, r3
 8002348:	4442      	add	r2, r8
 800234a:	043f      	lsls	r7, r7, #16
 800234c:	0c0b      	lsrs	r3, r1, #16
 800234e:	0c3f      	lsrs	r7, r7, #16
 8002350:	0409      	lsls	r1, r1, #16
 8002352:	19c9      	adds	r1, r1, r7
 8002354:	0027      	movs	r7, r4
 8002356:	4698      	mov	r8, r3
 8002358:	464b      	mov	r3, r9
 800235a:	4377      	muls	r7, r6
 800235c:	435c      	muls	r4, r3
 800235e:	436e      	muls	r6, r5
 8002360:	435d      	muls	r5, r3
 8002362:	0c3b      	lsrs	r3, r7, #16
 8002364:	4699      	mov	r9, r3
 8002366:	19a4      	adds	r4, r4, r6
 8002368:	444c      	add	r4, r9
 800236a:	4442      	add	r2, r8
 800236c:	9503      	str	r5, [sp, #12]
 800236e:	42a6      	cmp	r6, r4
 8002370:	d904      	bls.n	800237c <__aeabi_dmul+0x284>
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	4698      	mov	r8, r3
 8002378:	4445      	add	r5, r8
 800237a:	9503      	str	r5, [sp, #12]
 800237c:	9b02      	ldr	r3, [sp, #8]
 800237e:	043f      	lsls	r7, r7, #16
 8002380:	445b      	add	r3, fp
 8002382:	001e      	movs	r6, r3
 8002384:	4283      	cmp	r3, r0
 8002386:	4180      	sbcs	r0, r0
 8002388:	0423      	lsls	r3, r4, #16
 800238a:	4698      	mov	r8, r3
 800238c:	9b05      	ldr	r3, [sp, #20]
 800238e:	0c3f      	lsrs	r7, r7, #16
 8002390:	4447      	add	r7, r8
 8002392:	4698      	mov	r8, r3
 8002394:	1876      	adds	r6, r6, r1
 8002396:	428e      	cmp	r6, r1
 8002398:	4189      	sbcs	r1, r1
 800239a:	4447      	add	r7, r8
 800239c:	4240      	negs	r0, r0
 800239e:	183d      	adds	r5, r7, r0
 80023a0:	46a8      	mov	r8, r5
 80023a2:	4693      	mov	fp, r2
 80023a4:	4249      	negs	r1, r1
 80023a6:	468a      	mov	sl, r1
 80023a8:	44c3      	add	fp, r8
 80023aa:	429f      	cmp	r7, r3
 80023ac:	41bf      	sbcs	r7, r7
 80023ae:	4580      	cmp	r8, r0
 80023b0:	4180      	sbcs	r0, r0
 80023b2:	9b03      	ldr	r3, [sp, #12]
 80023b4:	44da      	add	sl, fp
 80023b6:	4698      	mov	r8, r3
 80023b8:	4653      	mov	r3, sl
 80023ba:	4240      	negs	r0, r0
 80023bc:	427f      	negs	r7, r7
 80023be:	4307      	orrs	r7, r0
 80023c0:	0c24      	lsrs	r4, r4, #16
 80023c2:	4593      	cmp	fp, r2
 80023c4:	4192      	sbcs	r2, r2
 80023c6:	458a      	cmp	sl, r1
 80023c8:	4189      	sbcs	r1, r1
 80023ca:	193f      	adds	r7, r7, r4
 80023cc:	0ddc      	lsrs	r4, r3, #23
 80023ce:	9b04      	ldr	r3, [sp, #16]
 80023d0:	0275      	lsls	r5, r6, #9
 80023d2:	431d      	orrs	r5, r3
 80023d4:	1e68      	subs	r0, r5, #1
 80023d6:	4185      	sbcs	r5, r0
 80023d8:	4653      	mov	r3, sl
 80023da:	4252      	negs	r2, r2
 80023dc:	4249      	negs	r1, r1
 80023de:	430a      	orrs	r2, r1
 80023e0:	18bf      	adds	r7, r7, r2
 80023e2:	4447      	add	r7, r8
 80023e4:	0df6      	lsrs	r6, r6, #23
 80023e6:	027f      	lsls	r7, r7, #9
 80023e8:	4335      	orrs	r5, r6
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	433c      	orrs	r4, r7
 80023ee:	4315      	orrs	r5, r2
 80023f0:	01fb      	lsls	r3, r7, #7
 80023f2:	d400      	bmi.n	80023f6 <__aeabi_dmul+0x2fe>
 80023f4:	e0c1      	b.n	800257a <__aeabi_dmul+0x482>
 80023f6:	2101      	movs	r1, #1
 80023f8:	086a      	lsrs	r2, r5, #1
 80023fa:	400d      	ands	r5, r1
 80023fc:	4315      	orrs	r5, r2
 80023fe:	07e2      	lsls	r2, r4, #31
 8002400:	4315      	orrs	r5, r2
 8002402:	0864      	lsrs	r4, r4, #1
 8002404:	4926      	ldr	r1, [pc, #152]	; (80024a0 <__aeabi_dmul+0x3a8>)
 8002406:	4461      	add	r1, ip
 8002408:	2900      	cmp	r1, #0
 800240a:	dd56      	ble.n	80024ba <__aeabi_dmul+0x3c2>
 800240c:	076b      	lsls	r3, r5, #29
 800240e:	d009      	beq.n	8002424 <__aeabi_dmul+0x32c>
 8002410:	220f      	movs	r2, #15
 8002412:	402a      	ands	r2, r5
 8002414:	2a04      	cmp	r2, #4
 8002416:	d005      	beq.n	8002424 <__aeabi_dmul+0x32c>
 8002418:	1d2a      	adds	r2, r5, #4
 800241a:	42aa      	cmp	r2, r5
 800241c:	41ad      	sbcs	r5, r5
 800241e:	426d      	negs	r5, r5
 8002420:	1964      	adds	r4, r4, r5
 8002422:	0015      	movs	r5, r2
 8002424:	01e3      	lsls	r3, r4, #7
 8002426:	d504      	bpl.n	8002432 <__aeabi_dmul+0x33a>
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <__aeabi_dmul+0x3ac>)
 800242c:	00c9      	lsls	r1, r1, #3
 800242e:	4014      	ands	r4, r2
 8002430:	4461      	add	r1, ip
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <__aeabi_dmul+0x3b0>)
 8002434:	4291      	cmp	r1, r2
 8002436:	dd00      	ble.n	800243a <__aeabi_dmul+0x342>
 8002438:	e724      	b.n	8002284 <__aeabi_dmul+0x18c>
 800243a:	0762      	lsls	r2, r4, #29
 800243c:	08ed      	lsrs	r5, r5, #3
 800243e:	0264      	lsls	r4, r4, #9
 8002440:	0549      	lsls	r1, r1, #21
 8002442:	4315      	orrs	r5, r2
 8002444:	0b24      	lsrs	r4, r4, #12
 8002446:	0d4a      	lsrs	r2, r1, #21
 8002448:	e6c6      	b.n	80021d8 <__aeabi_dmul+0xe0>
 800244a:	9701      	str	r7, [sp, #4]
 800244c:	e6b8      	b.n	80021c0 <__aeabi_dmul+0xc8>
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <__aeabi_dmul+0x398>)
 8002450:	2003      	movs	r0, #3
 8002452:	4694      	mov	ip, r2
 8002454:	4463      	add	r3, ip
 8002456:	464a      	mov	r2, r9
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2303      	movs	r3, #3
 800245c:	431a      	orrs	r2, r3
 800245e:	4691      	mov	r9, r2
 8002460:	4652      	mov	r2, sl
 8002462:	e68a      	b.n	800217a <__aeabi_dmul+0x82>
 8002464:	4649      	mov	r1, r9
 8002466:	2301      	movs	r3, #1
 8002468:	4319      	orrs	r1, r3
 800246a:	4689      	mov	r9, r1
 800246c:	2600      	movs	r6, #0
 800246e:	2001      	movs	r0, #1
 8002470:	e683      	b.n	800217a <__aeabi_dmul+0x82>
 8002472:	220c      	movs	r2, #12
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2303      	movs	r3, #3
 8002478:	0005      	movs	r5, r0
 800247a:	4691      	mov	r9, r2
 800247c:	469b      	mov	fp, r3
 800247e:	e65e      	b.n	800213e <__aeabi_dmul+0x46>
 8002480:	2304      	movs	r3, #4
 8002482:	4699      	mov	r9, r3
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	2400      	movs	r4, #0
 800248c:	469b      	mov	fp, r3
 800248e:	e656      	b.n	800213e <__aeabi_dmul+0x46>
 8002490:	000007ff 	.word	0x000007ff
 8002494:	fffffc01 	.word	0xfffffc01
 8002498:	080119a0 	.word	0x080119a0
 800249c:	fffffc0d 	.word	0xfffffc0d
 80024a0:	000003ff 	.word	0x000003ff
 80024a4:	feffffff 	.word	0xfeffffff
 80024a8:	000007fe 	.word	0x000007fe
 80024ac:	2300      	movs	r3, #0
 80024ae:	2480      	movs	r4, #128	; 0x80
 80024b0:	2500      	movs	r5, #0
 80024b2:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <__aeabi_dmul+0x4cc>)
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	0324      	lsls	r4, r4, #12
 80024b8:	e68e      	b.n	80021d8 <__aeabi_dmul+0xe0>
 80024ba:	2001      	movs	r0, #1
 80024bc:	1a40      	subs	r0, r0, r1
 80024be:	2838      	cmp	r0, #56	; 0x38
 80024c0:	dd00      	ble.n	80024c4 <__aeabi_dmul+0x3cc>
 80024c2:	e686      	b.n	80021d2 <__aeabi_dmul+0xda>
 80024c4:	281f      	cmp	r0, #31
 80024c6:	dd5b      	ble.n	8002580 <__aeabi_dmul+0x488>
 80024c8:	221f      	movs	r2, #31
 80024ca:	0023      	movs	r3, r4
 80024cc:	4252      	negs	r2, r2
 80024ce:	1a51      	subs	r1, r2, r1
 80024d0:	40cb      	lsrs	r3, r1
 80024d2:	0019      	movs	r1, r3
 80024d4:	2820      	cmp	r0, #32
 80024d6:	d003      	beq.n	80024e0 <__aeabi_dmul+0x3e8>
 80024d8:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <__aeabi_dmul+0x4d0>)
 80024da:	4462      	add	r2, ip
 80024dc:	4094      	lsls	r4, r2
 80024de:	4325      	orrs	r5, r4
 80024e0:	1e6a      	subs	r2, r5, #1
 80024e2:	4195      	sbcs	r5, r2
 80024e4:	002a      	movs	r2, r5
 80024e6:	430a      	orrs	r2, r1
 80024e8:	2107      	movs	r1, #7
 80024ea:	000d      	movs	r5, r1
 80024ec:	2400      	movs	r4, #0
 80024ee:	4015      	ands	r5, r2
 80024f0:	4211      	tst	r1, r2
 80024f2:	d05b      	beq.n	80025ac <__aeabi_dmul+0x4b4>
 80024f4:	210f      	movs	r1, #15
 80024f6:	2400      	movs	r4, #0
 80024f8:	4011      	ands	r1, r2
 80024fa:	2904      	cmp	r1, #4
 80024fc:	d053      	beq.n	80025a6 <__aeabi_dmul+0x4ae>
 80024fe:	1d11      	adds	r1, r2, #4
 8002500:	4291      	cmp	r1, r2
 8002502:	4192      	sbcs	r2, r2
 8002504:	4252      	negs	r2, r2
 8002506:	18a4      	adds	r4, r4, r2
 8002508:	000a      	movs	r2, r1
 800250a:	0223      	lsls	r3, r4, #8
 800250c:	d54b      	bpl.n	80025a6 <__aeabi_dmul+0x4ae>
 800250e:	2201      	movs	r2, #1
 8002510:	2400      	movs	r4, #0
 8002512:	2500      	movs	r5, #0
 8002514:	e660      	b.n	80021d8 <__aeabi_dmul+0xe0>
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	031b      	lsls	r3, r3, #12
 800251a:	421c      	tst	r4, r3
 800251c:	d009      	beq.n	8002532 <__aeabi_dmul+0x43a>
 800251e:	421e      	tst	r6, r3
 8002520:	d107      	bne.n	8002532 <__aeabi_dmul+0x43a>
 8002522:	4333      	orrs	r3, r6
 8002524:	031c      	lsls	r4, r3, #12
 8002526:	4643      	mov	r3, r8
 8002528:	0015      	movs	r5, r2
 800252a:	0b24      	lsrs	r4, r4, #12
 800252c:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <__aeabi_dmul+0x4cc>)
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	e652      	b.n	80021d8 <__aeabi_dmul+0xe0>
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	0312      	lsls	r2, r2, #12
 8002536:	4314      	orrs	r4, r2
 8002538:	0324      	lsls	r4, r4, #12
 800253a:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <__aeabi_dmul+0x4cc>)
 800253c:	0b24      	lsrs	r4, r4, #12
 800253e:	9701      	str	r7, [sp, #4]
 8002540:	e64a      	b.n	80021d8 <__aeabi_dmul+0xe0>
 8002542:	f000 fd8b 	bl	800305c <__clzsi2>
 8002546:	0003      	movs	r3, r0
 8002548:	001a      	movs	r2, r3
 800254a:	3215      	adds	r2, #21
 800254c:	3020      	adds	r0, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_dmul+0x45c>
 8002552:	e684      	b.n	800225e <__aeabi_dmul+0x166>
 8002554:	4656      	mov	r6, sl
 8002556:	3b08      	subs	r3, #8
 8002558:	2200      	movs	r2, #0
 800255a:	409e      	lsls	r6, r3
 800255c:	e689      	b.n	8002272 <__aeabi_dmul+0x17a>
 800255e:	f000 fd7d 	bl	800305c <__clzsi2>
 8002562:	0001      	movs	r1, r0
 8002564:	0002      	movs	r2, r0
 8002566:	3115      	adds	r1, #21
 8002568:	3220      	adds	r2, #32
 800256a:	291c      	cmp	r1, #28
 800256c:	dc00      	bgt.n	8002570 <__aeabi_dmul+0x478>
 800256e:	e64e      	b.n	800220e <__aeabi_dmul+0x116>
 8002570:	0034      	movs	r4, r6
 8002572:	3808      	subs	r0, #8
 8002574:	2500      	movs	r5, #0
 8002576:	4084      	lsls	r4, r0
 8002578:	e653      	b.n	8002222 <__aeabi_dmul+0x12a>
 800257a:	9b00      	ldr	r3, [sp, #0]
 800257c:	469c      	mov	ip, r3
 800257e:	e741      	b.n	8002404 <__aeabi_dmul+0x30c>
 8002580:	4912      	ldr	r1, [pc, #72]	; (80025cc <__aeabi_dmul+0x4d4>)
 8002582:	0022      	movs	r2, r4
 8002584:	4461      	add	r1, ip
 8002586:	002e      	movs	r6, r5
 8002588:	408d      	lsls	r5, r1
 800258a:	408a      	lsls	r2, r1
 800258c:	40c6      	lsrs	r6, r0
 800258e:	1e69      	subs	r1, r5, #1
 8002590:	418d      	sbcs	r5, r1
 8002592:	4332      	orrs	r2, r6
 8002594:	432a      	orrs	r2, r5
 8002596:	40c4      	lsrs	r4, r0
 8002598:	0753      	lsls	r3, r2, #29
 800259a:	d0b6      	beq.n	800250a <__aeabi_dmul+0x412>
 800259c:	210f      	movs	r1, #15
 800259e:	4011      	ands	r1, r2
 80025a0:	2904      	cmp	r1, #4
 80025a2:	d1ac      	bne.n	80024fe <__aeabi_dmul+0x406>
 80025a4:	e7b1      	b.n	800250a <__aeabi_dmul+0x412>
 80025a6:	0765      	lsls	r5, r4, #29
 80025a8:	0264      	lsls	r4, r4, #9
 80025aa:	0b24      	lsrs	r4, r4, #12
 80025ac:	08d2      	lsrs	r2, r2, #3
 80025ae:	4315      	orrs	r5, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	e611      	b.n	80021d8 <__aeabi_dmul+0xe0>
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0312      	lsls	r2, r2, #12
 80025b8:	4314      	orrs	r4, r2
 80025ba:	0324      	lsls	r4, r4, #12
 80025bc:	4a01      	ldr	r2, [pc, #4]	; (80025c4 <__aeabi_dmul+0x4cc>)
 80025be:	0b24      	lsrs	r4, r4, #12
 80025c0:	e60a      	b.n	80021d8 <__aeabi_dmul+0xe0>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	000007ff 	.word	0x000007ff
 80025c8:	0000043e 	.word	0x0000043e
 80025cc:	0000041e 	.word	0x0000041e

080025d0 <__aeabi_dsub>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	4657      	mov	r7, sl
 80025d4:	464e      	mov	r6, r9
 80025d6:	4645      	mov	r5, r8
 80025d8:	46de      	mov	lr, fp
 80025da:	0004      	movs	r4, r0
 80025dc:	b5e0      	push	{r5, r6, r7, lr}
 80025de:	001f      	movs	r7, r3
 80025e0:	0010      	movs	r0, r2
 80025e2:	030b      	lsls	r3, r1, #12
 80025e4:	0f62      	lsrs	r2, r4, #29
 80025e6:	004e      	lsls	r6, r1, #1
 80025e8:	0fcd      	lsrs	r5, r1, #31
 80025ea:	0a5b      	lsrs	r3, r3, #9
 80025ec:	0339      	lsls	r1, r7, #12
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0a49      	lsrs	r1, r1, #9
 80025f2:	00e2      	lsls	r2, r4, #3
 80025f4:	0f44      	lsrs	r4, r0, #29
 80025f6:	4321      	orrs	r1, r4
 80025f8:	4cc2      	ldr	r4, [pc, #776]	; (8002904 <__aeabi_dsub+0x334>)
 80025fa:	4691      	mov	r9, r2
 80025fc:	4692      	mov	sl, r2
 80025fe:	00c0      	lsls	r0, r0, #3
 8002600:	007a      	lsls	r2, r7, #1
 8002602:	4680      	mov	r8, r0
 8002604:	0d76      	lsrs	r6, r6, #21
 8002606:	0d52      	lsrs	r2, r2, #21
 8002608:	0fff      	lsrs	r7, r7, #31
 800260a:	42a2      	cmp	r2, r4
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x40>
 800260e:	e0b4      	b.n	800277a <__aeabi_dsub+0x1aa>
 8002610:	2401      	movs	r4, #1
 8002612:	4067      	eors	r7, r4
 8002614:	46bb      	mov	fp, r7
 8002616:	42bd      	cmp	r5, r7
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x4c>
 800261a:	e088      	b.n	800272e <__aeabi_dsub+0x15e>
 800261c:	1ab4      	subs	r4, r6, r2
 800261e:	46a4      	mov	ip, r4
 8002620:	2c00      	cmp	r4, #0
 8002622:	dc00      	bgt.n	8002626 <__aeabi_dsub+0x56>
 8002624:	e0b2      	b.n	800278c <__aeabi_dsub+0x1bc>
 8002626:	2a00      	cmp	r2, #0
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x5c>
 800262a:	e0c5      	b.n	80027b8 <__aeabi_dsub+0x1e8>
 800262c:	4ab5      	ldr	r2, [pc, #724]	; (8002904 <__aeabi_dsub+0x334>)
 800262e:	4296      	cmp	r6, r2
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x64>
 8002632:	e28b      	b.n	8002b4c <__aeabi_dsub+0x57c>
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	0412      	lsls	r2, r2, #16
 8002638:	4311      	orrs	r1, r2
 800263a:	4662      	mov	r2, ip
 800263c:	2a38      	cmp	r2, #56	; 0x38
 800263e:	dd00      	ble.n	8002642 <__aeabi_dsub+0x72>
 8002640:	e1a1      	b.n	8002986 <__aeabi_dsub+0x3b6>
 8002642:	2a1f      	cmp	r2, #31
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x78>
 8002646:	e216      	b.n	8002a76 <__aeabi_dsub+0x4a6>
 8002648:	2720      	movs	r7, #32
 800264a:	000c      	movs	r4, r1
 800264c:	1abf      	subs	r7, r7, r2
 800264e:	40bc      	lsls	r4, r7
 8002650:	0002      	movs	r2, r0
 8002652:	46a0      	mov	r8, r4
 8002654:	4664      	mov	r4, ip
 8002656:	40b8      	lsls	r0, r7
 8002658:	40e2      	lsrs	r2, r4
 800265a:	4644      	mov	r4, r8
 800265c:	4314      	orrs	r4, r2
 800265e:	0002      	movs	r2, r0
 8002660:	1e50      	subs	r0, r2, #1
 8002662:	4182      	sbcs	r2, r0
 8002664:	4660      	mov	r0, ip
 8002666:	40c1      	lsrs	r1, r0
 8002668:	4322      	orrs	r2, r4
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	4649      	mov	r1, r9
 800266e:	1a8c      	subs	r4, r1, r2
 8002670:	45a1      	cmp	r9, r4
 8002672:	4192      	sbcs	r2, r2
 8002674:	4252      	negs	r2, r2
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	4698      	mov	r8, r3
 800267a:	4643      	mov	r3, r8
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0xb2>
 8002680:	e117      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002682:	4643      	mov	r3, r8
 8002684:	025b      	lsls	r3, r3, #9
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	4698      	mov	r8, r3
 800268a:	4643      	mov	r3, r8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d100      	bne.n	8002692 <__aeabi_dsub+0xc2>
 8002690:	e16c      	b.n	800296c <__aeabi_dsub+0x39c>
 8002692:	4640      	mov	r0, r8
 8002694:	f000 fce2 	bl	800305c <__clzsi2>
 8002698:	0002      	movs	r2, r0
 800269a:	3a08      	subs	r2, #8
 800269c:	2120      	movs	r1, #32
 800269e:	0020      	movs	r0, r4
 80026a0:	4643      	mov	r3, r8
 80026a2:	1a89      	subs	r1, r1, r2
 80026a4:	4093      	lsls	r3, r2
 80026a6:	40c8      	lsrs	r0, r1
 80026a8:	4094      	lsls	r4, r2
 80026aa:	4303      	orrs	r3, r0
 80026ac:	4296      	cmp	r6, r2
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dsub+0xe2>
 80026b0:	e157      	b.n	8002962 <__aeabi_dsub+0x392>
 80026b2:	1b96      	subs	r6, r2, r6
 80026b4:	1c71      	adds	r1, r6, #1
 80026b6:	291f      	cmp	r1, #31
 80026b8:	dd00      	ble.n	80026bc <__aeabi_dsub+0xec>
 80026ba:	e1cb      	b.n	8002a54 <__aeabi_dsub+0x484>
 80026bc:	2220      	movs	r2, #32
 80026be:	0018      	movs	r0, r3
 80026c0:	0026      	movs	r6, r4
 80026c2:	1a52      	subs	r2, r2, r1
 80026c4:	4094      	lsls	r4, r2
 80026c6:	4090      	lsls	r0, r2
 80026c8:	40ce      	lsrs	r6, r1
 80026ca:	40cb      	lsrs	r3, r1
 80026cc:	1e62      	subs	r2, r4, #1
 80026ce:	4194      	sbcs	r4, r2
 80026d0:	4330      	orrs	r0, r6
 80026d2:	4698      	mov	r8, r3
 80026d4:	2600      	movs	r6, #0
 80026d6:	4304      	orrs	r4, r0
 80026d8:	0763      	lsls	r3, r4, #29
 80026da:	d009      	beq.n	80026f0 <__aeabi_dsub+0x120>
 80026dc:	230f      	movs	r3, #15
 80026de:	4023      	ands	r3, r4
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d005      	beq.n	80026f0 <__aeabi_dsub+0x120>
 80026e4:	1d23      	adds	r3, r4, #4
 80026e6:	42a3      	cmp	r3, r4
 80026e8:	41a4      	sbcs	r4, r4
 80026ea:	4264      	negs	r4, r4
 80026ec:	44a0      	add	r8, r4
 80026ee:	001c      	movs	r4, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	d400      	bmi.n	80026f8 <__aeabi_dsub+0x128>
 80026f6:	e0df      	b.n	80028b8 <__aeabi_dsub+0x2e8>
 80026f8:	4b82      	ldr	r3, [pc, #520]	; (8002904 <__aeabi_dsub+0x334>)
 80026fa:	3601      	adds	r6, #1
 80026fc:	429e      	cmp	r6, r3
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x132>
 8002700:	e0fb      	b.n	80028fa <__aeabi_dsub+0x32a>
 8002702:	4642      	mov	r2, r8
 8002704:	4b80      	ldr	r3, [pc, #512]	; (8002908 <__aeabi_dsub+0x338>)
 8002706:	08e4      	lsrs	r4, r4, #3
 8002708:	401a      	ands	r2, r3
 800270a:	0013      	movs	r3, r2
 800270c:	0571      	lsls	r1, r6, #21
 800270e:	0752      	lsls	r2, r2, #29
 8002710:	025b      	lsls	r3, r3, #9
 8002712:	4322      	orrs	r2, r4
 8002714:	0b1b      	lsrs	r3, r3, #12
 8002716:	0d49      	lsrs	r1, r1, #21
 8002718:	0509      	lsls	r1, r1, #20
 800271a:	07ed      	lsls	r5, r5, #31
 800271c:	4319      	orrs	r1, r3
 800271e:	4329      	orrs	r1, r5
 8002720:	0010      	movs	r0, r2
 8002722:	bcf0      	pop	{r4, r5, r6, r7}
 8002724:	46bb      	mov	fp, r7
 8002726:	46b2      	mov	sl, r6
 8002728:	46a9      	mov	r9, r5
 800272a:	46a0      	mov	r8, r4
 800272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800272e:	1ab4      	subs	r4, r6, r2
 8002730:	46a4      	mov	ip, r4
 8002732:	2c00      	cmp	r4, #0
 8002734:	dd58      	ble.n	80027e8 <__aeabi_dsub+0x218>
 8002736:	2a00      	cmp	r2, #0
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x16c>
 800273a:	e09e      	b.n	800287a <__aeabi_dsub+0x2aa>
 800273c:	4a71      	ldr	r2, [pc, #452]	; (8002904 <__aeabi_dsub+0x334>)
 800273e:	4296      	cmp	r6, r2
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x174>
 8002742:	e13b      	b.n	80029bc <__aeabi_dsub+0x3ec>
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0412      	lsls	r2, r2, #16
 8002748:	4311      	orrs	r1, r2
 800274a:	4662      	mov	r2, ip
 800274c:	2a38      	cmp	r2, #56	; 0x38
 800274e:	dd00      	ble.n	8002752 <__aeabi_dsub+0x182>
 8002750:	e0c1      	b.n	80028d6 <__aeabi_dsub+0x306>
 8002752:	2a1f      	cmp	r2, #31
 8002754:	dc00      	bgt.n	8002758 <__aeabi_dsub+0x188>
 8002756:	e1bb      	b.n	8002ad0 <__aeabi_dsub+0x500>
 8002758:	000c      	movs	r4, r1
 800275a:	3a20      	subs	r2, #32
 800275c:	40d4      	lsrs	r4, r2
 800275e:	0022      	movs	r2, r4
 8002760:	4664      	mov	r4, ip
 8002762:	2c20      	cmp	r4, #32
 8002764:	d004      	beq.n	8002770 <__aeabi_dsub+0x1a0>
 8002766:	2740      	movs	r7, #64	; 0x40
 8002768:	1b3f      	subs	r7, r7, r4
 800276a:	40b9      	lsls	r1, r7
 800276c:	4308      	orrs	r0, r1
 800276e:	4680      	mov	r8, r0
 8002770:	4644      	mov	r4, r8
 8002772:	1e61      	subs	r1, r4, #1
 8002774:	418c      	sbcs	r4, r1
 8002776:	4314      	orrs	r4, r2
 8002778:	e0b1      	b.n	80028de <__aeabi_dsub+0x30e>
 800277a:	000c      	movs	r4, r1
 800277c:	4304      	orrs	r4, r0
 800277e:	d02a      	beq.n	80027d6 <__aeabi_dsub+0x206>
 8002780:	46bb      	mov	fp, r7
 8002782:	42bd      	cmp	r5, r7
 8002784:	d02d      	beq.n	80027e2 <__aeabi_dsub+0x212>
 8002786:	4c61      	ldr	r4, [pc, #388]	; (800290c <__aeabi_dsub+0x33c>)
 8002788:	46a4      	mov	ip, r4
 800278a:	44b4      	add	ip, r6
 800278c:	4664      	mov	r4, ip
 800278e:	2c00      	cmp	r4, #0
 8002790:	d05c      	beq.n	800284c <__aeabi_dsub+0x27c>
 8002792:	1b94      	subs	r4, r2, r6
 8002794:	46a4      	mov	ip, r4
 8002796:	2e00      	cmp	r6, #0
 8002798:	d000      	beq.n	800279c <__aeabi_dsub+0x1cc>
 800279a:	e115      	b.n	80029c8 <__aeabi_dsub+0x3f8>
 800279c:	464d      	mov	r5, r9
 800279e:	431d      	orrs	r5, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x1d4>
 80027a2:	e1c3      	b.n	8002b2c <__aeabi_dsub+0x55c>
 80027a4:	1e65      	subs	r5, r4, #1
 80027a6:	2c01      	cmp	r4, #1
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x1dc>
 80027aa:	e20c      	b.n	8002bc6 <__aeabi_dsub+0x5f6>
 80027ac:	4e55      	ldr	r6, [pc, #340]	; (8002904 <__aeabi_dsub+0x334>)
 80027ae:	42b4      	cmp	r4, r6
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x1e4>
 80027b2:	e1f8      	b.n	8002ba6 <__aeabi_dsub+0x5d6>
 80027b4:	46ac      	mov	ip, r5
 80027b6:	e10e      	b.n	80029d6 <__aeabi_dsub+0x406>
 80027b8:	000a      	movs	r2, r1
 80027ba:	4302      	orrs	r2, r0
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x1f0>
 80027be:	e136      	b.n	8002a2e <__aeabi_dsub+0x45e>
 80027c0:	0022      	movs	r2, r4
 80027c2:	3a01      	subs	r2, #1
 80027c4:	2c01      	cmp	r4, #1
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x1fa>
 80027c8:	e1c6      	b.n	8002b58 <__aeabi_dsub+0x588>
 80027ca:	4c4e      	ldr	r4, [pc, #312]	; (8002904 <__aeabi_dsub+0x334>)
 80027cc:	45a4      	cmp	ip, r4
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x202>
 80027d0:	e0f4      	b.n	80029bc <__aeabi_dsub+0x3ec>
 80027d2:	4694      	mov	ip, r2
 80027d4:	e731      	b.n	800263a <__aeabi_dsub+0x6a>
 80027d6:	2401      	movs	r4, #1
 80027d8:	4067      	eors	r7, r4
 80027da:	46bb      	mov	fp, r7
 80027dc:	42bd      	cmp	r5, r7
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x212>
 80027e0:	e71c      	b.n	800261c <__aeabi_dsub+0x4c>
 80027e2:	4c4a      	ldr	r4, [pc, #296]	; (800290c <__aeabi_dsub+0x33c>)
 80027e4:	46a4      	mov	ip, r4
 80027e6:	44b4      	add	ip, r6
 80027e8:	4664      	mov	r4, ip
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	d100      	bne.n	80027f0 <__aeabi_dsub+0x220>
 80027ee:	e0cf      	b.n	8002990 <__aeabi_dsub+0x3c0>
 80027f0:	1b94      	subs	r4, r2, r6
 80027f2:	46a4      	mov	ip, r4
 80027f4:	2e00      	cmp	r6, #0
 80027f6:	d100      	bne.n	80027fa <__aeabi_dsub+0x22a>
 80027f8:	e15c      	b.n	8002ab4 <__aeabi_dsub+0x4e4>
 80027fa:	4e42      	ldr	r6, [pc, #264]	; (8002904 <__aeabi_dsub+0x334>)
 80027fc:	42b2      	cmp	r2, r6
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x232>
 8002800:	e1ec      	b.n	8002bdc <__aeabi_dsub+0x60c>
 8002802:	2680      	movs	r6, #128	; 0x80
 8002804:	0436      	lsls	r6, r6, #16
 8002806:	4333      	orrs	r3, r6
 8002808:	4664      	mov	r4, ip
 800280a:	2c38      	cmp	r4, #56	; 0x38
 800280c:	dd00      	ble.n	8002810 <__aeabi_dsub+0x240>
 800280e:	e1b3      	b.n	8002b78 <__aeabi_dsub+0x5a8>
 8002810:	2c1f      	cmp	r4, #31
 8002812:	dd00      	ble.n	8002816 <__aeabi_dsub+0x246>
 8002814:	e238      	b.n	8002c88 <__aeabi_dsub+0x6b8>
 8002816:	2620      	movs	r6, #32
 8002818:	1b36      	subs	r6, r6, r4
 800281a:	001c      	movs	r4, r3
 800281c:	40b4      	lsls	r4, r6
 800281e:	464f      	mov	r7, r9
 8002820:	46a0      	mov	r8, r4
 8002822:	4664      	mov	r4, ip
 8002824:	40e7      	lsrs	r7, r4
 8002826:	4644      	mov	r4, r8
 8002828:	433c      	orrs	r4, r7
 800282a:	464f      	mov	r7, r9
 800282c:	40b7      	lsls	r7, r6
 800282e:	003e      	movs	r6, r7
 8002830:	1e77      	subs	r7, r6, #1
 8002832:	41be      	sbcs	r6, r7
 8002834:	4334      	orrs	r4, r6
 8002836:	4666      	mov	r6, ip
 8002838:	40f3      	lsrs	r3, r6
 800283a:	18c9      	adds	r1, r1, r3
 800283c:	1824      	adds	r4, r4, r0
 800283e:	4284      	cmp	r4, r0
 8002840:	419b      	sbcs	r3, r3
 8002842:	425b      	negs	r3, r3
 8002844:	4698      	mov	r8, r3
 8002846:	0016      	movs	r6, r2
 8002848:	4488      	add	r8, r1
 800284a:	e04e      	b.n	80028ea <__aeabi_dsub+0x31a>
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <__aeabi_dsub+0x340>)
 800284e:	1c74      	adds	r4, r6, #1
 8002850:	4214      	tst	r4, r2
 8002852:	d000      	beq.n	8002856 <__aeabi_dsub+0x286>
 8002854:	e0d6      	b.n	8002a04 <__aeabi_dsub+0x434>
 8002856:	464a      	mov	r2, r9
 8002858:	431a      	orrs	r2, r3
 800285a:	2e00      	cmp	r6, #0
 800285c:	d000      	beq.n	8002860 <__aeabi_dsub+0x290>
 800285e:	e15b      	b.n	8002b18 <__aeabi_dsub+0x548>
 8002860:	2a00      	cmp	r2, #0
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x296>
 8002864:	e1a5      	b.n	8002bb2 <__aeabi_dsub+0x5e2>
 8002866:	000a      	movs	r2, r1
 8002868:	4302      	orrs	r2, r0
 800286a:	d000      	beq.n	800286e <__aeabi_dsub+0x29e>
 800286c:	e1bb      	b.n	8002be6 <__aeabi_dsub+0x616>
 800286e:	464a      	mov	r2, r9
 8002870:	0759      	lsls	r1, r3, #29
 8002872:	08d2      	lsrs	r2, r2, #3
 8002874:	430a      	orrs	r2, r1
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	e027      	b.n	80028ca <__aeabi_dsub+0x2fa>
 800287a:	000a      	movs	r2, r1
 800287c:	4302      	orrs	r2, r0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x2b2>
 8002880:	e174      	b.n	8002b6c <__aeabi_dsub+0x59c>
 8002882:	0022      	movs	r2, r4
 8002884:	3a01      	subs	r2, #1
 8002886:	2c01      	cmp	r4, #1
 8002888:	d005      	beq.n	8002896 <__aeabi_dsub+0x2c6>
 800288a:	4c1e      	ldr	r4, [pc, #120]	; (8002904 <__aeabi_dsub+0x334>)
 800288c:	45a4      	cmp	ip, r4
 800288e:	d100      	bne.n	8002892 <__aeabi_dsub+0x2c2>
 8002890:	e094      	b.n	80029bc <__aeabi_dsub+0x3ec>
 8002892:	4694      	mov	ip, r2
 8002894:	e759      	b.n	800274a <__aeabi_dsub+0x17a>
 8002896:	4448      	add	r0, r9
 8002898:	4548      	cmp	r0, r9
 800289a:	4192      	sbcs	r2, r2
 800289c:	185b      	adds	r3, r3, r1
 800289e:	4698      	mov	r8, r3
 80028a0:	0004      	movs	r4, r0
 80028a2:	4252      	negs	r2, r2
 80028a4:	4490      	add	r8, r2
 80028a6:	4643      	mov	r3, r8
 80028a8:	2602      	movs	r6, #2
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	d500      	bpl.n	80028b0 <__aeabi_dsub+0x2e0>
 80028ae:	e0c4      	b.n	8002a3a <__aeabi_dsub+0x46a>
 80028b0:	3e01      	subs	r6, #1
 80028b2:	0763      	lsls	r3, r4, #29
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x2e8>
 80028b6:	e711      	b.n	80026dc <__aeabi_dsub+0x10c>
 80028b8:	4643      	mov	r3, r8
 80028ba:	46b4      	mov	ip, r6
 80028bc:	0759      	lsls	r1, r3, #29
 80028be:	08e2      	lsrs	r2, r4, #3
 80028c0:	430a      	orrs	r2, r1
 80028c2:	08db      	lsrs	r3, r3, #3
 80028c4:	490f      	ldr	r1, [pc, #60]	; (8002904 <__aeabi_dsub+0x334>)
 80028c6:	458c      	cmp	ip, r1
 80028c8:	d040      	beq.n	800294c <__aeabi_dsub+0x37c>
 80028ca:	4661      	mov	r1, ip
 80028cc:	031b      	lsls	r3, r3, #12
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	0b1b      	lsrs	r3, r3, #12
 80028d2:	0d49      	lsrs	r1, r1, #21
 80028d4:	e720      	b.n	8002718 <__aeabi_dsub+0x148>
 80028d6:	4301      	orrs	r1, r0
 80028d8:	000c      	movs	r4, r1
 80028da:	1e61      	subs	r1, r4, #1
 80028dc:	418c      	sbcs	r4, r1
 80028de:	444c      	add	r4, r9
 80028e0:	454c      	cmp	r4, r9
 80028e2:	4192      	sbcs	r2, r2
 80028e4:	4252      	negs	r2, r2
 80028e6:	4690      	mov	r8, r2
 80028e8:	4498      	add	r8, r3
 80028ea:	4643      	mov	r3, r8
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	d5e0      	bpl.n	80028b2 <__aeabi_dsub+0x2e2>
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__aeabi_dsub+0x334>)
 80028f2:	3601      	adds	r6, #1
 80028f4:	429e      	cmp	r6, r3
 80028f6:	d000      	beq.n	80028fa <__aeabi_dsub+0x32a>
 80028f8:	e09f      	b.n	8002a3a <__aeabi_dsub+0x46a>
 80028fa:	0031      	movs	r1, r6
 80028fc:	2300      	movs	r3, #0
 80028fe:	2200      	movs	r2, #0
 8002900:	e70a      	b.n	8002718 <__aeabi_dsub+0x148>
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	000007ff 	.word	0x000007ff
 8002908:	ff7fffff 	.word	0xff7fffff
 800290c:	fffff801 	.word	0xfffff801
 8002910:	000007fe 	.word	0x000007fe
 8002914:	2a00      	cmp	r2, #0
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x34a>
 8002918:	e160      	b.n	8002bdc <__aeabi_dsub+0x60c>
 800291a:	000a      	movs	r2, r1
 800291c:	4302      	orrs	r2, r0
 800291e:	d04d      	beq.n	80029bc <__aeabi_dsub+0x3ec>
 8002920:	464a      	mov	r2, r9
 8002922:	075c      	lsls	r4, r3, #29
 8002924:	08d2      	lsrs	r2, r2, #3
 8002926:	4322      	orrs	r2, r4
 8002928:	2480      	movs	r4, #128	; 0x80
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	0324      	lsls	r4, r4, #12
 800292e:	4223      	tst	r3, r4
 8002930:	d007      	beq.n	8002942 <__aeabi_dsub+0x372>
 8002932:	08ce      	lsrs	r6, r1, #3
 8002934:	4226      	tst	r6, r4
 8002936:	d104      	bne.n	8002942 <__aeabi_dsub+0x372>
 8002938:	465d      	mov	r5, fp
 800293a:	0033      	movs	r3, r6
 800293c:	08c2      	lsrs	r2, r0, #3
 800293e:	0749      	lsls	r1, r1, #29
 8002940:	430a      	orrs	r2, r1
 8002942:	0f51      	lsrs	r1, r2, #29
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	08d2      	lsrs	r2, r2, #3
 8002948:	0749      	lsls	r1, r1, #29
 800294a:	430a      	orrs	r2, r1
 800294c:	0011      	movs	r1, r2
 800294e:	4319      	orrs	r1, r3
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x384>
 8002952:	e1c8      	b.n	8002ce6 <__aeabi_dsub+0x716>
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0309      	lsls	r1, r1, #12
 8002958:	430b      	orrs	r3, r1
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	49d5      	ldr	r1, [pc, #852]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 800295e:	0b1b      	lsrs	r3, r3, #12
 8002960:	e6da      	b.n	8002718 <__aeabi_dsub+0x148>
 8002962:	49d5      	ldr	r1, [pc, #852]	; (8002cb8 <__aeabi_dsub+0x6e8>)
 8002964:	1ab6      	subs	r6, r6, r2
 8002966:	400b      	ands	r3, r1
 8002968:	4698      	mov	r8, r3
 800296a:	e6b5      	b.n	80026d8 <__aeabi_dsub+0x108>
 800296c:	0020      	movs	r0, r4
 800296e:	f000 fb75 	bl	800305c <__clzsi2>
 8002972:	0002      	movs	r2, r0
 8002974:	3218      	adds	r2, #24
 8002976:	2a1f      	cmp	r2, #31
 8002978:	dc00      	bgt.n	800297c <__aeabi_dsub+0x3ac>
 800297a:	e68f      	b.n	800269c <__aeabi_dsub+0xcc>
 800297c:	0023      	movs	r3, r4
 800297e:	3808      	subs	r0, #8
 8002980:	4083      	lsls	r3, r0
 8002982:	2400      	movs	r4, #0
 8002984:	e692      	b.n	80026ac <__aeabi_dsub+0xdc>
 8002986:	4308      	orrs	r0, r1
 8002988:	0002      	movs	r2, r0
 800298a:	1e50      	subs	r0, r2, #1
 800298c:	4182      	sbcs	r2, r0
 800298e:	e66d      	b.n	800266c <__aeabi_dsub+0x9c>
 8002990:	4cca      	ldr	r4, [pc, #808]	; (8002cbc <__aeabi_dsub+0x6ec>)
 8002992:	1c72      	adds	r2, r6, #1
 8002994:	4222      	tst	r2, r4
 8002996:	d000      	beq.n	800299a <__aeabi_dsub+0x3ca>
 8002998:	e0ad      	b.n	8002af6 <__aeabi_dsub+0x526>
 800299a:	464a      	mov	r2, r9
 800299c:	431a      	orrs	r2, r3
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d1b8      	bne.n	8002914 <__aeabi_dsub+0x344>
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x3d8>
 80029a6:	e158      	b.n	8002c5a <__aeabi_dsub+0x68a>
 80029a8:	000a      	movs	r2, r1
 80029aa:	4302      	orrs	r2, r0
 80029ac:	d000      	beq.n	80029b0 <__aeabi_dsub+0x3e0>
 80029ae:	e159      	b.n	8002c64 <__aeabi_dsub+0x694>
 80029b0:	464a      	mov	r2, r9
 80029b2:	0759      	lsls	r1, r3, #29
 80029b4:	08d2      	lsrs	r2, r2, #3
 80029b6:	430a      	orrs	r2, r1
 80029b8:	08db      	lsrs	r3, r3, #3
 80029ba:	e786      	b.n	80028ca <__aeabi_dsub+0x2fa>
 80029bc:	464a      	mov	r2, r9
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	08d2      	lsrs	r2, r2, #3
 80029c2:	430a      	orrs	r2, r1
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	e7c1      	b.n	800294c <__aeabi_dsub+0x37c>
 80029c8:	4dba      	ldr	r5, [pc, #744]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 80029ca:	42aa      	cmp	r2, r5
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x400>
 80029ce:	e11e      	b.n	8002c0e <__aeabi_dsub+0x63e>
 80029d0:	2580      	movs	r5, #128	; 0x80
 80029d2:	042d      	lsls	r5, r5, #16
 80029d4:	432b      	orrs	r3, r5
 80029d6:	4664      	mov	r4, ip
 80029d8:	2c38      	cmp	r4, #56	; 0x38
 80029da:	dc5d      	bgt.n	8002a98 <__aeabi_dsub+0x4c8>
 80029dc:	2c1f      	cmp	r4, #31
 80029de:	dd00      	ble.n	80029e2 <__aeabi_dsub+0x412>
 80029e0:	e0d0      	b.n	8002b84 <__aeabi_dsub+0x5b4>
 80029e2:	2520      	movs	r5, #32
 80029e4:	4667      	mov	r7, ip
 80029e6:	1b2d      	subs	r5, r5, r4
 80029e8:	464e      	mov	r6, r9
 80029ea:	001c      	movs	r4, r3
 80029ec:	40fe      	lsrs	r6, r7
 80029ee:	40ac      	lsls	r4, r5
 80029f0:	4334      	orrs	r4, r6
 80029f2:	464e      	mov	r6, r9
 80029f4:	40ae      	lsls	r6, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	40fb      	lsrs	r3, r7
 80029fa:	1e6e      	subs	r6, r5, #1
 80029fc:	41b5      	sbcs	r5, r6
 80029fe:	1ac9      	subs	r1, r1, r3
 8002a00:	432c      	orrs	r4, r5
 8002a02:	e04e      	b.n	8002aa2 <__aeabi_dsub+0x4d2>
 8002a04:	464a      	mov	r2, r9
 8002a06:	1a14      	subs	r4, r2, r0
 8002a08:	45a1      	cmp	r9, r4
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	4252      	negs	r2, r2
 8002a0e:	4690      	mov	r8, r2
 8002a10:	1a5f      	subs	r7, r3, r1
 8002a12:	003a      	movs	r2, r7
 8002a14:	4647      	mov	r7, r8
 8002a16:	1bd2      	subs	r2, r2, r7
 8002a18:	4690      	mov	r8, r2
 8002a1a:	0212      	lsls	r2, r2, #8
 8002a1c:	d500      	bpl.n	8002a20 <__aeabi_dsub+0x450>
 8002a1e:	e08b      	b.n	8002b38 <__aeabi_dsub+0x568>
 8002a20:	4642      	mov	r2, r8
 8002a22:	4322      	orrs	r2, r4
 8002a24:	d000      	beq.n	8002a28 <__aeabi_dsub+0x458>
 8002a26:	e630      	b.n	800268a <__aeabi_dsub+0xba>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2500      	movs	r5, #0
 8002a2c:	e74d      	b.n	80028ca <__aeabi_dsub+0x2fa>
 8002a2e:	464a      	mov	r2, r9
 8002a30:	0759      	lsls	r1, r3, #29
 8002a32:	08d2      	lsrs	r2, r2, #3
 8002a34:	430a      	orrs	r2, r1
 8002a36:	08db      	lsrs	r3, r3, #3
 8002a38:	e744      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002a3a:	4642      	mov	r2, r8
 8002a3c:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <__aeabi_dsub+0x6e8>)
 8002a3e:	0861      	lsrs	r1, r4, #1
 8002a40:	401a      	ands	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	2201      	movs	r2, #1
 8002a46:	4014      	ands	r4, r2
 8002a48:	430c      	orrs	r4, r1
 8002a4a:	07da      	lsls	r2, r3, #31
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	4698      	mov	r8, r3
 8002a50:	4314      	orrs	r4, r2
 8002a52:	e641      	b.n	80026d8 <__aeabi_dsub+0x108>
 8002a54:	001a      	movs	r2, r3
 8002a56:	3e1f      	subs	r6, #31
 8002a58:	40f2      	lsrs	r2, r6
 8002a5a:	0016      	movs	r6, r2
 8002a5c:	2920      	cmp	r1, #32
 8002a5e:	d003      	beq.n	8002a68 <__aeabi_dsub+0x498>
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	1a51      	subs	r1, r2, r1
 8002a64:	408b      	lsls	r3, r1
 8002a66:	431c      	orrs	r4, r3
 8002a68:	1e62      	subs	r2, r4, #1
 8002a6a:	4194      	sbcs	r4, r2
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4334      	orrs	r4, r6
 8002a70:	4698      	mov	r8, r3
 8002a72:	2600      	movs	r6, #0
 8002a74:	e71d      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002a76:	000c      	movs	r4, r1
 8002a78:	3a20      	subs	r2, #32
 8002a7a:	40d4      	lsrs	r4, r2
 8002a7c:	0022      	movs	r2, r4
 8002a7e:	4664      	mov	r4, ip
 8002a80:	2c20      	cmp	r4, #32
 8002a82:	d004      	beq.n	8002a8e <__aeabi_dsub+0x4be>
 8002a84:	2740      	movs	r7, #64	; 0x40
 8002a86:	1b3f      	subs	r7, r7, r4
 8002a88:	40b9      	lsls	r1, r7
 8002a8a:	4308      	orrs	r0, r1
 8002a8c:	4680      	mov	r8, r0
 8002a8e:	4644      	mov	r4, r8
 8002a90:	1e61      	subs	r1, r4, #1
 8002a92:	418c      	sbcs	r4, r1
 8002a94:	4322      	orrs	r2, r4
 8002a96:	e5e9      	b.n	800266c <__aeabi_dsub+0x9c>
 8002a98:	464c      	mov	r4, r9
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	001c      	movs	r4, r3
 8002a9e:	1e63      	subs	r3, r4, #1
 8002aa0:	419c      	sbcs	r4, r3
 8002aa2:	1b04      	subs	r4, r0, r4
 8002aa4:	42a0      	cmp	r0, r4
 8002aa6:	419b      	sbcs	r3, r3
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	1acb      	subs	r3, r1, r3
 8002aac:	4698      	mov	r8, r3
 8002aae:	465d      	mov	r5, fp
 8002ab0:	0016      	movs	r6, r2
 8002ab2:	e5e2      	b.n	800267a <__aeabi_dsub+0xaa>
 8002ab4:	464e      	mov	r6, r9
 8002ab6:	431e      	orrs	r6, r3
 8002ab8:	d100      	bne.n	8002abc <__aeabi_dsub+0x4ec>
 8002aba:	e0ae      	b.n	8002c1a <__aeabi_dsub+0x64a>
 8002abc:	1e66      	subs	r6, r4, #1
 8002abe:	2c01      	cmp	r4, #1
 8002ac0:	d100      	bne.n	8002ac4 <__aeabi_dsub+0x4f4>
 8002ac2:	e0fd      	b.n	8002cc0 <__aeabi_dsub+0x6f0>
 8002ac4:	4f7b      	ldr	r7, [pc, #492]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 8002ac6:	42bc      	cmp	r4, r7
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x4fc>
 8002aca:	e107      	b.n	8002cdc <__aeabi_dsub+0x70c>
 8002acc:	46b4      	mov	ip, r6
 8002ace:	e69b      	b.n	8002808 <__aeabi_dsub+0x238>
 8002ad0:	4664      	mov	r4, ip
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	1b12      	subs	r2, r2, r4
 8002ad6:	000c      	movs	r4, r1
 8002ad8:	4094      	lsls	r4, r2
 8002ada:	0007      	movs	r7, r0
 8002adc:	4090      	lsls	r0, r2
 8002ade:	46a0      	mov	r8, r4
 8002ae0:	4664      	mov	r4, ip
 8002ae2:	1e42      	subs	r2, r0, #1
 8002ae4:	4190      	sbcs	r0, r2
 8002ae6:	4662      	mov	r2, ip
 8002ae8:	40e7      	lsrs	r7, r4
 8002aea:	4644      	mov	r4, r8
 8002aec:	40d1      	lsrs	r1, r2
 8002aee:	433c      	orrs	r4, r7
 8002af0:	4304      	orrs	r4, r0
 8002af2:	185b      	adds	r3, r3, r1
 8002af4:	e6f3      	b.n	80028de <__aeabi_dsub+0x30e>
 8002af6:	4c6f      	ldr	r4, [pc, #444]	; (8002cb4 <__aeabi_dsub+0x6e4>)
 8002af8:	42a2      	cmp	r2, r4
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x52e>
 8002afc:	e0d5      	b.n	8002caa <__aeabi_dsub+0x6da>
 8002afe:	4448      	add	r0, r9
 8002b00:	185b      	adds	r3, r3, r1
 8002b02:	4548      	cmp	r0, r9
 8002b04:	4189      	sbcs	r1, r1
 8002b06:	4249      	negs	r1, r1
 8002b08:	185b      	adds	r3, r3, r1
 8002b0a:	07dc      	lsls	r4, r3, #31
 8002b0c:	0840      	lsrs	r0, r0, #1
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	4698      	mov	r8, r3
 8002b12:	0016      	movs	r6, r2
 8002b14:	4304      	orrs	r4, r0
 8002b16:	e6cc      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x54e>
 8002b1c:	e082      	b.n	8002c24 <__aeabi_dsub+0x654>
 8002b1e:	000a      	movs	r2, r1
 8002b20:	4302      	orrs	r2, r0
 8002b22:	d140      	bne.n	8002ba6 <__aeabi_dsub+0x5d6>
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	2500      	movs	r5, #0
 8002b28:	031b      	lsls	r3, r3, #12
 8002b2a:	e713      	b.n	8002954 <__aeabi_dsub+0x384>
 8002b2c:	074b      	lsls	r3, r1, #29
 8002b2e:	08c2      	lsrs	r2, r0, #3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	08cb      	lsrs	r3, r1, #3
 8002b36:	e6c5      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002b38:	464a      	mov	r2, r9
 8002b3a:	1a84      	subs	r4, r0, r2
 8002b3c:	42a0      	cmp	r0, r4
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	1acb      	subs	r3, r1, r3
 8002b42:	4252      	negs	r2, r2
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	4698      	mov	r8, r3
 8002b48:	465d      	mov	r5, fp
 8002b4a:	e59e      	b.n	800268a <__aeabi_dsub+0xba>
 8002b4c:	464a      	mov	r2, r9
 8002b4e:	0759      	lsls	r1, r3, #29
 8002b50:	08d2      	lsrs	r2, r2, #3
 8002b52:	430a      	orrs	r2, r1
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	e6f9      	b.n	800294c <__aeabi_dsub+0x37c>
 8002b58:	464a      	mov	r2, r9
 8002b5a:	1a14      	subs	r4, r2, r0
 8002b5c:	45a1      	cmp	r9, r4
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	1a5b      	subs	r3, r3, r1
 8002b62:	4252      	negs	r2, r2
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	4698      	mov	r8, r3
 8002b68:	2601      	movs	r6, #1
 8002b6a:	e586      	b.n	800267a <__aeabi_dsub+0xaa>
 8002b6c:	464a      	mov	r2, r9
 8002b6e:	0759      	lsls	r1, r3, #29
 8002b70:	08d2      	lsrs	r2, r2, #3
 8002b72:	430a      	orrs	r2, r1
 8002b74:	08db      	lsrs	r3, r3, #3
 8002b76:	e6a5      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002b78:	464c      	mov	r4, r9
 8002b7a:	4323      	orrs	r3, r4
 8002b7c:	001c      	movs	r4, r3
 8002b7e:	1e63      	subs	r3, r4, #1
 8002b80:	419c      	sbcs	r4, r3
 8002b82:	e65b      	b.n	800283c <__aeabi_dsub+0x26c>
 8002b84:	4665      	mov	r5, ip
 8002b86:	001e      	movs	r6, r3
 8002b88:	3d20      	subs	r5, #32
 8002b8a:	40ee      	lsrs	r6, r5
 8002b8c:	2c20      	cmp	r4, #32
 8002b8e:	d005      	beq.n	8002b9c <__aeabi_dsub+0x5cc>
 8002b90:	2540      	movs	r5, #64	; 0x40
 8002b92:	1b2d      	subs	r5, r5, r4
 8002b94:	40ab      	lsls	r3, r5
 8002b96:	464c      	mov	r4, r9
 8002b98:	431c      	orrs	r4, r3
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	4654      	mov	r4, sl
 8002b9e:	1e63      	subs	r3, r4, #1
 8002ba0:	419c      	sbcs	r4, r3
 8002ba2:	4334      	orrs	r4, r6
 8002ba4:	e77d      	b.n	8002aa2 <__aeabi_dsub+0x4d2>
 8002ba6:	074b      	lsls	r3, r1, #29
 8002ba8:	08c2      	lsrs	r2, r0, #3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	465d      	mov	r5, fp
 8002bae:	08cb      	lsrs	r3, r1, #3
 8002bb0:	e6cc      	b.n	800294c <__aeabi_dsub+0x37c>
 8002bb2:	000a      	movs	r2, r1
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x5ea>
 8002bb8:	e736      	b.n	8002a28 <__aeabi_dsub+0x458>
 8002bba:	074b      	lsls	r3, r1, #29
 8002bbc:	08c2      	lsrs	r2, r0, #3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	465d      	mov	r5, fp
 8002bc2:	08cb      	lsrs	r3, r1, #3
 8002bc4:	e681      	b.n	80028ca <__aeabi_dsub+0x2fa>
 8002bc6:	464a      	mov	r2, r9
 8002bc8:	1a84      	subs	r4, r0, r2
 8002bca:	42a0      	cmp	r0, r4
 8002bcc:	4192      	sbcs	r2, r2
 8002bce:	1acb      	subs	r3, r1, r3
 8002bd0:	4252      	negs	r2, r2
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	4698      	mov	r8, r3
 8002bd6:	465d      	mov	r5, fp
 8002bd8:	2601      	movs	r6, #1
 8002bda:	e54e      	b.n	800267a <__aeabi_dsub+0xaa>
 8002bdc:	074b      	lsls	r3, r1, #29
 8002bde:	08c2      	lsrs	r2, r0, #3
 8002be0:	431a      	orrs	r2, r3
 8002be2:	08cb      	lsrs	r3, r1, #3
 8002be4:	e6b2      	b.n	800294c <__aeabi_dsub+0x37c>
 8002be6:	464a      	mov	r2, r9
 8002be8:	1a14      	subs	r4, r2, r0
 8002bea:	45a1      	cmp	r9, r4
 8002bec:	4192      	sbcs	r2, r2
 8002bee:	1a5f      	subs	r7, r3, r1
 8002bf0:	4252      	negs	r2, r2
 8002bf2:	1aba      	subs	r2, r7, r2
 8002bf4:	4690      	mov	r8, r2
 8002bf6:	0212      	lsls	r2, r2, #8
 8002bf8:	d56b      	bpl.n	8002cd2 <__aeabi_dsub+0x702>
 8002bfa:	464a      	mov	r2, r9
 8002bfc:	1a84      	subs	r4, r0, r2
 8002bfe:	42a0      	cmp	r0, r4
 8002c00:	4192      	sbcs	r2, r2
 8002c02:	1acb      	subs	r3, r1, r3
 8002c04:	4252      	negs	r2, r2
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	4698      	mov	r8, r3
 8002c0a:	465d      	mov	r5, fp
 8002c0c:	e564      	b.n	80026d8 <__aeabi_dsub+0x108>
 8002c0e:	074b      	lsls	r3, r1, #29
 8002c10:	08c2      	lsrs	r2, r0, #3
 8002c12:	431a      	orrs	r2, r3
 8002c14:	465d      	mov	r5, fp
 8002c16:	08cb      	lsrs	r3, r1, #3
 8002c18:	e698      	b.n	800294c <__aeabi_dsub+0x37c>
 8002c1a:	074b      	lsls	r3, r1, #29
 8002c1c:	08c2      	lsrs	r2, r0, #3
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	08cb      	lsrs	r3, r1, #3
 8002c22:	e64f      	b.n	80028c4 <__aeabi_dsub+0x2f4>
 8002c24:	000a      	movs	r2, r1
 8002c26:	4302      	orrs	r2, r0
 8002c28:	d090      	beq.n	8002b4c <__aeabi_dsub+0x57c>
 8002c2a:	464a      	mov	r2, r9
 8002c2c:	075c      	lsls	r4, r3, #29
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	4314      	orrs	r4, r2
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	0312      	lsls	r2, r2, #12
 8002c38:	4213      	tst	r3, r2
 8002c3a:	d008      	beq.n	8002c4e <__aeabi_dsub+0x67e>
 8002c3c:	08ce      	lsrs	r6, r1, #3
 8002c3e:	4216      	tst	r6, r2
 8002c40:	d105      	bne.n	8002c4e <__aeabi_dsub+0x67e>
 8002c42:	08c0      	lsrs	r0, r0, #3
 8002c44:	0749      	lsls	r1, r1, #29
 8002c46:	4308      	orrs	r0, r1
 8002c48:	0004      	movs	r4, r0
 8002c4a:	465d      	mov	r5, fp
 8002c4c:	0033      	movs	r3, r6
 8002c4e:	0f61      	lsrs	r1, r4, #29
 8002c50:	00e2      	lsls	r2, r4, #3
 8002c52:	0749      	lsls	r1, r1, #29
 8002c54:	08d2      	lsrs	r2, r2, #3
 8002c56:	430a      	orrs	r2, r1
 8002c58:	e678      	b.n	800294c <__aeabi_dsub+0x37c>
 8002c5a:	074b      	lsls	r3, r1, #29
 8002c5c:	08c2      	lsrs	r2, r0, #3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	08cb      	lsrs	r3, r1, #3
 8002c62:	e632      	b.n	80028ca <__aeabi_dsub+0x2fa>
 8002c64:	4448      	add	r0, r9
 8002c66:	185b      	adds	r3, r3, r1
 8002c68:	4548      	cmp	r0, r9
 8002c6a:	4192      	sbcs	r2, r2
 8002c6c:	4698      	mov	r8, r3
 8002c6e:	4252      	negs	r2, r2
 8002c70:	4490      	add	r8, r2
 8002c72:	4643      	mov	r3, r8
 8002c74:	0004      	movs	r4, r0
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x6ac>
 8002c7a:	e61a      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <__aeabi_dsub+0x6e8>)
 8002c80:	2601      	movs	r6, #1
 8002c82:	401a      	ands	r2, r3
 8002c84:	4690      	mov	r8, r2
 8002c86:	e614      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002c88:	4666      	mov	r6, ip
 8002c8a:	001f      	movs	r7, r3
 8002c8c:	3e20      	subs	r6, #32
 8002c8e:	40f7      	lsrs	r7, r6
 8002c90:	2c20      	cmp	r4, #32
 8002c92:	d005      	beq.n	8002ca0 <__aeabi_dsub+0x6d0>
 8002c94:	2640      	movs	r6, #64	; 0x40
 8002c96:	1b36      	subs	r6, r6, r4
 8002c98:	40b3      	lsls	r3, r6
 8002c9a:	464c      	mov	r4, r9
 8002c9c:	431c      	orrs	r4, r3
 8002c9e:	46a2      	mov	sl, r4
 8002ca0:	4654      	mov	r4, sl
 8002ca2:	1e63      	subs	r3, r4, #1
 8002ca4:	419c      	sbcs	r4, r3
 8002ca6:	433c      	orrs	r4, r7
 8002ca8:	e5c8      	b.n	800283c <__aeabi_dsub+0x26c>
 8002caa:	0011      	movs	r1, r2
 8002cac:	2300      	movs	r3, #0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	e532      	b.n	8002718 <__aeabi_dsub+0x148>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	000007ff 	.word	0x000007ff
 8002cb8:	ff7fffff 	.word	0xff7fffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	464a      	mov	r2, r9
 8002cc2:	1814      	adds	r4, r2, r0
 8002cc4:	4284      	cmp	r4, r0
 8002cc6:	4192      	sbcs	r2, r2
 8002cc8:	185b      	adds	r3, r3, r1
 8002cca:	4698      	mov	r8, r3
 8002ccc:	4252      	negs	r2, r2
 8002cce:	4490      	add	r8, r2
 8002cd0:	e5e9      	b.n	80028a6 <__aeabi_dsub+0x2d6>
 8002cd2:	4642      	mov	r2, r8
 8002cd4:	4322      	orrs	r2, r4
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x70a>
 8002cd8:	e6a6      	b.n	8002a28 <__aeabi_dsub+0x458>
 8002cda:	e5ea      	b.n	80028b2 <__aeabi_dsub+0x2e2>
 8002cdc:	074b      	lsls	r3, r1, #29
 8002cde:	08c2      	lsrs	r2, r0, #3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	08cb      	lsrs	r3, r1, #3
 8002ce4:	e632      	b.n	800294c <__aeabi_dsub+0x37c>
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4901      	ldr	r1, [pc, #4]	; (8002cf0 <__aeabi_dsub+0x720>)
 8002cea:	0013      	movs	r3, r2
 8002cec:	e514      	b.n	8002718 <__aeabi_dsub+0x148>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	000007ff 	.word	0x000007ff

08002cf4 <__aeabi_dcmpun>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	0005      	movs	r5, r0
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <__aeabi_dcmpun+0x38>)
 8002cfa:	030c      	lsls	r4, r1, #12
 8002cfc:	0016      	movs	r6, r2
 8002cfe:	0049      	lsls	r1, r1, #1
 8002d00:	031a      	lsls	r2, r3, #12
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	0b24      	lsrs	r4, r4, #12
 8002d06:	0d49      	lsrs	r1, r1, #21
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	0d5b      	lsrs	r3, r3, #21
 8002d0c:	4281      	cmp	r1, r0
 8002d0e:	d008      	beq.n	8002d22 <__aeabi_dcmpun+0x2e>
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <__aeabi_dcmpun+0x38>)
 8002d12:	2000      	movs	r0, #0
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d103      	bne.n	8002d20 <__aeabi_dcmpun+0x2c>
 8002d18:	4332      	orrs	r2, r6
 8002d1a:	0010      	movs	r0, r2
 8002d1c:	1e42      	subs	r2, r0, #1
 8002d1e:	4190      	sbcs	r0, r2
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	2001      	movs	r0, #1
 8002d24:	432c      	orrs	r4, r5
 8002d26:	d1fb      	bne.n	8002d20 <__aeabi_dcmpun+0x2c>
 8002d28:	e7f2      	b.n	8002d10 <__aeabi_dcmpun+0x1c>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	000007ff 	.word	0x000007ff

08002d30 <__aeabi_d2iz>:
 8002d30:	000a      	movs	r2, r1
 8002d32:	b530      	push	{r4, r5, lr}
 8002d34:	4c13      	ldr	r4, [pc, #76]	; (8002d84 <__aeabi_d2iz+0x54>)
 8002d36:	0053      	lsls	r3, r2, #1
 8002d38:	0309      	lsls	r1, r1, #12
 8002d3a:	0005      	movs	r5, r0
 8002d3c:	0b09      	lsrs	r1, r1, #12
 8002d3e:	2000      	movs	r0, #0
 8002d40:	0d5b      	lsrs	r3, r3, #21
 8002d42:	0fd2      	lsrs	r2, r2, #31
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	dd04      	ble.n	8002d52 <__aeabi_d2iz+0x22>
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <__aeabi_d2iz+0x58>)
 8002d4a:	4283      	cmp	r3, r0
 8002d4c:	dd02      	ble.n	8002d54 <__aeabi_d2iz+0x24>
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <__aeabi_d2iz+0x5c>)
 8002d50:	18d0      	adds	r0, r2, r3
 8002d52:	bd30      	pop	{r4, r5, pc}
 8002d54:	2080      	movs	r0, #128	; 0x80
 8002d56:	0340      	lsls	r0, r0, #13
 8002d58:	4301      	orrs	r1, r0
 8002d5a:	480d      	ldr	r0, [pc, #52]	; (8002d90 <__aeabi_d2iz+0x60>)
 8002d5c:	1ac0      	subs	r0, r0, r3
 8002d5e:	281f      	cmp	r0, #31
 8002d60:	dd08      	ble.n	8002d74 <__aeabi_d2iz+0x44>
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <__aeabi_d2iz+0x64>)
 8002d64:	1ac3      	subs	r3, r0, r3
 8002d66:	40d9      	lsrs	r1, r3
 8002d68:	000b      	movs	r3, r1
 8002d6a:	4258      	negs	r0, r3
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d1f0      	bne.n	8002d52 <__aeabi_d2iz+0x22>
 8002d70:	0018      	movs	r0, r3
 8002d72:	e7ee      	b.n	8002d52 <__aeabi_d2iz+0x22>
 8002d74:	4c08      	ldr	r4, [pc, #32]	; (8002d98 <__aeabi_d2iz+0x68>)
 8002d76:	40c5      	lsrs	r5, r0
 8002d78:	46a4      	mov	ip, r4
 8002d7a:	4463      	add	r3, ip
 8002d7c:	4099      	lsls	r1, r3
 8002d7e:	000b      	movs	r3, r1
 8002d80:	432b      	orrs	r3, r5
 8002d82:	e7f2      	b.n	8002d6a <__aeabi_d2iz+0x3a>
 8002d84:	000003fe 	.word	0x000003fe
 8002d88:	0000041d 	.word	0x0000041d
 8002d8c:	7fffffff 	.word	0x7fffffff
 8002d90:	00000433 	.word	0x00000433
 8002d94:	00000413 	.word	0x00000413
 8002d98:	fffffbed 	.word	0xfffffbed

08002d9c <__aeabi_i2d>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d016      	beq.n	8002dd0 <__aeabi_i2d+0x34>
 8002da2:	17c3      	asrs	r3, r0, #31
 8002da4:	18c5      	adds	r5, r0, r3
 8002da6:	405d      	eors	r5, r3
 8002da8:	0fc4      	lsrs	r4, r0, #31
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f956 	bl	800305c <__clzsi2>
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <__aeabi_i2d+0x5c>)
 8002db2:	1a12      	subs	r2, r2, r0
 8002db4:	280a      	cmp	r0, #10
 8002db6:	dc16      	bgt.n	8002de6 <__aeabi_i2d+0x4a>
 8002db8:	0003      	movs	r3, r0
 8002dba:	002e      	movs	r6, r5
 8002dbc:	3315      	adds	r3, #21
 8002dbe:	409e      	lsls	r6, r3
 8002dc0:	230b      	movs	r3, #11
 8002dc2:	1a18      	subs	r0, r3, r0
 8002dc4:	40c5      	lsrs	r5, r0
 8002dc6:	0553      	lsls	r3, r2, #21
 8002dc8:	032d      	lsls	r5, r5, #12
 8002dca:	0b2d      	lsrs	r5, r5, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e003      	b.n	8002dd8 <__aeabi_i2d+0x3c>
 8002dd0:	2400      	movs	r4, #0
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2500      	movs	r5, #0
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	432b      	orrs	r3, r5
 8002ddc:	07e4      	lsls	r4, r4, #31
 8002dde:	4323      	orrs	r3, r4
 8002de0:	0030      	movs	r0, r6
 8002de2:	0019      	movs	r1, r3
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	380b      	subs	r0, #11
 8002de8:	4085      	lsls	r5, r0
 8002dea:	0553      	lsls	r3, r2, #21
 8002dec:	032d      	lsls	r5, r5, #12
 8002dee:	2600      	movs	r6, #0
 8002df0:	0b2d      	lsrs	r5, r5, #12
 8002df2:	0d5b      	lsrs	r3, r3, #21
 8002df4:	e7f0      	b.n	8002dd8 <__aeabi_i2d+0x3c>
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	0000041e 	.word	0x0000041e

08002dfc <__aeabi_ui2d>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	1e04      	subs	r4, r0, #0
 8002e00:	d010      	beq.n	8002e24 <__aeabi_ui2d+0x28>
 8002e02:	f000 f92b 	bl	800305c <__clzsi2>
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <__aeabi_ui2d+0x48>)
 8002e08:	1a1b      	subs	r3, r3, r0
 8002e0a:	280a      	cmp	r0, #10
 8002e0c:	dc11      	bgt.n	8002e32 <__aeabi_ui2d+0x36>
 8002e0e:	220b      	movs	r2, #11
 8002e10:	0021      	movs	r1, r4
 8002e12:	1a12      	subs	r2, r2, r0
 8002e14:	40d1      	lsrs	r1, r2
 8002e16:	3015      	adds	r0, #21
 8002e18:	030a      	lsls	r2, r1, #12
 8002e1a:	055b      	lsls	r3, r3, #21
 8002e1c:	4084      	lsls	r4, r0
 8002e1e:	0b12      	lsrs	r2, r2, #12
 8002e20:	0d5b      	lsrs	r3, r3, #21
 8002e22:	e001      	b.n	8002e28 <__aeabi_ui2d+0x2c>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2200      	movs	r2, #0
 8002e28:	051b      	lsls	r3, r3, #20
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	0020      	movs	r0, r4
 8002e2e:	0019      	movs	r1, r3
 8002e30:	bd10      	pop	{r4, pc}
 8002e32:	0022      	movs	r2, r4
 8002e34:	380b      	subs	r0, #11
 8002e36:	4082      	lsls	r2, r0
 8002e38:	055b      	lsls	r3, r3, #21
 8002e3a:	0312      	lsls	r2, r2, #12
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	0b12      	lsrs	r2, r2, #12
 8002e40:	0d5b      	lsrs	r3, r3, #21
 8002e42:	e7f1      	b.n	8002e28 <__aeabi_ui2d+0x2c>
 8002e44:	0000041e 	.word	0x0000041e

08002e48 <__aeabi_f2d>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	0043      	lsls	r3, r0, #1
 8002e4c:	0246      	lsls	r6, r0, #9
 8002e4e:	0fc4      	lsrs	r4, r0, #31
 8002e50:	20fe      	movs	r0, #254	; 0xfe
 8002e52:	0e1b      	lsrs	r3, r3, #24
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	0a75      	lsrs	r5, r6, #9
 8002e58:	4208      	tst	r0, r1
 8002e5a:	d00c      	beq.n	8002e76 <__aeabi_f2d+0x2e>
 8002e5c:	22e0      	movs	r2, #224	; 0xe0
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4694      	mov	ip, r2
 8002e62:	076d      	lsls	r5, r5, #29
 8002e64:	0b36      	lsrs	r6, r6, #12
 8002e66:	4463      	add	r3, ip
 8002e68:	051b      	lsls	r3, r3, #20
 8002e6a:	4333      	orrs	r3, r6
 8002e6c:	07e4      	lsls	r4, r4, #31
 8002e6e:	4323      	orrs	r3, r4
 8002e70:	0028      	movs	r0, r5
 8002e72:	0019      	movs	r1, r3
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <__aeabi_f2d+0x5c>
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d01b      	beq.n	8002eb6 <__aeabi_f2d+0x6e>
 8002e7e:	0028      	movs	r0, r5
 8002e80:	f000 f8ec 	bl	800305c <__clzsi2>
 8002e84:	280a      	cmp	r0, #10
 8002e86:	dc1c      	bgt.n	8002ec2 <__aeabi_f2d+0x7a>
 8002e88:	230b      	movs	r3, #11
 8002e8a:	002a      	movs	r2, r5
 8002e8c:	1a1b      	subs	r3, r3, r0
 8002e8e:	40da      	lsrs	r2, r3
 8002e90:	0003      	movs	r3, r0
 8002e92:	3315      	adds	r3, #21
 8002e94:	409d      	lsls	r5, r3
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <__aeabi_f2d+0x88>)
 8002e98:	0312      	lsls	r2, r2, #12
 8002e9a:	1a1b      	subs	r3, r3, r0
 8002e9c:	055b      	lsls	r3, r3, #21
 8002e9e:	0b16      	lsrs	r6, r2, #12
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	e7e1      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002ea4:	2d00      	cmp	r5, #0
 8002ea6:	d009      	beq.n	8002ebc <__aeabi_f2d+0x74>
 8002ea8:	0b32      	lsrs	r2, r6, #12
 8002eaa:	2680      	movs	r6, #128	; 0x80
 8002eac:	0336      	lsls	r6, r6, #12
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <__aeabi_f2d+0x8c>)
 8002eb0:	076d      	lsls	r5, r5, #29
 8002eb2:	4316      	orrs	r6, r2
 8002eb4:	e7d8      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2600      	movs	r6, #0
 8002eba:	e7d5      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002ebc:	2600      	movs	r6, #0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <__aeabi_f2d+0x8c>)
 8002ec0:	e7d2      	b.n	8002e68 <__aeabi_f2d+0x20>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	002a      	movs	r2, r5
 8002ec6:	3b0b      	subs	r3, #11
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	2500      	movs	r5, #0
 8002ecc:	e7e3      	b.n	8002e96 <__aeabi_f2d+0x4e>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	00000389 	.word	0x00000389
 8002ed4:	000007ff 	.word	0x000007ff

08002ed8 <__aeabi_d2f>:
 8002ed8:	0002      	movs	r2, r0
 8002eda:	004b      	lsls	r3, r1, #1
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	0308      	lsls	r0, r1, #12
 8002ee0:	0d5b      	lsrs	r3, r3, #21
 8002ee2:	4e3d      	ldr	r6, [pc, #244]	; (8002fd8 <__aeabi_d2f+0x100>)
 8002ee4:	0fcc      	lsrs	r4, r1, #31
 8002ee6:	0a40      	lsrs	r0, r0, #9
 8002ee8:	0f51      	lsrs	r1, r2, #29
 8002eea:	1c5f      	adds	r7, r3, #1
 8002eec:	4308      	orrs	r0, r1
 8002eee:	00d5      	lsls	r5, r2, #3
 8002ef0:	4237      	tst	r7, r6
 8002ef2:	d00a      	beq.n	8002f0a <__aeabi_d2f+0x32>
 8002ef4:	4939      	ldr	r1, [pc, #228]	; (8002fdc <__aeabi_d2f+0x104>)
 8002ef6:	185e      	adds	r6, r3, r1
 8002ef8:	2efe      	cmp	r6, #254	; 0xfe
 8002efa:	dd16      	ble.n	8002f2a <__aeabi_d2f+0x52>
 8002efc:	23ff      	movs	r3, #255	; 0xff
 8002efe:	2100      	movs	r1, #0
 8002f00:	05db      	lsls	r3, r3, #23
 8002f02:	430b      	orrs	r3, r1
 8002f04:	07e0      	lsls	r0, r4, #31
 8002f06:	4318      	orrs	r0, r3
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <__aeabi_d2f+0x44>
 8002f0e:	4328      	orrs	r0, r5
 8002f10:	d027      	beq.n	8002f62 <__aeabi_d2f+0x8a>
 8002f12:	2105      	movs	r1, #5
 8002f14:	0189      	lsls	r1, r1, #6
 8002f16:	0a49      	lsrs	r1, r1, #9
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e7f1      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f1c:	4305      	orrs	r5, r0
 8002f1e:	d0ed      	beq.n	8002efc <__aeabi_d2f+0x24>
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	03c9      	lsls	r1, r1, #15
 8002f24:	23ff      	movs	r3, #255	; 0xff
 8002f26:	4301      	orrs	r1, r0
 8002f28:	e7ea      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	dd1c      	ble.n	8002f68 <__aeabi_d2f+0x90>
 8002f2e:	0192      	lsls	r2, r2, #6
 8002f30:	0011      	movs	r1, r2
 8002f32:	1e4a      	subs	r2, r1, #1
 8002f34:	4191      	sbcs	r1, r2
 8002f36:	00c0      	lsls	r0, r0, #3
 8002f38:	0f6d      	lsrs	r5, r5, #29
 8002f3a:	4301      	orrs	r1, r0
 8002f3c:	4329      	orrs	r1, r5
 8002f3e:	074b      	lsls	r3, r1, #29
 8002f40:	d048      	beq.n	8002fd4 <__aeabi_d2f+0xfc>
 8002f42:	230f      	movs	r3, #15
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d000      	beq.n	8002f4c <__aeabi_d2f+0x74>
 8002f4a:	3104      	adds	r1, #4
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	04db      	lsls	r3, r3, #19
 8002f50:	400b      	ands	r3, r1
 8002f52:	d03f      	beq.n	8002fd4 <__aeabi_d2f+0xfc>
 8002f54:	1c72      	adds	r2, r6, #1
 8002f56:	2efe      	cmp	r6, #254	; 0xfe
 8002f58:	d0d0      	beq.n	8002efc <__aeabi_d2f+0x24>
 8002f5a:	0189      	lsls	r1, r1, #6
 8002f5c:	0a49      	lsrs	r1, r1, #9
 8002f5e:	b2d3      	uxtb	r3, r2
 8002f60:	e7ce      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	e7cb      	b.n	8002f00 <__aeabi_d2f+0x28>
 8002f68:	0032      	movs	r2, r6
 8002f6a:	3217      	adds	r2, #23
 8002f6c:	db22      	blt.n	8002fb4 <__aeabi_d2f+0xdc>
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	221e      	movs	r2, #30
 8002f72:	0409      	lsls	r1, r1, #16
 8002f74:	4308      	orrs	r0, r1
 8002f76:	1b92      	subs	r2, r2, r6
 8002f78:	2a1f      	cmp	r2, #31
 8002f7a:	dd1d      	ble.n	8002fb8 <__aeabi_d2f+0xe0>
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4249      	negs	r1, r1
 8002f80:	1b8e      	subs	r6, r1, r6
 8002f82:	0001      	movs	r1, r0
 8002f84:	40f1      	lsrs	r1, r6
 8002f86:	000e      	movs	r6, r1
 8002f88:	2a20      	cmp	r2, #32
 8002f8a:	d004      	beq.n	8002f96 <__aeabi_d2f+0xbe>
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <__aeabi_d2f+0x108>)
 8002f8e:	4694      	mov	ip, r2
 8002f90:	4463      	add	r3, ip
 8002f92:	4098      	lsls	r0, r3
 8002f94:	4305      	orrs	r5, r0
 8002f96:	0029      	movs	r1, r5
 8002f98:	1e4d      	subs	r5, r1, #1
 8002f9a:	41a9      	sbcs	r1, r5
 8002f9c:	4331      	orrs	r1, r6
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	074b      	lsls	r3, r1, #29
 8002fa2:	d1ce      	bne.n	8002f42 <__aeabi_d2f+0x6a>
 8002fa4:	2080      	movs	r0, #128	; 0x80
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	04c0      	lsls	r0, r0, #19
 8002faa:	2201      	movs	r2, #1
 8002fac:	4003      	ands	r3, r0
 8002fae:	4201      	tst	r1, r0
 8002fb0:	d1d3      	bne.n	8002f5a <__aeabi_d2f+0x82>
 8002fb2:	e7af      	b.n	8002f14 <__aeabi_d2f+0x3c>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e7ac      	b.n	8002f12 <__aeabi_d2f+0x3a>
 8002fb8:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <__aeabi_d2f+0x10c>)
 8002fba:	468c      	mov	ip, r1
 8002fbc:	0029      	movs	r1, r5
 8002fbe:	4463      	add	r3, ip
 8002fc0:	40d1      	lsrs	r1, r2
 8002fc2:	409d      	lsls	r5, r3
 8002fc4:	000a      	movs	r2, r1
 8002fc6:	0029      	movs	r1, r5
 8002fc8:	4098      	lsls	r0, r3
 8002fca:	1e4d      	subs	r5, r1, #1
 8002fcc:	41a9      	sbcs	r1, r5
 8002fce:	4301      	orrs	r1, r0
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	e7e4      	b.n	8002f9e <__aeabi_d2f+0xc6>
 8002fd4:	0033      	movs	r3, r6
 8002fd6:	e79d      	b.n	8002f14 <__aeabi_d2f+0x3c>
 8002fd8:	000007fe 	.word	0x000007fe
 8002fdc:	fffffc80 	.word	0xfffffc80
 8002fe0:	fffffca2 	.word	0xfffffca2
 8002fe4:	fffffc82 	.word	0xfffffc82

08002fe8 <__aeabi_cfrcmple>:
 8002fe8:	4684      	mov	ip, r0
 8002fea:	1c08      	adds	r0, r1, #0
 8002fec:	4661      	mov	r1, ip
 8002fee:	e7ff      	b.n	8002ff0 <__aeabi_cfcmpeq>

08002ff0 <__aeabi_cfcmpeq>:
 8002ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ff2:	f000 f9ab 	bl	800334c <__lesf2>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d401      	bmi.n	8002ffe <__aeabi_cfcmpeq+0xe>
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	42c8      	cmn	r0, r1
 8002ffe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003000 <__aeabi_fcmpeq>:
 8003000:	b510      	push	{r4, lr}
 8003002:	f000 f92f 	bl	8003264 <__eqsf2>
 8003006:	4240      	negs	r0, r0
 8003008:	3001      	adds	r0, #1
 800300a:	bd10      	pop	{r4, pc}

0800300c <__aeabi_fcmplt>:
 800300c:	b510      	push	{r4, lr}
 800300e:	f000 f99d 	bl	800334c <__lesf2>
 8003012:	2800      	cmp	r0, #0
 8003014:	db01      	blt.n	800301a <__aeabi_fcmplt+0xe>
 8003016:	2000      	movs	r0, #0
 8003018:	bd10      	pop	{r4, pc}
 800301a:	2001      	movs	r0, #1
 800301c:	bd10      	pop	{r4, pc}
 800301e:	46c0      	nop			; (mov r8, r8)

08003020 <__aeabi_fcmple>:
 8003020:	b510      	push	{r4, lr}
 8003022:	f000 f993 	bl	800334c <__lesf2>
 8003026:	2800      	cmp	r0, #0
 8003028:	dd01      	ble.n	800302e <__aeabi_fcmple+0xe>
 800302a:	2000      	movs	r0, #0
 800302c:	bd10      	pop	{r4, pc}
 800302e:	2001      	movs	r0, #1
 8003030:	bd10      	pop	{r4, pc}
 8003032:	46c0      	nop			; (mov r8, r8)

08003034 <__aeabi_fcmpgt>:
 8003034:	b510      	push	{r4, lr}
 8003036:	f000 f93d 	bl	80032b4 <__gesf2>
 800303a:	2800      	cmp	r0, #0
 800303c:	dc01      	bgt.n	8003042 <__aeabi_fcmpgt+0xe>
 800303e:	2000      	movs	r0, #0
 8003040:	bd10      	pop	{r4, pc}
 8003042:	2001      	movs	r0, #1
 8003044:	bd10      	pop	{r4, pc}
 8003046:	46c0      	nop			; (mov r8, r8)

08003048 <__aeabi_fcmpge>:
 8003048:	b510      	push	{r4, lr}
 800304a:	f000 f933 	bl	80032b4 <__gesf2>
 800304e:	2800      	cmp	r0, #0
 8003050:	da01      	bge.n	8003056 <__aeabi_fcmpge+0xe>
 8003052:	2000      	movs	r0, #0
 8003054:	bd10      	pop	{r4, pc}
 8003056:	2001      	movs	r0, #1
 8003058:	bd10      	pop	{r4, pc}
 800305a:	46c0      	nop			; (mov r8, r8)

0800305c <__clzsi2>:
 800305c:	211c      	movs	r1, #28
 800305e:	2301      	movs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	4298      	cmp	r0, r3
 8003064:	d301      	bcc.n	800306a <__clzsi2+0xe>
 8003066:	0c00      	lsrs	r0, r0, #16
 8003068:	3910      	subs	r1, #16
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	4298      	cmp	r0, r3
 800306e:	d301      	bcc.n	8003074 <__clzsi2+0x18>
 8003070:	0a00      	lsrs	r0, r0, #8
 8003072:	3908      	subs	r1, #8
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	4298      	cmp	r0, r3
 8003078:	d301      	bcc.n	800307e <__clzsi2+0x22>
 800307a:	0900      	lsrs	r0, r0, #4
 800307c:	3904      	subs	r1, #4
 800307e:	a202      	add	r2, pc, #8	; (adr r2, 8003088 <__clzsi2+0x2c>)
 8003080:	5c10      	ldrb	r0, [r2, r0]
 8003082:	1840      	adds	r0, r0, r1
 8003084:	4770      	bx	lr
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	02020304 	.word	0x02020304
 800308c:	01010101 	.word	0x01010101
	...

08003098 <__divdi3>:
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	4657      	mov	r7, sl
 800309c:	464e      	mov	r6, r9
 800309e:	4645      	mov	r5, r8
 80030a0:	46de      	mov	lr, fp
 80030a2:	b5e0      	push	{r5, r6, r7, lr}
 80030a4:	000f      	movs	r7, r1
 80030a6:	0019      	movs	r1, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	0006      	movs	r6, r0
 80030ac:	4698      	mov	r8, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	b083      	sub	sp, #12
 80030b2:	2f00      	cmp	r7, #0
 80030b4:	da07      	bge.n	80030c6 <__divdi3+0x2e>
 80030b6:	0033      	movs	r3, r6
 80030b8:	003c      	movs	r4, r7
 80030ba:	2700      	movs	r7, #0
 80030bc:	425e      	negs	r6, r3
 80030be:	41a7      	sbcs	r7, r4
 80030c0:	2301      	movs	r3, #1
 80030c2:	425b      	negs	r3, r3
 80030c4:	4698      	mov	r8, r3
 80030c6:	2900      	cmp	r1, #0
 80030c8:	da07      	bge.n	80030da <__divdi3+0x42>
 80030ca:	4643      	mov	r3, r8
 80030cc:	43db      	mvns	r3, r3
 80030ce:	000c      	movs	r4, r1
 80030d0:	4698      	mov	r8, r3
 80030d2:	0003      	movs	r3, r0
 80030d4:	2100      	movs	r1, #0
 80030d6:	4258      	negs	r0, r3
 80030d8:	41a1      	sbcs	r1, r4
 80030da:	0034      	movs	r4, r6
 80030dc:	003d      	movs	r5, r7
 80030de:	4682      	mov	sl, r0
 80030e0:	4689      	mov	r9, r1
 80030e2:	42b9      	cmp	r1, r7
 80030e4:	d86a      	bhi.n	80031bc <__divdi3+0x124>
 80030e6:	d067      	beq.n	80031b8 <__divdi3+0x120>
 80030e8:	4649      	mov	r1, r9
 80030ea:	4650      	mov	r0, sl
 80030ec:	f000 f978 	bl	80033e0 <__clzdi2>
 80030f0:	4683      	mov	fp, r0
 80030f2:	0039      	movs	r1, r7
 80030f4:	0030      	movs	r0, r6
 80030f6:	f000 f973 	bl	80033e0 <__clzdi2>
 80030fa:	465b      	mov	r3, fp
 80030fc:	1a1b      	subs	r3, r3, r0
 80030fe:	469c      	mov	ip, r3
 8003100:	3b20      	subs	r3, #32
 8003102:	469b      	mov	fp, r3
 8003104:	d46b      	bmi.n	80031de <__divdi3+0x146>
 8003106:	4658      	mov	r0, fp
 8003108:	4651      	mov	r1, sl
 800310a:	4081      	lsls	r1, r0
 800310c:	4660      	mov	r0, ip
 800310e:	000b      	movs	r3, r1
 8003110:	4651      	mov	r1, sl
 8003112:	4081      	lsls	r1, r0
 8003114:	000a      	movs	r2, r1
 8003116:	42bb      	cmp	r3, r7
 8003118:	d900      	bls.n	800311c <__divdi3+0x84>
 800311a:	e072      	b.n	8003202 <__divdi3+0x16a>
 800311c:	42bb      	cmp	r3, r7
 800311e:	d100      	bne.n	8003122 <__divdi3+0x8a>
 8003120:	e079      	b.n	8003216 <__divdi3+0x17e>
 8003122:	0034      	movs	r4, r6
 8003124:	003d      	movs	r5, r7
 8003126:	4659      	mov	r1, fp
 8003128:	1aa4      	subs	r4, r4, r2
 800312a:	419d      	sbcs	r5, r3
 800312c:	2900      	cmp	r1, #0
 800312e:	da00      	bge.n	8003132 <__divdi3+0x9a>
 8003130:	e074      	b.n	800321c <__divdi3+0x184>
 8003132:	2100      	movs	r1, #0
 8003134:	2000      	movs	r0, #0
 8003136:	2601      	movs	r6, #1
 8003138:	9000      	str	r0, [sp, #0]
 800313a:	9101      	str	r1, [sp, #4]
 800313c:	4659      	mov	r1, fp
 800313e:	408e      	lsls	r6, r1
 8003140:	9601      	str	r6, [sp, #4]
 8003142:	4661      	mov	r1, ip
 8003144:	2601      	movs	r6, #1
 8003146:	408e      	lsls	r6, r1
 8003148:	4661      	mov	r1, ip
 800314a:	9600      	str	r6, [sp, #0]
 800314c:	2900      	cmp	r1, #0
 800314e:	d05f      	beq.n	8003210 <__divdi3+0x178>
 8003150:	07d9      	lsls	r1, r3, #31
 8003152:	0856      	lsrs	r6, r2, #1
 8003154:	430e      	orrs	r6, r1
 8003156:	085f      	lsrs	r7, r3, #1
 8003158:	4661      	mov	r1, ip
 800315a:	2201      	movs	r2, #1
 800315c:	2300      	movs	r3, #0
 800315e:	e00c      	b.n	800317a <__divdi3+0xe2>
 8003160:	42af      	cmp	r7, r5
 8003162:	d101      	bne.n	8003168 <__divdi3+0xd0>
 8003164:	42a6      	cmp	r6, r4
 8003166:	d80a      	bhi.n	800317e <__divdi3+0xe6>
 8003168:	1ba4      	subs	r4, r4, r6
 800316a:	41bd      	sbcs	r5, r7
 800316c:	1924      	adds	r4, r4, r4
 800316e:	416d      	adcs	r5, r5
 8003170:	3901      	subs	r1, #1
 8003172:	18a4      	adds	r4, r4, r2
 8003174:	415d      	adcs	r5, r3
 8003176:	2900      	cmp	r1, #0
 8003178:	d006      	beq.n	8003188 <__divdi3+0xf0>
 800317a:	42af      	cmp	r7, r5
 800317c:	d9f0      	bls.n	8003160 <__divdi3+0xc8>
 800317e:	3901      	subs	r1, #1
 8003180:	1924      	adds	r4, r4, r4
 8003182:	416d      	adcs	r5, r5
 8003184:	2900      	cmp	r1, #0
 8003186:	d1f8      	bne.n	800317a <__divdi3+0xe2>
 8003188:	9800      	ldr	r0, [sp, #0]
 800318a:	9901      	ldr	r1, [sp, #4]
 800318c:	465b      	mov	r3, fp
 800318e:	1900      	adds	r0, r0, r4
 8003190:	4169      	adcs	r1, r5
 8003192:	2b00      	cmp	r3, #0
 8003194:	db4d      	blt.n	8003232 <__divdi3+0x19a>
 8003196:	002e      	movs	r6, r5
 8003198:	002c      	movs	r4, r5
 800319a:	40de      	lsrs	r6, r3
 800319c:	4663      	mov	r3, ip
 800319e:	40dc      	lsrs	r4, r3
 80031a0:	465b      	mov	r3, fp
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db55      	blt.n	8003252 <__divdi3+0x1ba>
 80031a6:	0034      	movs	r4, r6
 80031a8:	409c      	lsls	r4, r3
 80031aa:	0023      	movs	r3, r4
 80031ac:	4664      	mov	r4, ip
 80031ae:	40a6      	lsls	r6, r4
 80031b0:	0032      	movs	r2, r6
 80031b2:	1a80      	subs	r0, r0, r2
 80031b4:	4199      	sbcs	r1, r3
 80031b6:	e003      	b.n	80031c0 <__divdi3+0x128>
 80031b8:	42b0      	cmp	r0, r6
 80031ba:	d995      	bls.n	80030e8 <__divdi3+0x50>
 80031bc:	2000      	movs	r0, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	4643      	mov	r3, r8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <__divdi3+0x138>
 80031c6:	0003      	movs	r3, r0
 80031c8:	000c      	movs	r4, r1
 80031ca:	2100      	movs	r1, #0
 80031cc:	4258      	negs	r0, r3
 80031ce:	41a1      	sbcs	r1, r4
 80031d0:	b003      	add	sp, #12
 80031d2:	bcf0      	pop	{r4, r5, r6, r7}
 80031d4:	46bb      	mov	fp, r7
 80031d6:	46b2      	mov	sl, r6
 80031d8:	46a9      	mov	r9, r5
 80031da:	46a0      	mov	r8, r4
 80031dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031de:	4662      	mov	r2, ip
 80031e0:	4648      	mov	r0, r9
 80031e2:	2320      	movs	r3, #32
 80031e4:	4651      	mov	r1, sl
 80031e6:	4090      	lsls	r0, r2
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	40d9      	lsrs	r1, r3
 80031ec:	0003      	movs	r3, r0
 80031ee:	9100      	str	r1, [sp, #0]
 80031f0:	9900      	ldr	r1, [sp, #0]
 80031f2:	4660      	mov	r0, ip
 80031f4:	430b      	orrs	r3, r1
 80031f6:	4651      	mov	r1, sl
 80031f8:	4081      	lsls	r1, r0
 80031fa:	000a      	movs	r2, r1
 80031fc:	42bb      	cmp	r3, r7
 80031fe:	d800      	bhi.n	8003202 <__divdi3+0x16a>
 8003200:	e78c      	b.n	800311c <__divdi3+0x84>
 8003202:	2100      	movs	r1, #0
 8003204:	2000      	movs	r0, #0
 8003206:	9000      	str	r0, [sp, #0]
 8003208:	9101      	str	r1, [sp, #4]
 800320a:	4661      	mov	r1, ip
 800320c:	2900      	cmp	r1, #0
 800320e:	d19f      	bne.n	8003150 <__divdi3+0xb8>
 8003210:	9800      	ldr	r0, [sp, #0]
 8003212:	9901      	ldr	r1, [sp, #4]
 8003214:	e7d4      	b.n	80031c0 <__divdi3+0x128>
 8003216:	42b1      	cmp	r1, r6
 8003218:	d8f3      	bhi.n	8003202 <__divdi3+0x16a>
 800321a:	e782      	b.n	8003122 <__divdi3+0x8a>
 800321c:	4661      	mov	r1, ip
 800321e:	2620      	movs	r6, #32
 8003220:	2701      	movs	r7, #1
 8003222:	1a76      	subs	r6, r6, r1
 8003224:	2000      	movs	r0, #0
 8003226:	2100      	movs	r1, #0
 8003228:	40f7      	lsrs	r7, r6
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	9101      	str	r1, [sp, #4]
 800322e:	9701      	str	r7, [sp, #4]
 8003230:	e787      	b.n	8003142 <__divdi3+0xaa>
 8003232:	4662      	mov	r2, ip
 8003234:	2320      	movs	r3, #32
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	002a      	movs	r2, r5
 800323a:	409a      	lsls	r2, r3
 800323c:	0026      	movs	r6, r4
 800323e:	0013      	movs	r3, r2
 8003240:	4662      	mov	r2, ip
 8003242:	40d6      	lsrs	r6, r2
 8003244:	002c      	movs	r4, r5
 8003246:	431e      	orrs	r6, r3
 8003248:	4663      	mov	r3, ip
 800324a:	40dc      	lsrs	r4, r3
 800324c:	465b      	mov	r3, fp
 800324e:	2b00      	cmp	r3, #0
 8003250:	daa9      	bge.n	80031a6 <__divdi3+0x10e>
 8003252:	4662      	mov	r2, ip
 8003254:	2320      	movs	r3, #32
 8003256:	0035      	movs	r5, r6
 8003258:	4094      	lsls	r4, r2
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	40dd      	lsrs	r5, r3
 800325e:	0023      	movs	r3, r4
 8003260:	432b      	orrs	r3, r5
 8003262:	e7a3      	b.n	80031ac <__divdi3+0x114>

08003264 <__eqsf2>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	0042      	lsls	r2, r0, #1
 8003268:	024e      	lsls	r6, r1, #9
 800326a:	004c      	lsls	r4, r1, #1
 800326c:	0245      	lsls	r5, r0, #9
 800326e:	0a6d      	lsrs	r5, r5, #9
 8003270:	0e12      	lsrs	r2, r2, #24
 8003272:	0fc3      	lsrs	r3, r0, #31
 8003274:	0a76      	lsrs	r6, r6, #9
 8003276:	0e24      	lsrs	r4, r4, #24
 8003278:	0fc9      	lsrs	r1, r1, #31
 800327a:	2aff      	cmp	r2, #255	; 0xff
 800327c:	d00f      	beq.n	800329e <__eqsf2+0x3a>
 800327e:	2cff      	cmp	r4, #255	; 0xff
 8003280:	d011      	beq.n	80032a6 <__eqsf2+0x42>
 8003282:	2001      	movs	r0, #1
 8003284:	42a2      	cmp	r2, r4
 8003286:	d000      	beq.n	800328a <__eqsf2+0x26>
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	42b5      	cmp	r5, r6
 800328c:	d1fc      	bne.n	8003288 <__eqsf2+0x24>
 800328e:	428b      	cmp	r3, r1
 8003290:	d00d      	beq.n	80032ae <__eqsf2+0x4a>
 8003292:	2a00      	cmp	r2, #0
 8003294:	d1f8      	bne.n	8003288 <__eqsf2+0x24>
 8003296:	0028      	movs	r0, r5
 8003298:	1e45      	subs	r5, r0, #1
 800329a:	41a8      	sbcs	r0, r5
 800329c:	e7f4      	b.n	8003288 <__eqsf2+0x24>
 800329e:	2001      	movs	r0, #1
 80032a0:	2d00      	cmp	r5, #0
 80032a2:	d1f1      	bne.n	8003288 <__eqsf2+0x24>
 80032a4:	e7eb      	b.n	800327e <__eqsf2+0x1a>
 80032a6:	2001      	movs	r0, #1
 80032a8:	2e00      	cmp	r6, #0
 80032aa:	d1ed      	bne.n	8003288 <__eqsf2+0x24>
 80032ac:	e7e9      	b.n	8003282 <__eqsf2+0x1e>
 80032ae:	2000      	movs	r0, #0
 80032b0:	e7ea      	b.n	8003288 <__eqsf2+0x24>
 80032b2:	46c0      	nop			; (mov r8, r8)

080032b4 <__gesf2>:
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	0042      	lsls	r2, r0, #1
 80032b8:	0246      	lsls	r6, r0, #9
 80032ba:	024d      	lsls	r5, r1, #9
 80032bc:	004c      	lsls	r4, r1, #1
 80032be:	0fc3      	lsrs	r3, r0, #31
 80032c0:	0a76      	lsrs	r6, r6, #9
 80032c2:	0e12      	lsrs	r2, r2, #24
 80032c4:	0a6d      	lsrs	r5, r5, #9
 80032c6:	0e24      	lsrs	r4, r4, #24
 80032c8:	0fc8      	lsrs	r0, r1, #31
 80032ca:	2aff      	cmp	r2, #255	; 0xff
 80032cc:	d01f      	beq.n	800330e <__gesf2+0x5a>
 80032ce:	2cff      	cmp	r4, #255	; 0xff
 80032d0:	d010      	beq.n	80032f4 <__gesf2+0x40>
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d11f      	bne.n	8003316 <__gesf2+0x62>
 80032d6:	4271      	negs	r1, r6
 80032d8:	4171      	adcs	r1, r6
 80032da:	2c00      	cmp	r4, #0
 80032dc:	d101      	bne.n	80032e2 <__gesf2+0x2e>
 80032de:	2d00      	cmp	r5, #0
 80032e0:	d01e      	beq.n	8003320 <__gesf2+0x6c>
 80032e2:	2900      	cmp	r1, #0
 80032e4:	d10e      	bne.n	8003304 <__gesf2+0x50>
 80032e6:	4283      	cmp	r3, r0
 80032e8:	d01e      	beq.n	8003328 <__gesf2+0x74>
 80032ea:	2102      	movs	r1, #2
 80032ec:	1e58      	subs	r0, r3, #1
 80032ee:	4008      	ands	r0, r1
 80032f0:	3801      	subs	r0, #1
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	d126      	bne.n	8003346 <__gesf2+0x92>
 80032f8:	2a00      	cmp	r2, #0
 80032fa:	d1f4      	bne.n	80032e6 <__gesf2+0x32>
 80032fc:	4271      	negs	r1, r6
 80032fe:	4171      	adcs	r1, r6
 8003300:	2900      	cmp	r1, #0
 8003302:	d0f0      	beq.n	80032e6 <__gesf2+0x32>
 8003304:	2800      	cmp	r0, #0
 8003306:	d1f4      	bne.n	80032f2 <__gesf2+0x3e>
 8003308:	2001      	movs	r0, #1
 800330a:	4240      	negs	r0, r0
 800330c:	e7f1      	b.n	80032f2 <__gesf2+0x3e>
 800330e:	2e00      	cmp	r6, #0
 8003310:	d119      	bne.n	8003346 <__gesf2+0x92>
 8003312:	2cff      	cmp	r4, #255	; 0xff
 8003314:	d0ee      	beq.n	80032f4 <__gesf2+0x40>
 8003316:	2c00      	cmp	r4, #0
 8003318:	d1e5      	bne.n	80032e6 <__gesf2+0x32>
 800331a:	2d00      	cmp	r5, #0
 800331c:	d1e3      	bne.n	80032e6 <__gesf2+0x32>
 800331e:	e7e4      	b.n	80032ea <__gesf2+0x36>
 8003320:	2000      	movs	r0, #0
 8003322:	2e00      	cmp	r6, #0
 8003324:	d0e5      	beq.n	80032f2 <__gesf2+0x3e>
 8003326:	e7e0      	b.n	80032ea <__gesf2+0x36>
 8003328:	42a2      	cmp	r2, r4
 800332a:	dc05      	bgt.n	8003338 <__gesf2+0x84>
 800332c:	dbea      	blt.n	8003304 <__gesf2+0x50>
 800332e:	42ae      	cmp	r6, r5
 8003330:	d802      	bhi.n	8003338 <__gesf2+0x84>
 8003332:	d3e7      	bcc.n	8003304 <__gesf2+0x50>
 8003334:	2000      	movs	r0, #0
 8003336:	e7dc      	b.n	80032f2 <__gesf2+0x3e>
 8003338:	4241      	negs	r1, r0
 800333a:	4141      	adcs	r1, r0
 800333c:	4248      	negs	r0, r1
 800333e:	2102      	movs	r1, #2
 8003340:	4008      	ands	r0, r1
 8003342:	3801      	subs	r0, #1
 8003344:	e7d5      	b.n	80032f2 <__gesf2+0x3e>
 8003346:	2002      	movs	r0, #2
 8003348:	4240      	negs	r0, r0
 800334a:	e7d2      	b.n	80032f2 <__gesf2+0x3e>

0800334c <__lesf2>:
 800334c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334e:	0042      	lsls	r2, r0, #1
 8003350:	0246      	lsls	r6, r0, #9
 8003352:	024d      	lsls	r5, r1, #9
 8003354:	004c      	lsls	r4, r1, #1
 8003356:	0fc3      	lsrs	r3, r0, #31
 8003358:	0a76      	lsrs	r6, r6, #9
 800335a:	0e12      	lsrs	r2, r2, #24
 800335c:	0a6d      	lsrs	r5, r5, #9
 800335e:	0e24      	lsrs	r4, r4, #24
 8003360:	0fc8      	lsrs	r0, r1, #31
 8003362:	2aff      	cmp	r2, #255	; 0xff
 8003364:	d00d      	beq.n	8003382 <__lesf2+0x36>
 8003366:	2cff      	cmp	r4, #255	; 0xff
 8003368:	d00f      	beq.n	800338a <__lesf2+0x3e>
 800336a:	2a00      	cmp	r2, #0
 800336c:	d123      	bne.n	80033b6 <__lesf2+0x6a>
 800336e:	4271      	negs	r1, r6
 8003370:	4171      	adcs	r1, r6
 8003372:	2c00      	cmp	r4, #0
 8003374:	d10f      	bne.n	8003396 <__lesf2+0x4a>
 8003376:	2d00      	cmp	r5, #0
 8003378:	d10d      	bne.n	8003396 <__lesf2+0x4a>
 800337a:	2000      	movs	r0, #0
 800337c:	2e00      	cmp	r6, #0
 800337e:	d014      	beq.n	80033aa <__lesf2+0x5e>
 8003380:	e00d      	b.n	800339e <__lesf2+0x52>
 8003382:	2e00      	cmp	r6, #0
 8003384:	d110      	bne.n	80033a8 <__lesf2+0x5c>
 8003386:	2cff      	cmp	r4, #255	; 0xff
 8003388:	d115      	bne.n	80033b6 <__lesf2+0x6a>
 800338a:	2d00      	cmp	r5, #0
 800338c:	d10c      	bne.n	80033a8 <__lesf2+0x5c>
 800338e:	2a00      	cmp	r2, #0
 8003390:	d103      	bne.n	800339a <__lesf2+0x4e>
 8003392:	4271      	negs	r1, r6
 8003394:	4171      	adcs	r1, r6
 8003396:	2900      	cmp	r1, #0
 8003398:	d108      	bne.n	80033ac <__lesf2+0x60>
 800339a:	4283      	cmp	r3, r0
 800339c:	d010      	beq.n	80033c0 <__lesf2+0x74>
 800339e:	2102      	movs	r1, #2
 80033a0:	1e58      	subs	r0, r3, #1
 80033a2:	4008      	ands	r0, r1
 80033a4:	3801      	subs	r0, #1
 80033a6:	e000      	b.n	80033aa <__lesf2+0x5e>
 80033a8:	2002      	movs	r0, #2
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d1fc      	bne.n	80033aa <__lesf2+0x5e>
 80033b0:	2001      	movs	r0, #1
 80033b2:	4240      	negs	r0, r0
 80033b4:	e7f9      	b.n	80033aa <__lesf2+0x5e>
 80033b6:	2c00      	cmp	r4, #0
 80033b8:	d1ef      	bne.n	800339a <__lesf2+0x4e>
 80033ba:	2d00      	cmp	r5, #0
 80033bc:	d1ed      	bne.n	800339a <__lesf2+0x4e>
 80033be:	e7ee      	b.n	800339e <__lesf2+0x52>
 80033c0:	42a2      	cmp	r2, r4
 80033c2:	dc05      	bgt.n	80033d0 <__lesf2+0x84>
 80033c4:	dbf2      	blt.n	80033ac <__lesf2+0x60>
 80033c6:	42ae      	cmp	r6, r5
 80033c8:	d802      	bhi.n	80033d0 <__lesf2+0x84>
 80033ca:	d3ef      	bcc.n	80033ac <__lesf2+0x60>
 80033cc:	2000      	movs	r0, #0
 80033ce:	e7ec      	b.n	80033aa <__lesf2+0x5e>
 80033d0:	4241      	negs	r1, r0
 80033d2:	4141      	adcs	r1, r0
 80033d4:	4248      	negs	r0, r1
 80033d6:	2102      	movs	r1, #2
 80033d8:	4008      	ands	r0, r1
 80033da:	3801      	subs	r0, #1
 80033dc:	e7e5      	b.n	80033aa <__lesf2+0x5e>
 80033de:	46c0      	nop			; (mov r8, r8)

080033e0 <__clzdi2>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	2900      	cmp	r1, #0
 80033e4:	d103      	bne.n	80033ee <__clzdi2+0xe>
 80033e6:	f7ff fe39 	bl	800305c <__clzsi2>
 80033ea:	3020      	adds	r0, #32
 80033ec:	e002      	b.n	80033f4 <__clzdi2+0x14>
 80033ee:	1c08      	adds	r0, r1, #0
 80033f0:	f7ff fe34 	bl	800305c <__clzsi2>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)

080033f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_Init+0x3c>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_Init+0x3c>)
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	0049      	lsls	r1, r1, #1
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003412:	2003      	movs	r0, #3
 8003414:	f000 f810 	bl	8003438 <HAL_InitTick>
 8003418:	1e03      	subs	r3, r0, #0
 800341a:	d003      	beq.n	8003424 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e001      	b.n	8003428 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003424:	f006 ff76 	bl	800a314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40022000 	.word	0x40022000

08003438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003440:	230f      	movs	r3, #15
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_InitTick+0x88>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02b      	beq.n	80034a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_InitTick+0x8c>)
 8003452:	681c      	ldr	r4, [r3, #0]
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_InitTick+0x88>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	0019      	movs	r1, r3
 800345a:	23fa      	movs	r3, #250	; 0xfa
 800345c:	0098      	lsls	r0, r3, #2
 800345e:	f7fc fe5b 	bl	8000118 <__udivsi3>
 8003462:	0003      	movs	r3, r0
 8003464:	0019      	movs	r1, r3
 8003466:	0020      	movs	r0, r4
 8003468:	f7fc fe56 	bl	8000118 <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	0018      	movs	r0, r3
 8003470:	f001 f96f 	bl	8004752 <HAL_SYSTICK_Config>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d112      	bne.n	800349e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d80a      	bhi.n	8003494 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	2301      	movs	r3, #1
 8003482:	425b      	negs	r3, r3
 8003484:	2200      	movs	r2, #0
 8003486:	0018      	movs	r0, r3
 8003488:	f001 f93e 	bl	8004708 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_InitTick+0x90>)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e00d      	b.n	80034b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e008      	b.n	80034b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800349e:	230f      	movs	r3, #15
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034a8:	230f      	movs	r3, #15
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034b0:	230f      	movs	r3, #15
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b005      	add	sp, #20
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	20000004 	.word	0x20000004
 80034c4:	20000030 	.word	0x20000030
 80034c8:	20000000 	.word	0x20000000

080034cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x1c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	001a      	movs	r2, r3
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_IncTick+0x20>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	18d2      	adds	r2, r2, r3
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_IncTick+0x20>)
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	20000004 	.word	0x20000004
 80034ec:	2000051c 	.word	0x2000051c

080034f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  return uwTick;
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <HAL_GetTick+0x10>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	2000051c 	.word	0x2000051c

08003504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7ff fff0 	bl	80034f0 <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	d005      	beq.n	800352a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_Delay+0x44>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	001a      	movs	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	189b      	adds	r3, r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	f7ff ffe0 	bl	80034f0 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d8f7      	bhi.n	800352c <HAL_Delay+0x28>
  {
  }
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_SuspendTick+0x18>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_SuspendTick+0x18>)
 8003556:	2102      	movs	r1, #2
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	e000e010 	.word	0xe000e010

08003568 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_ResumeTick+0x18>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_ResumeTick+0x18>)
 8003572:	2102      	movs	r1, #2
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	40010000 	.word	0x40010000
 80035ac:	fffff9ff 	.word	0xfffff9ff

080035b0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80035c0:	401a      	ands	r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	fe3fffff 	.word	0xfe3fffff

080035d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	23e0      	movs	r3, #224	; 0xe0
 80035e6:	045b      	lsls	r3, r3, #17
 80035e8:	4013      	ands	r3, r2
}
 80035ea:	0018      	movs	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	2104      	movs	r1, #4
 8003606:	400a      	ands	r2, r1
 8003608:	2107      	movs	r1, #7
 800360a:	4091      	lsls	r1, r2
 800360c:	000a      	movs	r2, r1
 800360e:	43d2      	mvns	r2, r2
 8003610:	401a      	ands	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2104      	movs	r1, #4
 8003616:	400b      	ands	r3, r1
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4099      	lsls	r1, r3
 800361c:	000b      	movs	r3, r1
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}

0800362c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	2104      	movs	r1, #4
 800363e:	400a      	ands	r2, r1
 8003640:	2107      	movs	r1, #7
 8003642:	4091      	lsls	r1, r2
 8003644:	000a      	movs	r2, r1
 8003646:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2104      	movs	r1, #4
 800364c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800364e:	40da      	lsrs	r2, r3
 8003650:	0013      	movs	r3, r2
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}

0800365a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	23c0      	movs	r3, #192	; 0xc0
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d101      	bne.n	8003672 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003672:	2300      	movs	r3, #0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	211f      	movs	r1, #31
 8003690:	400a      	ands	r2, r1
 8003692:	210f      	movs	r1, #15
 8003694:	4091      	lsls	r1, r2
 8003696:	000a      	movs	r2, r1
 8003698:	43d2      	mvns	r2, r2
 800369a:	401a      	ands	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	0e9b      	lsrs	r3, r3, #26
 80036a0:	210f      	movs	r1, #15
 80036a2:	4019      	ands	r1, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	201f      	movs	r0, #31
 80036a8:	4003      	ands	r3, r0
 80036aa:	4099      	lsls	r1, r3
 80036ac:	000b      	movs	r3, r1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b004      	add	sp, #16
 80036ba:	bd80      	pop	{r7, pc}

080036bc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	035b      	lsls	r3, r3, #13
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}

080036de <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	0352      	lsls	r2, r2, #13
 80036f0:	0b52      	lsrs	r2, r2, #13
 80036f2:	43d2      	mvns	r2, r2
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	0212      	lsls	r2, r2, #8
 8003718:	43d2      	mvns	r2, r2
 800371a:	401a      	ands	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	400b      	ands	r3, r1
 8003724:	4904      	ldr	r1, [pc, #16]	; (8003738 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003726:	400b      	ands	r3, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b004      	add	sp, #16
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	07ffff00 	.word	0x07ffff00

0800373c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <LL_ADC_EnableInternalRegulator+0x24>)
 800374a:	4013      	ands	r3, r2
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	0552      	lsls	r2, r2, #21
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	6fffffe8 	.word	0x6fffffe8

08003764 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	055b      	lsls	r3, r3, #21
 8003774:	401a      	ands	r2, r3
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	055b      	lsls	r3, r3, #21
 800377a:	429a      	cmp	r2, r3
 800377c:	d101      	bne.n	8003782 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003782:	2300      	movs	r3, #0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <LL_ADC_Enable+0x20>)
 800379a:	4013      	ands	r3, r2
 800379c:	2201      	movs	r2, #1
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	7fffffe8 	.word	0x7fffffe8

080037b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <LL_ADC_Disable+0x20>)
 80037be:	4013      	ands	r3, r2
 80037c0:	2202      	movs	r2, #2
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	7fffffe8 	.word	0x7fffffe8

080037d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2201      	movs	r2, #1
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <LL_ADC_IsEnabled+0x18>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <LL_ADC_IsEnabled+0x1a>
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2202      	movs	r2, #2
 8003804:	4013      	ands	r3, r2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d101      	bne.n	800380e <LL_ADC_IsDisableOngoing+0x18>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_ADC_IsDisableOngoing+0x1a>
 800380e:	2300      	movs	r3, #0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <LL_ADC_REG_StartConversion+0x20>)
 8003826:	4013      	ands	r3, r2
 8003828:	2204      	movs	r2, #4
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}
 8003838:	7fffffe8 	.word	0x7fffffe8

0800383c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2204      	movs	r2, #4
 800384a:	4013      	ands	r3, r2
 800384c:	2b04      	cmp	r3, #4
 800384e:	d101      	bne.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003854:	2300      	movs	r3, #0
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b002      	add	sp, #8
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003868:	231f      	movs	r3, #31
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e17f      	b.n	8003b86 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f006 f8a9 	bl	80099e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2254      	movs	r2, #84	; 0x54
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff ff5b 	bl	8003764 <LL_ADC_IsInternalRegulatorEnabled>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d115      	bne.n	80038de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff ff40 	bl	800373c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038bc:	4bb4      	ldr	r3, [pc, #720]	; (8003b90 <HAL_ADC_Init+0x330>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	49b4      	ldr	r1, [pc, #720]	; (8003b94 <HAL_ADC_Init+0x334>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fc fc28 	bl	8000118 <__udivsi3>
 80038c8:	0003      	movs	r3, r0
 80038ca:	3301      	adds	r3, #1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7ff ff3e 	bl	8003764 <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d10f      	bne.n	800390c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	2210      	movs	r2, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	2201      	movs	r2, #1
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003904:	231f      	movs	r3, #31
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff ff93 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003916:	0003      	movs	r3, r0
 8003918:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	2210      	movs	r2, #16
 8003920:	4013      	ands	r3, r2
 8003922:	d000      	beq.n	8003926 <HAL_ADC_Init+0xc6>
 8003924:	e122      	b.n	8003b6c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d000      	beq.n	800392e <HAL_ADC_Init+0xce>
 800392c:	e11e      	b.n	8003b6c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a99      	ldr	r2, [pc, #612]	; (8003b98 <HAL_ADC_Init+0x338>)
 8003934:	4013      	ands	r3, r2
 8003936:	2202      	movs	r2, #2
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0018      	movs	r0, r3
 8003944:	f7ff ff46 	bl	80037d4 <LL_ADC_IsEnabled>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d000      	beq.n	800394e <HAL_ADC_Init+0xee>
 800394c:	e0ad      	b.n	8003aaa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7e1b      	ldrb	r3, [r3, #24]
 8003956:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003958:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7e5b      	ldrb	r3, [r3, #25]
 800395e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003960:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7e9b      	ldrb	r3, [r3, #26]
 8003966:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003968:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_ADC_Init+0x118>
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	015b      	lsls	r3, r3, #5
 8003976:	e000      	b.n	800397a <HAL_ADC_Init+0x11a>
 8003978:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800397a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003980:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	da04      	bge.n	8003994 <HAL_ADC_Init+0x134>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	e001      	b.n	8003998 <HAL_ADC_Init+0x138>
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003998:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	5c5b      	ldrb	r3, [r3, r1]
 80039a0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80039a2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d115      	bne.n	80039e0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e9b      	ldrb	r3, [r3, #26]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	0252      	lsls	r2, r2, #9
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e00b      	b.n	80039e0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	2220      	movs	r2, #32
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	2201      	movs	r2, #1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	23e0      	movs	r3, #224	; 0xe0
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039f6:	4313      	orrs	r3, r2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a65      	ldr	r2, [pc, #404]	; (8003b9c <HAL_ADC_Init+0x33c>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0f9b      	lsrs	r3, r3, #30
 8003a1a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a20:	4313      	orrs	r3, r2
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	223c      	movs	r2, #60	; 0x3c
 8003a2c:	5c9b      	ldrb	r3, [r3, r2]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d111      	bne.n	8003a56 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	0f9b      	lsrs	r3, r3, #30
 8003a38:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a3e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003a44:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003a4a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	2201      	movs	r2, #1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4a50      	ldr	r2, [pc, #320]	; (8003ba0 <HAL_ADC_Init+0x340>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	23c0      	movs	r3, #192	; 0xc0
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d018      	beq.n	8003aaa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	05db      	lsls	r3, r3, #23
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d012      	beq.n	8003aaa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d00c      	beq.n	8003aaa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003a90:	4b44      	ldr	r3, [pc, #272]	; (8003ba4 <HAL_ADC_Init+0x344>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <HAL_ADC_Init+0x348>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	23f0      	movs	r3, #240	; 0xf0
 8003aa0:	039b      	lsls	r3, r3, #14
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_ADC_Init+0x344>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f7ff fd9c 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	493a      	ldr	r1, [pc, #232]	; (8003bac <HAL_ADC_Init+0x34c>)
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	f7ff fd94 	bl	80035f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2110      	movs	r1, #16
 8003ade:	4249      	negs	r1, r1
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae4:	e018      	b.n	8003b18 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	039b      	lsls	r3, r3, #14
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d112      	bne.n	8003b18 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	221c      	movs	r2, #28
 8003b02:	4013      	ands	r3, r2
 8003b04:	2210      	movs	r2, #16
 8003b06:	4252      	negs	r2, r2
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7ff fd84 	bl	800362c <LL_ADC_GetSamplingTimeCommonChannels>
 8003b24:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10b      	bne.n	8003b46 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	2203      	movs	r2, #3
 8003b3a:	4393      	bics	r3, r2
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b44:	e01c      	b.n	8003b80 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	2212      	movs	r2, #18
 8003b4c:	4393      	bics	r3, r2
 8003b4e:	2210      	movs	r2, #16
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b62:	231f      	movs	r3, #31
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b6a:	e009      	b.n	8003b80 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	2210      	movs	r2, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b78:	231f      	movs	r3, #31
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003b80:	231f      	movs	r3, #31
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	781b      	ldrb	r3, [r3, #0]
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b008      	add	sp, #32
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	20000030 	.word	0x20000030
 8003b94:	00030d40 	.word	0x00030d40
 8003b98:	fffffefd 	.word	0xfffffefd
 8003b9c:	fffe0201 	.word	0xfffe0201
 8003ba0:	1ffffc02 	.word	0x1ffffc02
 8003ba4:	40012708 	.word	0x40012708
 8003ba8:	ffc3ffff 	.word	0xffc3ffff
 8003bac:	07ffff04 	.word	0x07ffff04

08003bb0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bb0:	b5b0      	push	{r4, r5, r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7ff fe3d 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003bc2:	1e03      	subs	r3, r0, #0
 8003bc4:	d135      	bne.n	8003c32 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2254      	movs	r2, #84	; 0x54
 8003bca:	5c9b      	ldrb	r3, [r3, r2]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_Start+0x24>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e035      	b.n	8003c40 <HAL_ADC_Start+0x90>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2254      	movs	r2, #84	; 0x54
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bdc:	250f      	movs	r5, #15
 8003bde:	197c      	adds	r4, r7, r5
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 faaa 	bl	800413c <ADC_Enable>
 8003be8:	0003      	movs	r3, r0
 8003bea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bec:	197b      	adds	r3, r7, r5
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d119      	bne.n	8003c28 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <HAL_ADC_Start+0x98>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2280      	movs	r2, #128	; 0x80
 8003bfe:	0052      	lsls	r2, r2, #1
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	221c      	movs	r2, #28
 8003c12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2254      	movs	r2, #84	; 0x54
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff fdf9 	bl	8003818 <LL_ADC_REG_StartConversion>
 8003c26:	e008      	b.n	8003c3a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2254      	movs	r2, #84	; 0x54
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]
 8003c30:	e003      	b.n	8003c3a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c32:	230f      	movs	r3, #15
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003c3a:	230f      	movs	r3, #15
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	781b      	ldrb	r3, [r3, #0]
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bdb0      	pop	{r4, r5, r7, pc}
 8003c48:	fffff0fe 	.word	0xfffff0fe

08003c4c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d102      	bne.n	8003c64 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003c5e:	2308      	movs	r3, #8
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e00f      	b.n	8003c84 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d007      	beq.n	8003c80 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	2220      	movs	r2, #32
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e072      	b.n	8003d66 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003c80:	2304      	movs	r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c84:	f7ff fc34 	bl	80034f0 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003c8c:	e01f      	b.n	8003cce <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	d01c      	beq.n	8003cce <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c94:	f7ff fc2c 	bl	80034f0 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <HAL_ADC_PollForConversion+0x5e>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d111      	bne.n	8003cce <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d10b      	bne.n	8003cce <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	2204      	movs	r2, #4
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2254      	movs	r2, #84	; 0x54
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e04b      	b.n	8003d66 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d0d9      	beq.n	8003c8e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fcb4 	bl	800365a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cf2:	1e03      	subs	r3, r0, #0
 8003cf4:	d02e      	beq.n	8003d54 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7e9b      	ldrb	r3, [r3, #26]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d12a      	bne.n	8003d54 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2208      	movs	r2, #8
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d123      	bne.n	8003d54 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7ff fd93 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d110      	bne.n	8003d3c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	210c      	movs	r1, #12
 8003d26:	438a      	bics	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <HAL_ADC_PollForConversion+0x124>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	2201      	movs	r2, #1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58
 8003d3a:	e00b      	b.n	8003d54 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	2220      	movs	r2, #32
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e1b      	ldrb	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	220c      	movs	r2, #12
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	fffffefe 	.word	0xfffffefe

08003d74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d96:	2317      	movs	r3, #23
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2254      	movs	r2, #84	; 0x54
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x24>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e1c0      	b.n	8004132 <HAL_ADC_ConfigChannel+0x3a6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2254      	movs	r2, #84	; 0x54
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff fd3d 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d000      	beq.n	8003dc8 <HAL_ADC_ConfigChannel+0x3c>
 8003dc6:	e1a3      	b.n	8004110 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d100      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x46>
 8003dd0:	e143      	b.n	800405a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003de2:	4ac1      	ldr	r2, [pc, #772]	; (80040e8 <HAL_ADC_ConfigChannel+0x35c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0019      	movs	r1, r3
 8003df2:	0010      	movs	r0, r2
 8003df4:	f7ff fc62 	bl	80036bc <LL_ADC_REG_SetSequencerChAdd>
 8003df8:	e0c9      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	211f      	movs	r1, #31
 8003e04:	400b      	ands	r3, r1
 8003e06:	210f      	movs	r1, #15
 8003e08:	4099      	lsls	r1, r3
 8003e0a:	000b      	movs	r3, r1
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	035b      	lsls	r3, r3, #13
 8003e18:	0b5b      	lsrs	r3, r3, #13
 8003e1a:	d105      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x9c>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	221f      	movs	r2, #31
 8003e24:	4013      	ands	r3, r2
 8003e26:	e098      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d000      	beq.n	8003e34 <HAL_ADC_ConfigChannel+0xa8>
 8003e32:	e091      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x1cc>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d000      	beq.n	8003e40 <HAL_ADC_ConfigChannel+0xb4>
 8003e3e:	e089      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x1c8>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2204      	movs	r2, #4
 8003e46:	4013      	ands	r3, r2
 8003e48:	d000      	beq.n	8003e4c <HAL_ADC_ConfigChannel+0xc0>
 8003e4a:	e081      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x1c4>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2208      	movs	r2, #8
 8003e52:	4013      	ands	r3, r2
 8003e54:	d000      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0xcc>
 8003e56:	e079      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x1c0>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d000      	beq.n	8003e64 <HAL_ADC_ConfigChannel+0xd8>
 8003e62:	e071      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x1bc>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d000      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0xe4>
 8003e6e:	e069      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x1b8>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2240      	movs	r2, #64	; 0x40
 8003e76:	4013      	ands	r3, r2
 8003e78:	d000      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0xf0>
 8003e7a:	e061      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x1b4>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	4013      	ands	r3, r2
 8003e84:	d000      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0xfc>
 8003e86:	e059      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x1b0>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	d151      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x1ac>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d149      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x1a8>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d141      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x1a4>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d139      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x1a0>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	015b      	lsls	r3, r3, #5
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d131      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x19c>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	019b      	lsls	r3, r3, #6
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d129      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x198>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	01db      	lsls	r3, r3, #7
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d121      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x194>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d119      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x190>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	025b      	lsls	r3, r3, #9
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x18c>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	029b      	lsls	r3, r3, #10
 8003efc:	4013      	ands	r3, r2
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x188>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	02db      	lsls	r3, r3, #11
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d001      	beq.n	8003f10 <HAL_ADC_ConfigChannel+0x184>
 8003f0c:	2312      	movs	r3, #18
 8003f0e:	e024      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e022      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f14:	2311      	movs	r3, #17
 8003f16:	e020      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	e01e      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	e01c      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f20:	230e      	movs	r3, #14
 8003f22:	e01a      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f24:	230d      	movs	r3, #13
 8003f26:	e018      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	e016      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f2c:	230b      	movs	r3, #11
 8003f2e:	e014      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f30:	230a      	movs	r3, #10
 8003f32:	e012      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f34:	2309      	movs	r3, #9
 8003f36:	e010      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f38:	2308      	movs	r3, #8
 8003f3a:	e00e      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	e00c      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f40:	2306      	movs	r3, #6
 8003f42:	e00a      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f44:	2305      	movs	r3, #5
 8003f46:	e008      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	e006      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e004      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e002      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x1ce>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	6852      	ldr	r2, [r2, #4]
 8003f5e:	201f      	movs	r0, #31
 8003f60:	4002      	ands	r2, r0
 8003f62:	4093      	lsls	r3, r2
 8003f64:	000a      	movs	r2, r1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d808      	bhi.n	8003f8e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	001a      	movs	r2, r3
 8003f8a:	f7ff fb77 	bl	800367c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	f7ff fbb2 	bl	8003704 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	db00      	blt.n	8003faa <HAL_ADC_ConfigChannel+0x21e>
 8003fa8:	e0bc      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003faa:	4b50      	ldr	r3, [pc, #320]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 8003fac:	0018      	movs	r0, r3
 8003fae:	f7ff fb13 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4d      	ldr	r2, [pc, #308]	; (80040f0 <HAL_ADC_ConfigChannel+0x364>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d122      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fc8:	d11d      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	0412      	lsls	r2, r2, #16
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	4a46      	ldr	r2, [pc, #280]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	0010      	movs	r0, r2
 8003fd8:	f7ff faea 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fdc:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <HAL_ADC_ConfigChannel+0x368>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4945      	ldr	r1, [pc, #276]	; (80040f8 <HAL_ADC_ConfigChannel+0x36c>)
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7fc f898 	bl	8000118 <__udivsi3>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	0013      	movs	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ff6:	e002      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f9      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004004:	e08e      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <HAL_ADC_ConfigChannel+0x370>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10e      	bne.n	800402e <HAL_ADC_ConfigChannel+0x2a2>
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	045b      	lsls	r3, r3, #17
 8004016:	4013      	ands	r3, r2
 8004018:	d109      	bne.n	800402e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	0452      	lsls	r2, r2, #17
 8004020:	4313      	orrs	r3, r2
 8004022:	4a32      	ldr	r2, [pc, #200]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 8004024:	0019      	movs	r1, r3
 8004026:	0010      	movs	r0, r2
 8004028:	f7ff fac2 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 800402c:	e07a      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a33      	ldr	r2, [pc, #204]	; (8004100 <HAL_ADC_ConfigChannel+0x374>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d000      	beq.n	800403a <HAL_ADC_ConfigChannel+0x2ae>
 8004038:	e074      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	03db      	lsls	r3, r3, #15
 8004040:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004042:	d000      	beq.n	8004046 <HAL_ADC_ConfigChannel+0x2ba>
 8004044:	e06e      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	03d2      	lsls	r2, r2, #15
 800404c:	4313      	orrs	r3, r2
 800404e:	4a27      	ldr	r2, [pc, #156]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 8004050:	0019      	movs	r1, r3
 8004052:	0010      	movs	r0, r2
 8004054:	f7ff faac 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 8004058:	e064      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	429a      	cmp	r2, r3
 8004064:	d004      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800406a:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <HAL_ADC_ConfigChannel+0x35c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d107      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0019      	movs	r1, r3
 800407a:	0010      	movs	r0, r2
 800407c:	f7ff fb2f 	bl	80036de <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	da4d      	bge.n	8004124 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff faa4 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 8004090:	0003      	movs	r3, r0
 8004092:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <HAL_ADC_ConfigChannel+0x364>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_ADC_ConfigChannel+0x378>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 80040a6:	0019      	movs	r1, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	f7ff fa81 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 80040ae:	e039      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a11      	ldr	r2, [pc, #68]	; (80040fc <HAL_ADC_ConfigChannel+0x370>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_ADC_ConfigChannel+0x37c>)
 80040be:	4013      	ands	r3, r2
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 80040c2:	0019      	movs	r1, r3
 80040c4:	0010      	movs	r0, r2
 80040c6:	f7ff fa73 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 80040ca:	e02b      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <HAL_ADC_ConfigChannel+0x374>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d126      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_ADC_ConfigChannel+0x380>)
 80040da:	4013      	ands	r3, r2
 80040dc:	4a03      	ldr	r2, [pc, #12]	; (80040ec <HAL_ADC_ConfigChannel+0x360>)
 80040de:	0019      	movs	r1, r3
 80040e0:	0010      	movs	r0, r2
 80040e2:	f7ff fa65 	bl	80035b0 <LL_ADC_SetCommonPathInternalCh>
 80040e6:	e01d      	b.n	8004124 <HAL_ADC_ConfigChannel+0x398>
 80040e8:	80000004 	.word	0x80000004
 80040ec:	40012708 	.word	0x40012708
 80040f0:	b0001000 	.word	0xb0001000
 80040f4:	20000030 	.word	0x20000030
 80040f8:	00030d40 	.word	0x00030d40
 80040fc:	b8004000 	.word	0xb8004000
 8004100:	b4002000 	.word	0xb4002000
 8004104:	ff7fffff 	.word	0xff7fffff
 8004108:	feffffff 	.word	0xfeffffff
 800410c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	2220      	movs	r2, #32
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800411c:	2317      	movs	r3, #23
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2254      	movs	r2, #84	; 0x54
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800412c:	2317      	movs	r3, #23
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b006      	add	sp, #24
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)

0800413c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff fb41 	bl	80037d4 <LL_ADC_IsEnabled>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d000      	beq.n	8004158 <ADC_Enable+0x1c>
 8004156:	e069      	b.n	800422c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4a36      	ldr	r2, [pc, #216]	; (8004238 <ADC_Enable+0xfc>)
 8004160:	4013      	ands	r3, r2
 8004162:	d00d      	beq.n	8004180 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	2210      	movs	r2, #16
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2201      	movs	r2, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e056      	b.n	800422e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fb01 	bl	800378c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <ADC_Enable+0x100>)
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff fa23 	bl	80035d8 <LL_ADC_GetCommonPathInternalCh>
 8004192:	0002      	movs	r2, r0
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	4013      	ands	r3, r2
 800419a:	d00f      	beq.n	80041bc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800419c:	4b28      	ldr	r3, [pc, #160]	; (8004240 <ADC_Enable+0x104>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4928      	ldr	r1, [pc, #160]	; (8004244 <ADC_Enable+0x108>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fb ffb8 	bl	8000118 <__udivsi3>
 80041a8:	0003      	movs	r3, r0
 80041aa:	3301      	adds	r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041ae:	e002      	b.n	80041b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f9      	bne.n	80041b0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7e5b      	ldrb	r3, [r3, #25]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d033      	beq.n	800422c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80041c4:	f7ff f994 	bl	80034f0 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041cc:	e027      	b.n	800421e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7ff fafe 	bl	80037d4 <LL_ADC_IsEnabled>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d104      	bne.n	80041e6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7ff fad3 	bl	800378c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041e6:	f7ff f983 	bl	80034f0 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d914      	bls.n	800421e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d00d      	beq.n	800421e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	2210      	movs	r2, #16
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2201      	movs	r2, #1
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e007      	b.n	800422e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2201      	movs	r2, #1
 8004226:	4013      	ands	r3, r2
 8004228:	2b01      	cmp	r3, #1
 800422a:	d1d0      	bne.n	80041ce <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b004      	add	sp, #16
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	80000017 	.word	0x80000017
 800423c:	40012708 	.word	0x40012708
 8004240:	20000030 	.word	0x20000030
 8004244:	00030d40 	.word	0x00030d40

08004248 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff face 	bl	80037f6 <LL_ADC_IsDisableOngoing>
 800425a:	0003      	movs	r3, r0
 800425c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	0018      	movs	r0, r3
 8004264:	f7ff fab6 	bl	80037d4 <LL_ADC_IsEnabled>
 8004268:	1e03      	subs	r3, r0, #0
 800426a:	d046      	beq.n	80042fa <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d143      	bne.n	80042fa <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2205      	movs	r2, #5
 800427a:	4013      	ands	r3, r2
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10d      	bne.n	800429c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff fa93 	bl	80037b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2203      	movs	r2, #3
 8004290:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004292:	f7ff f92d 	bl	80034f0 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800429a:	e028      	b.n	80042ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	2210      	movs	r2, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2201      	movs	r2, #1
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e021      	b.n	80042fc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042b8:	f7ff f91a 	bl	80034f0 <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d913      	bls.n	80042ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	d00d      	beq.n	80042ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	2210      	movs	r2, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2201      	movs	r2, #1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e006      	b.n	80042fc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4013      	ands	r3, r2
 80042f8:	d1de      	bne.n	80042b8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b004      	add	sp, #16
 8004302:	bd80      	pop	{r7, pc}

08004304 <LL_ADC_SetCalibrationFactor>:
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	22b4      	movs	r2, #180	; 0xb4
 8004312:	589b      	ldr	r3, [r3, r2]
 8004314:	227f      	movs	r2, #127	; 0x7f
 8004316:	4393      	bics	r3, r2
 8004318:	001a      	movs	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	21b4      	movs	r1, #180	; 0xb4
 8004322:	505a      	str	r2, [r3, r1]
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <LL_ADC_GetCalibrationFactor>:
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	22b4      	movs	r2, #180	; 0xb4
 8004338:	589b      	ldr	r3, [r3, r2]
 800433a:	227f      	movs	r2, #127	; 0x7f
 800433c:	4013      	ands	r3, r2
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b002      	add	sp, #8
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <LL_ADC_Enable>:
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <LL_ADC_Enable+0x20>)
 8004356:	4013      	ands	r3, r2
 8004358:	2201      	movs	r2, #1
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}
 8004368:	7fffffe8 	.word	0x7fffffe8

0800436c <LL_ADC_Disable>:
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <LL_ADC_Disable+0x20>)
 800437a:	4013      	ands	r3, r2
 800437c:	2202      	movs	r2, #2
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	609a      	str	r2, [r3, #8]
}
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}
 800438c:	7fffffe8 	.word	0x7fffffe8

08004390 <LL_ADC_IsEnabled>:
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2201      	movs	r2, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <LL_ADC_IsEnabled+0x18>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <LL_ADC_IsEnabled+0x1a>
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <LL_ADC_StartCalibration>:
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <LL_ADC_StartCalibration+0x24>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	2280      	movs	r2, #128	; 0x80
 80043c6:	0612      	lsls	r2, r2, #24
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b002      	add	sp, #8
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	7fffffe8 	.word	0x7fffffe8

080043dc <LL_ADC_IsCalibrationOnGoing>:
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	0fdb      	lsrs	r3, r3, #31
 80043ea:	07da      	lsls	r2, r3, #31
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d101      	bne.n	80043f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <LL_ADC_IsCalibrationOnGoing+0x1e>
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2254      	movs	r2, #84	; 0x54
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_ADCEx_Calibration_Start+0x1e>
 800441e:	2302      	movs	r3, #2
 8004420:	e0ba      	b.n	8004598 <HAL_ADCEx_Calibration_Start+0x194>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2254      	movs	r2, #84	; 0x54
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800442a:	2317      	movs	r3, #23
 800442c:	18fc      	adds	r4, r7, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0018      	movs	r0, r3
 8004432:	f7ff ff09 	bl	8004248 <ADC_Disable>
 8004436:	0003      	movs	r3, r0
 8004438:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff ffa6 	bl	8004390 <LL_ADC_IsEnabled>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d000      	beq.n	800444a <HAL_ADCEx_Calibration_Start+0x46>
 8004448:	e099      	b.n	800457e <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	4a54      	ldr	r2, [pc, #336]	; (80045a0 <HAL_ADCEx_Calibration_Start+0x19c>)
 8004450:	4013      	ands	r3, r2
 8004452:	2202      	movs	r2, #2
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a50      	ldr	r2, [pc, #320]	; (80045a4 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	494d      	ldr	r1, [pc, #308]	; (80045a8 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8004472:	400a      	ands	r2, r1
 8004474:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e02d      	b.n	80044d8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	0018      	movs	r0, r3
 8004482:	f7ff ff97 	bl	80043b4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004486:	e014      	b.n	80044b2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4a46      	ldr	r2, [pc, #280]	; (80045ac <HAL_ADCEx_Calibration_Start+0x1a8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d90d      	bls.n	80044b2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	2212      	movs	r2, #18
 800449c:	4393      	bics	r3, r2
 800449e:	2210      	movs	r2, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2254      	movs	r2, #84	; 0x54
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e072      	b.n	8004598 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7ff ff90 	bl	80043dc <LL_ADC_IsCalibrationOnGoing>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d1e3      	bne.n	8004488 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7ff ff31 	bl	800432c <LL_ADC_GetCalibrationFactor>
 80044ca:	0002      	movs	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b07      	cmp	r3, #7
 80044dc:	d9ce      	bls.n	800447c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80044de:	69f9      	ldr	r1, [r7, #28]
 80044e0:	69b8      	ldr	r0, [r7, #24]
 80044e2:	f7fb fe19 	bl	8000118 <__udivsi3>
 80044e6:	0003      	movs	r3, r0
 80044e8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7ff ff2a 	bl	8004348 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff ff01 	bl	8004304 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	0018      	movs	r0, r3
 8004508:	f7ff ff30 	bl	800436c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800450c:	f7fe fff0 	bl	80034f0 <HAL_GetTick>
 8004510:	0003      	movs	r3, r0
 8004512:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004514:	e01b      	b.n	800454e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004516:	f7fe ffeb 	bl	80034f0 <HAL_GetTick>
 800451a:	0002      	movs	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d914      	bls.n	800454e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0018      	movs	r0, r3
 800452a:	f7ff ff31 	bl	8004390 <LL_ADC_IsEnabled>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d00d      	beq.n	800454e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	2210      	movs	r2, #16
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2201      	movs	r2, #1
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e024      	b.n	8004598 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff ff1c 	bl	8004390 <LL_ADC_IsEnabled>
 8004558:	1e03      	subs	r3, r0, #0
 800455a:	d1dc      	bne.n	8004516 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68d9      	ldr	r1, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	2203      	movs	r2, #3
 8004572:	4393      	bics	r3, r2
 8004574:	2201      	movs	r2, #1
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	659a      	str	r2, [r3, #88]	; 0x58
 800457c:	e005      	b.n	800458a <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	2210      	movs	r2, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2254      	movs	r2, #84	; 0x54
 800458e:	2100      	movs	r1, #0
 8004590:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004592:	2317      	movs	r3, #23
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	781b      	ldrb	r3, [r3, #0]
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b009      	add	sp, #36	; 0x24
 800459e:	bd90      	pop	{r4, r7, pc}
 80045a0:	fffffefd 	.word	0xfffffefd
 80045a4:	00008003 	.word	0x00008003
 80045a8:	ffff7ffc 	.word	0xffff7ffc
 80045ac:	0002f1ff 	.word	0x0002f1ff

080045b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	0002      	movs	r2, r0
 80045b8:	1dfb      	adds	r3, r7, #7
 80045ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	1dfb      	adds	r3, r7, #7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b7f      	cmp	r3, #127	; 0x7f
 80045c2:	d809      	bhi.n	80045d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c4:	1dfb      	adds	r3, r7, #7
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	001a      	movs	r2, r3
 80045ca:	231f      	movs	r3, #31
 80045cc:	401a      	ands	r2, r3
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__NVIC_EnableIRQ+0x30>)
 80045d0:	2101      	movs	r1, #1
 80045d2:	4091      	lsls	r1, r2
 80045d4:	000a      	movs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	0002      	movs	r2, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	1dfb      	adds	r3, r7, #7
 80045f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b7f      	cmp	r3, #127	; 0x7f
 80045f8:	d828      	bhi.n	800464c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045fa:	4a2f      	ldr	r2, [pc, #188]	; (80046b8 <__NVIC_SetPriority+0xd4>)
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b25b      	sxtb	r3, r3
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	33c0      	adds	r3, #192	; 0xc0
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	589b      	ldr	r3, [r3, r2]
 800460a:	1dfa      	adds	r2, r7, #7
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	0011      	movs	r1, r2
 8004610:	2203      	movs	r2, #3
 8004612:	400a      	ands	r2, r1
 8004614:	00d2      	lsls	r2, r2, #3
 8004616:	21ff      	movs	r1, #255	; 0xff
 8004618:	4091      	lsls	r1, r2
 800461a:	000a      	movs	r2, r1
 800461c:	43d2      	mvns	r2, r2
 800461e:	401a      	ands	r2, r3
 8004620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	401a      	ands	r2, r3
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	0018      	movs	r0, r3
 8004630:	2303      	movs	r3, #3
 8004632:	4003      	ands	r3, r0
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004638:	481f      	ldr	r0, [pc, #124]	; (80046b8 <__NVIC_SetPriority+0xd4>)
 800463a:	1dfb      	adds	r3, r7, #7
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b25b      	sxtb	r3, r3
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	430a      	orrs	r2, r1
 8004644:	33c0      	adds	r3, #192	; 0xc0
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800464a:	e031      	b.n	80046b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <__NVIC_SetPriority+0xd8>)
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	0019      	movs	r1, r3
 8004654:	230f      	movs	r3, #15
 8004656:	400b      	ands	r3, r1
 8004658:	3b08      	subs	r3, #8
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3306      	adds	r3, #6
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	3304      	adds	r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1dfa      	adds	r2, r7, #7
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	0011      	movs	r1, r2
 800466c:	2203      	movs	r2, #3
 800466e:	400a      	ands	r2, r1
 8004670:	00d2      	lsls	r2, r2, #3
 8004672:	21ff      	movs	r1, #255	; 0xff
 8004674:	4091      	lsls	r1, r2
 8004676:	000a      	movs	r2, r1
 8004678:	43d2      	mvns	r2, r2
 800467a:	401a      	ands	r2, r3
 800467c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	22ff      	movs	r2, #255	; 0xff
 8004684:	401a      	ands	r2, r3
 8004686:	1dfb      	adds	r3, r7, #7
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	0018      	movs	r0, r3
 800468c:	2303      	movs	r3, #3
 800468e:	4003      	ands	r3, r0
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004694:	4809      	ldr	r0, [pc, #36]	; (80046bc <__NVIC_SetPriority+0xd8>)
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	001c      	movs	r4, r3
 800469c:	230f      	movs	r3, #15
 800469e:	4023      	ands	r3, r4
 80046a0:	3b08      	subs	r3, #8
 80046a2:	089b      	lsrs	r3, r3, #2
 80046a4:	430a      	orrs	r2, r1
 80046a6:	3306      	adds	r3, #6
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	18c3      	adds	r3, r0, r3
 80046ac:	3304      	adds	r3, #4
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b003      	add	sp, #12
 80046b6:	bd90      	pop	{r4, r7, pc}
 80046b8:	e000e100 	.word	0xe000e100
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	045b      	lsls	r3, r3, #17
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d301      	bcc.n	80046d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046d4:	2301      	movs	r3, #1
 80046d6:	e010      	b.n	80046fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <SysTick_Config+0x44>)
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	3a01      	subs	r2, #1
 80046de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046e0:	2301      	movs	r3, #1
 80046e2:	425b      	negs	r3, r3
 80046e4:	2103      	movs	r1, #3
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7ff ff7c 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <SysTick_Config+0x44>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046f2:	4b04      	ldr	r3, [pc, #16]	; (8004704 <SysTick_Config+0x44>)
 80046f4:	2207      	movs	r2, #7
 80046f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	e000e010 	.word	0xe000e010

08004708 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	210f      	movs	r1, #15
 8004714:	187b      	adds	r3, r7, r1
 8004716:	1c02      	adds	r2, r0, #0
 8004718:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	187b      	adds	r3, r7, r1
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b25b      	sxtb	r3, r3
 8004722:	0011      	movs	r1, r2
 8004724:	0018      	movs	r0, r3
 8004726:	f7ff ff5d 	bl	80045e4 <__NVIC_SetPriority>
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	b004      	add	sp, #16
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	0002      	movs	r2, r0
 800473a:	1dfb      	adds	r3, r7, #7
 800473c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473e:	1dfb      	adds	r3, r7, #7
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	b25b      	sxtb	r3, r3
 8004744:	0018      	movs	r0, r3
 8004746:	f7ff ff33 	bl	80045b0 <__NVIC_EnableIRQ>
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b002      	add	sp, #8
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff ffaf 	bl	80046c0 <SysTick_Config>
 8004762:	0003      	movs	r3, r0
}
 8004764:	0018      	movs	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	b002      	add	sp, #8
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800477a:	e147      	b.n	8004a0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2101      	movs	r1, #1
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4091      	lsls	r1, r2
 8004786:	000a      	movs	r2, r1
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d100      	bne.n	8004794 <HAL_GPIO_Init+0x28>
 8004792:	e138      	b.n	8004a06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2203      	movs	r2, #3
 800479a:	4013      	ands	r3, r2
 800479c:	2b01      	cmp	r3, #1
 800479e:	d005      	beq.n	80047ac <HAL_GPIO_Init+0x40>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2203      	movs	r2, #3
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d130      	bne.n	800480e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	409a      	lsls	r2, r3
 80047ba:	0013      	movs	r3, r2
 80047bc:	43da      	mvns	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	409a      	lsls	r2, r3
 80047ce:	0013      	movs	r3, r2
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047e2:	2201      	movs	r2, #1
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	409a      	lsls	r2, r3
 80047e8:	0013      	movs	r3, r2
 80047ea:	43da      	mvns	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	2201      	movs	r2, #1
 80047fa:	401a      	ands	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	409a      	lsls	r2, r3
 8004800:	0013      	movs	r3, r2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2203      	movs	r2, #3
 8004814:	4013      	ands	r3, r2
 8004816:	2b03      	cmp	r3, #3
 8004818:	d017      	beq.n	800484a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	409a      	lsls	r2, r3
 8004828:	0013      	movs	r3, r2
 800482a:	43da      	mvns	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	0013      	movs	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2203      	movs	r2, #3
 8004850:	4013      	ands	r3, r2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d123      	bne.n	800489e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	08da      	lsrs	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3208      	adds	r2, #8
 800485e:	0092      	lsls	r2, r2, #2
 8004860:	58d3      	ldr	r3, [r2, r3]
 8004862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2207      	movs	r2, #7
 8004868:	4013      	ands	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	220f      	movs	r2, #15
 800486e:	409a      	lsls	r2, r3
 8004870:	0013      	movs	r3, r2
 8004872:	43da      	mvns	r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2107      	movs	r1, #7
 8004882:	400b      	ands	r3, r1
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	409a      	lsls	r2, r3
 8004888:	0013      	movs	r3, r2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	08da      	lsrs	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3208      	adds	r2, #8
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	6939      	ldr	r1, [r7, #16]
 800489c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	2203      	movs	r2, #3
 80048aa:	409a      	lsls	r2, r3
 80048ac:	0013      	movs	r3, r2
 80048ae:	43da      	mvns	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4013      	ands	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2203      	movs	r2, #3
 80048bc:	401a      	ands	r2, r3
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	0013      	movs	r3, r2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	23c0      	movs	r3, #192	; 0xc0
 80048d8:	029b      	lsls	r3, r3, #10
 80048da:	4013      	ands	r3, r2
 80048dc:	d100      	bne.n	80048e0 <HAL_GPIO_Init+0x174>
 80048de:	e092      	b.n	8004a06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80048e0:	4a50      	ldr	r2, [pc, #320]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	3318      	adds	r3, #24
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	589b      	ldr	r3, [r3, r2]
 80048ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2203      	movs	r2, #3
 80048f2:	4013      	ands	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	220f      	movs	r2, #15
 80048f8:	409a      	lsls	r2, r3
 80048fa:	0013      	movs	r3, r2
 80048fc:	43da      	mvns	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	23a0      	movs	r3, #160	; 0xa0
 8004908:	05db      	lsls	r3, r3, #23
 800490a:	429a      	cmp	r2, r3
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x1ca>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a45      	ldr	r2, [pc, #276]	; (8004a28 <HAL_GPIO_Init+0x2bc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x1c6>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a44      	ldr	r2, [pc, #272]	; (8004a2c <HAL_GPIO_Init+0x2c0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x1c2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a43      	ldr	r2, [pc, #268]	; (8004a30 <HAL_GPIO_Init+0x2c4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x1be>
 8004926:	2303      	movs	r3, #3
 8004928:	e006      	b.n	8004938 <HAL_GPIO_Init+0x1cc>
 800492a:	2305      	movs	r3, #5
 800492c:	e004      	b.n	8004938 <HAL_GPIO_Init+0x1cc>
 800492e:	2302      	movs	r3, #2
 8004930:	e002      	b.n	8004938 <HAL_GPIO_Init+0x1cc>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_GPIO_Init+0x1cc>
 8004936:	2300      	movs	r3, #0
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	2103      	movs	r1, #3
 800493c:	400a      	ands	r2, r1
 800493e:	00d2      	lsls	r2, r2, #3
 8004940:	4093      	lsls	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004948:	4936      	ldr	r1, [pc, #216]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	089b      	lsrs	r3, r3, #2
 800494e:	3318      	adds	r3, #24
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004956:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	43da      	mvns	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	035b      	lsls	r3, r3, #13
 800496e:	4013      	ands	r3, r2
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800497a:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004980:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	43da      	mvns	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4013      	ands	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	039b      	lsls	r3, r3, #14
 8004998:	4013      	ands	r3, r2
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 80049ac:	2384      	movs	r3, #132	; 0x84
 80049ae:	58d3      	ldr	r3, [r2, r3]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43da      	mvns	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	4013      	ands	r3, r2
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049d0:	4914      	ldr	r1, [pc, #80]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 80049d2:	2284      	movs	r2, #132	; 0x84
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	58d3      	ldr	r3, [r2, r3]
 80049de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	43da      	mvns	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	025b      	lsls	r3, r3, #9
 80049f2:	4013      	ands	r3, r2
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049fe:	4909      	ldr	r1, [pc, #36]	; (8004a24 <HAL_GPIO_Init+0x2b8>)
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	40da      	lsrs	r2, r3
 8004a14:	1e13      	subs	r3, r2, #0
 8004a16:	d000      	beq.n	8004a1a <HAL_GPIO_Init+0x2ae>
 8004a18:	e6b0      	b.n	800477c <HAL_GPIO_Init+0x10>
  }
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b006      	add	sp, #24
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021800 	.word	0x40021800
 8004a28:	50000400 	.word	0x50000400
 8004a2c:	50000800 	.word	0x50000800
 8004a30:	50000c00 	.word	0x50000c00

08004a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	000a      	movs	r2, r1
 8004a3e:	1cbb      	adds	r3, r7, #2
 8004a40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	1cba      	adds	r2, r7, #2
 8004a48:	8812      	ldrh	r2, [r2, #0]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a4e:	230f      	movs	r3, #15
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e003      	b.n	8004a60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a58:	230f      	movs	r3, #15
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a60:	230f      	movs	r3, #15
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	781b      	ldrb	r3, [r3, #0]
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	0008      	movs	r0, r1
 8004a78:	0011      	movs	r1, r2
 8004a7a:	1cbb      	adds	r3, r7, #2
 8004a7c:	1c02      	adds	r2, r0, #0
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	1c7b      	adds	r3, r7, #1
 8004a82:	1c0a      	adds	r2, r1, #0
 8004a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a86:	1c7b      	adds	r3, r7, #1
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a8e:	1cbb      	adds	r3, r7, #2
 8004a90:	881a      	ldrh	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a96:	e003      	b.n	8004aa0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a98:	1cbb      	adds	r3, r7, #2
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	0002      	movs	r2, r0
 8004ab0:	1dbb      	adds	r3, r7, #6
 8004ab2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	1dba      	adds	r2, r7, #6
 8004aba:	8812      	ldrh	r2, [r2, #0]
 8004abc:	4013      	ands	r3, r2
 8004abe:	d008      	beq.n	8004ad2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ac2:	1dba      	adds	r2, r7, #6
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004ac8:	1dbb      	adds	r3, r7, #6
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 f815 	bl	8004afc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	1dba      	adds	r2, r7, #6
 8004ad8:	8812      	ldrh	r2, [r2, #0]
 8004ada:	4013      	ands	r3, r2
 8004adc:	d008      	beq.n	8004af0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ae0:	1dba      	adds	r2, r7, #6
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f007 fa3a 	bl	800bf64 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021800 	.word	0x40021800

08004afc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	0002      	movs	r2, r0
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e082      	b.n	8004c28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2241      	movs	r2, #65	; 0x41
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2240      	movs	r2, #64	; 0x40
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f005 f91f 	bl	8009d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2241      	movs	r2, #65	; 0x41
 8004b42:	2124      	movs	r1, #36	; 0x24
 8004b44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2101      	movs	r1, #1
 8004b52:	438a      	bics	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4934      	ldr	r1, [pc, #208]	; (8004c30 <HAL_I2C_Init+0x120>)
 8004b60:	400a      	ands	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4931      	ldr	r1, [pc, #196]	; (8004c34 <HAL_I2C_Init+0x124>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d108      	bne.n	8004b8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	0209      	lsls	r1, r1, #8
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	e007      	b.n	8004b9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2184      	movs	r1, #132	; 0x84
 8004b98:	0209      	lsls	r1, r1, #8
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d104      	bne.n	8004bb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	491f      	ldr	r1, [pc, #124]	; (8004c38 <HAL_I2C_Init+0x128>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	491a      	ldr	r1, [pc, #104]	; (8004c34 <HAL_I2C_Init+0x124>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69d9      	ldr	r1, [r3, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2101      	movs	r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2241      	movs	r2, #65	; 0x41
 8004c14:	2120      	movs	r1, #32
 8004c16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2242      	movs	r2, #66	; 0x42
 8004c22:	2100      	movs	r1, #0
 8004c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	f0ffffff 	.word	0xf0ffffff
 8004c34:	ffff7fff 	.word	0xffff7fff
 8004c38:	02008000 	.word	0x02008000

08004c3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	000c      	movs	r4, r1
 8004c46:	0010      	movs	r0, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	1c22      	adds	r2, r4, #0
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	2308      	movs	r3, #8
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	1c02      	adds	r2, r0, #0
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	1dbb      	adds	r3, r7, #6
 8004c5c:	1c0a      	adds	r2, r1, #0
 8004c5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2241      	movs	r2, #65	; 0x41
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d000      	beq.n	8004c6e <HAL_I2C_Mem_Write+0x32>
 8004c6c:	e10c      	b.n	8004e88 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_I2C_Mem_Write+0x42>
 8004c74:	232c      	movs	r3, #44	; 0x2c
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0ff      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2240      	movs	r2, #64	; 0x40
 8004c8e:	5c9b      	ldrb	r3, [r3, r2]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_I2C_Mem_Write+0x5c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0f8      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ca0:	f7fe fc26 	bl	80034f0 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	0219      	lsls	r1, r3, #8
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f000 fb0b 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	1e03      	subs	r3, r0, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e0e3      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2241      	movs	r2, #65	; 0x41
 8004cc6:	2121      	movs	r1, #33	; 0x21
 8004cc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2242      	movs	r2, #66	; 0x42
 8004cce:	2140      	movs	r1, #64	; 0x40
 8004cd0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	222c      	movs	r2, #44	; 0x2c
 8004ce2:	18ba      	adds	r2, r7, r2
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881c      	ldrh	r4, [r3, #0]
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	881a      	ldrh	r2, [r3, #0]
 8004cf8:	230a      	movs	r3, #10
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	8819      	ldrh	r1, [r3, #0]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	0023      	movs	r3, r4
 8004d0a:	f000 f9f9 	bl	8005100 <I2C_RequestMemoryWrite>
 8004d0e:	1e03      	subs	r3, r0, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2240      	movs	r2, #64	; 0x40
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0b5      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2bff      	cmp	r3, #255	; 0xff
 8004d26:	d911      	bls.n	8004d4c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	045c      	lsls	r4, r3, #17
 8004d38:	230a      	movs	r3, #10
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	8819      	ldrh	r1, [r3, #0]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	0023      	movs	r3, r4
 8004d46:	f000 fc89 	bl	800565c <I2C_TransferConfig>
 8004d4a:	e012      	b.n	8004d72 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	049c      	lsls	r4, r3, #18
 8004d60:	230a      	movs	r3, #10
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	8819      	ldrh	r1, [r3, #0]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	0023      	movs	r3, r4
 8004d6e:	f000 fc75 	bl	800565c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 fae8 	bl	800534e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e081      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d03a      	beq.n	8004e36 <HAL_I2C_Mem_Write+0x1fa>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d136      	bne.n	8004e36 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	0013      	movs	r3, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	f000 fa7b 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e053      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2bff      	cmp	r3, #255	; 0xff
 8004dea:	d911      	bls.n	8004e10 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	045c      	lsls	r4, r3, #17
 8004dfc:	230a      	movs	r3, #10
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	8819      	ldrh	r1, [r3, #0]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	2300      	movs	r3, #0
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	0023      	movs	r3, r4
 8004e0a:	f000 fc27 	bl	800565c <I2C_TransferConfig>
 8004e0e:	e012      	b.n	8004e36 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	049c      	lsls	r4, r3, #18
 8004e24:	230a      	movs	r3, #10
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	8819      	ldrh	r1, [r3, #0]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	0023      	movs	r3, r4
 8004e32:	f000 fc13 	bl	800565c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d198      	bne.n	8004d72 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 fac0 	bl	80053cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e4c:	1e03      	subs	r3, r0, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e01a      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	490b      	ldr	r1, [pc, #44]	; (8004e94 <HAL_I2C_Mem_Write+0x258>)
 8004e68:	400a      	ands	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2241      	movs	r2, #65	; 0x41
 8004e70:	2120      	movs	r1, #32
 8004e72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2242      	movs	r2, #66	; 0x42
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b007      	add	sp, #28
 8004e90:	bd90      	pop	{r4, r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	fe00e800 	.word	0xfe00e800

08004e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	000c      	movs	r4, r1
 8004ea2:	0010      	movs	r0, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	230a      	movs	r3, #10
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	1c22      	adds	r2, r4, #0
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	2308      	movs	r3, #8
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	1c02      	adds	r2, r0, #0
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	1dbb      	adds	r3, r7, #6
 8004eb8:	1c0a      	adds	r2, r1, #0
 8004eba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2241      	movs	r2, #65	; 0x41
 8004ec0:	5c9b      	ldrb	r3, [r3, r2]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d000      	beq.n	8004eca <HAL_I2C_Mem_Read+0x32>
 8004ec8:	e110      	b.n	80050ec <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_I2C_Mem_Read+0x42>
 8004ed0:	232c      	movs	r3, #44	; 0x2c
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d105      	bne.n	8004ee6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	0092      	lsls	r2, r2, #2
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e103      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	5c9b      	ldrb	r3, [r3, r2]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2C_Mem_Read+0x5c>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e0fc      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004efc:	f7fe faf8 	bl	80034f0 <HAL_GetTick>
 8004f00:	0003      	movs	r3, r0
 8004f02:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	0219      	lsls	r1, r3, #8
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	2319      	movs	r3, #25
 8004f10:	2201      	movs	r2, #1
 8004f12:	f000 f9dd 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004f16:	1e03      	subs	r3, r0, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0e7      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2241      	movs	r2, #65	; 0x41
 8004f22:	2122      	movs	r1, #34	; 0x22
 8004f24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2242      	movs	r2, #66	; 0x42
 8004f2a:	2140      	movs	r1, #64	; 0x40
 8004f2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	222c      	movs	r2, #44	; 0x2c
 8004f3e:	18ba      	adds	r2, r7, r2
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f4a:	1dbb      	adds	r3, r7, #6
 8004f4c:	881c      	ldrh	r4, [r3, #0]
 8004f4e:	2308      	movs	r3, #8
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	230a      	movs	r3, #10
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	8819      	ldrh	r1, [r3, #0]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	0023      	movs	r3, r4
 8004f66:	f000 f92f 	bl	80051c8 <I2C_RequestMemoryRead>
 8004f6a:	1e03      	subs	r3, r0, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	2100      	movs	r1, #0
 8004f74:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0b9      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2bff      	cmp	r3, #255	; 0xff
 8004f82:	d911      	bls.n	8004fa8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	22ff      	movs	r2, #255	; 0xff
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	045c      	lsls	r4, r3, #17
 8004f94:	230a      	movs	r3, #10
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	8819      	ldrh	r1, [r3, #0]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	4b56      	ldr	r3, [pc, #344]	; (80050f8 <HAL_I2C_Mem_Read+0x260>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	0023      	movs	r3, r4
 8004fa2:	f000 fb5b 	bl	800565c <I2C_TransferConfig>
 8004fa6:	e012      	b.n	8004fce <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	049c      	lsls	r4, r3, #18
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	8819      	ldrh	r1, [r3, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <HAL_I2C_Mem_Read+0x260>)
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	0023      	movs	r3, r4
 8004fca:	f000 fb47 	bl	800565c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	0013      	movs	r3, r2
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2104      	movs	r1, #4
 8004fdc:	f000 f978 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8004fe0:	1e03      	subs	r3, r0, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e082      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d03a      	beq.n	800509a <HAL_I2C_Mem_Read+0x202>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d136      	bne.n	800509a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800502c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	0013      	movs	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	f000 f949 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 800503e:	1e03      	subs	r3, r0, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e053      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	2bff      	cmp	r3, #255	; 0xff
 800504e:	d911      	bls.n	8005074 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	22ff      	movs	r2, #255	; 0xff
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	b2da      	uxtb	r2, r3
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	045c      	lsls	r4, r3, #17
 8005060:	230a      	movs	r3, #10
 8005062:	18fb      	adds	r3, r7, r3
 8005064:	8819      	ldrh	r1, [r3, #0]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	2300      	movs	r3, #0
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	0023      	movs	r3, r4
 800506e:	f000 faf5 	bl	800565c <I2C_TransferConfig>
 8005072:	e012      	b.n	800509a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	b2da      	uxtb	r2, r3
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	049c      	lsls	r4, r3, #18
 8005088:	230a      	movs	r3, #10
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	8819      	ldrh	r1, [r3, #0]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	0023      	movs	r3, r4
 8005096:	f000 fae1 	bl	800565c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d194      	bne.n	8004fce <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 f98e 	bl	80053cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80050b0:	1e03      	subs	r3, r0, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01a      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2220      	movs	r2, #32
 80050be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	490c      	ldr	r1, [pc, #48]	; (80050fc <HAL_I2C_Mem_Read+0x264>)
 80050cc:	400a      	ands	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2241      	movs	r2, #65	; 0x41
 80050d4:	2120      	movs	r1, #32
 80050d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2242      	movs	r2, #66	; 0x42
 80050dc:	2100      	movs	r1, #0
 80050de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	0018      	movs	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b007      	add	sp, #28
 80050f4:	bd90      	pop	{r4, r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	80002400 	.word	0x80002400
 80050fc:	fe00e800 	.word	0xfe00e800

08005100 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005100:	b5b0      	push	{r4, r5, r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	000c      	movs	r4, r1
 800510a:	0010      	movs	r0, r2
 800510c:	0019      	movs	r1, r3
 800510e:	250a      	movs	r5, #10
 8005110:	197b      	adds	r3, r7, r5
 8005112:	1c22      	adds	r2, r4, #0
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	2308      	movs	r3, #8
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	1c02      	adds	r2, r0, #0
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	1dbb      	adds	r3, r7, #6
 8005120:	1c0a      	adds	r2, r1, #0
 8005122:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005124:	1dbb      	adds	r3, r7, #6
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	045c      	lsls	r4, r3, #17
 800512e:	197b      	adds	r3, r7, r5
 8005130:	8819      	ldrh	r1, [r3, #0]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <I2C_RequestMemoryWrite+0xc4>)
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	0023      	movs	r3, r4
 800513a:	f000 fa8f 	bl	800565c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 f902 	bl	800534e <I2C_WaitOnTXISFlagUntilTimeout>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d001      	beq.n	8005152 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e033      	b.n	80051ba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800515a:	2308      	movs	r3, #8
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
 8005168:	e019      	b.n	800519e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800516a:	2308      	movs	r3, #8
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	0a1b      	lsrs	r3, r3, #8
 8005172:	b29b      	uxth	r3, r3
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	6a39      	ldr	r1, [r7, #32]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 f8e3 	bl	800534e <I2C_WaitOnTXISFlagUntilTimeout>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d001      	beq.n	8005190 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e014      	b.n	80051ba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005190:	2308      	movs	r3, #8
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	0013      	movs	r3, r2
 80051a8:	2200      	movs	r2, #0
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	f000 f890 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 80051b0:	1e03      	subs	r3, r0, #0
 80051b2:	d001      	beq.n	80051b8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b004      	add	sp, #16
 80051c0:	bdb0      	pop	{r4, r5, r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	80002000 	.word	0x80002000

080051c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80051c8:	b5b0      	push	{r4, r5, r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	000c      	movs	r4, r1
 80051d2:	0010      	movs	r0, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	250a      	movs	r5, #10
 80051d8:	197b      	adds	r3, r7, r5
 80051da:	1c22      	adds	r2, r4, #0
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	2308      	movs	r3, #8
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	1c02      	adds	r2, r0, #0
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	1dbb      	adds	r3, r7, #6
 80051e8:	1c0a      	adds	r2, r1, #0
 80051ea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80051ec:	1dbb      	adds	r3, r7, #6
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	197b      	adds	r3, r7, r5
 80051f4:	8819      	ldrh	r1, [r3, #0]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	4b23      	ldr	r3, [pc, #140]	; (8005288 <I2C_RequestMemoryRead+0xc0>)
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	f000 fa2d 	bl	800565c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005204:	6a39      	ldr	r1, [r7, #32]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	0018      	movs	r0, r3
 800520a:	f000 f8a0 	bl	800534e <I2C_WaitOnTXISFlagUntilTimeout>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d001      	beq.n	8005216 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e033      	b.n	800527e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005216:	1dbb      	adds	r3, r7, #6
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d107      	bne.n	800522e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800521e:	2308      	movs	r3, #8
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
 800522c:	e019      	b.n	8005262 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800522e:	2308      	movs	r3, #8
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	b29b      	uxth	r3, r3
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	0018      	movs	r0, r3
 8005248:	f000 f881 	bl	800534e <I2C_WaitOnTXISFlagUntilTimeout>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d001      	beq.n	8005254 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e014      	b.n	800527e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005254:	2308      	movs	r3, #8
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	0013      	movs	r3, r2
 800526c:	2200      	movs	r2, #0
 800526e:	2140      	movs	r1, #64	; 0x40
 8005270:	f000 f82e 	bl	80052d0 <I2C_WaitOnFlagUntilTimeout>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d001      	beq.n	800527c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b004      	add	sp, #16
 8005284:	bdb0      	pop	{r4, r5, r7, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	80002000 	.word	0x80002000

0800528c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2202      	movs	r2, #2
 800529c:	4013      	ands	r3, r2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d103      	bne.n	80052aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2201      	movs	r2, #1
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d007      	beq.n	80052c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2101      	movs	r1, #1
 80052c4:	430a      	orrs	r2, r1
 80052c6:	619a      	str	r2, [r3, #24]
  }
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e0:	e021      	b.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	d01e      	beq.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fe f902 	bl	80034f0 <HAL_GetTick>
 80052ec:	0002      	movs	r2, r0
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d113      	bne.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	2220      	movs	r2, #32
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2241      	movs	r2, #65	; 0x41
 800530e:	2120      	movs	r1, #32
 8005310:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2242      	movs	r2, #66	; 0x42
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2240      	movs	r2, #64	; 0x40
 800531e:	2100      	movs	r1, #0
 8005320:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e00f      	b.n	8005346 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	425a      	negs	r2, r3
 8005336:	4153      	adcs	r3, r2
 8005338:	b2db      	uxtb	r3, r3
 800533a:	001a      	movs	r2, r3
 800533c:	1dfb      	adds	r3, r7, #7
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d0ce      	beq.n	80052e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	0018      	movs	r0, r3
 8005348:	46bd      	mov	sp, r7
 800534a:	b004      	add	sp, #16
 800534c:	bd80      	pop	{r7, pc}

0800534e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800535a:	e02b      	b.n	80053b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f86e 	bl	8005444 <I2C_IsErrorOccurred>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d001      	beq.n	8005370 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e029      	b.n	80053c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	3301      	adds	r3, #1
 8005374:	d01e      	beq.n	80053b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fe f8bb 	bl	80034f0 <HAL_GetTick>
 800537a:	0002      	movs	r2, r0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d113      	bne.n	80053b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	2220      	movs	r2, #32
 8005392:	431a      	orrs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2241      	movs	r2, #65	; 0x41
 800539c:	2120      	movs	r1, #32
 800539e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2242      	movs	r2, #66	; 0x42
 80053a4:	2100      	movs	r1, #0
 80053a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2240      	movs	r2, #64	; 0x40
 80053ac:	2100      	movs	r1, #0
 80053ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e007      	b.n	80053c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2202      	movs	r2, #2
 80053bc:	4013      	ands	r3, r2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d1cc      	bne.n	800535c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b004      	add	sp, #16
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053d8:	e028      	b.n	800542c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 f82f 	bl	8005444 <I2C_IsErrorOccurred>
 80053e6:	1e03      	subs	r3, r0, #0
 80053e8:	d001      	beq.n	80053ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e026      	b.n	800543c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fe f87f 	bl	80034f0 <HAL_GetTick>
 80053f2:	0002      	movs	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d113      	bne.n	800542c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	2220      	movs	r2, #32
 800540a:	431a      	orrs	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2241      	movs	r2, #65	; 0x41
 8005414:	2120      	movs	r1, #32
 8005416:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2242      	movs	r2, #66	; 0x42
 800541c:	2100      	movs	r1, #0
 800541e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	2100      	movs	r1, #0
 8005426:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e007      	b.n	800543c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2220      	movs	r2, #32
 8005434:	4013      	ands	r3, r2
 8005436:	2b20      	cmp	r3, #32
 8005438:	d1cf      	bne.n	80053da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b004      	add	sp, #16
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b08b      	sub	sp, #44	; 0x2c
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2327      	movs	r3, #39	; 0x27
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2210      	movs	r2, #16
 800546c:	4013      	ands	r3, r2
 800546e:	d100      	bne.n	8005472 <I2C_IsErrorOccurred+0x2e>
 8005470:	e08e      	b.n	8005590 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2210      	movs	r2, #16
 8005478:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800547a:	e06c      	b.n	8005556 <I2C_IsErrorOccurred+0x112>
 800547c:	2427      	movs	r4, #39	; 0x27
 800547e:	193b      	adds	r3, r7, r4
 8005480:	193a      	adds	r2, r7, r4
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	3301      	adds	r3, #1
 800548a:	d064      	beq.n	8005556 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800548c:	f7fe f830 	bl	80034f0 <HAL_GetTick>
 8005490:	0002      	movs	r2, r0
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d306      	bcc.n	80054aa <I2C_IsErrorOccurred+0x66>
 800549c:	193b      	adds	r3, r7, r4
 800549e:	193a      	adds	r2, r7, r4
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d155      	bne.n	8005556 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	4013      	ands	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054b8:	2013      	movs	r0, #19
 80054ba:	183b      	adds	r3, r7, r0
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	2142      	movs	r1, #66	; 0x42
 80054c0:	5c52      	ldrb	r2, [r2, r1]
 80054c2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	401a      	ands	r2, r3
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d137      	bne.n	8005548 <I2C_IsErrorOccurred+0x104>
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	01db      	lsls	r3, r3, #7
 80054de:	429a      	cmp	r2, r3
 80054e0:	d032      	beq.n	8005548 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 80054e2:	183b      	adds	r3, r7, r0
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d02e      	beq.n	8005548 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	01c9      	lsls	r1, r1, #7
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054fc:	f7fd fff8 	bl	80034f0 <HAL_GetTick>
 8005500:	0003      	movs	r3, r0
 8005502:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005504:	e020      	b.n	8005548 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005506:	f7fd fff3 	bl	80034f0 <HAL_GetTick>
 800550a:	0002      	movs	r2, r0
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2027      	movs	r0, #39	; 0x27
 8005512:	183a      	adds	r2, r7, r0
 8005514:	1839      	adds	r1, r7, r0
 8005516:	7809      	ldrb	r1, [r1, #0]
 8005518:	7011      	strb	r1, [r2, #0]
 800551a:	2b19      	cmp	r3, #25
 800551c:	d914      	bls.n	8005548 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	2220      	movs	r2, #32
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2241      	movs	r2, #65	; 0x41
 800552e:	2120      	movs	r1, #32
 8005530:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2242      	movs	r2, #66	; 0x42
 8005536:	2100      	movs	r1, #0
 8005538:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	2100      	movs	r1, #0
 8005540:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8005542:	183b      	adds	r3, r7, r0
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2220      	movs	r2, #32
 8005550:	4013      	ands	r3, r2
 8005552:	2b20      	cmp	r3, #32
 8005554:	d1d7      	bne.n	8005506 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2220      	movs	r2, #32
 800555e:	4013      	ands	r3, r2
 8005560:	2b20      	cmp	r3, #32
 8005562:	d004      	beq.n	800556e <I2C_IsErrorOccurred+0x12a>
 8005564:	2327      	movs	r3, #39	; 0x27
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d086      	beq.n	800547c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800556e:	2327      	movs	r3, #39	; 0x27
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d103      	bne.n	8005580 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2220      	movs	r2, #32
 800557e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	2204      	movs	r2, #4
 8005584:	4313      	orrs	r3, r2
 8005586:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005588:	2327      	movs	r3, #39	; 0x27
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	d00c      	beq.n	80055bc <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2201      	movs	r2, #1
 80055a6:	4313      	orrs	r3, r2
 80055a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	0052      	lsls	r2, r2, #1
 80055b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055b4:	2327      	movs	r3, #39	; 0x27
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4013      	ands	r3, r2
 80055c4:	d00c      	beq.n	80055e0 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4313      	orrs	r3, r2
 80055cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	00d2      	lsls	r2, r2, #3
 80055d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055d8:	2327      	movs	r3, #39	; 0x27
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	2201      	movs	r2, #1
 80055de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4013      	ands	r3, r2
 80055e8:	d00c      	beq.n	8005604 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2202      	movs	r2, #2
 80055ee:	4313      	orrs	r3, r2
 80055f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2280      	movs	r2, #128	; 0x80
 80055f8:	0092      	lsls	r2, r2, #2
 80055fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055fc:	2327      	movs	r3, #39	; 0x27
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005604:	2327      	movs	r3, #39	; 0x27
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0018      	movs	r0, r3
 8005612:	f7ff fe3b 	bl	800528c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	490d      	ldr	r1, [pc, #52]	; (8005658 <I2C_IsErrorOccurred+0x214>)
 8005622:	400a      	ands	r2, r1
 8005624:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2241      	movs	r2, #65	; 0x41
 8005636:	2120      	movs	r1, #32
 8005638:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2242      	movs	r2, #66	; 0x42
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800564a:	2327      	movs	r3, #39	; 0x27
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	781b      	ldrb	r3, [r3, #0]
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b00b      	add	sp, #44	; 0x2c
 8005656:	bd90      	pop	{r4, r7, pc}
 8005658:	fe00e800 	.word	0xfe00e800

0800565c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800565c:	b590      	push	{r4, r7, lr}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	0008      	movs	r0, r1
 8005666:	0011      	movs	r1, r2
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	240a      	movs	r4, #10
 800566c:	193b      	adds	r3, r7, r4
 800566e:	1c02      	adds	r2, r0, #0
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	2009      	movs	r0, #9
 8005674:	183b      	adds	r3, r7, r0
 8005676:	1c0a      	adds	r2, r1, #0
 8005678:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800567a:	193b      	adds	r3, r7, r4
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	059b      	lsls	r3, r3, #22
 8005680:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005682:	183b      	adds	r3, r7, r0
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	0419      	lsls	r1, r3, #16
 8005688:	23ff      	movs	r3, #255	; 0xff
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800568e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	4313      	orrs	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a6:	0d51      	lsrs	r1, r2, #21
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	00d2      	lsls	r2, r2, #3
 80056ac:	400a      	ands	r2, r1
 80056ae:	4907      	ldr	r1, [pc, #28]	; (80056cc <I2C_TransferConfig+0x70>)
 80056b0:	430a      	orrs	r2, r1
 80056b2:	43d2      	mvns	r2, r2
 80056b4:	401a      	ands	r2, r3
 80056b6:	0011      	movs	r1, r2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b007      	add	sp, #28
 80056c8:	bd90      	pop	{r4, r7, pc}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	03ff63ff 	.word	0x03ff63ff

080056d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2241      	movs	r2, #65	; 0x41
 80056de:	5c9b      	ldrb	r3, [r3, r2]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d138      	bne.n	8005758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	5c9b      	ldrb	r3, [r3, r2]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e032      	b.n	800575a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2240      	movs	r2, #64	; 0x40
 80056f8:	2101      	movs	r1, #1
 80056fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2241      	movs	r2, #65	; 0x41
 8005700:	2124      	movs	r1, #36	; 0x24
 8005702:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2101      	movs	r1, #1
 8005710:	438a      	bics	r2, r1
 8005712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4911      	ldr	r1, [pc, #68]	; (8005764 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005720:	400a      	ands	r2, r1
 8005722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2101      	movs	r1, #1
 8005740:	430a      	orrs	r2, r1
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2241      	movs	r2, #65	; 0x41
 8005748:	2120      	movs	r1, #32
 800574a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2240      	movs	r2, #64	; 0x40
 8005750:	2100      	movs	r1, #0
 8005752:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b002      	add	sp, #8
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	ffffefff 	.word	0xffffefff

08005768 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2241      	movs	r2, #65	; 0x41
 8005776:	5c9b      	ldrb	r3, [r3, r2]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	d139      	bne.n	80057f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	5c9b      	ldrb	r3, [r3, r2]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005788:	2302      	movs	r3, #2
 800578a:	e033      	b.n	80057f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2240      	movs	r2, #64	; 0x40
 8005790:	2101      	movs	r1, #1
 8005792:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2241      	movs	r2, #65	; 0x41
 8005798:	2124      	movs	r1, #36	; 0x24
 800579a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2101      	movs	r1, #1
 80057a8:	438a      	bics	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a11      	ldr	r2, [pc, #68]	; (80057fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2101      	movs	r1, #1
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2241      	movs	r2, #65	; 0x41
 80057e2:	2120      	movs	r1, #32
 80057e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2240      	movs	r2, #64	; 0x40
 80057ea:	2100      	movs	r1, #0
 80057ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b004      	add	sp, #16
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	fffff0ff 	.word	0xfffff0ff

08005800 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	000a      	movs	r2, r1
 800580a:	1cfb      	adds	r3, r7, #3
 800580c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <HAL_PWR_EnterSTOPMode+0x68>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2207      	movs	r2, #7
 800581a:	4393      	bics	r3, r2
 800581c:	001a      	movs	r2, r3
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_PWR_EnterSTOPMode+0x68>)
 8005820:	2101      	movs	r1, #1
 8005822:	430a      	orrs	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e005      	b.n	8005834 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <HAL_PWR_EnterSTOPMode+0x68>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_PWR_EnterSTOPMode+0x68>)
 800582e:	2107      	movs	r1, #7
 8005830:	438a      	bics	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005834:	4b0d      	ldr	r3, [pc, #52]	; (800586c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <HAL_PWR_EnterSTOPMode+0x6c>)
 800583a:	2104      	movs	r1, #4
 800583c:	430a      	orrs	r2, r1
 800583e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005840:	1cfb      	adds	r3, r7, #3
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005848:	bf30      	wfi
 800584a:	e002      	b.n	8005852 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800584c:	bf40      	sev
    __WFE();
 800584e:	bf20      	wfe
    __WFE();
 8005850:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <HAL_PWR_EnterSTOPMode+0x6c>)
 8005858:	2104      	movs	r1, #4
 800585a:	438a      	bics	r2, r1
 800585c:	611a      	str	r2, [r3, #16]
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b002      	add	sp, #8
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	40007000 	.word	0x40007000
 800586c:	e000ed00 	.word	0xe000ed00

08005870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005878:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800587e:	4013      	ands	r3, r2
 8005880:	0019      	movs	r1, r3
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d11f      	bne.n	80058d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005894:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	0013      	movs	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	189b      	adds	r3, r3, r2
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4912      	ldr	r1, [pc, #72]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7fa fc38 	bl	8000118 <__udivsi3>
 80058a8:	0003      	movs	r3, r0
 80058aa:	3301      	adds	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058ae:	e008      	b.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e001      	b.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e009      	b.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	401a      	ands	r2, r3
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d0ed      	beq.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	0018      	movs	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	b004      	add	sp, #16
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	40007000 	.word	0x40007000
 80058e4:	fffff9ff 	.word	0xfffff9ff
 80058e8:	20000030 	.word	0x20000030
 80058ec:	000f4240 	.word	0x000f4240

080058f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e2fe      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2201      	movs	r2, #1
 8005908:	4013      	ands	r3, r2
 800590a:	d100      	bne.n	800590e <HAL_RCC_OscConfig+0x1e>
 800590c:	e07c      	b.n	8005a08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590e:	4bc3      	ldr	r3, [pc, #780]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2238      	movs	r2, #56	; 0x38
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	4bc0      	ldr	r3, [pc, #768]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2203      	movs	r2, #3
 800591e:	4013      	ands	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b10      	cmp	r3, #16
 8005926:	d102      	bne.n	800592e <HAL_RCC_OscConfig+0x3e>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d002      	beq.n	8005934 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d10b      	bne.n	800594c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005934:	4bb9      	ldr	r3, [pc, #740]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	2380      	movs	r3, #128	; 0x80
 800593a:	029b      	lsls	r3, r3, #10
 800593c:	4013      	ands	r3, r2
 800593e:	d062      	beq.n	8005a06 <HAL_RCC_OscConfig+0x116>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d15e      	bne.n	8005a06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e2d9      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	025b      	lsls	r3, r3, #9
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x78>
 8005958:	4bb0      	ldr	r3, [pc, #704]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4baf      	ldr	r3, [pc, #700]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 800595e:	2180      	movs	r1, #128	; 0x80
 8005960:	0249      	lsls	r1, r1, #9
 8005962:	430a      	orrs	r2, r1
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e020      	b.n	80059aa <HAL_RCC_OscConfig+0xba>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	23a0      	movs	r3, #160	; 0xa0
 800596e:	02db      	lsls	r3, r3, #11
 8005970:	429a      	cmp	r2, r3
 8005972:	d10e      	bne.n	8005992 <HAL_RCC_OscConfig+0xa2>
 8005974:	4ba9      	ldr	r3, [pc, #676]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4ba8      	ldr	r3, [pc, #672]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 800597a:	2180      	movs	r1, #128	; 0x80
 800597c:	02c9      	lsls	r1, r1, #11
 800597e:	430a      	orrs	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	4ba6      	ldr	r3, [pc, #664]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4ba5      	ldr	r3, [pc, #660]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	0249      	lsls	r1, r1, #9
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e00b      	b.n	80059aa <HAL_RCC_OscConfig+0xba>
 8005992:	4ba2      	ldr	r3, [pc, #648]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4ba1      	ldr	r3, [pc, #644]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005998:	49a1      	ldr	r1, [pc, #644]	; (8005c20 <HAL_RCC_OscConfig+0x330>)
 800599a:	400a      	ands	r2, r1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	4b9f      	ldr	r3, [pc, #636]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b9e      	ldr	r3, [pc, #632]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 80059a4:	499f      	ldr	r1, [pc, #636]	; (8005c24 <HAL_RCC_OscConfig+0x334>)
 80059a6:	400a      	ands	r2, r1
 80059a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d014      	beq.n	80059dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fd fd9d 	bl	80034f0 <HAL_GetTick>
 80059b6:	0003      	movs	r3, r0
 80059b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059bc:	f7fd fd98 	bl	80034f0 <HAL_GetTick>
 80059c0:	0002      	movs	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e298      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ce:	4b93      	ldr	r3, [pc, #588]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	029b      	lsls	r3, r3, #10
 80059d6:	4013      	ands	r3, r2
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0xcc>
 80059da:	e015      	b.n	8005a08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fd fd88 	bl	80034f0 <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e6:	f7fd fd83 	bl	80034f0 <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b64      	cmp	r3, #100	; 0x64
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e283      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059f8:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	029b      	lsls	r3, r3, #10
 8005a00:	4013      	ands	r3, r2
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0xf6>
 8005a04:	e000      	b.n	8005a08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d100      	bne.n	8005a14 <HAL_RCC_OscConfig+0x124>
 8005a12:	e099      	b.n	8005b48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a14:	4b81      	ldr	r3, [pc, #516]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2238      	movs	r2, #56	; 0x38
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a1e:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	2203      	movs	r2, #3
 8005a24:	4013      	ands	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d102      	bne.n	8005a34 <HAL_RCC_OscConfig+0x144>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d002      	beq.n	8005a3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d135      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a3a:	4b78      	ldr	r3, [pc, #480]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4013      	ands	r3, r2
 8005a44:	d005      	beq.n	8005a52 <HAL_RCC_OscConfig+0x162>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e256      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a52:	4b72      	ldr	r3, [pc, #456]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4a74      	ldr	r2, [pc, #464]	; (8005c28 <HAL_RCC_OscConfig+0x338>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	021a      	lsls	r2, r3, #8
 8005a62:	4b6e      	ldr	r3, [pc, #440]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d112      	bne.n	8005a94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a6e:	4b6b      	ldr	r3, [pc, #428]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6e      	ldr	r2, [pc, #440]	; (8005c2c <HAL_RCC_OscConfig+0x33c>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	4b67      	ldr	r3, [pc, #412]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005a82:	4b66      	ldr	r3, [pc, #408]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	0adb      	lsrs	r3, r3, #11
 8005a88:	2207      	movs	r2, #7
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	4a68      	ldr	r2, [pc, #416]	; (8005c30 <HAL_RCC_OscConfig+0x340>)
 8005a8e:	40da      	lsrs	r2, r3
 8005a90:	4b68      	ldr	r3, [pc, #416]	; (8005c34 <HAL_RCC_OscConfig+0x344>)
 8005a92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a94:	4b68      	ldr	r3, [pc, #416]	; (8005c38 <HAL_RCC_OscConfig+0x348>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7fd fccd 	bl	8003438 <HAL_InitTick>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d051      	beq.n	8005b46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e22c      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d030      	beq.n	8005b10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005aae:	4b5b      	ldr	r3, [pc, #364]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a5e      	ldr	r2, [pc, #376]	; (8005c2c <HAL_RCC_OscConfig+0x33c>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005ac2:	4b56      	ldr	r3, [pc, #344]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b55      	ldr	r3, [pc, #340]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0049      	lsls	r1, r1, #1
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd fd0e 	bl	80034f0 <HAL_GetTick>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ada:	f7fd fd09 	bl	80034f0 <HAL_GetTick>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e209      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aec:	4b4b      	ldr	r3, [pc, #300]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4013      	ands	r3, r2
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a4a      	ldr	r2, [pc, #296]	; (8005c28 <HAL_RCC_OscConfig+0x338>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	0019      	movs	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	4b44      	ldr	r3, [pc, #272]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	e01b      	b.n	8005b48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005b10:	4b42      	ldr	r3, [pc, #264]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b16:	4949      	ldr	r1, [pc, #292]	; (8005c3c <HAL_RCC_OscConfig+0x34c>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fce8 	bl	80034f0 <HAL_GetTick>
 8005b20:	0003      	movs	r3, r0
 8005b22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b26:	f7fd fce3 	bl	80034f0 <HAL_GetTick>
 8005b2a:	0002      	movs	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e1e3      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4013      	ands	r3, r2
 8005b42:	d1f0      	bne.n	8005b26 <HAL_RCC_OscConfig+0x236>
 8005b44:	e000      	b.n	8005b48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d047      	beq.n	8005be2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b52:	4b32      	ldr	r3, [pc, #200]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2238      	movs	r2, #56	; 0x38
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b18      	cmp	r3, #24
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005b5e:	4b2f      	ldr	r3, [pc, #188]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b62:	2202      	movs	r2, #2
 8005b64:	4013      	ands	r3, r2
 8005b66:	d03c      	beq.n	8005be2 <HAL_RCC_OscConfig+0x2f2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d138      	bne.n	8005be2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e1c5      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005b7c:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b80:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005b82:	2101      	movs	r1, #1
 8005b84:	430a      	orrs	r2, r1
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fd fcb2 	bl	80034f0 <HAL_GetTick>
 8005b8c:	0003      	movs	r3, r0
 8005b8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b92:	f7fd fcad 	bl	80034f0 <HAL_GetTick>
 8005b96:	0002      	movs	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e1ad      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	2202      	movs	r2, #2
 8005baa:	4013      	ands	r3, r2
 8005bac:	d0f1      	beq.n	8005b92 <HAL_RCC_OscConfig+0x2a2>
 8005bae:	e018      	b.n	8005be2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	438a      	bics	r2, r1
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fc98 	bl	80034f0 <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc6:	f7fd fc93 	bl	80034f0 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e193      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bdc:	2202      	movs	r2, #2
 8005bde:	4013      	ands	r3, r2
 8005be0:	d1f1      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2204      	movs	r2, #4
 8005be8:	4013      	ands	r3, r2
 8005bea:	d100      	bne.n	8005bee <HAL_RCC_OscConfig+0x2fe>
 8005bec:	e0c6      	b.n	8005d7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bee:	231f      	movs	r3, #31
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2238      	movs	r2, #56	; 0x38
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d11e      	bne.n	8005c40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005c02:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <HAL_RCC_OscConfig+0x32c>)
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	2202      	movs	r2, #2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d100      	bne.n	8005c0e <HAL_RCC_OscConfig+0x31e>
 8005c0c:	e0b6      	b.n	8005d7c <HAL_RCC_OscConfig+0x48c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d000      	beq.n	8005c18 <HAL_RCC_OscConfig+0x328>
 8005c16:	e0b1      	b.n	8005d7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e171      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	fffeffff 	.word	0xfffeffff
 8005c24:	fffbffff 	.word	0xfffbffff
 8005c28:	ffff80ff 	.word	0xffff80ff
 8005c2c:	ffffc7ff 	.word	0xffffc7ff
 8005c30:	00f42400 	.word	0x00f42400
 8005c34:	20000030 	.word	0x20000030
 8005c38:	20000000 	.word	0x20000000
 8005c3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c40:	4bb1      	ldr	r3, [pc, #708]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	055b      	lsls	r3, r3, #21
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d101      	bne.n	8005c50 <HAL_RCC_OscConfig+0x360>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <HAL_RCC_OscConfig+0x362>
 8005c50:	2300      	movs	r3, #0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d011      	beq.n	8005c7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c56:	4bac      	ldr	r3, [pc, #688]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5a:	4bab      	ldr	r3, [pc, #684]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	0549      	lsls	r1, r1, #21
 8005c60:	430a      	orrs	r2, r1
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c64:	4ba8      	ldr	r3, [pc, #672]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	055b      	lsls	r3, r3, #21
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005c72:	231f      	movs	r3, #31
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7a:	4ba4      	ldr	r3, [pc, #656]	; (8005f0c <HAL_RCC_OscConfig+0x61c>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	4013      	ands	r3, r2
 8005c84:	d11a      	bne.n	8005cbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c86:	4ba1      	ldr	r3, [pc, #644]	; (8005f0c <HAL_RCC_OscConfig+0x61c>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4ba0      	ldr	r3, [pc, #640]	; (8005f0c <HAL_RCC_OscConfig+0x61c>)
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	0049      	lsls	r1, r1, #1
 8005c90:	430a      	orrs	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005c94:	f7fd fc2c 	bl	80034f0 <HAL_GetTick>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9e:	f7fd fc27 	bl	80034f0 <HAL_GetTick>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e127      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb0:	4b96      	ldr	r3, [pc, #600]	; (8005f0c <HAL_RCC_OscConfig+0x61c>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d106      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x3e2>
 8005cc4:	4b90      	ldr	r3, [pc, #576]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cc8:	4b8f      	ldr	r3, [pc, #572]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005cca:	2101      	movs	r1, #1
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cd0:	e01c      	b.n	8005d0c <HAL_RCC_OscConfig+0x41c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x404>
 8005cda:	4b8b      	ldr	r3, [pc, #556]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cde:	4b8a      	ldr	r3, [pc, #552]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ce6:	4b88      	ldr	r3, [pc, #544]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cea:	4b87      	ldr	r3, [pc, #540]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005cec:	2101      	movs	r1, #1
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0x41c>
 8005cf4:	4b84      	ldr	r3, [pc, #528]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005cf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf8:	4b83      	ldr	r3, [pc, #524]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	438a      	bics	r2, r1
 8005cfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d00:	4b81      	ldr	r3, [pc, #516]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d04:	4b80      	ldr	r3, [pc, #512]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d06:	2104      	movs	r1, #4
 8005d08:	438a      	bics	r2, r1
 8005d0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d014      	beq.n	8005d3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fd fbec 	bl	80034f0 <HAL_GetTick>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1c:	e009      	b.n	8005d32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fd fbe7 	bl	80034f0 <HAL_GetTick>
 8005d22:	0002      	movs	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	4a79      	ldr	r2, [pc, #484]	; (8005f10 <HAL_RCC_OscConfig+0x620>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e0e6      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d32:	4b75      	ldr	r3, [pc, #468]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d36:	2202      	movs	r2, #2
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x42e>
 8005d3c:	e013      	b.n	8005d66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fd fbd7 	bl	80034f0 <HAL_GetTick>
 8005d42:	0003      	movs	r3, r0
 8005d44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d46:	e009      	b.n	8005d5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fd fbd2 	bl	80034f0 <HAL_GetTick>
 8005d4c:	0002      	movs	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	4a6f      	ldr	r2, [pc, #444]	; (8005f10 <HAL_RCC_OscConfig+0x620>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0d1      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d5c:	4b6a      	ldr	r3, [pc, #424]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	2202      	movs	r2, #2
 8005d62:	4013      	ands	r3, r2
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d66:	231f      	movs	r3, #31
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d70:	4b65      	ldr	r3, [pc, #404]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d74:	4b64      	ldr	r3, [pc, #400]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d76:	4967      	ldr	r1, [pc, #412]	; (8005f14 <HAL_RCC_OscConfig+0x624>)
 8005d78:	400a      	ands	r2, r1
 8005d7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d100      	bne.n	8005d86 <HAL_RCC_OscConfig+0x496>
 8005d84:	e0bb      	b.n	8005efe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d86:	4b60      	ldr	r3, [pc, #384]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2238      	movs	r2, #56	; 0x38
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d100      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4a4>
 8005d92:	e07b      	b.n	8005e8c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d156      	bne.n	8005e4a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9c:	4b5a      	ldr	r3, [pc, #360]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b59      	ldr	r3, [pc, #356]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005da2:	495d      	ldr	r1, [pc, #372]	; (8005f18 <HAL_RCC_OscConfig+0x628>)
 8005da4:	400a      	ands	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd fba2 	bl	80034f0 <HAL_GetTick>
 8005dac:	0003      	movs	r3, r0
 8005dae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fd fb9d 	bl	80034f0 <HAL_GetTick>
 8005db6:	0002      	movs	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e09d      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc4:	4b50      	ldr	r3, [pc, #320]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	049b      	lsls	r3, r3, #18
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d1f0      	bne.n	8005db2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd0:	4b4d      	ldr	r3, [pc, #308]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a51      	ldr	r2, [pc, #324]	; (8005f1c <HAL_RCC_OscConfig+0x62c>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	0019      	movs	r1, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	4b42      	ldr	r3, [pc, #264]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e00:	430a      	orrs	r2, r1
 8005e02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e04:	4b40      	ldr	r3, [pc, #256]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	0449      	lsls	r1, r1, #17
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005e12:	4b3d      	ldr	r3, [pc, #244]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	4b3c      	ldr	r3, [pc, #240]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	0549      	lsls	r1, r1, #21
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fd fb66 	bl	80034f0 <HAL_GetTick>
 8005e24:	0003      	movs	r3, r0
 8005e26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e2a:	f7fd fb61 	bl	80034f0 <HAL_GetTick>
 8005e2e:	0002      	movs	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e061      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3c:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	049b      	lsls	r3, r3, #18
 8005e44:	4013      	ands	r3, r2
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x53a>
 8005e48:	e059      	b.n	8005efe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4a:	4b2f      	ldr	r3, [pc, #188]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e50:	4931      	ldr	r1, [pc, #196]	; (8005f18 <HAL_RCC_OscConfig+0x628>)
 8005e52:	400a      	ands	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fd fb4b 	bl	80034f0 <HAL_GetTick>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fd fb46 	bl	80034f0 <HAL_GetTick>
 8005e64:	0002      	movs	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e046      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e72:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	049b      	lsls	r3, r3, #18
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005e7e:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e84:	4926      	ldr	r1, [pc, #152]	; (8005f20 <HAL_RCC_OscConfig+0x630>)
 8005e86:	400a      	ands	r2, r1
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e038      	b.n	8005efe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e033      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <HAL_RCC_OscConfig+0x618>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d126      	bne.n	8005efa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2270      	movs	r2, #112	; 0x70
 8005eb0:	401a      	ands	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d11f      	bne.n	8005efa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	23fe      	movs	r3, #254	; 0xfe
 8005ebe:	01db      	lsls	r3, r3, #7
 8005ec0:	401a      	ands	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d116      	bne.n	8005efa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	23f8      	movs	r3, #248	; 0xf8
 8005ed0:	039b      	lsls	r3, r3, #14
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d10e      	bne.n	8005efa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	23e0      	movs	r3, #224	; 0xe0
 8005ee0:	051b      	lsls	r3, r3, #20
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d106      	bne.n	8005efa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	0f5b      	lsrs	r3, r3, #29
 8005ef0:	075a      	lsls	r2, r3, #29
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d001      	beq.n	8005efe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b008      	add	sp, #32
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40007000 	.word	0x40007000
 8005f10:	00001388 	.word	0x00001388
 8005f14:	efffffff 	.word	0xefffffff
 8005f18:	feffffff 	.word	0xfeffffff
 8005f1c:	11c1808c 	.word	0x11c1808c
 8005f20:	eefefffc 	.word	0xeefefffc

08005f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0e9      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f38:	4b76      	ldr	r3, [pc, #472]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	4013      	ands	r3, r2
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d91e      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b73      	ldr	r3, [pc, #460]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2207      	movs	r2, #7
 8005f4c:	4393      	bics	r3, r2
 8005f4e:	0019      	movs	r1, r3
 8005f50:	4b70      	ldr	r3, [pc, #448]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f58:	f7fd faca 	bl	80034f0 <HAL_GetTick>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f60:	e009      	b.n	8005f76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f62:	f7fd fac5 	bl	80034f0 <HAL_GetTick>
 8005f66:	0002      	movs	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	4a6a      	ldr	r2, [pc, #424]	; (8006118 <HAL_RCC_ClockConfig+0x1f4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0ca      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f76:	4b67      	ldr	r3, [pc, #412]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2207      	movs	r2, #7
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d1ee      	bne.n	8005f62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d015      	beq.n	8005fba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2204      	movs	r2, #4
 8005f94:	4013      	ands	r3, r2
 8005f96:	d006      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f98:	4b60      	ldr	r3, [pc, #384]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4b5f      	ldr	r3, [pc, #380]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005f9e:	21e0      	movs	r1, #224	; 0xe0
 8005fa0:	01c9      	lsls	r1, r1, #7
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa6:	4b5d      	ldr	r3, [pc, #372]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_RCC_ClockConfig+0x1fc>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	0019      	movs	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	4b59      	ldr	r3, [pc, #356]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d057      	beq.n	8006074 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d107      	bne.n	8005fdc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fcc:	4b53      	ldr	r3, [pc, #332]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	029b      	lsls	r3, r3, #10
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d12b      	bne.n	8006030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e097      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	049b      	lsls	r3, r3, #18
 8005fec:	4013      	ands	r3, r2
 8005fee:	d11f      	bne.n	8006030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e08b      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4013      	ands	r3, r2
 8006006:	d113      	bne.n	8006030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e07f      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d106      	bne.n	8006022 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006014:	4b41      	ldr	r3, [pc, #260]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8006016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006018:	2202      	movs	r2, #2
 800601a:	4013      	ands	r3, r2
 800601c:	d108      	bne.n	8006030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e074      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006022:	4b3e      	ldr	r3, [pc, #248]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	2202      	movs	r2, #2
 8006028:	4013      	ands	r3, r2
 800602a:	d101      	bne.n	8006030 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e06d      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006030:	4b3a      	ldr	r3, [pc, #232]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2207      	movs	r2, #7
 8006036:	4393      	bics	r3, r2
 8006038:	0019      	movs	r1, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	4b37      	ldr	r3, [pc, #220]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8006040:	430a      	orrs	r2, r1
 8006042:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006044:	f7fd fa54 	bl	80034f0 <HAL_GetTick>
 8006048:	0003      	movs	r3, r0
 800604a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604c:	e009      	b.n	8006062 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604e:	f7fd fa4f 	bl	80034f0 <HAL_GetTick>
 8006052:	0002      	movs	r2, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	4a2f      	ldr	r2, [pc, #188]	; (8006118 <HAL_RCC_ClockConfig+0x1f4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e054      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2238      	movs	r2, #56	; 0x38
 8006068:	401a      	ands	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	429a      	cmp	r2, r3
 8006072:	d1ec      	bne.n	800604e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2207      	movs	r2, #7
 800607a:	4013      	ands	r3, r2
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d21e      	bcs.n	80060c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b24      	ldr	r3, [pc, #144]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2207      	movs	r2, #7
 8006088:	4393      	bics	r3, r2
 800608a:	0019      	movs	r1, r3
 800608c:	4b21      	ldr	r3, [pc, #132]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006094:	f7fd fa2c 	bl	80034f0 <HAL_GetTick>
 8006098:	0003      	movs	r3, r0
 800609a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800609c:	e009      	b.n	80060b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609e:	f7fd fa27 	bl	80034f0 <HAL_GetTick>
 80060a2:	0002      	movs	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_RCC_ClockConfig+0x1f4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e02c      	b.n	800610c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060b2:	4b18      	ldr	r3, [pc, #96]	; (8006114 <HAL_RCC_ClockConfig+0x1f0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2207      	movs	r2, #7
 80060b8:	4013      	ands	r3, r2
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d1ee      	bne.n	800609e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2204      	movs	r2, #4
 80060c6:	4013      	ands	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_RCC_ClockConfig+0x200>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	0019      	movs	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80060de:	f000 f829 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80060e2:	0001      	movs	r1, r0
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_RCC_ClockConfig+0x1f8>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	220f      	movs	r2, #15
 80060ec:	401a      	ands	r2, r3
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <HAL_RCC_ClockConfig+0x204>)
 80060f0:	0092      	lsls	r2, r2, #2
 80060f2:	58d3      	ldr	r3, [r2, r3]
 80060f4:	221f      	movs	r2, #31
 80060f6:	4013      	ands	r3, r2
 80060f8:	000a      	movs	r2, r1
 80060fa:	40da      	lsrs	r2, r3
 80060fc:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_RCC_ClockConfig+0x208>)
 80060fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_RCC_ClockConfig+0x20c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	0018      	movs	r0, r3
 8006106:	f7fd f997 	bl	8003438 <HAL_InitTick>
 800610a:	0003      	movs	r3, r0
}
 800610c:	0018      	movs	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	b004      	add	sp, #16
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40022000 	.word	0x40022000
 8006118:	00001388 	.word	0x00001388
 800611c:	40021000 	.word	0x40021000
 8006120:	fffff0ff 	.word	0xfffff0ff
 8006124:	ffff8fff 	.word	0xffff8fff
 8006128:	080156bc 	.word	0x080156bc
 800612c:	20000030 	.word	0x20000030
 8006130:	20000000 	.word	0x20000000

08006134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800613a:	4b3c      	ldr	r3, [pc, #240]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2238      	movs	r2, #56	; 0x38
 8006140:	4013      	ands	r3, r2
 8006142:	d10f      	bne.n	8006164 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006144:	4b39      	ldr	r3, [pc, #228]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	0adb      	lsrs	r3, r3, #11
 800614a:	2207      	movs	r2, #7
 800614c:	4013      	ands	r3, r2
 800614e:	2201      	movs	r2, #1
 8006150:	409a      	lsls	r2, r3
 8006152:	0013      	movs	r3, r2
 8006154:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	4835      	ldr	r0, [pc, #212]	; (8006230 <HAL_RCC_GetSysClockFreq+0xfc>)
 800615a:	f7f9 ffdd 	bl	8000118 <__udivsi3>
 800615e:	0003      	movs	r3, r0
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	e05d      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006164:	4b31      	ldr	r3, [pc, #196]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2238      	movs	r2, #56	; 0x38
 800616a:	4013      	ands	r3, r2
 800616c:	2b08      	cmp	r3, #8
 800616e:	d102      	bne.n	8006176 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006170:	4b30      	ldr	r3, [pc, #192]	; (8006234 <HAL_RCC_GetSysClockFreq+0x100>)
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	e054      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006176:	4b2d      	ldr	r3, [pc, #180]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2238      	movs	r2, #56	; 0x38
 800617c:	4013      	ands	r3, r2
 800617e:	2b10      	cmp	r3, #16
 8006180:	d138      	bne.n	80061f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006182:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2203      	movs	r2, #3
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800618c:	4b27      	ldr	r3, [pc, #156]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	2207      	movs	r2, #7
 8006194:	4013      	ands	r3, r2
 8006196:	3301      	adds	r3, #1
 8006198:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d10d      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	4824      	ldr	r0, [pc, #144]	; (8006234 <HAL_RCC_GetSysClockFreq+0x100>)
 80061a4:	f7f9 ffb8 	bl	8000118 <__udivsi3>
 80061a8:	0003      	movs	r3, r0
 80061aa:	0019      	movs	r1, r3
 80061ac:	4b1f      	ldr	r3, [pc, #124]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	227f      	movs	r2, #127	; 0x7f
 80061b4:	4013      	ands	r3, r2
 80061b6:	434b      	muls	r3, r1
 80061b8:	617b      	str	r3, [r7, #20]
        break;
 80061ba:	e00d      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	481c      	ldr	r0, [pc, #112]	; (8006230 <HAL_RCC_GetSysClockFreq+0xfc>)
 80061c0:	f7f9 ffaa 	bl	8000118 <__udivsi3>
 80061c4:	0003      	movs	r3, r0
 80061c6:	0019      	movs	r1, r3
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	227f      	movs	r2, #127	; 0x7f
 80061d0:	4013      	ands	r3, r2
 80061d2:	434b      	muls	r3, r1
 80061d4:	617b      	str	r3, [r7, #20]
        break;
 80061d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80061d8:	4b14      	ldr	r3, [pc, #80]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	0f5b      	lsrs	r3, r3, #29
 80061de:	2207      	movs	r2, #7
 80061e0:	4013      	ands	r3, r2
 80061e2:	3301      	adds	r3, #1
 80061e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	6978      	ldr	r0, [r7, #20]
 80061ea:	f7f9 ff95 	bl	8000118 <__udivsi3>
 80061ee:	0003      	movs	r3, r0
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	e015      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2238      	movs	r2, #56	; 0x38
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d103      	bne.n	8006208 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e00b      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006208:	4b08      	ldr	r3, [pc, #32]	; (800622c <HAL_RCC_GetSysClockFreq+0xf8>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2238      	movs	r2, #56	; 0x38
 800620e:	4013      	ands	r3, r2
 8006210:	2b18      	cmp	r3, #24
 8006212:	d103      	bne.n	800621c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006214:	23fa      	movs	r3, #250	; 0xfa
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	e001      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006220:	693b      	ldr	r3, [r7, #16]
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b006      	add	sp, #24
 8006228:	bd80      	pop	{r7, pc}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	40021000 	.word	0x40021000
 8006230:	00f42400 	.word	0x00f42400
 8006234:	007a1200 	.word	0x007a1200

08006238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006240:	2313      	movs	r3, #19
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006248:	2312      	movs	r3, #18
 800624a:	18fb      	adds	r3, r7, r3
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	4013      	ands	r3, r2
 800625a:	d100      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800625c:	e0a3      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625e:	2011      	movs	r0, #17
 8006260:	183b      	adds	r3, r7, r0
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006266:	4bc3      	ldr	r3, [pc, #780]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	055b      	lsls	r3, r3, #21
 800626e:	4013      	ands	r3, r2
 8006270:	d110      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006272:	4bc0      	ldr	r3, [pc, #768]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006276:	4bbf      	ldr	r3, [pc, #764]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	0549      	lsls	r1, r1, #21
 800627c:	430a      	orrs	r2, r1
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006280:	4bbc      	ldr	r3, [pc, #752]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	055b      	lsls	r3, r3, #21
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800628e:	183b      	adds	r3, r7, r0
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006294:	4bb8      	ldr	r3, [pc, #736]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4bb7      	ldr	r3, [pc, #732]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800629a:	2180      	movs	r1, #128	; 0x80
 800629c:	0049      	lsls	r1, r1, #1
 800629e:	430a      	orrs	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a2:	f7fd f925 	bl	80034f0 <HAL_GetTick>
 80062a6:	0003      	movs	r3, r0
 80062a8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062aa:	e00b      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ac:	f7fd f920 	bl	80034f0 <HAL_GetTick>
 80062b0:	0002      	movs	r2, r0
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d904      	bls.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80062ba:	2313      	movs	r3, #19
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	2203      	movs	r2, #3
 80062c0:	701a      	strb	r2, [r3, #0]
        break;
 80062c2:	e005      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c4:	4bac      	ldr	r3, [pc, #688]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	4013      	ands	r3, r2
 80062ce:	d0ed      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80062d0:	2313      	movs	r3, #19
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d154      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062da:	4ba6      	ldr	r3, [pc, #664]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062de:	23c0      	movs	r3, #192	; 0xc0
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4013      	ands	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d019      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d014      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062f6:	4b9f      	ldr	r3, [pc, #636]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fa:	4aa0      	ldr	r2, [pc, #640]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006300:	4b9c      	ldr	r3, [pc, #624]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006302:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006304:	4b9b      	ldr	r3, [pc, #620]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	0249      	lsls	r1, r1, #9
 800630a:	430a      	orrs	r2, r1
 800630c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800630e:	4b99      	ldr	r3, [pc, #612]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006312:	4b98      	ldr	r3, [pc, #608]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006314:	499a      	ldr	r1, [pc, #616]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006316:	400a      	ands	r2, r1
 8006318:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800631a:	4b96      	ldr	r3, [pc, #600]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2201      	movs	r2, #1
 8006324:	4013      	ands	r3, r2
 8006326:	d016      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fd f8e2 	bl	80034f0 <HAL_GetTick>
 800632c:	0003      	movs	r3, r0
 800632e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006330:	e00c      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fd f8dd 	bl	80034f0 <HAL_GetTick>
 8006336:	0002      	movs	r2, r0
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	4a91      	ldr	r2, [pc, #580]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d904      	bls.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006342:	2313      	movs	r3, #19
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2203      	movs	r2, #3
 8006348:	701a      	strb	r2, [r3, #0]
            break;
 800634a:	e004      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634c:	4b89      	ldr	r3, [pc, #548]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800634e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006350:	2202      	movs	r2, #2
 8006352:	4013      	ands	r3, r2
 8006354:	d0ed      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006356:	2313      	movs	r3, #19
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006360:	4b84      	ldr	r3, [pc, #528]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	4a85      	ldr	r2, [pc, #532]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006366:	4013      	ands	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800636e:	4b81      	ldr	r3, [pc, #516]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006370:	430a      	orrs	r2, r1
 8006372:	65da      	str	r2, [r3, #92]	; 0x5c
 8006374:	e00c      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006376:	2312      	movs	r3, #18
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	2213      	movs	r2, #19
 800637c:	18ba      	adds	r2, r7, r2
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e005      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	2312      	movs	r3, #18
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	2213      	movs	r2, #19
 800638a:	18ba      	adds	r2, r7, r2
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006390:	2311      	movs	r3, #17
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639a:	4b76      	ldr	r3, [pc, #472]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800639c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639e:	4b75      	ldr	r3, [pc, #468]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063a0:	4979      	ldr	r1, [pc, #484]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80063a2:	400a      	ands	r2, r1
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2201      	movs	r2, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063b0:	4b70      	ldr	r3, [pc, #448]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	2203      	movs	r2, #3
 80063b6:	4393      	bics	r3, r2
 80063b8:	0019      	movs	r1, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4b6d      	ldr	r3, [pc, #436]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063c0:	430a      	orrs	r2, r1
 80063c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2202      	movs	r2, #2
 80063ca:	4013      	ands	r3, r2
 80063cc:	d009      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ce:	4b69      	ldr	r3, [pc, #420]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	220c      	movs	r2, #12
 80063d4:	4393      	bics	r3, r2
 80063d6:	0019      	movs	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	4b65      	ldr	r3, [pc, #404]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063de:	430a      	orrs	r2, r1
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2210      	movs	r2, #16
 80063e8:	4013      	ands	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063ec:	4b61      	ldr	r3, [pc, #388]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	4a66      	ldr	r2, [pc, #408]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	0019      	movs	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	4b5e      	ldr	r3, [pc, #376]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063fc:	430a      	orrs	r2, r1
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	2380      	movs	r3, #128	; 0x80
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4013      	ands	r3, r2
 800640a:	d009      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800640c:	4b59      	ldr	r3, [pc, #356]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800640e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006410:	4a5f      	ldr	r2, [pc, #380]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006412:	4013      	ands	r3, r2
 8006414:	0019      	movs	r1, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	4b56      	ldr	r3, [pc, #344]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800641c:	430a      	orrs	r2, r1
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	2380      	movs	r3, #128	; 0x80
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4013      	ands	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800642c:	4b51      	ldr	r3, [pc, #324]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	4a58      	ldr	r2, [pc, #352]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006432:	4013      	ands	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	4b4e      	ldr	r3, [pc, #312]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800643c:	430a      	orrs	r2, r1
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	4013      	ands	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800644a:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	4a52      	ldr	r2, [pc, #328]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006450:	4013      	ands	r3, r2
 8006452:	0019      	movs	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	4b46      	ldr	r3, [pc, #280]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800645a:	430a      	orrs	r2, r1
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	01db      	lsls	r3, r3, #7
 8006466:	4013      	ands	r3, r2
 8006468:	d015      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800646a:	4b42      	ldr	r3, [pc, #264]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	0899      	lsrs	r1, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006478:	430a      	orrs	r2, r1
 800647a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	2380      	movs	r3, #128	; 0x80
 8006482:	05db      	lsls	r3, r3, #23
 8006484:	429a      	cmp	r2, r3
 8006486:	d106      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006488:	4b3a      	ldr	r3, [pc, #232]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	4b39      	ldr	r3, [pc, #228]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800648e:	2180      	movs	r1, #128	; 0x80
 8006490:	0249      	lsls	r1, r1, #9
 8006492:	430a      	orrs	r2, r1
 8006494:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	2380      	movs	r3, #128	; 0x80
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	4013      	ands	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064a2:	4b34      	ldr	r3, [pc, #208]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	4393      	bics	r3, r2
 80064aa:	0019      	movs	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064b0:	4b30      	ldr	r3, [pc, #192]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064b2:	430a      	orrs	r2, r1
 80064b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	2380      	movs	r3, #128	; 0x80
 80064bc:	039b      	lsls	r3, r3, #14
 80064be:	4013      	ands	r3, r2
 80064c0:	d016      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80064c2:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	4a35      	ldr	r2, [pc, #212]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	0019      	movs	r1, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064d2:	430a      	orrs	r2, r1
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	03db      	lsls	r3, r3, #15
 80064de:	429a      	cmp	r2, r3
 80064e0:	d106      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	4b23      	ldr	r3, [pc, #140]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064e8:	2180      	movs	r1, #128	; 0x80
 80064ea:	0449      	lsls	r1, r1, #17
 80064ec:	430a      	orrs	r2, r1
 80064ee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	03db      	lsls	r3, r3, #15
 80064f8:	4013      	ands	r3, r2
 80064fa:	d016      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	4a27      	ldr	r2, [pc, #156]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006502:	4013      	ands	r3, r2
 8006504:	0019      	movs	r1, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4b1a      	ldr	r3, [pc, #104]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800650c:	430a      	orrs	r2, r1
 800650e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	2380      	movs	r3, #128	; 0x80
 8006516:	045b      	lsls	r3, r3, #17
 8006518:	429a      	cmp	r2, r3
 800651a:	d106      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006522:	2180      	movs	r1, #128	; 0x80
 8006524:	0449      	lsls	r1, r1, #17
 8006526:	430a      	orrs	r2, r1
 8006528:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	4013      	ands	r3, r2
 8006534:	d016      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800653c:	4013      	ands	r3, r2
 800653e:	0019      	movs	r1, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006546:	430a      	orrs	r2, r1
 8006548:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	429a      	cmp	r2, r3
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006556:	4b07      	ldr	r3, [pc, #28]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	0249      	lsls	r1, r1, #9
 8006560:	430a      	orrs	r2, r1
 8006562:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006564:	2312      	movs	r3, #18
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	781b      	ldrb	r3, [r3, #0]
}
 800656a:	0018      	movs	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	b006      	add	sp, #24
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	40021000 	.word	0x40021000
 8006578:	40007000 	.word	0x40007000
 800657c:	fffffcff 	.word	0xfffffcff
 8006580:	fffeffff 	.word	0xfffeffff
 8006584:	00001388 	.word	0x00001388
 8006588:	efffffff 	.word	0xefffffff
 800658c:	fffff3ff 	.word	0xfffff3ff
 8006590:	fff3ffff 	.word	0xfff3ffff
 8006594:	ffcfffff 	.word	0xffcfffff
 8006598:	ffffcfff 	.word	0xffffcfff
 800659c:	ffbfffff 	.word	0xffbfffff
 80065a0:	feffffff 	.word	0xfeffffff
 80065a4:	ffff3fff 	.word	0xffff3fff

080065a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065a8:	b5b0      	push	{r4, r5, r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065b0:	230f      	movs	r3, #15
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d100      	bne.n	80065c0 <HAL_RTC_Init+0x18>
 80065be:	e080      	b.n	80066c2 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2229      	movs	r2, #41	; 0x29
 80065c4:	5c9b      	ldrb	r3, [r3, r2]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2228      	movs	r2, #40	; 0x28
 80065d0:	2100      	movs	r1, #0
 80065d2:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2288      	movs	r2, #136	; 0x88
 80065d8:	0212      	lsls	r2, r2, #8
 80065da:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	0018      	movs	r0, r3
 80065e0:	f003 fda6 	bl	800a130 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2229      	movs	r2, #41	; 0x29
 80065e8:	2102      	movs	r1, #2
 80065ea:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	22ca      	movs	r2, #202	; 0xca
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2253      	movs	r2, #83	; 0x53
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80065fc:	250f      	movs	r5, #15
 80065fe:	197c      	adds	r4, r7, r5
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	0018      	movs	r0, r3
 8006604:	f000 fa71 	bl	8006aea <RTC_EnterInitMode>
 8006608:	0003      	movs	r3, r0
 800660a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800660c:	0028      	movs	r0, r5
 800660e:	183b      	adds	r3, r7, r0
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d148      	bne.n	80066a8 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	492b      	ldr	r1, [pc, #172]	; (80066d0 <HAL_RTC_Init+0x128>)
 8006622:	400a      	ands	r2, r1
 8006624:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6999      	ldr	r1, [r3, #24]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6912      	ldr	r2, [r2, #16]
 800664c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6919      	ldr	r1, [r3, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	041a      	lsls	r2, r3, #16
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006662:	0005      	movs	r5, r0
 8006664:	183c      	adds	r4, r7, r0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	0018      	movs	r0, r3
 800666a:	f000 fa81 	bl	8006b70 <RTC_ExitInitMode>
 800666e:	0003      	movs	r3, r0
 8006670:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8006672:	197b      	adds	r3, r7, r5
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d116      	bne.n	80066a8 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	00d2      	lsls	r2, r2, #3
 8006686:	08d2      	lsrs	r2, r2, #3
 8006688:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6999      	ldr	r1, [r3, #24]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	22ff      	movs	r2, #255	; 0xff
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80066b0:	230f      	movs	r3, #15
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2229      	movs	r2, #41	; 0x29
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80066c2:	230f      	movs	r3, #15
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	781b      	ldrb	r3, [r3, #0]
}
 80066c8:	0018      	movs	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	b004      	add	sp, #16
 80066ce:	bdb0      	pop	{r4, r5, r7, pc}
 80066d0:	fb8fffbf 	.word	0xfb8fffbf

080066d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066d4:	b5b0      	push	{r4, r5, r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2228      	movs	r2, #40	; 0x28
 80066e4:	5c9b      	ldrb	r3, [r3, r2]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_RTC_SetTime+0x1a>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e092      	b.n	8006814 <HAL_RTC_SetTime+0x140>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2228      	movs	r2, #40	; 0x28
 80066f2:	2101      	movs	r1, #1
 80066f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2229      	movs	r2, #41	; 0x29
 80066fa:	2102      	movs	r1, #2
 80066fc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	22ca      	movs	r2, #202	; 0xca
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2253      	movs	r2, #83	; 0x53
 800670c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800670e:	2513      	movs	r5, #19
 8006710:	197c      	adds	r4, r7, r5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	0018      	movs	r0, r3
 8006716:	f000 f9e8 	bl	8006aea <RTC_EnterInitMode>
 800671a:	0003      	movs	r3, r0
 800671c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800671e:	197b      	adds	r3, r7, r5
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d162      	bne.n	80067ec <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d125      	bne.n	8006778 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2240      	movs	r2, #64	; 0x40
 8006734:	4013      	ands	r3, r2
 8006736:	d102      	bne.n	800673e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	0018      	movs	r0, r3
 8006744:	f000 fa58 	bl	8006bf8 <RTC_ByteToBcd2>
 8006748:	0003      	movs	r3, r0
 800674a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fa51 	bl	8006bf8 <RTC_ByteToBcd2>
 8006756:	0003      	movs	r3, r0
 8006758:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800675a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	789b      	ldrb	r3, [r3, #2]
 8006760:	0018      	movs	r0, r3
 8006762:	f000 fa49 	bl	8006bf8 <RTC_ByteToBcd2>
 8006766:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006768:	0022      	movs	r2, r4
 800676a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	78db      	ldrb	r3, [r3, #3]
 8006770:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e017      	b.n	80067a8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	4013      	ands	r3, r2
 8006782:	d102      	bne.n	800678a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2200      	movs	r2, #0
 8006788:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006796:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800679c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	78db      	ldrb	r3, [r3, #3]
 80067a2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	491b      	ldr	r1, [pc, #108]	; (800681c <HAL_RTC_SetTime+0x148>)
 80067b0:	400a      	ands	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4918      	ldr	r1, [pc, #96]	; (8006820 <HAL_RTC_SetTime+0x14c>)
 80067c0:	400a      	ands	r2, r1
 80067c2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6999      	ldr	r1, [r3, #24]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067dc:	2313      	movs	r3, #19
 80067de:	18fc      	adds	r4, r7, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 f9c4 	bl	8006b70 <RTC_ExitInitMode>
 80067e8:	0003      	movs	r3, r0
 80067ea:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	22ff      	movs	r2, #255	; 0xff
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80067f4:	2313      	movs	r3, #19
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2229      	movs	r2, #41	; 0x29
 8006802:	2101      	movs	r1, #1
 8006804:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2228      	movs	r2, #40	; 0x28
 800680a:	2100      	movs	r1, #0
 800680c:	5499      	strb	r1, [r3, r2]

  return status;
 800680e:	2313      	movs	r3, #19
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	781b      	ldrb	r3, [r3, #0]
}
 8006814:	0018      	movs	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	b006      	add	sp, #24
 800681a:	bdb0      	pop	{r4, r5, r7, pc}
 800681c:	007f7f7f 	.word	0x007f7f7f
 8006820:	fffbffff 	.word	0xfffbffff

08006824 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	045b      	lsls	r3, r3, #17
 8006842:	0c5a      	lsrs	r2, r3, #17
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_RTC_GetTime+0xb4>)
 8006850:	4013      	ands	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	b2db      	uxtb	r3, r3
 800685a:	223f      	movs	r2, #63	; 0x3f
 800685c:	4013      	ands	r3, r2
 800685e:	b2da      	uxtb	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b2db      	uxtb	r3, r3
 800686a:	227f      	movs	r2, #127	; 0x7f
 800686c:	4013      	ands	r3, r2
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	227f      	movs	r2, #127	; 0x7f
 800687a:	4013      	ands	r3, r2
 800687c:	b2da      	uxtb	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	0d9b      	lsrs	r3, r3, #22
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2201      	movs	r2, #1
 800688a:	4013      	ands	r3, r2
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11a      	bne.n	80068ce <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	0018      	movs	r0, r3
 800689e:	f000 f9d3 	bl	8006c48 <RTC_Bcd2ToByte>
 80068a2:	0003      	movs	r3, r0
 80068a4:	001a      	movs	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	0018      	movs	r0, r3
 80068b0:	f000 f9ca 	bl	8006c48 <RTC_Bcd2ToByte>
 80068b4:	0003      	movs	r3, r0
 80068b6:	001a      	movs	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	789b      	ldrb	r3, [r3, #2]
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 f9c1 	bl	8006c48 <RTC_Bcd2ToByte>
 80068c6:	0003      	movs	r3, r0
 80068c8:	001a      	movs	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b006      	add	sp, #24
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	007f7f7f 	.word	0x007f7f7f

080068dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2228      	movs	r2, #40	; 0x28
 80068ec:	5c9b      	ldrb	r3, [r3, r2]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_RTC_SetDate+0x1a>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e07e      	b.n	80069f4 <HAL_RTC_SetDate+0x118>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2228      	movs	r2, #40	; 0x28
 80068fa:	2101      	movs	r1, #1
 80068fc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2229      	movs	r2, #41	; 0x29
 8006902:	2102      	movs	r1, #2
 8006904:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10e      	bne.n	800692a <HAL_RTC_SetDate+0x4e>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	001a      	movs	r2, r3
 8006912:	2310      	movs	r3, #16
 8006914:	4013      	ands	r3, r2
 8006916:	d008      	beq.n	800692a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2210      	movs	r2, #16
 800691e:	4393      	bics	r3, r2
 8006920:	b2db      	uxtb	r3, r3
 8006922:	330a      	adds	r3, #10
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d11c      	bne.n	800696a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	78db      	ldrb	r3, [r3, #3]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 f95f 	bl	8006bf8 <RTC_ByteToBcd2>
 800693a:	0003      	movs	r3, r0
 800693c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	0018      	movs	r0, r3
 8006944:	f000 f958 	bl	8006bf8 <RTC_ByteToBcd2>
 8006948:	0003      	movs	r3, r0
 800694a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800694c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	789b      	ldrb	r3, [r3, #2]
 8006952:	0018      	movs	r0, r3
 8006954:	f000 f950 	bl	8006bf8 <RTC_ByteToBcd2>
 8006958:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800695a:	0022      	movs	r2, r4
 800695c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e00e      	b.n	8006988 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006976:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800697c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	22ca      	movs	r2, #202	; 0xca
 800698e:	625a      	str	r2, [r3, #36]	; 0x24
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2253      	movs	r2, #83	; 0x53
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006998:	2513      	movs	r5, #19
 800699a:	197c      	adds	r4, r7, r5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	0018      	movs	r0, r3
 80069a0:	f000 f8a3 	bl	8006aea <RTC_EnterInitMode>
 80069a4:	0003      	movs	r3, r0
 80069a6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80069a8:	0028      	movs	r0, r5
 80069aa:	183b      	adds	r3, r7, r0
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4910      	ldr	r1, [pc, #64]	; (80069fc <HAL_RTC_SetDate+0x120>)
 80069ba:	400a      	ands	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069be:	183c      	adds	r4, r7, r0
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	0018      	movs	r0, r3
 80069c4:	f000 f8d4 	bl	8006b70 <RTC_ExitInitMode>
 80069c8:	0003      	movs	r3, r0
 80069ca:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80069d4:	2313      	movs	r3, #19
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2229      	movs	r2, #41	; 0x29
 80069e2:	2101      	movs	r1, #1
 80069e4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2228      	movs	r2, #40	; 0x28
 80069ea:	2100      	movs	r1, #0
 80069ec:	5499      	strb	r1, [r3, r2]

  return status;
 80069ee:	2313      	movs	r3, #19
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	781b      	ldrb	r3, [r3, #0]
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b006      	add	sp, #24
 80069fa:	bdb0      	pop	{r4, r5, r7, pc}
 80069fc:	00ffff3f 	.word	0x00ffff3f

08006a00 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4a21      	ldr	r2, [pc, #132]	; (8006a98 <HAL_RTC_GetDate+0x98>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	221f      	movs	r2, #31
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	223f      	movs	r2, #63	; 0x3f
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	0b5b      	lsrs	r3, r3, #13
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2207      	movs	r2, #7
 8006a48:	4013      	ands	r3, r2
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11a      	bne.n	8006a8c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 f8f4 	bl	8006c48 <RTC_Bcd2ToByte>
 8006a60:	0003      	movs	r3, r0
 8006a62:	001a      	movs	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f000 f8eb 	bl	8006c48 <RTC_Bcd2ToByte>
 8006a72:	0003      	movs	r3, r0
 8006a74:	001a      	movs	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	789b      	ldrb	r3, [r3, #2]
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f000 f8e2 	bl	8006c48 <RTC_Bcd2ToByte>
 8006a84:	0003      	movs	r3, r0
 8006a86:	001a      	movs	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	0018      	movs	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b006      	add	sp, #24
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	00ffff3f 	.word	0x00ffff3f

08006a9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	21a0      	movs	r1, #160	; 0xa0
 8006ab0:	438a      	bics	r2, r1
 8006ab2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ab4:	f7fc fd1c 	bl	80034f0 <HAL_GetTick>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006abe:	f7fc fd17 	bl	80034f0 <HAL_GetTick>
 8006ac2:	0002      	movs	r2, r0
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	23fa      	movs	r3, #250	; 0xfa
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d901      	bls.n	8006ad4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e006      	b.n	8006ae2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	4013      	ands	r3, r2
 8006ade:	d0ee      	beq.n	8006abe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b004      	add	sp, #16
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006af2:	230f      	movs	r3, #15
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2240      	movs	r2, #64	; 0x40
 8006b02:	4013      	ands	r3, r2
 8006b04:	d12c      	bne.n	8006b60 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	430a      	orrs	r2, r1
 8006b14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b16:	f7fc fceb 	bl	80034f0 <HAL_GetTick>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b1e:	e014      	b.n	8006b4a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b20:	f7fc fce6 	bl	80034f0 <HAL_GetTick>
 8006b24:	0002      	movs	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	200f      	movs	r0, #15
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	1839      	adds	r1, r7, r0
 8006b30:	7809      	ldrb	r1, [r1, #0]
 8006b32:	7019      	strb	r1, [r3, #0]
 8006b34:	23fa      	movs	r3, #250	; 0xfa
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d906      	bls.n	8006b4a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006b3c:	183b      	adds	r3, r7, r0
 8006b3e:	2203      	movs	r2, #3
 8006b40:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2229      	movs	r2, #41	; 0x29
 8006b46:	2103      	movs	r1, #3
 8006b48:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	2240      	movs	r2, #64	; 0x40
 8006b52:	4013      	ands	r3, r2
 8006b54:	d104      	bne.n	8006b60 <RTC_EnterInitMode+0x76>
 8006b56:	230f      	movs	r3, #15
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d1df      	bne.n	8006b20 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b60:	230f      	movs	r3, #15
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	781b      	ldrb	r3, [r3, #0]
}
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b004      	add	sp, #16
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b70:	b590      	push	{r4, r7, lr}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b78:	240f      	movs	r4, #15
 8006b7a:	193b      	adds	r3, r7, r4
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b80:	4b1c      	ldr	r3, [pc, #112]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	438a      	bics	r2, r1
 8006b8a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b8c:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2220      	movs	r2, #32
 8006b92:	4013      	ands	r3, r2
 8006b94:	d10d      	bne.n	8006bb2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7ff ff7f 	bl	8006a9c <HAL_RTC_WaitForSynchro>
 8006b9e:	1e03      	subs	r3, r0, #0
 8006ba0:	d021      	beq.n	8006be6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2229      	movs	r2, #41	; 0x29
 8006ba6:	2103      	movs	r1, #3
 8006ba8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006baa:	193b      	adds	r3, r7, r4
 8006bac:	2203      	movs	r2, #3
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	e019      	b.n	8006be6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bb2:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006bb8:	2120      	movs	r1, #32
 8006bba:	438a      	bics	r2, r1
 8006bbc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f7ff ff6b 	bl	8006a9c <HAL_RTC_WaitForSynchro>
 8006bc6:	1e03      	subs	r3, r0, #0
 8006bc8:	d007      	beq.n	8006bda <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2229      	movs	r2, #41	; 0x29
 8006bce:	2103      	movs	r1, #3
 8006bd0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006bd2:	230f      	movs	r3, #15
 8006bd4:	18fb      	adds	r3, r7, r3
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bda:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <RTC_ExitInitMode+0x84>)
 8006be0:	2120      	movs	r1, #32
 8006be2:	430a      	orrs	r2, r1
 8006be4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006be6:	230f      	movs	r3, #15
 8006be8:	18fb      	adds	r3, r7, r3
 8006bea:	781b      	ldrb	r3, [r3, #0]
}
 8006bec:	0018      	movs	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b005      	add	sp, #20
 8006bf2:	bd90      	pop	{r4, r7, pc}
 8006bf4:	40002800 	.word	0x40002800

08006bf8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	0002      	movs	r2, r0
 8006c00:	1dfb      	adds	r3, r7, #7
 8006c02:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006c08:	230b      	movs	r3, #11
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	1dfa      	adds	r2, r7, #7
 8006c0e:	7812      	ldrb	r2, [r2, #0]
 8006c10:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006c12:	e008      	b.n	8006c26 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006c1a:	220b      	movs	r2, #11
 8006c1c:	18bb      	adds	r3, r7, r2
 8006c1e:	18ba      	adds	r2, r7, r2
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	3a0a      	subs	r2, #10
 8006c24:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006c26:	210b      	movs	r1, #11
 8006c28:	187b      	adds	r3, r7, r1
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b09      	cmp	r3, #9
 8006c2e:	d8f1      	bhi.n	8006c14 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	187b      	adds	r3, r7, r1
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b2db      	uxtb	r3, r3
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	0002      	movs	r2, r0
 8006c50:	1dfb      	adds	r3, r7, #7
 8006c52:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	0013      	movs	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	1dfb      	adds	r3, r7, #7
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	210f      	movs	r1, #15
 8006c72:	400b      	ands	r3, r1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	18d3      	adds	r3, r2, r3
 8006c78:	b2db      	uxtb	r3, r3
}
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	b004      	add	sp, #16
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2228      	movs	r2, #40	; 0x28
 8006c94:	5c9b      	ldrb	r3, [r3, r2]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e082      	b.n	8006da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2228      	movs	r2, #40	; 0x28
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2229      	movs	r2, #41	; 0x29
 8006caa:	2102      	movs	r1, #2
 8006cac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	22ca      	movs	r2, #202	; 0xca
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2253      	movs	r2, #83	; 0x53
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4938      	ldr	r1, [pc, #224]	; (8006dac <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8006cca:	400a      	ands	r2, r1
 8006ccc:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2104      	movs	r1, #4
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006cde:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2240      	movs	r2, #64	; 0x40
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d121      	bne.n	8006d2c <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8006ce8:	f7fc fc02 	bl	80034f0 <HAL_GetTick>
 8006cec:	0003      	movs	r3, r0
 8006cee:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006cf0:	e016      	b.n	8006d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006cf2:	f7fc fbfd 	bl	80034f0 <HAL_GetTick>
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	23fa      	movs	r3, #250	; 0xfa
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d90d      	bls.n	8006d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2229      	movs	r2, #41	; 0x29
 8006d10:	2103      	movs	r1, #3
 8006d12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2228      	movs	r2, #40	; 0x28
 8006d18:	2100      	movs	r1, #0
 8006d1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e041      	b.n	8006da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	2204      	movs	r2, #4
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d0e2      	beq.n	8006cf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2107      	movs	r1, #7
 8006d40:	438a      	bics	r2, r1
 8006d42:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6999      	ldr	r1, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	58d3      	ldr	r3, [r2, r3]
 8006d5a:	4916      	ldr	r1, [pc, #88]	; (8006db4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006d5c:	2280      	movs	r2, #128	; 0x80
 8006d5e:	0312      	lsls	r2, r2, #12
 8006d60:	4313      	orrs	r3, r2
 8006d62:	2280      	movs	r2, #128	; 0x80
 8006d64:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2180      	movs	r1, #128	; 0x80
 8006d72:	01c9      	lsls	r1, r1, #7
 8006d74:	430a      	orrs	r2, r1
 8006d76:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2180      	movs	r1, #128	; 0x80
 8006d84:	00c9      	lsls	r1, r1, #3
 8006d86:	430a      	orrs	r2, r1
 8006d88:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	22ff      	movs	r2, #255	; 0xff
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2229      	movs	r2, #41	; 0x29
 8006d96:	2101      	movs	r1, #1
 8006d98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2228      	movs	r2, #40	; 0x28
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b006      	add	sp, #24
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	fffffbff 	.word	0xfffffbff
 8006db0:	40002800 	.word	0x40002800
 8006db4:	40021800 	.word	0x40021800

08006db8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0018      	movs	r0, r3
 8006de0:	f000 f808 	bl	8006df4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2229      	movs	r2, #41	; 0x29
 8006de8:	2101      	movs	r1, #1
 8006dea:	5499      	strb	r1, [r3, r2]
}
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b002      	add	sp, #8
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b002      	add	sp, #8
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0a8      	b.n	8006f68 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	2382      	movs	r3, #130	; 0x82
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d009      	beq.n	8006e3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	61da      	str	r2, [r3, #28]
 8006e30:	e005      	b.n	8006e3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	225d      	movs	r2, #93	; 0x5d
 8006e48:	5c9b      	ldrb	r3, [r3, r2]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d107      	bne.n	8006e60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	225c      	movs	r2, #92	; 0x5c
 8006e54:	2100      	movs	r1, #0
 8006e56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f003 f9ec 	bl	800a238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	225d      	movs	r2, #93	; 0x5d
 8006e64:	2102      	movs	r1, #2
 8006e66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2140      	movs	r1, #64	; 0x40
 8006e74:	438a      	bics	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	23e0      	movs	r3, #224	; 0xe0
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d902      	bls.n	8006e8a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	e002      	b.n	8006e90 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	015b      	lsls	r3, r3, #5
 8006e8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	23f0      	movs	r3, #240	; 0xf0
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d008      	beq.n	8006eae <HAL_SPI_Init+0xaa>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	23e0      	movs	r3, #224	; 0xe0
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d002      	beq.n	8006eae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	2382      	movs	r3, #130	; 0x82
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	401a      	ands	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6899      	ldr	r1, [r3, #8]
 8006ebc:	2384      	movs	r3, #132	; 0x84
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	400b      	ands	r3, r1
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2102      	movs	r1, #2
 8006eca:	400b      	ands	r3, r1
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	400b      	ands	r3, r1
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6999      	ldr	r1, [r3, #24]
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	400b      	ands	r3, r1
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2138      	movs	r1, #56	; 0x38
 8006eea:	400b      	ands	r3, r1
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	400b      	ands	r3, r1
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	0011      	movs	r1, r2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006efe:	2380      	movs	r3, #128	; 0x80
 8006f00:	019b      	lsls	r3, r3, #6
 8006f02:	401a      	ands	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	2204      	movs	r2, #4
 8006f14:	401a      	ands	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2110      	movs	r1, #16
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f24:	2108      	movs	r1, #8
 8006f26:	400b      	ands	r3, r1
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68d9      	ldr	r1, [r3, #12]
 8006f2e:	23f0      	movs	r3, #240	; 0xf0
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	400b      	ands	r3, r1
 8006f34:	431a      	orrs	r2, r3
 8006f36:	0011      	movs	r1, r2
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	2380      	movs	r3, #128	; 0x80
 8006f3c:	015b      	lsls	r3, r3, #5
 8006f3e:	401a      	ands	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4907      	ldr	r1, [pc, #28]	; (8006f70 <HAL_SPI_Init+0x16c>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	225d      	movs	r2, #93	; 0x5d
 8006f62:	2101      	movs	r1, #1
 8006f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	0018      	movs	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b004      	add	sp, #16
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	fffff7ff 	.word	0xfffff7ff

08006f74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	1dbb      	adds	r3, r7, #6
 8006f82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f84:	231f      	movs	r3, #31
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	225c      	movs	r2, #92	; 0x5c
 8006f90:	5c9b      	ldrb	r3, [r3, r2]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_SPI_Transmit+0x26>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e140      	b.n	800721c <HAL_SPI_Transmit+0x2a8>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	225c      	movs	r2, #92	; 0x5c
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa2:	f7fc faa5 	bl	80034f0 <HAL_GetTick>
 8006fa6:	0003      	movs	r3, r0
 8006fa8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006faa:	2316      	movs	r3, #22
 8006fac:	18fb      	adds	r3, r7, r3
 8006fae:	1dba      	adds	r2, r7, #6
 8006fb0:	8812      	ldrh	r2, [r2, #0]
 8006fb2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	225d      	movs	r2, #93	; 0x5d
 8006fb8:	5c9b      	ldrb	r3, [r3, r2]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d004      	beq.n	8006fca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006fc0:	231f      	movs	r3, #31
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006fc8:	e11d      	b.n	8007206 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_SPI_Transmit+0x64>
 8006fd0:	1dbb      	adds	r3, r7, #6
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006fd8:	231f      	movs	r3, #31
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	2201      	movs	r2, #1
 8006fde:	701a      	strb	r2, [r3, #0]
    goto error;
 8006fe0:	e111      	b.n	8007206 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	225d      	movs	r2, #93	; 0x5d
 8006fe6:	2103      	movs	r1, #3
 8006fe8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1dba      	adds	r2, r7, #6
 8006ffa:	8812      	ldrh	r2, [r2, #0]
 8006ffc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1dba      	adds	r2, r7, #6
 8007002:	8812      	ldrh	r2, [r2, #0]
 8007004:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2244      	movs	r2, #68	; 0x44
 8007010:	2100      	movs	r1, #0
 8007012:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2246      	movs	r2, #70	; 0x46
 8007018:	2100      	movs	r1, #0
 800701a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	2380      	movs	r3, #128	; 0x80
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	429a      	cmp	r2, r3
 8007032:	d110      	bne.n	8007056 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2140      	movs	r1, #64	; 0x40
 8007040:	438a      	bics	r2, r1
 8007042:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2180      	movs	r1, #128	; 0x80
 8007050:	01c9      	lsls	r1, r1, #7
 8007052:	430a      	orrs	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2240      	movs	r2, #64	; 0x40
 800705e:	4013      	ands	r3, r2
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d007      	beq.n	8007074 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2140      	movs	r1, #64	; 0x40
 8007070:	430a      	orrs	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	23e0      	movs	r3, #224	; 0xe0
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	429a      	cmp	r2, r3
 800707e:	d94e      	bls.n	800711e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <HAL_SPI_Transmit+0x11e>
 8007088:	2316      	movs	r3, #22
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d13f      	bne.n	8007112 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	881a      	ldrh	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	1c9a      	adds	r2, r3, #2
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070b6:	e02c      	b.n	8007112 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2202      	movs	r2, #2
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d112      	bne.n	80070ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	881a      	ldrh	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	1c9a      	adds	r2, r3, #2
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070ea:	e012      	b.n	8007112 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ec:	f7fc fa00 	bl	80034f0 <HAL_GetTick>
 80070f0:	0002      	movs	r2, r0
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d802      	bhi.n	8007102 <HAL_SPI_Transmit+0x18e>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	3301      	adds	r3, #1
 8007100:	d102      	bne.n	8007108 <HAL_SPI_Transmit+0x194>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007108:	231f      	movs	r3, #31
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	2203      	movs	r2, #3
 800710e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007110:	e079      	b.n	8007206 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1cd      	bne.n	80070b8 <HAL_SPI_Transmit+0x144>
 800711c:	e04f      	b.n	80071be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <HAL_SPI_Transmit+0x1bc>
 8007126:	2316      	movs	r3, #22
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d141      	bne.n	80071b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	7812      	ldrb	r2, [r2, #0]
 800713c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b01      	subs	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007156:	e02d      	b.n	80071b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2202      	movs	r2, #2
 8007160:	4013      	ands	r3, r2
 8007162:	2b02      	cmp	r3, #2
 8007164:	d113      	bne.n	800718e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800718c:	e012      	b.n	80071b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800718e:	f7fc f9af 	bl	80034f0 <HAL_GetTick>
 8007192:	0002      	movs	r2, r0
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d802      	bhi.n	80071a4 <HAL_SPI_Transmit+0x230>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	3301      	adds	r3, #1
 80071a2:	d102      	bne.n	80071aa <HAL_SPI_Transmit+0x236>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80071aa:	231f      	movs	r3, #31
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	2203      	movs	r2, #3
 80071b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80071b2:	e028      	b.n	8007206 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1cc      	bne.n	8007158 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	0018      	movs	r0, r3
 80071c6:	f000 f95d 	bl	8007484 <SPI_EndRxTxTransaction>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80071fa:	231f      	movs	r3, #31
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	2201      	movs	r2, #1
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e000      	b.n	8007206 <HAL_SPI_Transmit+0x292>
  }

error:
 8007204:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	225d      	movs	r2, #93	; 0x5d
 800720a:	2101      	movs	r1, #1
 800720c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	225c      	movs	r2, #92	; 0x5c
 8007212:	2100      	movs	r1, #0
 8007214:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007216:	231f      	movs	r3, #31
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	781b      	ldrb	r3, [r3, #0]
}
 800721c:	0018      	movs	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	b008      	add	sp, #32
 8007222:	bd80      	pop	{r7, pc}

08007224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	1dfb      	adds	r3, r7, #7
 8007232:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007234:	f7fc f95c 	bl	80034f0 <HAL_GetTick>
 8007238:	0002      	movs	r2, r0
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	1a9b      	subs	r3, r3, r2
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	18d3      	adds	r3, r2, r3
 8007242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007244:	f7fc f954 	bl	80034f0 <HAL_GetTick>
 8007248:	0003      	movs	r3, r0
 800724a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800724c:	4b3a      	ldr	r3, [pc, #232]	; (8007338 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	015b      	lsls	r3, r3, #5
 8007252:	0d1b      	lsrs	r3, r3, #20
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	4353      	muls	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800725a:	e058      	b.n	800730e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	d055      	beq.n	800730e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007262:	f7fc f945 	bl	80034f0 <HAL_GetTick>
 8007266:	0002      	movs	r2, r0
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	429a      	cmp	r2, r3
 8007270:	d902      	bls.n	8007278 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d142      	bne.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	21e0      	movs	r1, #224	; 0xe0
 8007284:	438a      	bics	r2, r1
 8007286:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	2382      	movs	r3, #130	; 0x82
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	429a      	cmp	r2, r3
 8007292:	d113      	bne.n	80072bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	429a      	cmp	r2, r3
 800729e:	d005      	beq.n	80072ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	2380      	movs	r3, #128	; 0x80
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d107      	bne.n	80072bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2140      	movs	r1, #64	; 0x40
 80072b8:	438a      	bics	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	019b      	lsls	r3, r3, #6
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d110      	bne.n	80072ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	491a      	ldr	r1, [pc, #104]	; (800733c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80072d4:	400a      	ands	r2, r1
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2180      	movs	r1, #128	; 0x80
 80072e4:	0189      	lsls	r1, r1, #6
 80072e6:	430a      	orrs	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	225d      	movs	r2, #93	; 0x5d
 80072ee:	2101      	movs	r1, #1
 80072f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	225c      	movs	r2, #92	; 0x5c
 80072f6:	2100      	movs	r1, #0
 80072f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e017      	b.n	800732e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3b01      	subs	r3, #1
 800730c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	425a      	negs	r2, r3
 800731e:	4153      	adcs	r3, r2
 8007320:	b2db      	uxtb	r3, r3
 8007322:	001a      	movs	r2, r3
 8007324:	1dfb      	adds	r3, r7, #7
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d197      	bne.n	800725c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b008      	add	sp, #32
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	20000030 	.word	0x20000030
 800733c:	ffffdfff 	.word	0xffffdfff

08007340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800734e:	2317      	movs	r3, #23
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007356:	f7fc f8cb 	bl	80034f0 <HAL_GetTick>
 800735a:	0002      	movs	r2, r0
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	18d3      	adds	r3, r2, r3
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007366:	f7fc f8c3 	bl	80034f0 <HAL_GetTick>
 800736a:	0003      	movs	r3, r0
 800736c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007376:	4b41      	ldr	r3, [pc, #260]	; (800747c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	0013      	movs	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	189b      	adds	r3, r3, r2
 8007380:	00da      	lsls	r2, r3, #3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	0d1b      	lsrs	r3, r3, #20
 8007386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007388:	4353      	muls	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800738c:	e068      	b.n	8007460 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	23c0      	movs	r3, #192	; 0xc0
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	429a      	cmp	r2, r3
 8007396:	d10a      	bne.n	80073ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d107      	bne.n	80073ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	2117      	movs	r1, #23
 80073a6:	187b      	adds	r3, r7, r1
 80073a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073aa:	187b      	adds	r3, r7, r1
 80073ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	d055      	beq.n	8007460 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073b4:	f7fc f89c 	bl	80034f0 <HAL_GetTick>
 80073b8:	0002      	movs	r2, r0
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d902      	bls.n	80073ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d142      	bne.n	8007450 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	21e0      	movs	r1, #224	; 0xe0
 80073d6:	438a      	bics	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	2382      	movs	r3, #130	; 0x82
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d113      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0xce>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	2380      	movs	r3, #128	; 0x80
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d005      	beq.n	80073fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d107      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2140      	movs	r1, #64	; 0x40
 800740a:	438a      	bics	r2, r1
 800740c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	019b      	lsls	r3, r3, #6
 8007416:	429a      	cmp	r2, r3
 8007418:	d110      	bne.n	800743c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4916      	ldr	r1, [pc, #88]	; (8007480 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007426:	400a      	ands	r2, r1
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2180      	movs	r1, #128	; 0x80
 8007436:	0189      	lsls	r1, r1, #6
 8007438:	430a      	orrs	r2, r1
 800743a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	225d      	movs	r2, #93	; 0x5d
 8007440:	2101      	movs	r1, #1
 8007442:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	225c      	movs	r2, #92	; 0x5c
 8007448:	2100      	movs	r1, #0
 800744a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e010      	b.n	8007472 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	3b01      	subs	r3, #1
 800745e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4013      	ands	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d18e      	bne.n	800738e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	0018      	movs	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	b00a      	add	sp, #40	; 0x28
 8007478:	bd80      	pop	{r7, pc}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	20000030 	.word	0x20000030
 8007480:	ffffdfff 	.word	0xffffdfff

08007484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	23c0      	movs	r3, #192	; 0xc0
 8007494:	0159      	lsls	r1, r3, #5
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	0013      	movs	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	f7ff ff4e 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 80074a4:	1e03      	subs	r3, r0, #0
 80074a6:	d007      	beq.n	80074b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ac:	2220      	movs	r2, #32
 80074ae:	431a      	orrs	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e027      	b.n	8007508 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	0013      	movs	r3, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	f7ff fead 	bl	8007224 <SPI_WaitFlagStateUntilTimeout>
 80074ca:	1e03      	subs	r3, r0, #0
 80074cc:	d007      	beq.n	80074de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d2:	2220      	movs	r2, #32
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e014      	b.n	8007508 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	23c0      	movs	r3, #192	; 0xc0
 80074e2:	00d9      	lsls	r1, r3, #3
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	0013      	movs	r3, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	f7ff ff27 	bl	8007340 <SPI_WaitFifoStateUntilTimeout>
 80074f2:	1e03      	subs	r3, r0, #0
 80074f4:	d007      	beq.n	8007506 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fa:	2220      	movs	r2, #32
 80074fc:	431a      	orrs	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e000      	b.n	8007508 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b004      	add	sp, #16
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e04a      	b.n	80075b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	223d      	movs	r2, #61	; 0x3d
 8007526:	5c9b      	ldrb	r3, [r3, r2]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	223c      	movs	r2, #60	; 0x3c
 8007532:	2100      	movs	r1, #0
 8007534:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0018      	movs	r0, r3
 800753a:	f003 f851 	bl	800a5e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	223d      	movs	r2, #61	; 0x3d
 8007542:	2102      	movs	r1, #2
 8007544:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	0019      	movs	r1, r3
 8007550:	0010      	movs	r0, r2
 8007552:	f000 fab9 	bl	8007ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2248      	movs	r2, #72	; 0x48
 800755a:	2101      	movs	r1, #1
 800755c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	223e      	movs	r2, #62	; 0x3e
 8007562:	2101      	movs	r1, #1
 8007564:	5499      	strb	r1, [r3, r2]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	223f      	movs	r2, #63	; 0x3f
 800756a:	2101      	movs	r1, #1
 800756c:	5499      	strb	r1, [r3, r2]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2240      	movs	r2, #64	; 0x40
 8007572:	2101      	movs	r1, #1
 8007574:	5499      	strb	r1, [r3, r2]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2241      	movs	r2, #65	; 0x41
 800757a:	2101      	movs	r1, #1
 800757c:	5499      	strb	r1, [r3, r2]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2242      	movs	r2, #66	; 0x42
 8007582:	2101      	movs	r1, #1
 8007584:	5499      	strb	r1, [r3, r2]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2243      	movs	r2, #67	; 0x43
 800758a:	2101      	movs	r1, #1
 800758c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2244      	movs	r2, #68	; 0x44
 8007592:	2101      	movs	r1, #1
 8007594:	5499      	strb	r1, [r3, r2]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2245      	movs	r2, #69	; 0x45
 800759a:	2101      	movs	r1, #1
 800759c:	5499      	strb	r1, [r3, r2]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2246      	movs	r2, #70	; 0x46
 80075a2:	2101      	movs	r1, #1
 80075a4:	5499      	strb	r1, [r3, r2]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2247      	movs	r2, #71	; 0x47
 80075aa:	2101      	movs	r1, #1
 80075ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	223d      	movs	r2, #61	; 0x3d
 80075b2:	2101      	movs	r1, #1
 80075b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	223d      	movs	r2, #61	; 0x3d
 80075cc:	5c9b      	ldrb	r3, [r3, r2]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d001      	beq.n	80075d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e042      	b.n	800765e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	223d      	movs	r2, #61	; 0x3d
 80075dc:	2102      	movs	r1, #2
 80075de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2101      	movs	r1, #1
 80075ec:	430a      	orrs	r2, r1
 80075ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <HAL_TIM_Base_Start_IT+0xa8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00f      	beq.n	800761a <HAL_TIM_Base_Start_IT+0x5a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	05db      	lsls	r3, r3, #23
 8007602:	429a      	cmp	r2, r3
 8007604:	d009      	beq.n	800761a <HAL_TIM_Base_Start_IT+0x5a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a18      	ldr	r2, [pc, #96]	; (800766c <HAL_TIM_Base_Start_IT+0xac>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d004      	beq.n	800761a <HAL_TIM_Base_Start_IT+0x5a>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a16      	ldr	r2, [pc, #88]	; (8007670 <HAL_TIM_Base_Start_IT+0xb0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d116      	bne.n	8007648 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	4a14      	ldr	r2, [pc, #80]	; (8007674 <HAL_TIM_Base_Start_IT+0xb4>)
 8007622:	4013      	ands	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b06      	cmp	r3, #6
 800762a:	d016      	beq.n	800765a <HAL_TIM_Base_Start_IT+0x9a>
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	2380      	movs	r3, #128	; 0x80
 8007630:	025b      	lsls	r3, r3, #9
 8007632:	429a      	cmp	r2, r3
 8007634:	d011      	beq.n	800765a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2101      	movs	r1, #1
 8007642:	430a      	orrs	r2, r1
 8007644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007646:	e008      	b.n	800765a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2101      	movs	r1, #1
 8007654:	430a      	orrs	r2, r1
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e000      	b.n	800765c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	0018      	movs	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	b004      	add	sp, #16
 8007664:	bd80      	pop	{r7, pc}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	40012c00 	.word	0x40012c00
 800766c:	40000400 	.word	0x40000400
 8007670:	40014000 	.word	0x40014000
 8007674:	00010007 	.word	0x00010007

08007678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2202      	movs	r2, #2
 8007688:	4013      	ands	r3, r2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d124      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2202      	movs	r2, #2
 8007696:	4013      	ands	r3, r2
 8007698:	2b02      	cmp	r3, #2
 800769a:	d11d      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2203      	movs	r2, #3
 80076a2:	4252      	negs	r2, r2
 80076a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	2203      	movs	r2, #3
 80076b4:	4013      	ands	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	0018      	movs	r0, r3
 80076bc:	f000 f9ec 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80076c0:	e007      	b.n	80076d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f000 f9df 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f000 f9eb 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2204      	movs	r2, #4
 80076e0:	4013      	ands	r3, r2
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d125      	bne.n	8007732 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2204      	movs	r2, #4
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d11e      	bne.n	8007732 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2205      	movs	r2, #5
 80076fa:	4252      	negs	r2, r2
 80076fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	23c0      	movs	r3, #192	; 0xc0
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4013      	ands	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	0018      	movs	r0, r3
 8007716:	f000 f9bf 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 800771a:	e007      	b.n	800772c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	0018      	movs	r0, r3
 8007720:	f000 f9b2 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	0018      	movs	r0, r3
 8007728:	f000 f9be 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2208      	movs	r2, #8
 800773a:	4013      	ands	r3, r2
 800773c:	2b08      	cmp	r3, #8
 800773e:	d124      	bne.n	800778a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	2208      	movs	r2, #8
 8007748:	4013      	ands	r3, r2
 800774a:	2b08      	cmp	r3, #8
 800774c:	d11d      	bne.n	800778a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2209      	movs	r2, #9
 8007754:	4252      	negs	r2, r2
 8007756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2204      	movs	r2, #4
 800775c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	2203      	movs	r2, #3
 8007766:	4013      	ands	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	0018      	movs	r0, r3
 800776e:	f000 f993 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 8007772:	e007      	b.n	8007784 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	0018      	movs	r0, r3
 8007778:	f000 f986 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	0018      	movs	r0, r3
 8007780:	f000 f992 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2210      	movs	r2, #16
 8007792:	4013      	ands	r3, r2
 8007794:	2b10      	cmp	r3, #16
 8007796:	d125      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2210      	movs	r2, #16
 80077a0:	4013      	ands	r3, r2
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d11e      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2211      	movs	r2, #17
 80077ac:	4252      	negs	r2, r2
 80077ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2208      	movs	r2, #8
 80077b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	23c0      	movs	r3, #192	; 0xc0
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4013      	ands	r3, r2
 80077c2:	d004      	beq.n	80077ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 f966 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80077cc:	e007      	b.n	80077de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f000 f959 	bl	8007a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 f965 	bl	8007aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2201      	movs	r2, #1
 80077ec:	4013      	ands	r3, r2
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10f      	bne.n	8007812 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d108      	bne.n	8007812 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2202      	movs	r2, #2
 8007806:	4252      	negs	r2, r2
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	0018      	movs	r0, r3
 800780e:	f007 f895 	bl	800e93c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2280      	movs	r2, #128	; 0x80
 800781a:	4013      	ands	r3, r2
 800781c:	2b80      	cmp	r3, #128	; 0x80
 800781e:	d10f      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	4013      	ands	r3, r2
 800782a:	2b80      	cmp	r3, #128	; 0x80
 800782c:	d108      	bne.n	8007840 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2281      	movs	r2, #129	; 0x81
 8007834:	4252      	negs	r2, r2
 8007836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	0018      	movs	r0, r3
 800783c:	f000 fad6 	bl	8007dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	2380      	movs	r3, #128	; 0x80
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	401a      	ands	r2, r3
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	429a      	cmp	r2, r3
 8007852:	d10e      	bne.n	8007872 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	4013      	ands	r3, r2
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d107      	bne.n	8007872 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <HAL_TIM_IRQHandler+0x260>)
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	0018      	movs	r0, r3
 800786e:	f000 fac5 	bl	8007dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2240      	movs	r2, #64	; 0x40
 800787a:	4013      	ands	r3, r2
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d10f      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2240      	movs	r2, #64	; 0x40
 8007888:	4013      	ands	r3, r2
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d108      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2241      	movs	r2, #65	; 0x41
 8007894:	4252      	negs	r2, r2
 8007896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	0018      	movs	r0, r3
 800789c:	f000 f90c 	bl	8007ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2220      	movs	r2, #32
 80078a8:	4013      	ands	r3, r2
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d10f      	bne.n	80078ce <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	4013      	ands	r3, r2
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d108      	bne.n	80078ce <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2221      	movs	r2, #33	; 0x21
 80078c2:	4252      	negs	r2, r2
 80078c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0018      	movs	r0, r3
 80078ca:	f000 fa87 	bl	8007ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b002      	add	sp, #8
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	fffffeff 	.word	0xfffffeff

080078dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	230f      	movs	r3, #15
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	223c      	movs	r2, #60	; 0x3c
 80078f2:	5c9b      	ldrb	r3, [r3, r2]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_TIM_ConfigClockSource+0x20>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e0bc      	b.n	8007a76 <HAL_TIM_ConfigClockSource+0x19a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	223c      	movs	r2, #60	; 0x3c
 8007900:	2101      	movs	r1, #1
 8007902:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	223d      	movs	r2, #61	; 0x3d
 8007908:	2102      	movs	r1, #2
 800790a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4a5a      	ldr	r2, [pc, #360]	; (8007a80 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007918:	4013      	ands	r3, r2
 800791a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4a59      	ldr	r2, [pc, #356]	; (8007a84 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007920:	4013      	ands	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2280      	movs	r2, #128	; 0x80
 8007932:	0192      	lsls	r2, r2, #6
 8007934:	4293      	cmp	r3, r2
 8007936:	d040      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0xde>
 8007938:	2280      	movs	r2, #128	; 0x80
 800793a:	0192      	lsls	r2, r2, #6
 800793c:	4293      	cmp	r3, r2
 800793e:	d900      	bls.n	8007942 <HAL_TIM_ConfigClockSource+0x66>
 8007940:	e088      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007942:	2280      	movs	r2, #128	; 0x80
 8007944:	0152      	lsls	r2, r2, #5
 8007946:	4293      	cmp	r3, r2
 8007948:	d100      	bne.n	800794c <HAL_TIM_ConfigClockSource+0x70>
 800794a:	e088      	b.n	8007a5e <HAL_TIM_ConfigClockSource+0x182>
 800794c:	2280      	movs	r2, #128	; 0x80
 800794e:	0152      	lsls	r2, r2, #5
 8007950:	4293      	cmp	r3, r2
 8007952:	d900      	bls.n	8007956 <HAL_TIM_ConfigClockSource+0x7a>
 8007954:	e07e      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007956:	2b70      	cmp	r3, #112	; 0x70
 8007958:	d018      	beq.n	800798c <HAL_TIM_ConfigClockSource+0xb0>
 800795a:	d900      	bls.n	800795e <HAL_TIM_ConfigClockSource+0x82>
 800795c:	e07a      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 800795e:	2b60      	cmp	r3, #96	; 0x60
 8007960:	d04f      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0x126>
 8007962:	d900      	bls.n	8007966 <HAL_TIM_ConfigClockSource+0x8a>
 8007964:	e076      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007966:	2b50      	cmp	r3, #80	; 0x50
 8007968:	d03b      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x106>
 800796a:	d900      	bls.n	800796e <HAL_TIM_ConfigClockSource+0x92>
 800796c:	e072      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d057      	beq.n	8007a22 <HAL_TIM_ConfigClockSource+0x146>
 8007972:	d900      	bls.n	8007976 <HAL_TIM_ConfigClockSource+0x9a>
 8007974:	e06e      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007976:	2b30      	cmp	r3, #48	; 0x30
 8007978:	d063      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 800797a:	d86b      	bhi.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 800797c:	2b20      	cmp	r3, #32
 800797e:	d060      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 8007980:	d868      	bhi.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d05d      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 8007986:	2b10      	cmp	r3, #16
 8007988:	d05b      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x166>
 800798a:	e063      	b.n	8007a54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6899      	ldr	r1, [r3, #8]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f000 f990 	bl	8007cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2277      	movs	r2, #119	; 0x77
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	609a      	str	r2, [r3, #8]
      break;
 80079b8:	e052      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6899      	ldr	r1, [r3, #8]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f000 f979 	bl	8007cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2180      	movs	r1, #128	; 0x80
 80079da:	01c9      	lsls	r1, r1, #7
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
      break;
 80079e0:	e03e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6859      	ldr	r1, [r3, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	001a      	movs	r2, r3
 80079f0:	f000 f8ea 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2150      	movs	r1, #80	; 0x50
 80079fa:	0018      	movs	r0, r3
 80079fc:	f000 f944 	bl	8007c88 <TIM_ITRx_SetConfig>
      break;
 8007a00:	e02e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6859      	ldr	r1, [r3, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	001a      	movs	r2, r3
 8007a10:	f000 f908 	bl	8007c24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2160      	movs	r1, #96	; 0x60
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f000 f934 	bl	8007c88 <TIM_ITRx_SetConfig>
      break;
 8007a20:	e01e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6859      	ldr	r1, [r3, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	001a      	movs	r2, r3
 8007a30:	f000 f8ca 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2140      	movs	r1, #64	; 0x40
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f000 f924 	bl	8007c88 <TIM_ITRx_SetConfig>
      break;
 8007a40:	e00e      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	0010      	movs	r0, r2
 8007a4e:	f000 f91b 	bl	8007c88 <TIM_ITRx_SetConfig>
      break;
 8007a52:	e005      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007a54:	230f      	movs	r3, #15
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
      break;
 8007a5c:	e000      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007a5e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	223d      	movs	r2, #61	; 0x3d
 8007a64:	2101      	movs	r1, #1
 8007a66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	223c      	movs	r2, #60	; 0x3c
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	5499      	strb	r1, [r3, r2]

  return status;
 8007a70:	230f      	movs	r3, #15
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	781b      	ldrb	r3, [r3, #0]
}
 8007a76:	0018      	movs	r0, r3
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	b004      	add	sp, #16
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	ffceff88 	.word	0xffceff88
 8007a84:	ffff00ff 	.word	0xffff00ff

08007a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a90:	46c0      	nop			; (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b002      	add	sp, #8
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa0:	46c0      	nop			; (mov r8, r8)
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b002      	add	sp, #8
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab0:	46c0      	nop			; (mov r8, r8)
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a34      	ldr	r2, [pc, #208]	; (8007bac <TIM_Base_SetConfig+0xe4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d008      	beq.n	8007af2 <TIM_Base_SetConfig+0x2a>
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	2380      	movs	r3, #128	; 0x80
 8007ae4:	05db      	lsls	r3, r3, #23
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d003      	beq.n	8007af2 <TIM_Base_SetConfig+0x2a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a30      	ldr	r2, [pc, #192]	; (8007bb0 <TIM_Base_SetConfig+0xe8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d108      	bne.n	8007b04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2270      	movs	r2, #112	; 0x70
 8007af6:	4393      	bics	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a29      	ldr	r2, [pc, #164]	; (8007bac <TIM_Base_SetConfig+0xe4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d018      	beq.n	8007b3e <TIM_Base_SetConfig+0x76>
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	2380      	movs	r3, #128	; 0x80
 8007b10:	05db      	lsls	r3, r3, #23
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d013      	beq.n	8007b3e <TIM_Base_SetConfig+0x76>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a25      	ldr	r2, [pc, #148]	; (8007bb0 <TIM_Base_SetConfig+0xe8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00f      	beq.n	8007b3e <TIM_Base_SetConfig+0x76>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a24      	ldr	r2, [pc, #144]	; (8007bb4 <TIM_Base_SetConfig+0xec>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <TIM_Base_SetConfig+0x76>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a23      	ldr	r2, [pc, #140]	; (8007bb8 <TIM_Base_SetConfig+0xf0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <TIM_Base_SetConfig+0x76>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a22      	ldr	r2, [pc, #136]	; (8007bbc <TIM_Base_SetConfig+0xf4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_Base_SetConfig+0x76>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <TIM_Base_SetConfig+0xf8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4a20      	ldr	r2, [pc, #128]	; (8007bc4 <TIM_Base_SetConfig+0xfc>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	4393      	bics	r3, r2
 8007b56:	001a      	movs	r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <TIM_Base_SetConfig+0xe4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0xce>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a0d      	ldr	r2, [pc, #52]	; (8007bb8 <TIM_Base_SetConfig+0xf0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0xce>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <TIM_Base_SetConfig+0xf4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0xce>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a0b      	ldr	r2, [pc, #44]	; (8007bc0 <TIM_Base_SetConfig+0xf8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d103      	bne.n	8007b9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	615a      	str	r2, [r3, #20]
}
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40012c00 	.word	0x40012c00
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40002000 	.word	0x40002000
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40014400 	.word	0x40014400
 8007bc0:	40014800 	.word	0x40014800
 8007bc4:	fffffcff 	.word	0xfffffcff

08007bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	2201      	movs	r2, #1
 8007be0:	4393      	bics	r3, r2
 8007be2:	001a      	movs	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	22f0      	movs	r2, #240	; 0xf0
 8007bf2:	4393      	bics	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	220a      	movs	r2, #10
 8007c04:	4393      	bics	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	46c0      	nop			; (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b006      	add	sp, #24
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	2210      	movs	r2, #16
 8007c36:	4393      	bics	r3, r2
 8007c38:	001a      	movs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	4a0d      	ldr	r2, [pc, #52]	; (8007c84 <TIM_TI2_ConfigInputStage+0x60>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	22a0      	movs	r2, #160	; 0xa0
 8007c60:	4393      	bics	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b006      	add	sp, #24
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	ffff0fff 	.word	0xffff0fff

08007c88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <TIM_ITRx_SetConfig+0x34>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	2207      	movs	r2, #7
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	609a      	str	r2, [r3, #8]
}
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	b004      	add	sp, #16
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	ffcfff8f 	.word	0xffcfff8f

08007cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	4a09      	ldr	r2, [pc, #36]	; (8007cfc <TIM_ETR_SetConfig+0x3c>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	021a      	lsls	r2, r3, #8
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	609a      	str	r2, [r3, #8]
}
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b006      	add	sp, #24
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	ffff00ff 	.word	0xffff00ff

08007d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	223c      	movs	r2, #60	; 0x3c
 8007d0e:	5c9b      	ldrb	r3, [r3, r2]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e055      	b.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	223c      	movs	r2, #60	; 0x3c
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	223d      	movs	r2, #61	; 0x3d
 8007d24:	2102      	movs	r1, #2
 8007d26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d108      	bne.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a22      	ldr	r2, [pc, #136]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2270      	movs	r2, #112	; 0x70
 8007d58:	4393      	bics	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a16      	ldr	r2, [pc, #88]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00f      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	2380      	movs	r3, #128	; 0x80
 8007d7e:	05db      	lsls	r3, r3, #23
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d009      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a12      	ldr	r2, [pc, #72]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a11      	ldr	r2, [pc, #68]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d10c      	bne.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2280      	movs	r2, #128	; 0x80
 8007d9c:	4393      	bics	r3, r2
 8007d9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	223d      	movs	r2, #61	; 0x3d
 8007db6:	2101      	movs	r1, #1
 8007db8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	223c      	movs	r2, #60	; 0x3c
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b004      	add	sp, #16
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	ff0fffff 	.word	0xff0fffff
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40014000 	.word	0x40014000

08007ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b002      	add	sp, #8
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b002      	add	sp, #8
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b002      	add	sp, #8
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <DEV_SPI_WriteByte>:
#include "Display_Config/DEV_Config.h"
#include "stm32g0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	0002      	movs	r2, r0
 8007e14:	1dfb      	adds	r3, r7, #7
 8007e16:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8007e18:	23fa      	movs	r3, #250	; 0xfa
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	1df9      	adds	r1, r7, #7
 8007e1e:	4804      	ldr	r0, [pc, #16]	; (8007e30 <DEV_SPI_WriteByte+0x24>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	f7ff f8a7 	bl	8006f74 <HAL_SPI_Transmit>
}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b002      	add	sp, #8
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	20000630 	.word	0x20000630

08007e34 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8007e38:	2380      	movs	r3, #128	; 0x80
 8007e3a:	0099      	lsls	r1, r3, #2
 8007e3c:	23a0      	movs	r3, #160	; 0xa0
 8007e3e:	05db      	lsls	r3, r3, #23
 8007e40:	2200      	movs	r2, #0
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7fc fe13 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	0059      	lsls	r1, r3, #1
 8007e4c:	23a0      	movs	r3, #160	; 0xa0
 8007e4e:	05db      	lsls	r3, r3, #23
 8007e50:	2200      	movs	r2, #0
 8007e52:	0018      	movs	r0, r3
 8007e54:	f7fc fe0b 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8007e58:	2380      	movs	r3, #128	; 0x80
 8007e5a:	00d9      	lsls	r1, r3, #3
 8007e5c:	23a0      	movs	r3, #160	; 0xa0
 8007e5e:	05db      	lsls	r3, r3, #23
 8007e60:	2201      	movs	r2, #1
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7fc fe03 	bl	8004a6e <HAL_GPIO_WritePin>
		return 0;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	00d9      	lsls	r1, r3, #3
 8007e78:	23a0      	movs	r3, #160	; 0xa0
 8007e7a:	05db      	lsls	r3, r3, #23
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f7fc fdf5 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8007e84:	20c8      	movs	r0, #200	; 0xc8
 8007e86:	f7fb fb3d 	bl	8003504 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8007e8a:	2380      	movs	r3, #128	; 0x80
 8007e8c:	00d9      	lsls	r1, r3, #3
 8007e8e:	23a0      	movs	r3, #160	; 0xa0
 8007e90:	05db      	lsls	r3, r3, #23
 8007e92:	2200      	movs	r2, #0
 8007e94:	0018      	movs	r0, r3
 8007e96:	f7fc fdea 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8007e9a:	2002      	movs	r0, #2
 8007e9c:	f7fb fb32 	bl	8003504 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8007ea0:	2380      	movs	r3, #128	; 0x80
 8007ea2:	00d9      	lsls	r1, r3, #3
 8007ea4:	23a0      	movs	r3, #160	; 0xa0
 8007ea6:	05db      	lsls	r3, r3, #23
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f7fc fddf 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8007eb0:	20c8      	movs	r0, #200	; 0xc8
 8007eb2:	f7fb fb27 	bl	8003504 <HAL_Delay>
}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	0002      	movs	r2, r0
 8007ec4:	1dfb      	adds	r3, r7, #7
 8007ec6:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	0099      	lsls	r1, r3, #2
 8007ecc:	23a0      	movs	r3, #160	; 0xa0
 8007ece:	05db      	lsls	r3, r3, #23
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f7fc fdcb 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	0059      	lsls	r1, r3, #1
 8007edc:	23a0      	movs	r3, #160	; 0xa0
 8007ede:	05db      	lsls	r3, r3, #23
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f7fc fdc3 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8007ee8:	1dfb      	adds	r3, r7, #7
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	0018      	movs	r0, r3
 8007eee:	f7ff ff8d 	bl	8007e0c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8007ef2:	2380      	movs	r3, #128	; 0x80
 8007ef4:	0059      	lsls	r1, r3, #1
 8007ef6:	23a0      	movs	r3, #160	; 0xa0
 8007ef8:	05db      	lsls	r3, r3, #23
 8007efa:	2201      	movs	r2, #1
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7fc fdb6 	bl	8004a6e <HAL_GPIO_WritePin>
}
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	46bd      	mov	sp, r7
 8007f06:	b002      	add	sp, #8
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	0002      	movs	r2, r0
 8007f12:	1dfb      	adds	r3, r7, #7
 8007f14:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8007f16:	2380      	movs	r3, #128	; 0x80
 8007f18:	0099      	lsls	r1, r3, #2
 8007f1a:	23a0      	movs	r3, #160	; 0xa0
 8007f1c:	05db      	lsls	r3, r3, #23
 8007f1e:	2201      	movs	r2, #1
 8007f20:	0018      	movs	r0, r3
 8007f22:	f7fc fda4 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	0059      	lsls	r1, r3, #1
 8007f2a:	23a0      	movs	r3, #160	; 0xa0
 8007f2c:	05db      	lsls	r3, r3, #23
 8007f2e:	2200      	movs	r2, #0
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fc fd9c 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8007f36:	1dfb      	adds	r3, r7, #7
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7ff ff66 	bl	8007e0c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	0059      	lsls	r1, r3, #1
 8007f44:	23a0      	movs	r3, #160	; 0xa0
 8007f46:	05db      	lsls	r3, r3, #23
 8007f48:	2201      	movs	r2, #1
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f7fc fd8f 	bl	8004a6e <HAL_GPIO_WritePin>
}
 8007f50:	46c0      	nop			; (mov r8, r8)
 8007f52:	46bd      	mov	sp, r7
 8007f54:	b002      	add	sp, #8
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <EPD_1IN54_V2_ReadBusy+0x38>)
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f006 ff0e 	bl	800ed80 <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8007f64:	e002      	b.n	8007f6c <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(100);
 8007f66:	2064      	movs	r0, #100	; 0x64
 8007f68:	f7fb facc 	bl	8003504 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	23a0      	movs	r3, #160	; 0xa0
 8007f72:	05db      	lsls	r3, r3, #23
 8007f74:	0011      	movs	r1, r2
 8007f76:	0018      	movs	r0, r3
 8007f78:	f7fc fd5c 	bl	8004a34 <HAL_GPIO_ReadPin>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d0f1      	beq.n	8007f66 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 8007f82:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <EPD_1IN54_V2_ReadBusy+0x3c>)
 8007f84:	0018      	movs	r0, r3
 8007f86:	f006 fefb 	bl	800ed80 <puts>
}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	08011460 	.word	0x08011460
 8007f94:	08011478 	.word	0x08011478

08007f98 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8007f9c:	2022      	movs	r0, #34	; 0x22
 8007f9e:	f7ff ff8d 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 8007fa2:	20f7      	movs	r0, #247	; 0xf7
 8007fa4:	f7ff ffb1 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8007fa8:	2020      	movs	r0, #32
 8007faa:	f7ff ff87 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8007fae:	f7ff ffd3 	bl	8007f58 <EPD_1IN54_V2_ReadBusy>
}
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8007fbc:	2022      	movs	r0, #34	; 0x22
 8007fbe:	f7ff ff7d 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xFF);
 8007fc2:	20ff      	movs	r0, #255	; 0xff
 8007fc4:	f7ff ffa1 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8007fc8:	2020      	movs	r0, #32
 8007fca:	f7ff ff77 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8007fce:	f7ff ffc3 	bl	8007f58 <EPD_1IN54_V2_ReadBusy>
}
 8007fd2:	46c0      	nop			; (mov r8, r8)
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 8007fdc:	f7ff ff48 	bl	8007e70 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 8007fe0:	f7ff ffba 	bl	8007f58 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 8007fe4:	2012      	movs	r0, #18
 8007fe6:	f7ff ff69 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8007fea:	f7ff ffb5 	bl	8007f58 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f7ff ff64 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 8007ff4:	20c7      	movs	r0, #199	; 0xc7
 8007ff6:	f7ff ff88 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f7ff ff85 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 8008000:	2001      	movs	r0, #1
 8008002:	f7ff ff82 	bl	8007f0a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 8008006:	2011      	movs	r0, #17
 8008008:	f7ff ff58 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800800c:	2001      	movs	r0, #1
 800800e:	f7ff ff7c 	bl	8007f0a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 8008012:	2044      	movs	r0, #68	; 0x44
 8008014:	f7ff ff52 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8008018:	2000      	movs	r0, #0
 800801a:	f7ff ff76 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 800801e:	2018      	movs	r0, #24
 8008020:	f7ff ff73 	bl	8007f0a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 8008024:	2045      	movs	r0, #69	; 0x45
 8008026:	f7ff ff49 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 800802a:	20c7      	movs	r0, #199	; 0xc7
 800802c:	f7ff ff6d 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008030:	2000      	movs	r0, #0
 8008032:	f7ff ff6a 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008036:	2000      	movs	r0, #0
 8008038:	f7ff ff67 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800803c:	2000      	movs	r0, #0
 800803e:	f7ff ff64 	bl	8007f0a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 8008042:	203c      	movs	r0, #60	; 0x3c
 8008044:	f7ff ff3a 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8008048:	2001      	movs	r0, #1
 800804a:	f7ff ff5e 	bl	8007f0a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800804e:	2018      	movs	r0, #24
 8008050:	f7ff ff34 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 8008054:	2080      	movs	r0, #128	; 0x80
 8008056:	f7ff ff58 	bl	8007f0a <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 800805a:	2022      	movs	r0, #34	; 0x22
 800805c:	f7ff ff2e 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 8008060:	20b1      	movs	r0, #177	; 0xb1
 8008062:	f7ff ff52 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8008066:	2020      	movs	r0, #32
 8008068:	f7ff ff28 	bl	8007ebc <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 800806c:	204e      	movs	r0, #78	; 0x4e
 800806e:	f7ff ff25 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8008072:	2000      	movs	r0, #0
 8008074:	f7ff ff49 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 8008078:	204f      	movs	r0, #79	; 0x4f
 800807a:	f7ff ff1f 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800807e:	20c7      	movs	r0, #199	; 0xc7
 8008080:	f7ff ff43 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8008084:	2000      	movs	r0, #0
 8008086:	f7ff ff40 	bl	8007f0a <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 800808a:	f7ff ff65 	bl	8007f58 <EPD_1IN54_V2_ReadBusy>
}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 800809a:	1cbb      	adds	r3, r7, #2
 800809c:	2219      	movs	r2, #25
 800809e:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80080a0:	003b      	movs	r3, r7
 80080a2:	22c8      	movs	r2, #200	; 0xc8
 80080a4:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 80080a6:	2024      	movs	r0, #36	; 0x24
 80080a8:	f7ff ff08 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80080ac:	1dbb      	adds	r3, r7, #6
 80080ae:	2200      	movs	r2, #0
 80080b0:	801a      	strh	r2, [r3, #0]
 80080b2:	e016      	b.n	80080e2 <EPD_1IN54_V2_Clear+0x4e>
        for (UWORD i = 0; i < Width; i++) {
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	2200      	movs	r2, #0
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	e007      	b.n	80080cc <EPD_1IN54_V2_Clear+0x38>
            EPD_1IN54_V2_SendData(0XFF);
 80080bc:	20ff      	movs	r0, #255	; 0xff
 80080be:	f7ff ff24 	bl	8007f0a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80080c2:	1d3b      	adds	r3, r7, #4
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	1d3b      	adds	r3, r7, #4
 80080c8:	3201      	adds	r2, #1
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	1d3a      	adds	r2, r7, #4
 80080ce:	1cbb      	adds	r3, r7, #2
 80080d0:	8812      	ldrh	r2, [r2, #0]
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3f1      	bcc.n	80080bc <EPD_1IN54_V2_Clear+0x28>
    for (UWORD j = 0; j < Height; j++) {
 80080d8:	1dbb      	adds	r3, r7, #6
 80080da:	881a      	ldrh	r2, [r3, #0]
 80080dc:	1dbb      	adds	r3, r7, #6
 80080de:	3201      	adds	r2, #1
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	1dba      	adds	r2, r7, #6
 80080e4:	003b      	movs	r3, r7
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d3e2      	bcc.n	80080b4 <EPD_1IN54_V2_Clear+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80080ee:	f7ff ff53 	bl	8007f98 <EPD_1IN54_V2_TurnOnDisplay>
}
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	46bd      	mov	sp, r7
 80080f6:	b002      	add	sp, #8
 80080f8:	bd80      	pop	{r7, pc}

080080fa <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 80080fa:	b590      	push	{r4, r7, lr}
 80080fc:	b087      	sub	sp, #28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8008102:	2312      	movs	r3, #18
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	2219      	movs	r2, #25
 8008108:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800810a:	2310      	movs	r3, #16
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	22c8      	movs	r2, #200	; 0xc8
 8008110:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8008116:	2024      	movs	r0, #36	; 0x24
 8008118:	f7ff fed0 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800811c:	2316      	movs	r3, #22
 800811e:	18fb      	adds	r3, r7, r3
 8008120:	2200      	movs	r2, #0
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	e02a      	b.n	800817c <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 8008126:	2314      	movs	r3, #20
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	2200      	movs	r2, #0
 800812c:	801a      	strh	r2, [r3, #0]
 800812e:	e017      	b.n	8008160 <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 8008130:	2414      	movs	r4, #20
 8008132:	193b      	adds	r3, r7, r4
 8008134:	881a      	ldrh	r2, [r3, #0]
 8008136:	2316      	movs	r3, #22
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	2112      	movs	r1, #18
 800813e:	1879      	adds	r1, r7, r1
 8008140:	8809      	ldrh	r1, [r1, #0]
 8008142:	434b      	muls	r3, r1
 8008144:	18d3      	adds	r3, r2, r3
 8008146:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	18d3      	adds	r3, r2, r3
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	0018      	movs	r0, r3
 8008152:	f7ff feda 	bl	8007f0a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008156:	193b      	adds	r3, r7, r4
 8008158:	881a      	ldrh	r2, [r3, #0]
 800815a:	193b      	adds	r3, r7, r4
 800815c:	3201      	adds	r2, #1
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	2314      	movs	r3, #20
 8008162:	18fa      	adds	r2, r7, r3
 8008164:	2312      	movs	r3, #18
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	8812      	ldrh	r2, [r2, #0]
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d3df      	bcc.n	8008130 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8008170:	2116      	movs	r1, #22
 8008172:	187b      	adds	r3, r7, r1
 8008174:	881a      	ldrh	r2, [r3, #0]
 8008176:	187b      	adds	r3, r7, r1
 8008178:	3201      	adds	r2, #1
 800817a:	801a      	strh	r2, [r3, #0]
 800817c:	2316      	movs	r3, #22
 800817e:	18fa      	adds	r2, r7, r3
 8008180:	2310      	movs	r3, #16
 8008182:	18fb      	adds	r3, r7, r3
 8008184:	8812      	ldrh	r2, [r2, #0]
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d3cc      	bcc.n	8008126 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800818c:	f7ff ff04 	bl	8007f98 <EPD_1IN54_V2_TurnOnDisplay>
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b007      	add	sp, #28
 8008196:	bd90      	pop	{r4, r7, pc}

08008198 <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
		         first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 8008198:	b590      	push	{r4, r7, lr}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80081a0:	230e      	movs	r3, #14
 80081a2:	18fb      	adds	r3, r7, r3
 80081a4:	2219      	movs	r2, #25
 80081a6:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80081a8:	230c      	movs	r3, #12
 80081aa:	18fb      	adds	r3, r7, r3
 80081ac:	22c8      	movs	r2, #200	; 0xc8
 80081ae:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 80081b4:	2024      	movs	r0, #36	; 0x24
 80081b6:	f7ff fe81 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80081ba:	2316      	movs	r3, #22
 80081bc:	18fb      	adds	r3, r7, r3
 80081be:	2200      	movs	r2, #0
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	e02a      	b.n	800821a <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
        for (UWORD i = 0; i < Width; i++) {
 80081c4:	2314      	movs	r3, #20
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	2200      	movs	r2, #0
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e017      	b.n	80081fe <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
            Addr = i + j * Width;
 80081ce:	2414      	movs	r4, #20
 80081d0:	193b      	adds	r3, r7, r4
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	2316      	movs	r3, #22
 80081d6:	18fb      	adds	r3, r7, r3
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	210e      	movs	r1, #14
 80081dc:	1879      	adds	r1, r7, r1
 80081de:	8809      	ldrh	r1, [r1, #0]
 80081e0:	434b      	muls	r3, r1
 80081e2:	18d3      	adds	r3, r2, r3
 80081e4:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	18d3      	adds	r3, r2, r3
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7ff fe8b 	bl	8007f0a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80081f4:	193b      	adds	r3, r7, r4
 80081f6:	881a      	ldrh	r2, [r3, #0]
 80081f8:	193b      	adds	r3, r7, r4
 80081fa:	3201      	adds	r2, #1
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	2314      	movs	r3, #20
 8008200:	18fa      	adds	r2, r7, r3
 8008202:	230e      	movs	r3, #14
 8008204:	18fb      	adds	r3, r7, r3
 8008206:	8812      	ldrh	r2, [r2, #0]
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d3df      	bcc.n	80081ce <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++) {
 800820e:	2116      	movs	r1, #22
 8008210:	187b      	adds	r3, r7, r1
 8008212:	881a      	ldrh	r2, [r3, #0]
 8008214:	187b      	adds	r3, r7, r1
 8008216:	3201      	adds	r2, #1
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	2316      	movs	r3, #22
 800821c:	18fa      	adds	r2, r7, r3
 800821e:	230c      	movs	r3, #12
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	8812      	ldrh	r2, [r2, #0]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d3cc      	bcc.n	80081c4 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800822a:	2026      	movs	r0, #38	; 0x26
 800822c:	f7ff fe46 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8008230:	2312      	movs	r3, #18
 8008232:	18fb      	adds	r3, r7, r3
 8008234:	2200      	movs	r2, #0
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e02a      	b.n	8008290 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
        for (UWORD i = 0; i < Width; i++) {
 800823a:	2310      	movs	r3, #16
 800823c:	18fb      	adds	r3, r7, r3
 800823e:	2200      	movs	r2, #0
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	e017      	b.n	8008274 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
            Addr = i + j * Width;
 8008244:	2410      	movs	r4, #16
 8008246:	193b      	adds	r3, r7, r4
 8008248:	881a      	ldrh	r2, [r3, #0]
 800824a:	2312      	movs	r3, #18
 800824c:	18fb      	adds	r3, r7, r3
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	210e      	movs	r1, #14
 8008252:	1879      	adds	r1, r7, r1
 8008254:	8809      	ldrh	r1, [r1, #0]
 8008256:	434b      	muls	r3, r1
 8008258:	18d3      	adds	r3, r2, r3
 800825a:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	18d3      	adds	r3, r2, r3
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	0018      	movs	r0, r3
 8008266:	f7ff fe50 	bl	8007f0a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800826a:	193b      	adds	r3, r7, r4
 800826c:	881a      	ldrh	r2, [r3, #0]
 800826e:	193b      	adds	r3, r7, r4
 8008270:	3201      	adds	r2, #1
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	2310      	movs	r3, #16
 8008276:	18fa      	adds	r2, r7, r3
 8008278:	230e      	movs	r3, #14
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	8812      	ldrh	r2, [r2, #0]
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d3df      	bcc.n	8008244 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++) {
 8008284:	2112      	movs	r1, #18
 8008286:	187b      	adds	r3, r7, r1
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	187b      	adds	r3, r7, r1
 800828c:	3201      	adds	r2, #1
 800828e:	801a      	strh	r2, [r3, #0]
 8008290:	2312      	movs	r3, #18
 8008292:	18fa      	adds	r2, r7, r3
 8008294:	230c      	movs	r3, #12
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	8812      	ldrh	r2, [r2, #0]
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	429a      	cmp	r2, r3
 800829e:	d3cc      	bcc.n	800823a <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 80082a0:	f7ff fe8a 	bl	8007fb8 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b007      	add	sp, #28
 80082aa:	bd90      	pop	{r4, r7, pc}

080082ac <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80082b4:	2312      	movs	r3, #18
 80082b6:	18fb      	adds	r3, r7, r3
 80082b8:	2219      	movs	r2, #25
 80082ba:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80082bc:	2310      	movs	r3, #16
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	22c8      	movs	r2, #200	; 0xc8
 80082c2:	801a      	strh	r2, [r3, #0]

    DEV_Digital_Write(EPD_RST_PIN, 0);
 80082c4:	2380      	movs	r3, #128	; 0x80
 80082c6:	00d9      	lsls	r1, r3, #3
 80082c8:	23a0      	movs	r3, #160	; 0xa0
 80082ca:	05db      	lsls	r3, r3, #23
 80082cc:	2200      	movs	r2, #0
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fc fbcd 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 80082d4:	200a      	movs	r0, #10
 80082d6:	f7fb f915 	bl	8003504 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80082da:	2380      	movs	r3, #128	; 0x80
 80082dc:	00d9      	lsls	r1, r3, #3
 80082de:	23a0      	movs	r3, #160	; 0xa0
 80082e0:	05db      	lsls	r3, r3, #23
 80082e2:	2201      	movs	r2, #1
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fc fbc2 	bl	8004a6e <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);	
 80082ea:	200a      	movs	r0, #10
 80082ec:	f7fb f90a 	bl	8003504 <HAL_Delay>
    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80082f0:	203c      	movs	r0, #60	; 0x3c
 80082f2:	f7ff fde3 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80082f6:	2080      	movs	r0, #128	; 0x80
 80082f8:	f7ff fe07 	bl	8007f0a <EPD_1IN54_V2_SendData>
	
    UDOUBLE Addr = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8008300:	2024      	movs	r0, #36	; 0x24
 8008302:	f7ff fddb 	bl	8007ebc <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8008306:	2316      	movs	r3, #22
 8008308:	18fb      	adds	r3, r7, r3
 800830a:	2200      	movs	r2, #0
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e02a      	b.n	8008366 <EPD_1IN54_V2_DisplayPart+0xba>
        for (UWORD i = 0; i < Width; i++) {
 8008310:	2314      	movs	r3, #20
 8008312:	18fb      	adds	r3, r7, r3
 8008314:	2200      	movs	r2, #0
 8008316:	801a      	strh	r2, [r3, #0]
 8008318:	e017      	b.n	800834a <EPD_1IN54_V2_DisplayPart+0x9e>
            Addr = i + j * Width;
 800831a:	2414      	movs	r4, #20
 800831c:	193b      	adds	r3, r7, r4
 800831e:	881a      	ldrh	r2, [r3, #0]
 8008320:	2316      	movs	r3, #22
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	2112      	movs	r1, #18
 8008328:	1879      	adds	r1, r7, r1
 800832a:	8809      	ldrh	r1, [r1, #0]
 800832c:	434b      	muls	r3, r1
 800832e:	18d3      	adds	r3, r2, r3
 8008330:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	18d3      	adds	r3, r2, r3
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	0018      	movs	r0, r3
 800833c:	f7ff fde5 	bl	8007f0a <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8008340:	193b      	adds	r3, r7, r4
 8008342:	881a      	ldrh	r2, [r3, #0]
 8008344:	193b      	adds	r3, r7, r4
 8008346:	3201      	adds	r2, #1
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	2314      	movs	r3, #20
 800834c:	18fa      	adds	r2, r7, r3
 800834e:	2312      	movs	r3, #18
 8008350:	18fb      	adds	r3, r7, r3
 8008352:	8812      	ldrh	r2, [r2, #0]
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d3df      	bcc.n	800831a <EPD_1IN54_V2_DisplayPart+0x6e>
    for (UWORD j = 0; j < Height; j++) {
 800835a:	2116      	movs	r1, #22
 800835c:	187b      	adds	r3, r7, r1
 800835e:	881a      	ldrh	r2, [r3, #0]
 8008360:	187b      	adds	r3, r7, r1
 8008362:	3201      	adds	r2, #1
 8008364:	801a      	strh	r2, [r3, #0]
 8008366:	2316      	movs	r3, #22
 8008368:	18fa      	adds	r2, r7, r3
 800836a:	2310      	movs	r3, #16
 800836c:	18fb      	adds	r3, r7, r3
 800836e:	8812      	ldrh	r2, [r2, #0]
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d3cc      	bcc.n	8008310 <EPD_1IN54_V2_DisplayPart+0x64>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 8008376:	f7ff fe1f 	bl	8007fb8 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800837a:	46c0      	nop			; (mov r8, r8)
 800837c:	46bd      	mov	sp, r7
 800837e:	b007      	add	sp, #28
 8008380:	bd90      	pop	{r4, r7, pc}
	...

08008384 <Paint_NewImage>:
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate,
		UWORD Color) {
 8008384:	b5b0      	push	{r4, r5, r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	000c      	movs	r4, r1
 800838e:	0010      	movs	r0, r2
 8008390:	0019      	movs	r1, r3
 8008392:	250a      	movs	r5, #10
 8008394:	197b      	adds	r3, r7, r5
 8008396:	1c22      	adds	r2, r4, #0
 8008398:	801a      	strh	r2, [r3, #0]
 800839a:	2408      	movs	r4, #8
 800839c:	193b      	adds	r3, r7, r4
 800839e:	1c02      	adds	r2, r0, #0
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	1dbb      	adds	r3, r7, #6
 80083a4:	1c0a      	adds	r2, r1, #0
 80083a6:	801a      	strh	r2, [r3, #0]
	Paint.Image = NULL;
 80083a8:	4b2c      	ldr	r3, [pc, #176]	; (800845c <Paint_NewImage+0xd8>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <Paint_NewImage+0xd8>)
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	601a      	str	r2, [r3, #0]

	Paint.WidthMemory = Width;
 80083b4:	4b29      	ldr	r3, [pc, #164]	; (800845c <Paint_NewImage+0xd8>)
 80083b6:	0029      	movs	r1, r5
 80083b8:	187a      	adds	r2, r7, r1
 80083ba:	8812      	ldrh	r2, [r2, #0]
 80083bc:	811a      	strh	r2, [r3, #8]
	Paint.HeightMemory = Height;
 80083be:	4b27      	ldr	r3, [pc, #156]	; (800845c <Paint_NewImage+0xd8>)
 80083c0:	193a      	adds	r2, r7, r4
 80083c2:	8812      	ldrh	r2, [r2, #0]
 80083c4:	815a      	strh	r2, [r3, #10]
	Paint.Color = Color;
 80083c6:	4a25      	ldr	r2, [pc, #148]	; (800845c <Paint_NewImage+0xd8>)
 80083c8:	2320      	movs	r3, #32
 80083ca:	18fb      	adds	r3, r7, r3
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <Paint_NewImage+0xd8>)
 80083d2:	2202      	movs	r2, #2
 80083d4:	82da      	strh	r2, [r3, #22]

	Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	2207      	movs	r2, #7
 80083dc:	4013      	ands	r3, r2
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <Paint_NewImage+0x6a>
 80083e4:	187b      	adds	r3, r7, r1
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	08db      	lsrs	r3, r3, #3
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	e006      	b.n	80083fc <Paint_NewImage+0x78>
 80083ee:	230a      	movs	r3, #10
 80083f0:	18fb      	adds	r3, r7, r3
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	08db      	lsrs	r3, r3, #3
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3301      	adds	r3, #1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4a17      	ldr	r2, [pc, #92]	; (800845c <Paint_NewImage+0xd8>)
 80083fe:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 8008400:	4b16      	ldr	r3, [pc, #88]	; (800845c <Paint_NewImage+0xd8>)
 8008402:	2208      	movs	r2, #8
 8008404:	18ba      	adds	r2, r7, r2
 8008406:	8812      	ldrh	r2, [r2, #0]
 8008408:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <Paint_NewImage+0xd8>)
 800840c:	1dba      	adds	r2, r7, #6
 800840e:	8812      	ldrh	r2, [r2, #0]
 8008410:	81da      	strh	r2, [r3, #14]
	Paint.Mirror = MIRROR_NONE;
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <Paint_NewImage+0xd8>)
 8008414:	2200      	movs	r2, #0
 8008416:	821a      	strh	r2, [r3, #16]

	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8008418:	1dbb      	adds	r3, r7, #6
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <Paint_NewImage+0xa4>
 8008420:	1dbb      	adds	r3, r7, #6
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	2bb4      	cmp	r3, #180	; 0xb4
 8008426:	d10a      	bne.n	800843e <Paint_NewImage+0xba>
		Paint.Width = Width;
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <Paint_NewImage+0xd8>)
 800842a:	220a      	movs	r2, #10
 800842c:	18ba      	adds	r2, r7, r2
 800842e:	8812      	ldrh	r2, [r2, #0]
 8008430:	809a      	strh	r2, [r3, #4]
		Paint.Height = Height;
 8008432:	4b0a      	ldr	r3, [pc, #40]	; (800845c <Paint_NewImage+0xd8>)
 8008434:	2208      	movs	r2, #8
 8008436:	18ba      	adds	r2, r7, r2
 8008438:	8812      	ldrh	r2, [r2, #0]
 800843a:	80da      	strh	r2, [r3, #6]
 800843c:	e00a      	b.n	8008454 <Paint_NewImage+0xd0>
	} else {
		Paint.Width = Height;
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <Paint_NewImage+0xd8>)
 8008440:	2208      	movs	r2, #8
 8008442:	18ba      	adds	r2, r7, r2
 8008444:	8812      	ldrh	r2, [r2, #0]
 8008446:	809a      	strh	r2, [r3, #4]
		Paint.Height = Width;
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <Paint_NewImage+0xd8>)
 800844a:	220a      	movs	r2, #10
 800844c:	18ba      	adds	r2, r7, r2
 800844e:	8812      	ldrh	r2, [r2, #0]
 8008450:	80da      	strh	r2, [r3, #6]
	}
}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	46c0      	nop			; (mov r8, r8)
 8008456:	46bd      	mov	sp, r7
 8008458:	b004      	add	sp, #16
 800845a:	bdb0      	pop	{r4, r5, r7, pc}
 800845c:	20000520 	.word	0x20000520

08008460 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(UBYTE *image) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <Paint_SelectImage+0x18>)
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
}
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	46bd      	mov	sp, r7
 8008472:	b002      	add	sp, #8
 8008474:	bd80      	pop	{r7, pc}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	20000520 	.word	0x20000520

0800847c <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color) {
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b08b      	sub	sp, #44	; 0x2c
 8008480:	af00      	add	r7, sp, #0
 8008482:	0004      	movs	r4, r0
 8008484:	0008      	movs	r0, r1
 8008486:	0011      	movs	r1, r2
 8008488:	1dbb      	adds	r3, r7, #6
 800848a:	1c22      	adds	r2, r4, #0
 800848c:	801a      	strh	r2, [r3, #0]
 800848e:	1d3b      	adds	r3, r7, #4
 8008490:	1c02      	adds	r2, r0, #0
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	1cbb      	adds	r3, r7, #2
 8008496:	1c0a      	adds	r2, r1, #0
 8008498:	801a      	strh	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800849a:	4bc6      	ldr	r3, [pc, #792]	; (80087b4 <Paint_SetPixel+0x338>)
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	1dba      	adds	r2, r7, #6
 80084a0:	8812      	ldrh	r2, [r2, #0]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d805      	bhi.n	80084b2 <Paint_SetPixel+0x36>
 80084a6:	4bc3      	ldr	r3, [pc, #780]	; (80087b4 <Paint_SetPixel+0x338>)
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	1d3a      	adds	r2, r7, #4
 80084ac:	8812      	ldrh	r2, [r2, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d904      	bls.n	80084bc <Paint_SetPixel+0x40>
		Debug("Exceeding display boundaries\r\n");
 80084b2:	4bc1      	ldr	r3, [pc, #772]	; (80087b8 <Paint_SetPixel+0x33c>)
 80084b4:	0018      	movs	r0, r3
 80084b6:	f006 fc63 	bl	800ed80 <puts>
		return;
 80084ba:	e180      	b.n	80087be <Paint_SetPixel+0x342>
	}
	UWORD X, Y;

	switch (Paint.Rotate) {
 80084bc:	4bbd      	ldr	r3, [pc, #756]	; (80087b4 <Paint_SetPixel+0x338>)
 80084be:	89db      	ldrh	r3, [r3, #14]
 80084c0:	2287      	movs	r2, #135	; 0x87
 80084c2:	0052      	lsls	r2, r2, #1
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d03d      	beq.n	8008544 <Paint_SetPixel+0xc8>
 80084c8:	2287      	movs	r2, #135	; 0x87
 80084ca:	0052      	lsls	r2, r2, #1
 80084cc:	4293      	cmp	r3, r2
 80084ce:	dd00      	ble.n	80084d2 <Paint_SetPixel+0x56>
 80084d0:	e16e      	b.n	80087b0 <Paint_SetPixel+0x334>
 80084d2:	2bb4      	cmp	r3, #180	; 0xb4
 80084d4:	d021      	beq.n	800851a <Paint_SetPixel+0x9e>
 80084d6:	dd00      	ble.n	80084da <Paint_SetPixel+0x5e>
 80084d8:	e16a      	b.n	80087b0 <Paint_SetPixel+0x334>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <Paint_SetPixel+0x68>
 80084de:	2b5a      	cmp	r3, #90	; 0x5a
 80084e0:	d00b      	beq.n	80084fa <Paint_SetPixel+0x7e>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 80084e2:	e165      	b.n	80087b0 <Paint_SetPixel+0x334>
		X = Xpoint;
 80084e4:	2326      	movs	r3, #38	; 0x26
 80084e6:	18fb      	adds	r3, r7, r3
 80084e8:	1dba      	adds	r2, r7, #6
 80084ea:	8812      	ldrh	r2, [r2, #0]
 80084ec:	801a      	strh	r2, [r3, #0]
		Y = Ypoint;
 80084ee:	2324      	movs	r3, #36	; 0x24
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	1d3a      	adds	r2, r7, #4
 80084f4:	8812      	ldrh	r2, [r2, #0]
 80084f6:	801a      	strh	r2, [r3, #0]
		break;
 80084f8:	e034      	b.n	8008564 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Ypoint - 1;
 80084fa:	4bae      	ldr	r3, [pc, #696]	; (80087b4 <Paint_SetPixel+0x338>)
 80084fc:	891a      	ldrh	r2, [r3, #8]
 80084fe:	1d3b      	adds	r3, r7, #4
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	b29a      	uxth	r2, r3
 8008506:	2326      	movs	r3, #38	; 0x26
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	3a01      	subs	r2, #1
 800850c:	801a      	strh	r2, [r3, #0]
		Y = Xpoint;
 800850e:	2324      	movs	r3, #36	; 0x24
 8008510:	18fb      	adds	r3, r7, r3
 8008512:	1dba      	adds	r2, r7, #6
 8008514:	8812      	ldrh	r2, [r2, #0]
 8008516:	801a      	strh	r2, [r3, #0]
		break;
 8008518:	e024      	b.n	8008564 <Paint_SetPixel+0xe8>
		X = Paint.WidthMemory - Xpoint - 1;
 800851a:	4ba6      	ldr	r3, [pc, #664]	; (80087b4 <Paint_SetPixel+0x338>)
 800851c:	891a      	ldrh	r2, [r3, #8]
 800851e:	1dbb      	adds	r3, r7, #6
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	b29a      	uxth	r2, r3
 8008526:	2326      	movs	r3, #38	; 0x26
 8008528:	18fb      	adds	r3, r7, r3
 800852a:	3a01      	subs	r2, #1
 800852c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Ypoint - 1;
 800852e:	4ba1      	ldr	r3, [pc, #644]	; (80087b4 <Paint_SetPixel+0x338>)
 8008530:	895a      	ldrh	r2, [r3, #10]
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	b29a      	uxth	r2, r3
 800853a:	2324      	movs	r3, #36	; 0x24
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	3a01      	subs	r2, #1
 8008540:	801a      	strh	r2, [r3, #0]
		break;
 8008542:	e00f      	b.n	8008564 <Paint_SetPixel+0xe8>
		X = Ypoint;
 8008544:	2326      	movs	r3, #38	; 0x26
 8008546:	18fb      	adds	r3, r7, r3
 8008548:	1d3a      	adds	r2, r7, #4
 800854a:	8812      	ldrh	r2, [r2, #0]
 800854c:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Xpoint - 1;
 800854e:	4b99      	ldr	r3, [pc, #612]	; (80087b4 <Paint_SetPixel+0x338>)
 8008550:	895a      	ldrh	r2, [r3, #10]
 8008552:	1dbb      	adds	r3, r7, #6
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	b29a      	uxth	r2, r3
 800855a:	2324      	movs	r3, #36	; 0x24
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	3a01      	subs	r2, #1
 8008560:	801a      	strh	r2, [r3, #0]
		break;
 8008562:	46c0      	nop			; (mov r8, r8)
	}

	switch (Paint.Mirror) {
 8008564:	4b93      	ldr	r3, [pc, #588]	; (80087b4 <Paint_SetPixel+0x338>)
 8008566:	8a1b      	ldrh	r3, [r3, #16]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d020      	beq.n	80085ae <Paint_SetPixel+0x132>
 800856c:	dd00      	ble.n	8008570 <Paint_SetPixel+0xf4>
 800856e:	e125      	b.n	80087bc <Paint_SetPixel+0x340>
 8008570:	2b02      	cmp	r3, #2
 8008572:	d011      	beq.n	8008598 <Paint_SetPixel+0x11c>
 8008574:	dd00      	ble.n	8008578 <Paint_SetPixel+0xfc>
 8008576:	e121      	b.n	80087bc <Paint_SetPixel+0x340>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02d      	beq.n	80085d8 <Paint_SetPixel+0x15c>
 800857c:	2b01      	cmp	r3, #1
 800857e:	d000      	beq.n	8008582 <Paint_SetPixel+0x106>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
		Y = Paint.HeightMemory - Y - 1;
		break;
	default:
		return;
 8008580:	e11c      	b.n	80087bc <Paint_SetPixel+0x340>
		X = Paint.WidthMemory - X - 1;
 8008582:	4b8c      	ldr	r3, [pc, #560]	; (80087b4 <Paint_SetPixel+0x338>)
 8008584:	891a      	ldrh	r2, [r3, #8]
 8008586:	2126      	movs	r1, #38	; 0x26
 8008588:	187b      	adds	r3, r7, r1
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	b29a      	uxth	r2, r3
 8008590:	187b      	adds	r3, r7, r1
 8008592:	3a01      	subs	r2, #1
 8008594:	801a      	strh	r2, [r3, #0]
		break;
 8008596:	e020      	b.n	80085da <Paint_SetPixel+0x15e>
		Y = Paint.HeightMemory - Y - 1;
 8008598:	4b86      	ldr	r3, [pc, #536]	; (80087b4 <Paint_SetPixel+0x338>)
 800859a:	895a      	ldrh	r2, [r3, #10]
 800859c:	2124      	movs	r1, #36	; 0x24
 800859e:	187b      	adds	r3, r7, r1
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	187b      	adds	r3, r7, r1
 80085a8:	3a01      	subs	r2, #1
 80085aa:	801a      	strh	r2, [r3, #0]
		break;
 80085ac:	e015      	b.n	80085da <Paint_SetPixel+0x15e>
		X = Paint.WidthMemory - X - 1;
 80085ae:	4b81      	ldr	r3, [pc, #516]	; (80087b4 <Paint_SetPixel+0x338>)
 80085b0:	891a      	ldrh	r2, [r3, #8]
 80085b2:	2126      	movs	r1, #38	; 0x26
 80085b4:	187b      	adds	r3, r7, r1
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	3a01      	subs	r2, #1
 80085c0:	801a      	strh	r2, [r3, #0]
		Y = Paint.HeightMemory - Y - 1;
 80085c2:	4b7c      	ldr	r3, [pc, #496]	; (80087b4 <Paint_SetPixel+0x338>)
 80085c4:	895a      	ldrh	r2, [r3, #10]
 80085c6:	2124      	movs	r1, #36	; 0x24
 80085c8:	187b      	adds	r3, r7, r1
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	3a01      	subs	r2, #1
 80085d4:	801a      	strh	r2, [r3, #0]
		break;
 80085d6:	e000      	b.n	80085da <Paint_SetPixel+0x15e>
		break;
 80085d8:	46c0      	nop			; (mov r8, r8)
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 80085da:	4b76      	ldr	r3, [pc, #472]	; (80087b4 <Paint_SetPixel+0x338>)
 80085dc:	891b      	ldrh	r3, [r3, #8]
 80085de:	2226      	movs	r2, #38	; 0x26
 80085e0:	18ba      	adds	r2, r7, r2
 80085e2:	8812      	ldrh	r2, [r2, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d806      	bhi.n	80085f6 <Paint_SetPixel+0x17a>
 80085e8:	4b72      	ldr	r3, [pc, #456]	; (80087b4 <Paint_SetPixel+0x338>)
 80085ea:	895b      	ldrh	r3, [r3, #10]
 80085ec:	2224      	movs	r2, #36	; 0x24
 80085ee:	18ba      	adds	r2, r7, r2
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d904      	bls.n	8008600 <Paint_SetPixel+0x184>
		Debug("Exceeding display boundaries\r\n");
 80085f6:	4b70      	ldr	r3, [pc, #448]	; (80087b8 <Paint_SetPixel+0x33c>)
 80085f8:	0018      	movs	r0, r3
 80085fa:	f006 fbc1 	bl	800ed80 <puts>
		return;
 80085fe:	e0de      	b.n	80087be <Paint_SetPixel+0x342>
	}

	if (Paint.Scale == 2) {
 8008600:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <Paint_SetPixel+0x338>)
 8008602:	8adb      	ldrh	r3, [r3, #22]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d145      	bne.n	8008694 <Paint_SetPixel+0x218>
		UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8008608:	2026      	movs	r0, #38	; 0x26
 800860a:	183b      	adds	r3, r7, r0
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	08db      	lsrs	r3, r3, #3
 8008610:	b29b      	uxth	r3, r3
 8008612:	0019      	movs	r1, r3
 8008614:	2324      	movs	r3, #36	; 0x24
 8008616:	18fb      	adds	r3, r7, r3
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	4a66      	ldr	r2, [pc, #408]	; (80087b4 <Paint_SetPixel+0x338>)
 800861c:	8a52      	ldrh	r2, [r2, #18]
 800861e:	4353      	muls	r3, r2
 8008620:	18cb      	adds	r3, r1, r3
 8008622:	613b      	str	r3, [r7, #16]
		UBYTE Rdata = Paint.Image[Addr];
 8008624:	4b63      	ldr	r3, [pc, #396]	; (80087b4 <Paint_SetPixel+0x338>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	18d2      	adds	r2, r2, r3
 800862c:	210f      	movs	r1, #15
 800862e:	187b      	adds	r3, r7, r1
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	701a      	strb	r2, [r3, #0]
		if (Color == BLACK)
 8008634:	1cbb      	adds	r3, r7, #2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d115      	bne.n	8008668 <Paint_SetPixel+0x1ec>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800863c:	183b      	adds	r3, r7, r0
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	2207      	movs	r2, #7
 8008642:	4013      	ands	r3, r2
 8008644:	2280      	movs	r2, #128	; 0x80
 8008646:	411a      	asrs	r2, r3
 8008648:	0013      	movs	r3, r2
 800864a:	b25b      	sxtb	r3, r3
 800864c:	43db      	mvns	r3, r3
 800864e:	b25b      	sxtb	r3, r3
 8008650:	187a      	adds	r2, r7, r1
 8008652:	7812      	ldrb	r2, [r2, #0]
 8008654:	b252      	sxtb	r2, r2
 8008656:	4013      	ands	r3, r2
 8008658:	b259      	sxtb	r1, r3
 800865a:	4b56      	ldr	r3, [pc, #344]	; (80087b4 <Paint_SetPixel+0x338>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	b2ca      	uxtb	r2, r1
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	e0aa      	b.n	80087be <Paint_SetPixel+0x342>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8008668:	2326      	movs	r3, #38	; 0x26
 800866a:	18fb      	adds	r3, r7, r3
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	2207      	movs	r2, #7
 8008670:	4013      	ands	r3, r2
 8008672:	2280      	movs	r2, #128	; 0x80
 8008674:	411a      	asrs	r2, r3
 8008676:	0013      	movs	r3, r2
 8008678:	b25a      	sxtb	r2, r3
 800867a:	230f      	movs	r3, #15
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	b25b      	sxtb	r3, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	b259      	sxtb	r1, r3
 8008686:	4b4b      	ldr	r3, [pc, #300]	; (80087b4 <Paint_SetPixel+0x338>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	18d3      	adds	r3, r2, r3
 800868e:	b2ca      	uxtb	r2, r1
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e094      	b.n	80087be <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 4) {
 8008694:	4b47      	ldr	r3, [pc, #284]	; (80087b4 <Paint_SetPixel+0x338>)
 8008696:	8adb      	ldrh	r3, [r3, #22]
 8008698:	2b04      	cmp	r3, #4
 800869a:	d145      	bne.n	8008728 <Paint_SetPixel+0x2ac>
		UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800869c:	2426      	movs	r4, #38	; 0x26
 800869e:	193b      	adds	r3, r7, r4
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	089b      	lsrs	r3, r3, #2
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	0019      	movs	r1, r3
 80086a8:	2324      	movs	r3, #36	; 0x24
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	4a41      	ldr	r2, [pc, #260]	; (80087b4 <Paint_SetPixel+0x338>)
 80086b0:	8a52      	ldrh	r2, [r2, #18]
 80086b2:	4353      	muls	r3, r2
 80086b4:	18cb      	adds	r3, r1, r3
 80086b6:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 80086b8:	1cbb      	adds	r3, r7, #2
 80086ba:	1cba      	adds	r2, r7, #2
 80086bc:	8812      	ldrh	r2, [r2, #0]
 80086be:	2103      	movs	r1, #3
 80086c0:	400a      	ands	r2, r1
 80086c2:	801a      	strh	r2, [r3, #0]
		UBYTE Rdata = Paint.Image[Addr];
 80086c4:	4b3b      	ldr	r3, [pc, #236]	; (80087b4 <Paint_SetPixel+0x338>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	18d2      	adds	r2, r2, r3
 80086cc:	2017      	movs	r0, #23
 80086ce:	183b      	adds	r3, r7, r0
 80086d0:	7812      	ldrb	r2, [r2, #0]
 80086d2:	701a      	strb	r2, [r3, #0]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 80086d4:	0021      	movs	r1, r4
 80086d6:	187b      	adds	r3, r7, r1
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	2203      	movs	r2, #3
 80086dc:	4013      	ands	r3, r2
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	22c0      	movs	r2, #192	; 0xc0
 80086e2:	411a      	asrs	r2, r3
 80086e4:	0013      	movs	r3, r2
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	43db      	mvns	r3, r3
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	183a      	adds	r2, r7, r0
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	b252      	sxtb	r2, r2
 80086f2:	4013      	ands	r3, r2
 80086f4:	b25a      	sxtb	r2, r3
 80086f6:	183b      	adds	r3, r7, r0
 80086f8:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 80086fa:	1cbb      	adds	r3, r7, #2
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	019a      	lsls	r2, r3, #6
 8008700:	187b      	adds	r3, r7, r1
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	2103      	movs	r1, #3
 8008706:	400b      	ands	r3, r1
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	411a      	asrs	r2, r3
 800870c:	0013      	movs	r3, r2
 800870e:	b25a      	sxtb	r2, r3
 8008710:	183b      	adds	r3, r7, r0
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b25b      	sxtb	r3, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	b259      	sxtb	r1, r3
 800871a:	4b26      	ldr	r3, [pc, #152]	; (80087b4 <Paint_SetPixel+0x338>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	18d3      	adds	r3, r2, r3
 8008722:	b2ca      	uxtb	r2, r1
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e04a      	b.n	80087be <Paint_SetPixel+0x342>
	} else if (Paint.Scale == 7) {
 8008728:	4b22      	ldr	r3, [pc, #136]	; (80087b4 <Paint_SetPixel+0x338>)
 800872a:	8adb      	ldrh	r3, [r3, #22]
 800872c:	2b07      	cmp	r3, #7
 800872e:	d146      	bne.n	80087be <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 8008730:	2426      	movs	r4, #38	; 0x26
 8008732:	193b      	adds	r3, r7, r4
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	b29b      	uxth	r3, r3
 800873a:	0019      	movs	r1, r3
 800873c:	2324      	movs	r3, #36	; 0x24
 800873e:	18fb      	adds	r3, r7, r3
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <Paint_SetPixel+0x338>)
 8008744:	8a52      	ldrh	r2, [r2, #18]
 8008746:	4353      	muls	r3, r2
 8008748:	18cb      	adds	r3, r1, r3
 800874a:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 800874c:	4b19      	ldr	r3, [pc, #100]	; (80087b4 <Paint_SetPixel+0x338>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	18d2      	adds	r2, r2, r3
 8008754:	201f      	movs	r0, #31
 8008756:	183b      	adds	r3, r7, r0
 8008758:	7812      	ldrb	r2, [r2, #0]
 800875a:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 800875c:	0021      	movs	r1, r4
 800875e:	187b      	adds	r3, r7, r1
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	2201      	movs	r2, #1
 8008764:	4013      	ands	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	22f0      	movs	r2, #240	; 0xf0
 800876a:	411a      	asrs	r2, r3
 800876c:	0013      	movs	r3, r2
 800876e:	b25b      	sxtb	r3, r3
 8008770:	43db      	mvns	r3, r3
 8008772:	b25b      	sxtb	r3, r3
 8008774:	183a      	adds	r2, r7, r0
 8008776:	7812      	ldrb	r2, [r2, #0]
 8008778:	b252      	sxtb	r2, r2
 800877a:	4013      	ands	r3, r2
 800877c:	b25a      	sxtb	r2, r3
 800877e:	183b      	adds	r3, r7, r0
 8008780:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8008782:	1cbb      	adds	r3, r7, #2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	011a      	lsls	r2, r3, #4
 8008788:	187b      	adds	r3, r7, r1
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	2101      	movs	r1, #1
 800878e:	400b      	ands	r3, r1
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	411a      	asrs	r2, r3
 8008794:	0013      	movs	r3, r2
 8008796:	b25a      	sxtb	r2, r3
 8008798:	183b      	adds	r3, r7, r0
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	b25b      	sxtb	r3, r3
 800879e:	4313      	orrs	r3, r2
 80087a0:	b259      	sxtb	r1, r3
 80087a2:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <Paint_SetPixel+0x338>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	18d3      	adds	r3, r2, r3
 80087aa:	b2ca      	uxtb	r2, r1
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	e006      	b.n	80087be <Paint_SetPixel+0x342>
		return;
 80087b0:	46c0      	nop			; (mov r8, r8)
 80087b2:	e004      	b.n	80087be <Paint_SetPixel+0x342>
 80087b4:	20000520 	.word	0x20000520
 80087b8:	080115c0 	.word	0x080115c0
		return;
 80087bc:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 80087be:	46bd      	mov	sp, r7
 80087c0:	b00b      	add	sp, #44	; 0x2c
 80087c2:	bd90      	pop	{r4, r7, pc}

080087c4 <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(UWORD Color) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	0002      	movs	r2, r0
 80087cc:	1dbb      	adds	r3, r7, #6
 80087ce:	801a      	strh	r2, [r3, #0]
	if (Paint.Scale == 2 || Paint.Scale == 4) {
 80087d0:	4b42      	ldr	r3, [pc, #264]	; (80088dc <Paint_Clear+0x118>)
 80087d2:	8adb      	ldrh	r3, [r3, #22]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d003      	beq.n	80087e0 <Paint_Clear+0x1c>
 80087d8:	4b40      	ldr	r3, [pc, #256]	; (80088dc <Paint_Clear+0x118>)
 80087da:	8adb      	ldrh	r3, [r3, #22]
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d136      	bne.n	800884e <Paint_Clear+0x8a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80087e0:	2316      	movs	r3, #22
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	2200      	movs	r2, #0
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	e029      	b.n	800883e <Paint_Clear+0x7a>
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 80087ea:	2314      	movs	r3, #20
 80087ec:	18fb      	adds	r3, r7, r3
 80087ee:	2200      	movs	r2, #0
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	e017      	b.n	8008824 <Paint_Clear+0x60>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 80087f4:	2014      	movs	r0, #20
 80087f6:	183b      	adds	r3, r7, r0
 80087f8:	881a      	ldrh	r2, [r3, #0]
 80087fa:	2316      	movs	r3, #22
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	4936      	ldr	r1, [pc, #216]	; (80088dc <Paint_Clear+0x118>)
 8008802:	8a49      	ldrh	r1, [r1, #18]
 8008804:	434b      	muls	r3, r1
 8008806:	18d3      	adds	r3, r2, r3
 8008808:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800880a:	4b34      	ldr	r3, [pc, #208]	; (80088dc <Paint_Clear+0x118>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	18d3      	adds	r3, r2, r3
 8008812:	1dba      	adds	r2, r7, #6
 8008814:	8812      	ldrh	r2, [r2, #0]
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 800881a:	183b      	adds	r3, r7, r0
 800881c:	881a      	ldrh	r2, [r3, #0]
 800881e:	183b      	adds	r3, r7, r0
 8008820:	3201      	adds	r2, #1
 8008822:	801a      	strh	r2, [r3, #0]
 8008824:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <Paint_Clear+0x118>)
 8008826:	8a5b      	ldrh	r3, [r3, #18]
 8008828:	2214      	movs	r2, #20
 800882a:	18ba      	adds	r2, r7, r2
 800882c:	8812      	ldrh	r2, [r2, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d3e0      	bcc.n	80087f4 <Paint_Clear+0x30>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008832:	2116      	movs	r1, #22
 8008834:	187b      	adds	r3, r7, r1
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	187b      	adds	r3, r7, r1
 800883a:	3201      	adds	r2, #1
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	4b27      	ldr	r3, [pc, #156]	; (80088dc <Paint_Clear+0x118>)
 8008840:	8a9b      	ldrh	r3, [r3, #20]
 8008842:	2216      	movs	r2, #22
 8008844:	18ba      	adds	r2, r7, r2
 8008846:	8812      	ldrh	r2, [r2, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d3ce      	bcc.n	80087ea <Paint_Clear+0x26>
 800884c:	e041      	b.n	80088d2 <Paint_Clear+0x10e>
			}
		}
	} else if (Paint.Scale == 7) {
 800884e:	4b23      	ldr	r3, [pc, #140]	; (80088dc <Paint_Clear+0x118>)
 8008850:	8adb      	ldrh	r3, [r3, #22]
 8008852:	2b07      	cmp	r3, #7
 8008854:	d13d      	bne.n	80088d2 <Paint_Clear+0x10e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8008856:	2312      	movs	r3, #18
 8008858:	18fb      	adds	r3, r7, r3
 800885a:	2200      	movs	r2, #0
 800885c:	801a      	strh	r2, [r3, #0]
 800885e:	e030      	b.n	80088c2 <Paint_Clear+0xfe>
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 8008860:	2310      	movs	r3, #16
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	2200      	movs	r2, #0
 8008866:	801a      	strh	r2, [r3, #0]
 8008868:	e01e      	b.n	80088a8 <Paint_Clear+0xe4>
				UDOUBLE Addr = X + Y * Paint.WidthByte;
 800886a:	2010      	movs	r0, #16
 800886c:	183b      	adds	r3, r7, r0
 800886e:	881a      	ldrh	r2, [r3, #0]
 8008870:	2312      	movs	r3, #18
 8008872:	18fb      	adds	r3, r7, r3
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	4919      	ldr	r1, [pc, #100]	; (80088dc <Paint_Clear+0x118>)
 8008878:	8a49      	ldrh	r1, [r1, #18]
 800887a:	434b      	muls	r3, r1
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color << 4) | Color;
 8008880:	1dbb      	adds	r3, r7, #6
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	011b      	lsls	r3, r3, #4
 8008886:	b25a      	sxtb	r2, r3
 8008888:	1dbb      	adds	r3, r7, #6
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b25b      	sxtb	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	b259      	sxtb	r1, r3
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <Paint_Clear+0x118>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	18d3      	adds	r3, r2, r3
 800889a:	b2ca      	uxtb	r2, r1
 800889c:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++) {
 800889e:	183b      	adds	r3, r7, r0
 80088a0:	881a      	ldrh	r2, [r3, #0]
 80088a2:	183b      	adds	r3, r7, r0
 80088a4:	3201      	adds	r2, #1
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <Paint_Clear+0x118>)
 80088aa:	8a5b      	ldrh	r3, [r3, #18]
 80088ac:	2210      	movs	r2, #16
 80088ae:	18ba      	adds	r2, r7, r2
 80088b0:	8812      	ldrh	r2, [r2, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d3d9      	bcc.n	800886a <Paint_Clear+0xa6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80088b6:	2112      	movs	r1, #18
 80088b8:	187b      	adds	r3, r7, r1
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	187b      	adds	r3, r7, r1
 80088be:	3201      	adds	r2, #1
 80088c0:	801a      	strh	r2, [r3, #0]
 80088c2:	4b06      	ldr	r3, [pc, #24]	; (80088dc <Paint_Clear+0x118>)
 80088c4:	8a9b      	ldrh	r3, [r3, #20]
 80088c6:	2212      	movs	r2, #18
 80088c8:	18ba      	adds	r2, r7, r2
 80088ca:	8812      	ldrh	r2, [r2, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d3c7      	bcc.n	8008860 <Paint_Clear+0x9c>
			}
		}
	}
}
 80088d0:	e7ff      	b.n	80088d2 <Paint_Clear+0x10e>
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b006      	add	sp, #24
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	20000520 	.word	0x20000520

080088e0 <Paint_DrawPoint>:
 Color		: Painted color
 Dot_Pixel	: point size
 Dot_Style	: point Style
 ******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
		DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style) {
 80088e0:	b5b0      	push	{r4, r5, r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	0005      	movs	r5, r0
 80088e8:	000c      	movs	r4, r1
 80088ea:	0010      	movs	r0, r2
 80088ec:	0019      	movs	r1, r3
 80088ee:	1dbb      	adds	r3, r7, #6
 80088f0:	1c2a      	adds	r2, r5, #0
 80088f2:	801a      	strh	r2, [r3, #0]
 80088f4:	1d3b      	adds	r3, r7, #4
 80088f6:	1c22      	adds	r2, r4, #0
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	1cbb      	adds	r3, r7, #2
 80088fc:	1c02      	adds	r2, r0, #0
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	1c7b      	adds	r3, r7, #1
 8008902:	1c0a      	adds	r2, r1, #0
 8008904:	701a      	strb	r2, [r3, #0]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008906:	4b67      	ldr	r3, [pc, #412]	; (8008aa4 <Paint_DrawPoint+0x1c4>)
 8008908:	889b      	ldrh	r3, [r3, #4]
 800890a:	1dba      	adds	r2, r7, #6
 800890c:	8812      	ldrh	r2, [r2, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d805      	bhi.n	800891e <Paint_DrawPoint+0x3e>
 8008912:	4b64      	ldr	r3, [pc, #400]	; (8008aa4 <Paint_DrawPoint+0x1c4>)
 8008914:	88db      	ldrh	r3, [r3, #6]
 8008916:	1d3a      	adds	r2, r7, #4
 8008918:	8812      	ldrh	r2, [r2, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d916      	bls.n	800894c <Paint_DrawPoint+0x6c>
		Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800891e:	4b62      	ldr	r3, [pc, #392]	; (8008aa8 <Paint_DrawPoint+0x1c8>)
 8008920:	0018      	movs	r0, r3
 8008922:	f006 fa2d 	bl	800ed80 <puts>
		printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 8008926:	1dbb      	adds	r3, r7, #6
 8008928:	8819      	ldrh	r1, [r3, #0]
 800892a:	4b5e      	ldr	r3, [pc, #376]	; (8008aa4 <Paint_DrawPoint+0x1c4>)
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	001a      	movs	r2, r3
 8008930:	4b5e      	ldr	r3, [pc, #376]	; (8008aac <Paint_DrawPoint+0x1cc>)
 8008932:	0018      	movs	r0, r3
 8008934:	f006 f998 	bl	800ec68 <iprintf>
		printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 8008938:	1d3b      	adds	r3, r7, #4
 800893a:	8819      	ldrh	r1, [r3, #0]
 800893c:	4b59      	ldr	r3, [pc, #356]	; (8008aa4 <Paint_DrawPoint+0x1c4>)
 800893e:	88db      	ldrh	r3, [r3, #6]
 8008940:	001a      	movs	r2, r3
 8008942:	4b5b      	ldr	r3, [pc, #364]	; (8008ab0 <Paint_DrawPoint+0x1d0>)
 8008944:	0018      	movs	r0, r3
 8008946:	f006 f98f 	bl	800ec68 <iprintf>
		return;
 800894a:	e0a8      	b.n	8008a9e <Paint_DrawPoint+0x1be>
	}

	int16_t XDir_Num, YDir_Num;
	if (Dot_Style == DOT_FILL_AROUND) {
 800894c:	2320      	movs	r3, #32
 800894e:	18fb      	adds	r3, r7, r3
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d161      	bne.n	8008a1a <Paint_DrawPoint+0x13a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8008956:	230e      	movs	r3, #14
 8008958:	18fb      	adds	r3, r7, r3
 800895a:	2200      	movs	r2, #0
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	e051      	b.n	8008a04 <Paint_DrawPoint+0x124>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8008960:	230c      	movs	r3, #12
 8008962:	18fb      	adds	r3, r7, r3
 8008964:	2200      	movs	r2, #0
 8008966:	801a      	strh	r2, [r3, #0]
 8008968:	e039      	b.n	80089de <Paint_DrawPoint+0xfe>
				if (Xpoint + XDir_Num - Dot_Pixel < 0
 800896a:	1dbb      	adds	r3, r7, #6
 800896c:	881a      	ldrh	r2, [r3, #0]
 800896e:	200e      	movs	r0, #14
 8008970:	183b      	adds	r3, r7, r0
 8008972:	2100      	movs	r1, #0
 8008974:	5e5b      	ldrsh	r3, [r3, r1]
 8008976:	18d2      	adds	r2, r2, r3
 8008978:	1c7b      	adds	r3, r7, #1
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	d438      	bmi.n	80089f2 <Paint_DrawPoint+0x112>
						|| Ypoint + YDir_Num - Dot_Pixel < 0)
 8008980:	1d3b      	adds	r3, r7, #4
 8008982:	881a      	ldrh	r2, [r3, #0]
 8008984:	210c      	movs	r1, #12
 8008986:	187b      	adds	r3, r7, r1
 8008988:	2400      	movs	r4, #0
 800898a:	5f1b      	ldrsh	r3, [r3, r4]
 800898c:	18d2      	adds	r2, r2, r3
 800898e:	1c7b      	adds	r3, r7, #1
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	d42d      	bmi.n	80089f2 <Paint_DrawPoint+0x112>
					break;
				// printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 8008996:	183b      	adds	r3, r7, r0
 8008998:	881a      	ldrh	r2, [r3, #0]
 800899a:	1dbb      	adds	r3, r7, #6
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	18d3      	adds	r3, r2, r3
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	1c7b      	adds	r3, r7, #1
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	b298      	uxth	r0, r3
						Ypoint + YDir_Num - Dot_Pixel, Color);
 80089ac:	000c      	movs	r4, r1
 80089ae:	187b      	adds	r3, r7, r1
 80089b0:	881a      	ldrh	r2, [r3, #0]
 80089b2:	1d3b      	adds	r3, r7, #4
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	18d3      	adds	r3, r2, r3
 80089b8:	b29a      	uxth	r2, r3
				Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel,
 80089ba:	1c7b      	adds	r3, r7, #1
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	b299      	uxth	r1, r3
 80089c4:	1cbb      	adds	r3, r7, #2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	001a      	movs	r2, r3
 80089ca:	f7ff fd57 	bl	800847c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80089ce:	193b      	adds	r3, r7, r4
 80089d0:	2200      	movs	r2, #0
 80089d2:	5e9b      	ldrsh	r3, [r3, r2]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3301      	adds	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	193b      	adds	r3, r7, r4
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	230c      	movs	r3, #12
 80089e0:	18fb      	adds	r3, r7, r3
 80089e2:	2200      	movs	r2, #0
 80089e4:	5e9a      	ldrsh	r2, [r3, r2]
 80089e6:	1c7b      	adds	r3, r7, #1
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	3b01      	subs	r3, #1
 80089ee:	429a      	cmp	r2, r3
 80089f0:	dbbb      	blt.n	800896a <Paint_DrawPoint+0x8a>
		for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80089f2:	210e      	movs	r1, #14
 80089f4:	187b      	adds	r3, r7, r1
 80089f6:	2200      	movs	r2, #0
 80089f8:	5e9b      	ldrsh	r3, [r3, r2]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3301      	adds	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	230e      	movs	r3, #14
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	2200      	movs	r2, #0
 8008a0a:	5e9a      	ldrsh	r2, [r3, r2]
 8008a0c:	1c7b      	adds	r3, r7, #1
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	3b01      	subs	r3, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	dba3      	blt.n	8008960 <Paint_DrawPoint+0x80>
 8008a18:	e041      	b.n	8008a9e <Paint_DrawPoint+0x1be>
			}
		}
	} else {
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008a1a:	230e      	movs	r3, #14
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	2200      	movs	r2, #0
 8008a20:	801a      	strh	r2, [r3, #0]
 8008a22:	e034      	b.n	8008a8e <Paint_DrawPoint+0x1ae>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008a24:	230c      	movs	r3, #12
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	2200      	movs	r2, #0
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e01e      	b.n	8008a6c <Paint_DrawPoint+0x18c>
				Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1,
 8008a2e:	230e      	movs	r3, #14
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	881a      	ldrh	r2, [r3, #0]
 8008a34:	1dbb      	adds	r3, r7, #6
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	18d3      	adds	r3, r2, r3
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	b298      	uxth	r0, r3
 8008a40:	240c      	movs	r4, #12
 8008a42:	193b      	adds	r3, r7, r4
 8008a44:	881a      	ldrh	r2, [r3, #0]
 8008a46:	1d3b      	adds	r3, r7, #4
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	18d3      	adds	r3, r2, r3
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b299      	uxth	r1, r3
 8008a52:	1cbb      	adds	r3, r7, #2
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	001a      	movs	r2, r3
 8008a58:	f7ff fd10 	bl	800847c <Paint_SetPixel>
			for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++) {
 8008a5c:	193b      	adds	r3, r7, r4
 8008a5e:	2200      	movs	r2, #0
 8008a60:	5e9b      	ldrsh	r3, [r3, r2]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3301      	adds	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	193b      	adds	r3, r7, r4
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	2200      	movs	r2, #0
 8008a72:	5e9a      	ldrsh	r2, [r3, r2]
 8008a74:	1c7b      	adds	r3, r7, #1
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	dbd8      	blt.n	8008a2e <Paint_DrawPoint+0x14e>
		for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++) {
 8008a7c:	210e      	movs	r1, #14
 8008a7e:	187b      	adds	r3, r7, r1
 8008a80:	2200      	movs	r2, #0
 8008a82:	5e9b      	ldrsh	r3, [r3, r2]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3301      	adds	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	187b      	adds	r3, r7, r1
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	230e      	movs	r3, #14
 8008a90:	18fb      	adds	r3, r7, r3
 8008a92:	2200      	movs	r2, #0
 8008a94:	5e9a      	ldrsh	r2, [r3, r2]
 8008a96:	1c7b      	adds	r3, r7, #1
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	dbc2      	blt.n	8008a24 <Paint_DrawPoint+0x144>
						Color);
			}
		}
	}
}
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b004      	add	sp, #16
 8008aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa4:	20000520 	.word	0x20000520
 8008aa8:	080115e8 	.word	0x080115e8
 8008aac:	08011628 	.word	0x08011628
 8008ab0:	0801164c 	.word	0x0801164c

08008ab4 <Paint_DrawLine>:
 Color  ：The color of the line segment
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008ab4:	b5b0      	push	{r4, r5, r7, lr}
 8008ab6:	b08c      	sub	sp, #48	; 0x30
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	0005      	movs	r5, r0
 8008abc:	000c      	movs	r4, r1
 8008abe:	0010      	movs	r0, r2
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	1dbb      	adds	r3, r7, #6
 8008ac4:	1c2a      	adds	r2, r5, #0
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	1d3b      	adds	r3, r7, #4
 8008aca:	1c22      	adds	r2, r4, #0
 8008acc:	801a      	strh	r2, [r3, #0]
 8008ace:	1cbb      	adds	r3, r7, #2
 8008ad0:	1c02      	adds	r2, r0, #0
 8008ad2:	801a      	strh	r2, [r3, #0]
 8008ad4:	003b      	movs	r3, r7
 8008ad6:	1c0a      	adds	r2, r1, #0
 8008ad8:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8008ada:	4b63      	ldr	r3, [pc, #396]	; (8008c68 <Paint_DrawLine+0x1b4>)
 8008adc:	889b      	ldrh	r3, [r3, #4]
 8008ade:	1dba      	adds	r2, r7, #6
 8008ae0:	8812      	ldrh	r2, [r2, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d811      	bhi.n	8008b0a <Paint_DrawLine+0x56>
 8008ae6:	4b60      	ldr	r3, [pc, #384]	; (8008c68 <Paint_DrawLine+0x1b4>)
 8008ae8:	88db      	ldrh	r3, [r3, #6]
 8008aea:	1d3a      	adds	r2, r7, #4
 8008aec:	8812      	ldrh	r2, [r2, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d80b      	bhi.n	8008b0a <Paint_DrawLine+0x56>
 8008af2:	4b5d      	ldr	r3, [pc, #372]	; (8008c68 <Paint_DrawLine+0x1b4>)
 8008af4:	889b      	ldrh	r3, [r3, #4]
 8008af6:	1cba      	adds	r2, r7, #2
 8008af8:	8812      	ldrh	r2, [r2, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d805      	bhi.n	8008b0a <Paint_DrawLine+0x56>
			|| Yend > Paint.Height) {
 8008afe:	4b5a      	ldr	r3, [pc, #360]	; (8008c68 <Paint_DrawLine+0x1b4>)
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	003a      	movs	r2, r7
 8008b04:	8812      	ldrh	r2, [r2, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d904      	bls.n	8008b14 <Paint_DrawLine+0x60>
		Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 8008b0a:	4b58      	ldr	r3, [pc, #352]	; (8008c6c <Paint_DrawLine+0x1b8>)
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f006 f937 	bl	800ed80 <puts>
		return;
 8008b12:	e0a5      	b.n	8008c60 <Paint_DrawLine+0x1ac>
	}

	UWORD Xpoint = Xstart;
 8008b14:	2326      	movs	r3, #38	; 0x26
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	1dba      	adds	r2, r7, #6
 8008b1a:	8812      	ldrh	r2, [r2, #0]
 8008b1c:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 8008b1e:	2324      	movs	r3, #36	; 0x24
 8008b20:	18fb      	adds	r3, r7, r3
 8008b22:	1d3a      	adds	r2, r7, #4
 8008b24:	8812      	ldrh	r2, [r2, #0]
 8008b26:	801a      	strh	r2, [r3, #0]
	int dx = (int) Xend - (int) Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8008b28:	1cbb      	adds	r3, r7, #2
 8008b2a:	881a      	ldrh	r2, [r3, #0]
 8008b2c:	1dbb      	adds	r3, r7, #6
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	17da      	asrs	r2, r3, #31
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	4053      	eors	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
	int dy = (int) Yend - (int) Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8008b3a:	003b      	movs	r3, r7
 8008b3c:	881a      	ldrh	r2, [r3, #0]
 8008b3e:	1d3b      	adds	r3, r7, #4
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	17da      	asrs	r2, r3, #31
 8008b46:	189b      	adds	r3, r3, r2
 8008b48:	4053      	eors	r3, r2
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	617b      	str	r3, [r7, #20]

	// Increment direction, 1 is positive, -1 is counter;
	int XAddway = Xstart < Xend ? 1 : -1;
 8008b4e:	1dba      	adds	r2, r7, #6
 8008b50:	1cbb      	adds	r3, r7, #2
 8008b52:	8812      	ldrh	r2, [r2, #0]
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d201      	bcs.n	8008b5e <Paint_DrawLine+0xaa>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e001      	b.n	8008b62 <Paint_DrawLine+0xae>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	425b      	negs	r3, r3
 8008b62:	613b      	str	r3, [r7, #16]
	int YAddway = Ystart < Yend ? 1 : -1;
 8008b64:	1d3a      	adds	r2, r7, #4
 8008b66:	003b      	movs	r3, r7
 8008b68:	8812      	ldrh	r2, [r2, #0]
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d201      	bcs.n	8008b74 <Paint_DrawLine+0xc0>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e001      	b.n	8008b78 <Paint_DrawLine+0xc4>
 8008b74:	2301      	movs	r3, #1
 8008b76:	425b      	negs	r3, r3
 8008b78:	60fb      	str	r3, [r7, #12]

	//Cumulative error
	int Esp = dx + dy;
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	18d3      	adds	r3, r2, r3
 8008b80:	623b      	str	r3, [r7, #32]
	char Dotted_Len = 0;
 8008b82:	231f      	movs	r3, #31
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]

	for (;;) {
		Dotted_Len++;
 8008b8a:	241f      	movs	r4, #31
 8008b8c:	193b      	adds	r3, r7, r4
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	193b      	adds	r3, r7, r4
 8008b92:	3201      	adds	r2, #1
 8008b94:	701a      	strb	r2, [r3, #0]
		//Painted dotted line, 2 point is really virtual
		if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8008b96:	2340      	movs	r3, #64	; 0x40
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d11c      	bne.n	8008bda <Paint_DrawLine+0x126>
 8008ba0:	193b      	adds	r3, r7, r4
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f7f7 fb3c 	bl	8000224 <__aeabi_uidivmod>
 8008bac:	000b      	movs	r3, r1
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d112      	bne.n	8008bda <Paint_DrawLine+0x126>
			//Debug("LINE_DOTTED\r\n");
			Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width,
 8008bb4:	233c      	movs	r3, #60	; 0x3c
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	2324      	movs	r3, #36	; 0x24
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	8819      	ldrh	r1, [r3, #0]
 8008bc0:	2326      	movs	r3, #38	; 0x26
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	8818      	ldrh	r0, [r3, #0]
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	0013      	movs	r3, r2
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	f7ff fe87 	bl	80088e0 <Paint_DrawPoint>
					DOT_STYLE_DFT);
			Dotted_Len = 0;
 8008bd2:	193b      	adds	r3, r7, r4
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e010      	b.n	8008bfc <Paint_DrawLine+0x148>
		} else {
			Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8008bda:	233c      	movs	r3, #60	; 0x3c
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	781c      	ldrb	r4, [r3, #0]
 8008be0:	2338      	movs	r3, #56	; 0x38
 8008be2:	18fb      	adds	r3, r7, r3
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	2324      	movs	r3, #36	; 0x24
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	8819      	ldrh	r1, [r3, #0]
 8008bec:	2326      	movs	r3, #38	; 0x26
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	8818      	ldrh	r0, [r3, #0]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	0023      	movs	r3, r4
 8008bf8:	f7ff fe72 	bl	80088e0 <Paint_DrawPoint>
		}
		if (2 * Esp >= dy) {
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	dc11      	bgt.n	8008c2a <Paint_DrawLine+0x176>
			if (Xpoint == Xend)
 8008c06:	2026      	movs	r0, #38	; 0x26
 8008c08:	183a      	adds	r2, r7, r0
 8008c0a:	1cbb      	adds	r3, r7, #2
 8008c0c:	8812      	ldrh	r2, [r2, #0]
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d022      	beq.n	8008c5a <Paint_DrawLine+0x1a6>
				break;
			Esp += dy;
 8008c14:	6a3a      	ldr	r2, [r7, #32]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	18d3      	adds	r3, r2, r3
 8008c1a:	623b      	str	r3, [r7, #32]
			Xpoint += XAddway;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	b299      	uxth	r1, r3
 8008c20:	183b      	adds	r3, r7, r0
 8008c22:	183a      	adds	r2, r7, r0
 8008c24:	8812      	ldrh	r2, [r2, #0]
 8008c26:	188a      	adds	r2, r1, r2
 8008c28:	801a      	strh	r2, [r3, #0]
		}
		if (2 * Esp <= dx) {
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	dbaa      	blt.n	8008b8a <Paint_DrawLine+0xd6>
			if (Ypoint == Yend)
 8008c34:	2024      	movs	r0, #36	; 0x24
 8008c36:	183a      	adds	r2, r7, r0
 8008c38:	003b      	movs	r3, r7
 8008c3a:	8812      	ldrh	r2, [r2, #0]
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d00d      	beq.n	8008c5e <Paint_DrawLine+0x1aa>
				break;
			Esp += dx;
 8008c42:	6a3a      	ldr	r2, [r7, #32]
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	623b      	str	r3, [r7, #32]
			Ypoint += YAddway;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	b299      	uxth	r1, r3
 8008c4e:	183b      	adds	r3, r7, r0
 8008c50:	183a      	adds	r2, r7, r0
 8008c52:	8812      	ldrh	r2, [r2, #0]
 8008c54:	188a      	adds	r2, r1, r2
 8008c56:	801a      	strh	r2, [r3, #0]
		Dotted_Len++;
 8008c58:	e797      	b.n	8008b8a <Paint_DrawLine+0xd6>
				break;
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	e000      	b.n	8008c60 <Paint_DrawLine+0x1ac>
				break;
 8008c5e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8008c60:	46bd      	mov	sp, r7
 8008c62:	b00a      	add	sp, #40	; 0x28
 8008c64:	bdb0      	pop	{r4, r5, r7, pc}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	20000520 	.word	0x20000520
 8008c6c:	08011674 	.word	0x08011674

08008c70 <Paint_DrawPointer>:
 Line_width : Line width
 Line_Style: Solid and dotted lines
 ******************************************************************************/
void Paint_DrawPointer(UWORD Xstart, UWORD Ystart, float angle, UWORD length,
		UWORD shift,
		UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style) {
 8008c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c72:	46ce      	mov	lr, r9
 8008c74:	4647      	mov	r7, r8
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b089      	sub	sp, #36	; 0x24
 8008c7a:	af04      	add	r7, sp, #16
 8008c7c:	0004      	movs	r4, r0
 8008c7e:	0008      	movs	r0, r1
 8008c80:	60ba      	str	r2, [r7, #8]
 8008c82:	0019      	movs	r1, r3
 8008c84:	260e      	movs	r6, #14
 8008c86:	19bb      	adds	r3, r7, r6
 8008c88:	1c22      	adds	r2, r4, #0
 8008c8a:	801a      	strh	r2, [r3, #0]
 8008c8c:	230c      	movs	r3, #12
 8008c8e:	18fb      	adds	r3, r7, r3
 8008c90:	1c02      	adds	r2, r0, #0
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	1dbb      	adds	r3, r7, #6
 8008c96:	1c0a      	adds	r2, r1, #0
 8008c98:	801a      	strh	r2, [r3, #0]

	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008c9a:	68b8      	ldr	r0, [r7, #8]
 8008c9c:	f7fa f8d4 	bl	8002e48 <__aeabi_f2d>
 8008ca0:	0002      	movs	r2, r0
 8008ca2:	000b      	movs	r3, r1
 8008ca4:	0010      	movs	r0, r2
 8008ca6:	0019      	movs	r1, r3
 8008ca8:	f006 ff50 	bl	800fb4c <cos>
 8008cac:	0004      	movs	r4, r0
 8008cae:	000d      	movs	r5, r1
 8008cb0:	2130      	movs	r1, #48	; 0x30
 8008cb2:	187b      	adds	r3, r7, r1
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f7fa f870 	bl	8002d9c <__aeabi_i2d>
 8008cbc:	0002      	movs	r2, r0
 8008cbe:	000b      	movs	r3, r1
 8008cc0:	0020      	movs	r0, r4
 8008cc2:	0029      	movs	r1, r5
 8008cc4:	f7f9 fa18 	bl	80020f8 <__aeabi_dmul>
 8008cc8:	0002      	movs	r2, r0
 8008cca:	000b      	movs	r3, r1
 8008ccc:	0014      	movs	r4, r2
 8008cce:	001d      	movs	r5, r3
 8008cd0:	19bb      	adds	r3, r7, r6
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f7fa f861 	bl	8002d9c <__aeabi_i2d>
 8008cda:	0002      	movs	r2, r0
 8008cdc:	000b      	movs	r3, r1
 8008cde:	0020      	movs	r0, r4
 8008ce0:	0029      	movs	r1, r5
 8008ce2:	f7f8 fa99 	bl	8001218 <__aeabi_dadd>
 8008ce6:	0002      	movs	r2, r0
 8008ce8:	000b      	movs	r3, r1
 8008cea:	0010      	movs	r0, r2
 8008cec:	0019      	movs	r1, r3
 8008cee:	f7f7 fc2b 	bl	8000548 <__aeabi_d2uiz>
 8008cf2:	0003      	movs	r3, r0
 8008cf4:	b29e      	uxth	r6, r3
			(sin(angle) * shift) + Ystart,
 8008cf6:	68b8      	ldr	r0, [r7, #8]
 8008cf8:	f7fa f8a6 	bl	8002e48 <__aeabi_f2d>
 8008cfc:	0002      	movs	r2, r0
 8008cfe:	000b      	movs	r3, r1
 8008d00:	0010      	movs	r0, r2
 8008d02:	0019      	movs	r1, r3
 8008d04:	f006 ff64 	bl	800fbd0 <sin>
 8008d08:	0004      	movs	r4, r0
 8008d0a:	000d      	movs	r5, r1
 8008d0c:	2130      	movs	r1, #48	; 0x30
 8008d0e:	187b      	adds	r3, r7, r1
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	0018      	movs	r0, r3
 8008d14:	f7fa f842 	bl	8002d9c <__aeabi_i2d>
 8008d18:	0002      	movs	r2, r0
 8008d1a:	000b      	movs	r3, r1
 8008d1c:	0020      	movs	r0, r4
 8008d1e:	0029      	movs	r1, r5
 8008d20:	f7f9 f9ea 	bl	80020f8 <__aeabi_dmul>
 8008d24:	0002      	movs	r2, r0
 8008d26:	000b      	movs	r3, r1
 8008d28:	0014      	movs	r4, r2
 8008d2a:	001d      	movs	r5, r3
 8008d2c:	220c      	movs	r2, #12
 8008d2e:	18bb      	adds	r3, r7, r2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	0018      	movs	r0, r3
 8008d34:	f7fa f832 	bl	8002d9c <__aeabi_i2d>
 8008d38:	0002      	movs	r2, r0
 8008d3a:	000b      	movs	r3, r1
 8008d3c:	0020      	movs	r0, r4
 8008d3e:	0029      	movs	r1, r5
 8008d40:	f7f8 fa6a 	bl	8001218 <__aeabi_dadd>
 8008d44:	0002      	movs	r2, r0
 8008d46:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008d48:	0010      	movs	r0, r2
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	f7f7 fbfc 	bl	8000548 <__aeabi_d2uiz>
 8008d50:	0003      	movs	r3, r0
 8008d52:	b299      	uxth	r1, r3
 8008d54:	4688      	mov	r8, r1
			(cos(angle) * length) + Xstart,
 8008d56:	68b8      	ldr	r0, [r7, #8]
 8008d58:	f7fa f876 	bl	8002e48 <__aeabi_f2d>
 8008d5c:	0002      	movs	r2, r0
 8008d5e:	000b      	movs	r3, r1
 8008d60:	0010      	movs	r0, r2
 8008d62:	0019      	movs	r1, r3
 8008d64:	f006 fef2 	bl	800fb4c <cos>
 8008d68:	0004      	movs	r4, r0
 8008d6a:	000d      	movs	r5, r1
 8008d6c:	1dbb      	adds	r3, r7, #6
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	0018      	movs	r0, r3
 8008d72:	f7fa f813 	bl	8002d9c <__aeabi_i2d>
 8008d76:	0002      	movs	r2, r0
 8008d78:	000b      	movs	r3, r1
 8008d7a:	0020      	movs	r0, r4
 8008d7c:	0029      	movs	r1, r5
 8008d7e:	f7f9 f9bb 	bl	80020f8 <__aeabi_dmul>
 8008d82:	0002      	movs	r2, r0
 8008d84:	000b      	movs	r3, r1
 8008d86:	0014      	movs	r4, r2
 8008d88:	001d      	movs	r5, r3
 8008d8a:	230e      	movs	r3, #14
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7fa f803 	bl	8002d9c <__aeabi_i2d>
 8008d96:	0002      	movs	r2, r0
 8008d98:	000b      	movs	r3, r1
 8008d9a:	0020      	movs	r0, r4
 8008d9c:	0029      	movs	r1, r5
 8008d9e:	f7f8 fa3b 	bl	8001218 <__aeabi_dadd>
 8008da2:	0002      	movs	r2, r0
 8008da4:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008da6:	0010      	movs	r0, r2
 8008da8:	0019      	movs	r1, r3
 8008daa:	f7f7 fbcd 	bl	8000548 <__aeabi_d2uiz>
 8008dae:	0003      	movs	r3, r0
 8008db0:	b299      	uxth	r1, r3
 8008db2:	4689      	mov	r9, r1
			(sin(angle) * length) + Ystart,
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f7fa f847 	bl	8002e48 <__aeabi_f2d>
 8008dba:	0002      	movs	r2, r0
 8008dbc:	000b      	movs	r3, r1
 8008dbe:	0010      	movs	r0, r2
 8008dc0:	0019      	movs	r1, r3
 8008dc2:	f006 ff05 	bl	800fbd0 <sin>
 8008dc6:	0004      	movs	r4, r0
 8008dc8:	000d      	movs	r5, r1
 8008dca:	1dbb      	adds	r3, r7, #6
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7f9 ffe4 	bl	8002d9c <__aeabi_i2d>
 8008dd4:	0002      	movs	r2, r0
 8008dd6:	000b      	movs	r3, r1
 8008dd8:	0020      	movs	r0, r4
 8008dda:	0029      	movs	r1, r5
 8008ddc:	f7f9 f98c 	bl	80020f8 <__aeabi_dmul>
 8008de0:	0002      	movs	r2, r0
 8008de2:	000b      	movs	r3, r1
 8008de4:	0014      	movs	r4, r2
 8008de6:	001d      	movs	r5, r3
 8008de8:	220c      	movs	r2, #12
 8008dea:	18bb      	adds	r3, r7, r2
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7f9 ffd4 	bl	8002d9c <__aeabi_i2d>
 8008df4:	0002      	movs	r2, r0
 8008df6:	000b      	movs	r3, r1
 8008df8:	0020      	movs	r0, r4
 8008dfa:	0029      	movs	r1, r5
 8008dfc:	f7f8 fa0c 	bl	8001218 <__aeabi_dadd>
 8008e00:	0002      	movs	r2, r0
 8008e02:	000b      	movs	r3, r1
	Paint_DrawLine((cos(angle) * shift) + Xstart,
 8008e04:	0010      	movs	r0, r2
 8008e06:	0019      	movs	r1, r3
 8008e08:	f7f7 fb9e 	bl	8000548 <__aeabi_d2uiz>
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	233c      	movs	r3, #60	; 0x3c
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	9302      	str	r3, [sp, #8]
 8008e18:	2338      	movs	r3, #56	; 0x38
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	2334      	movs	r3, #52	; 0x34
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	0013      	movs	r3, r2
 8008e2a:	464a      	mov	r2, r9
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	0030      	movs	r0, r6
 8008e30:	f7ff fe40 	bl	8008ab4 <Paint_DrawLine>
			Color, Line_width, Line_Style);
}
 8008e34:	46c0      	nop			; (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b005      	add	sp, #20
 8008e3a:	bcc0      	pop	{r6, r7}
 8008e3c:	46b9      	mov	r9, r7
 8008e3e:	46b0      	mov	r8, r6
 8008e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e44 <Paint_DrawRectangle>:
 Color  ：The color of the Rectangular segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the rectangle
 ******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8008e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e46:	b089      	sub	sp, #36	; 0x24
 8008e48:	af04      	add	r7, sp, #16
 8008e4a:	0005      	movs	r5, r0
 8008e4c:	000c      	movs	r4, r1
 8008e4e:	0010      	movs	r0, r2
 8008e50:	0019      	movs	r1, r3
 8008e52:	1dbb      	adds	r3, r7, #6
 8008e54:	1c2a      	adds	r2, r5, #0
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	1d3b      	adds	r3, r7, #4
 8008e5a:	1c22      	adds	r2, r4, #0
 8008e5c:	801a      	strh	r2, [r3, #0]
 8008e5e:	1cbb      	adds	r3, r7, #2
 8008e60:	1c02      	adds	r2, r0, #0
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	003b      	movs	r3, r7
 8008e66:	1c0a      	adds	r2, r1, #0
 8008e68:	801a      	strh	r2, [r3, #0]
	if (Xstart > Paint.Width || Ystart > Paint.Height || Xend > Paint.Width
 8008e6a:	4b5a      	ldr	r3, [pc, #360]	; (8008fd4 <Paint_DrawRectangle+0x190>)
 8008e6c:	889b      	ldrh	r3, [r3, #4]
 8008e6e:	1dba      	adds	r2, r7, #6
 8008e70:	8812      	ldrh	r2, [r2, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d811      	bhi.n	8008e9a <Paint_DrawRectangle+0x56>
 8008e76:	4b57      	ldr	r3, [pc, #348]	; (8008fd4 <Paint_DrawRectangle+0x190>)
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	1d3a      	adds	r2, r7, #4
 8008e7c:	8812      	ldrh	r2, [r2, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d80b      	bhi.n	8008e9a <Paint_DrawRectangle+0x56>
 8008e82:	4b54      	ldr	r3, [pc, #336]	; (8008fd4 <Paint_DrawRectangle+0x190>)
 8008e84:	889b      	ldrh	r3, [r3, #4]
 8008e86:	1cba      	adds	r2, r7, #2
 8008e88:	8812      	ldrh	r2, [r2, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d805      	bhi.n	8008e9a <Paint_DrawRectangle+0x56>
			|| Yend > Paint.Height) {
 8008e8e:	4b51      	ldr	r3, [pc, #324]	; (8008fd4 <Paint_DrawRectangle+0x190>)
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	003a      	movs	r2, r7
 8008e94:	8812      	ldrh	r2, [r2, #0]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d904      	bls.n	8008ea4 <Paint_DrawRectangle+0x60>
		Debug("Input exceeds the normal display range\r\n");
 8008e9a:	4b4f      	ldr	r3, [pc, #316]	; (8008fd8 <Paint_DrawRectangle+0x194>)
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	f005 ff6f 	bl	800ed80 <puts>
		return;
 8008ea2:	e094      	b.n	8008fce <Paint_DrawRectangle+0x18a>
	}

	if (Draw_Fill) {
 8008ea4:	2328      	movs	r3, #40	; 0x28
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	4694      	mov	ip, r2
 8008eaa:	44bc      	add	ip, r7
 8008eac:	4463      	add	r3, ip
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d02e      	beq.n	8008f12 <Paint_DrawRectangle+0xce>
		UWORD Ypoint;
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8008eb4:	230e      	movs	r3, #14
 8008eb6:	18fb      	adds	r3, r7, r3
 8008eb8:	1d3a      	adds	r2, r7, #4
 8008eba:	8812      	ldrh	r2, [r2, #0]
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	e020      	b.n	8008f02 <Paint_DrawRectangle+0xbe>
			Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width,
 8008ec0:	250e      	movs	r5, #14
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	881c      	ldrh	r4, [r3, #0]
 8008ec6:	1cbb      	adds	r3, r7, #2
 8008ec8:	881a      	ldrh	r2, [r3, #0]
 8008eca:	197b      	adds	r3, r7, r5
 8008ecc:	8819      	ldrh	r1, [r3, #0]
 8008ece:	1dbb      	adds	r3, r7, #6
 8008ed0:	8818      	ldrh	r0, [r3, #0]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	2324      	movs	r3, #36	; 0x24
 8008ed8:	2608      	movs	r6, #8
 8008eda:	46b4      	mov	ip, r6
 8008edc:	44bc      	add	ip, r7
 8008ede:	4463      	add	r3, ip
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	2320      	movs	r3, #32
 8008ee6:	2608      	movs	r6, #8
 8008ee8:	46b4      	mov	ip, r6
 8008eea:	44bc      	add	ip, r7
 8008eec:	4463      	add	r3, ip
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	0023      	movs	r3, r4
 8008ef4:	f7ff fdde 	bl	8008ab4 <Paint_DrawLine>
		for (Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8008ef8:	197b      	adds	r3, r7, r5
 8008efa:	881a      	ldrh	r2, [r3, #0]
 8008efc:	197b      	adds	r3, r7, r5
 8008efe:	3201      	adds	r2, #1
 8008f00:	801a      	strh	r2, [r3, #0]
 8008f02:	230e      	movs	r3, #14
 8008f04:	18fa      	adds	r2, r7, r3
 8008f06:	003b      	movs	r3, r7
 8008f08:	8812      	ldrh	r2, [r2, #0]
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d3d7      	bcc.n	8008ec0 <Paint_DrawRectangle+0x7c>
 8008f10:	e05d      	b.n	8008fce <Paint_DrawRectangle+0x18a>
					LINE_STYLE_SOLID);
		}
	} else {
		Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width,
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	881c      	ldrh	r4, [r3, #0]
 8008f16:	1cbb      	adds	r3, r7, #2
 8008f18:	881a      	ldrh	r2, [r3, #0]
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	8819      	ldrh	r1, [r3, #0]
 8008f1e:	1dbb      	adds	r3, r7, #6
 8008f20:	8818      	ldrh	r0, [r3, #0]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9302      	str	r3, [sp, #8]
 8008f26:	2524      	movs	r5, #36	; 0x24
 8008f28:	2308      	movs	r3, #8
 8008f2a:	18fe      	adds	r6, r7, r3
 8008f2c:	1973      	adds	r3, r6, r5
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	2620      	movs	r6, #32
 8008f34:	2308      	movs	r3, #8
 8008f36:	18fb      	adds	r3, r7, r3
 8008f38:	199b      	adds	r3, r3, r6
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	0023      	movs	r3, r4
 8008f40:	f7ff fdb8 	bl	8008ab4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width,
 8008f44:	003b      	movs	r3, r7
 8008f46:	881c      	ldrh	r4, [r3, #0]
 8008f48:	1dbb      	adds	r3, r7, #6
 8008f4a:	881a      	ldrh	r2, [r3, #0]
 8008f4c:	1d3b      	adds	r3, r7, #4
 8008f4e:	8819      	ldrh	r1, [r3, #0]
 8008f50:	1dbb      	adds	r3, r7, #6
 8008f52:	8818      	ldrh	r0, [r3, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	2308      	movs	r3, #8
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	195b      	adds	r3, r3, r5
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	2308      	movs	r3, #8
 8008f64:	18fb      	adds	r3, r7, r3
 8008f66:	199b      	adds	r3, r3, r6
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	0023      	movs	r3, r4
 8008f6e:	f7ff fda1 	bl	8008ab4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width,
 8008f72:	1d3b      	adds	r3, r7, #4
 8008f74:	881c      	ldrh	r4, [r3, #0]
 8008f76:	1cbb      	adds	r3, r7, #2
 8008f78:	881a      	ldrh	r2, [r3, #0]
 8008f7a:	003b      	movs	r3, r7
 8008f7c:	8819      	ldrh	r1, [r3, #0]
 8008f7e:	1cbb      	adds	r3, r7, #2
 8008f80:	8818      	ldrh	r0, [r3, #0]
 8008f82:	2300      	movs	r3, #0
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	2308      	movs	r3, #8
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	195b      	adds	r3, r3, r5
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	2308      	movs	r3, #8
 8008f92:	18fb      	adds	r3, r7, r3
 8008f94:	199b      	adds	r3, r3, r6
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	0023      	movs	r3, r4
 8008f9c:	f7ff fd8a 	bl	8008ab4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
		Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width,
 8008fa0:	003b      	movs	r3, r7
 8008fa2:	881c      	ldrh	r4, [r3, #0]
 8008fa4:	1dbb      	adds	r3, r7, #6
 8008fa6:	881a      	ldrh	r2, [r3, #0]
 8008fa8:	003b      	movs	r3, r7
 8008faa:	8819      	ldrh	r1, [r3, #0]
 8008fac:	1cbb      	adds	r3, r7, #2
 8008fae:	8818      	ldrh	r0, [r3, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	18fb      	adds	r3, r7, r3
 8008fb8:	195b      	adds	r3, r3, r5
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	2308      	movs	r3, #8
 8008fc0:	18fb      	adds	r3, r7, r3
 8008fc2:	199b      	adds	r3, r3, r6
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	0023      	movs	r3, r4
 8008fca:	f7ff fd73 	bl	8008ab4 <Paint_DrawLine>
				LINE_STYLE_SOLID);
	}
}
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	b005      	add	sp, #20
 8008fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd4:	20000520 	.word	0x20000520
 8008fd8:	080116b4 	.word	0x080116b4

08008fdc <Paint_DrawCircle>:
 Color     ：The color of the ：circle segment
 Line_width: Line width
 Draw_Fill : Whether to fill the inside of the Circle
 ******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill) {
 8008fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	0005      	movs	r5, r0
 8008fe4:	000c      	movs	r4, r1
 8008fe6:	0010      	movs	r0, r2
 8008fe8:	0019      	movs	r1, r3
 8008fea:	1dbb      	adds	r3, r7, #6
 8008fec:	1c2a      	adds	r2, r5, #0
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	1d3b      	adds	r3, r7, #4
 8008ff2:	1c22      	adds	r2, r4, #0
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	1cbb      	adds	r3, r7, #2
 8008ff8:	1c02      	adds	r2, r0, #0
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	003b      	movs	r3, r7
 8008ffe:	1c0a      	adds	r2, r1, #0
 8009000:	801a      	strh	r2, [r3, #0]
	if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8009002:	4b94      	ldr	r3, [pc, #592]	; (8009254 <Paint_DrawCircle+0x278>)
 8009004:	889b      	ldrh	r3, [r3, #4]
 8009006:	1dba      	adds	r2, r7, #6
 8009008:	8812      	ldrh	r2, [r2, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d805      	bhi.n	800901a <Paint_DrawCircle+0x3e>
 800900e:	4b91      	ldr	r3, [pc, #580]	; (8009254 <Paint_DrawCircle+0x278>)
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	1d3a      	adds	r2, r7, #4
 8009014:	8812      	ldrh	r2, [r2, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d304      	bcc.n	8009024 <Paint_DrawCircle+0x48>
		Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800901a:	4b8f      	ldr	r3, [pc, #572]	; (8009258 <Paint_DrawCircle+0x27c>)
 800901c:	0018      	movs	r0, r3
 800901e:	f005 feaf 	bl	800ed80 <puts>
		return;
 8009022:	e229      	b.n	8009478 <Paint_DrawCircle+0x49c>
	}

	//Draw a circle from(0, R) as a starting point
	int16_t XCurrent, YCurrent;
	XCurrent = 0;
 8009024:	230e      	movs	r3, #14
 8009026:	18fb      	adds	r3, r7, r3
 8009028:	2200      	movs	r2, #0
 800902a:	801a      	strh	r2, [r3, #0]
	YCurrent = Radius;
 800902c:	230c      	movs	r3, #12
 800902e:	18fb      	adds	r3, r7, r3
 8009030:	1cba      	adds	r2, r7, #2
 8009032:	8812      	ldrh	r2, [r2, #0]
 8009034:	801a      	strh	r2, [r3, #0]

	//Cumulative error,judge the next point of the logo
	int16_t Esp = 3 - (Radius << 1);
 8009036:	1cbb      	adds	r3, r7, #2
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	18db      	adds	r3, r3, r3
 800903c:	b29b      	uxth	r3, r3
 800903e:	2203      	movs	r2, #3
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	b29a      	uxth	r2, r3
 8009044:	230a      	movs	r3, #10
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	801a      	strh	r2, [r3, #0]

	int16_t sCountY;
	if (Draw_Fill == DRAW_FILL_FULL) {
 800904a:	2324      	movs	r3, #36	; 0x24
 800904c:	2208      	movs	r2, #8
 800904e:	4694      	mov	ip, r2
 8009050:	44bc      	add	ip, r7
 8009052:	4463      	add	r3, ip
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d000      	beq.n	800905c <Paint_DrawCircle+0x80>
 800905a:	e202      	b.n	8009462 <Paint_DrawCircle+0x486>
		while (XCurrent <= YCurrent) { //Realistic circles
 800905c:	e0ed      	b.n	800923a <Paint_DrawCircle+0x25e>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 800905e:	2308      	movs	r3, #8
 8009060:	18fb      	adds	r3, r7, r3
 8009062:	220e      	movs	r2, #14
 8009064:	18ba      	adds	r2, r7, r2
 8009066:	8812      	ldrh	r2, [r2, #0]
 8009068:	801a      	strh	r2, [r3, #0]
 800906a:	e0a1      	b.n	80091b0 <Paint_DrawCircle+0x1d4>
				Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color,
 800906c:	250e      	movs	r5, #14
 800906e:	197b      	adds	r3, r7, r5
 8009070:	881a      	ldrh	r2, [r3, #0]
 8009072:	1dbb      	adds	r3, r7, #6
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	18d3      	adds	r3, r2, r3
 8009078:	b298      	uxth	r0, r3
 800907a:	2408      	movs	r4, #8
 800907c:	193b      	adds	r3, r7, r4
 800907e:	881a      	ldrh	r2, [r3, #0]
 8009080:	1d3b      	adds	r3, r7, #4
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	18d3      	adds	r3, r2, r3
 8009086:	b299      	uxth	r1, r3
 8009088:	003b      	movs	r3, r7
 800908a:	881a      	ldrh	r2, [r3, #0]
 800908c:	2301      	movs	r3, #1
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	2301      	movs	r3, #1
 8009092:	f7ff fc25 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //1
				Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color,
 8009096:	197b      	adds	r3, r7, r5
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	1dba      	adds	r2, r7, #6
 800909c:	8812      	ldrh	r2, [r2, #0]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	b298      	uxth	r0, r3
 80090a2:	193b      	adds	r3, r7, r4
 80090a4:	881a      	ldrh	r2, [r3, #0]
 80090a6:	1d3b      	adds	r3, r7, #4
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	18d3      	adds	r3, r2, r3
 80090ac:	b299      	uxth	r1, r3
 80090ae:	003b      	movs	r3, r7
 80090b0:	881a      	ldrh	r2, [r3, #0]
 80090b2:	2301      	movs	r3, #1
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2301      	movs	r3, #1
 80090b8:	f7ff fc12 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //2
				Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color,
 80090bc:	193b      	adds	r3, r7, r4
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	1dba      	adds	r2, r7, #6
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	b298      	uxth	r0, r3
 80090c8:	197b      	adds	r3, r7, r5
 80090ca:	881a      	ldrh	r2, [r3, #0]
 80090cc:	1d3b      	adds	r3, r7, #4
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	18d3      	adds	r3, r2, r3
 80090d2:	b299      	uxth	r1, r3
 80090d4:	003b      	movs	r3, r7
 80090d6:	881a      	ldrh	r2, [r3, #0]
 80090d8:	2301      	movs	r3, #1
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	2301      	movs	r3, #1
 80090de:	f7ff fbff 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //3
				Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color,
 80090e2:	193b      	adds	r3, r7, r4
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	1dba      	adds	r2, r7, #6
 80090e8:	8812      	ldrh	r2, [r2, #0]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	b298      	uxth	r0, r3
 80090ee:	197b      	adds	r3, r7, r5
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	1d3a      	adds	r2, r7, #4
 80090f4:	8812      	ldrh	r2, [r2, #0]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	b299      	uxth	r1, r3
 80090fa:	003b      	movs	r3, r7
 80090fc:	881a      	ldrh	r2, [r3, #0]
 80090fe:	2301      	movs	r3, #1
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	2301      	movs	r3, #1
 8009104:	f7ff fbec 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //4
				Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color,
 8009108:	197b      	adds	r3, r7, r5
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	1dba      	adds	r2, r7, #6
 800910e:	8812      	ldrh	r2, [r2, #0]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	b298      	uxth	r0, r3
 8009114:	193b      	adds	r3, r7, r4
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	1d3a      	adds	r2, r7, #4
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	b299      	uxth	r1, r3
 8009120:	003b      	movs	r3, r7
 8009122:	881a      	ldrh	r2, [r3, #0]
 8009124:	2301      	movs	r3, #1
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	2301      	movs	r3, #1
 800912a:	f7ff fbd9 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //5
				Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color,
 800912e:	197b      	adds	r3, r7, r5
 8009130:	881a      	ldrh	r2, [r3, #0]
 8009132:	1dbb      	adds	r3, r7, #6
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	18d3      	adds	r3, r2, r3
 8009138:	b298      	uxth	r0, r3
 800913a:	193b      	adds	r3, r7, r4
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	1d3a      	adds	r2, r7, #4
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	b299      	uxth	r1, r3
 8009146:	003b      	movs	r3, r7
 8009148:	881a      	ldrh	r2, [r3, #0]
 800914a:	2301      	movs	r3, #1
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	2301      	movs	r3, #1
 8009150:	f7ff fbc6 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //6
				Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color,
 8009154:	193b      	adds	r3, r7, r4
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	1dbb      	adds	r3, r7, #6
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	18d3      	adds	r3, r2, r3
 800915e:	b298      	uxth	r0, r3
 8009160:	197b      	adds	r3, r7, r5
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	1d3a      	adds	r2, r7, #4
 8009166:	8812      	ldrh	r2, [r2, #0]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	b299      	uxth	r1, r3
 800916c:	003b      	movs	r3, r7
 800916e:	881a      	ldrh	r2, [r3, #0]
 8009170:	2301      	movs	r3, #1
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	2301      	movs	r3, #1
 8009176:	f7ff fbb3 	bl	80088e0 <Paint_DrawPoint>
						DOT_PIXEL_DFT, DOT_STYLE_DFT); //7
				Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color,
 800917a:	193b      	adds	r3, r7, r4
 800917c:	881a      	ldrh	r2, [r3, #0]
 800917e:	1dbb      	adds	r3, r7, #6
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	18d3      	adds	r3, r2, r3
 8009184:	b298      	uxth	r0, r3
 8009186:	197b      	adds	r3, r7, r5
 8009188:	881a      	ldrh	r2, [r3, #0]
 800918a:	1d3b      	adds	r3, r7, #4
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	18d3      	adds	r3, r2, r3
 8009190:	b299      	uxth	r1, r3
 8009192:	003b      	movs	r3, r7
 8009194:	881a      	ldrh	r2, [r3, #0]
 8009196:	2301      	movs	r3, #1
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	2301      	movs	r3, #1
 800919c:	f7ff fba0 	bl	80088e0 <Paint_DrawPoint>
			for (sCountY = XCurrent; sCountY <= YCurrent; sCountY++) {
 80091a0:	193b      	adds	r3, r7, r4
 80091a2:	2200      	movs	r2, #0
 80091a4:	5e9b      	ldrsh	r3, [r3, r2]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3301      	adds	r3, #1
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	193b      	adds	r3, r7, r4
 80091ae:	801a      	strh	r2, [r3, #0]
 80091b0:	2308      	movs	r3, #8
 80091b2:	18fa      	adds	r2, r7, r3
 80091b4:	230c      	movs	r3, #12
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	2100      	movs	r1, #0
 80091ba:	5e52      	ldrsh	r2, [r2, r1]
 80091bc:	2100      	movs	r1, #0
 80091be:	5e5b      	ldrsh	r3, [r3, r1]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	dc00      	bgt.n	80091c6 <Paint_DrawCircle+0x1ea>
 80091c4:	e752      	b.n	800906c <Paint_DrawCircle+0x90>
						DOT_PIXEL_DFT, DOT_STYLE_DFT);
			}
			if (Esp < 0)
 80091c6:	210a      	movs	r1, #10
 80091c8:	187b      	adds	r3, r7, r1
 80091ca:	2200      	movs	r2, #0
 80091cc:	5e9b      	ldrsh	r3, [r3, r2]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da0d      	bge.n	80091ee <Paint_DrawCircle+0x212>
				Esp += 4 * XCurrent + 6;
 80091d2:	230e      	movs	r3, #14
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	b29a      	uxth	r2, r3
 80091dc:	187b      	adds	r3, r7, r1
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	18d3      	adds	r3, r2, r3
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3306      	adds	r3, #6
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	187b      	adds	r3, r7, r1
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	e01c      	b.n	8009228 <Paint_DrawCircle+0x24c>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 80091ee:	230e      	movs	r3, #14
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	2200      	movs	r2, #0
 80091f4:	5e9a      	ldrsh	r2, [r3, r2]
 80091f6:	210c      	movs	r1, #12
 80091f8:	187b      	adds	r3, r7, r1
 80091fa:	2000      	movs	r0, #0
 80091fc:	5e1b      	ldrsh	r3, [r3, r0]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	b29b      	uxth	r3, r3
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	b29a      	uxth	r2, r3
 8009206:	200a      	movs	r0, #10
 8009208:	183b      	adds	r3, r7, r0
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	18d3      	adds	r3, r2, r3
 800920e:	b29b      	uxth	r3, r3
 8009210:	330a      	adds	r3, #10
 8009212:	b29a      	uxth	r2, r3
 8009214:	183b      	adds	r3, r7, r0
 8009216:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8009218:	187b      	adds	r3, r7, r1
 800921a:	2200      	movs	r2, #0
 800921c:	5e9b      	ldrsh	r3, [r3, r2]
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	187b      	adds	r3, r7, r1
 8009226:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009228:	210e      	movs	r1, #14
 800922a:	187b      	adds	r3, r7, r1
 800922c:	2200      	movs	r2, #0
 800922e:	5e9b      	ldrsh	r3, [r3, r2]
 8009230:	b29b      	uxth	r3, r3
 8009232:	3301      	adds	r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	187b      	adds	r3, r7, r1
 8009238:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) { //Realistic circles
 800923a:	230e      	movs	r3, #14
 800923c:	18fa      	adds	r2, r7, r3
 800923e:	230c      	movs	r3, #12
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	2100      	movs	r1, #0
 8009244:	5e52      	ldrsh	r2, [r2, r1]
 8009246:	2100      	movs	r1, #0
 8009248:	5e5b      	ldrsh	r3, [r3, r1]
 800924a:	429a      	cmp	r2, r3
 800924c:	dc00      	bgt.n	8009250 <Paint_DrawCircle+0x274>
 800924e:	e706      	b.n	800905e <Paint_DrawCircle+0x82>
 8009250:	e112      	b.n	8009478 <Paint_DrawCircle+0x49c>
 8009252:	46c0      	nop			; (mov r8, r8)
 8009254:	20000520 	.word	0x20000520
 8009258:	080116e4 	.word	0x080116e4
		}
	} else { //Draw a hollow circle
		while (XCurrent <= YCurrent) {
			Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color,
 800925c:	250e      	movs	r5, #14
 800925e:	197b      	adds	r3, r7, r5
 8009260:	881a      	ldrh	r2, [r3, #0]
 8009262:	1dbb      	adds	r3, r7, #6
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	b298      	uxth	r0, r3
 800926a:	260c      	movs	r6, #12
 800926c:	19bb      	adds	r3, r7, r6
 800926e:	881a      	ldrh	r2, [r3, #0]
 8009270:	1d3b      	adds	r3, r7, #4
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	18d3      	adds	r3, r2, r3
 8009276:	b299      	uxth	r1, r3
 8009278:	2320      	movs	r3, #32
 800927a:	2208      	movs	r2, #8
 800927c:	4694      	mov	ip, r2
 800927e:	44bc      	add	ip, r7
 8009280:	4463      	add	r3, ip
 8009282:	781c      	ldrb	r4, [r3, #0]
 8009284:	003b      	movs	r3, r7
 8009286:	881a      	ldrh	r2, [r3, #0]
 8009288:	2301      	movs	r3, #1
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	0023      	movs	r3, r4
 800928e:	f7ff fb27 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //1
			Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color,
 8009292:	197b      	adds	r3, r7, r5
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	1dba      	adds	r2, r7, #6
 8009298:	8812      	ldrh	r2, [r2, #0]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	b298      	uxth	r0, r3
 800929e:	19bb      	adds	r3, r7, r6
 80092a0:	881a      	ldrh	r2, [r3, #0]
 80092a2:	1d3b      	adds	r3, r7, #4
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	18d3      	adds	r3, r2, r3
 80092a8:	b299      	uxth	r1, r3
 80092aa:	2320      	movs	r3, #32
 80092ac:	2208      	movs	r2, #8
 80092ae:	4694      	mov	ip, r2
 80092b0:	44bc      	add	ip, r7
 80092b2:	4463      	add	r3, ip
 80092b4:	781c      	ldrb	r4, [r3, #0]
 80092b6:	003b      	movs	r3, r7
 80092b8:	881a      	ldrh	r2, [r3, #0]
 80092ba:	2301      	movs	r3, #1
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	0023      	movs	r3, r4
 80092c0:	f7ff fb0e 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //2
			Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color,
 80092c4:	19bb      	adds	r3, r7, r6
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	1dba      	adds	r2, r7, #6
 80092ca:	8812      	ldrh	r2, [r2, #0]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	b298      	uxth	r0, r3
 80092d0:	197b      	adds	r3, r7, r5
 80092d2:	881a      	ldrh	r2, [r3, #0]
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	18d3      	adds	r3, r2, r3
 80092da:	b299      	uxth	r1, r3
 80092dc:	2320      	movs	r3, #32
 80092de:	2208      	movs	r2, #8
 80092e0:	4694      	mov	ip, r2
 80092e2:	44bc      	add	ip, r7
 80092e4:	4463      	add	r3, ip
 80092e6:	781c      	ldrb	r4, [r3, #0]
 80092e8:	003b      	movs	r3, r7
 80092ea:	881a      	ldrh	r2, [r3, #0]
 80092ec:	2301      	movs	r3, #1
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	0023      	movs	r3, r4
 80092f2:	f7ff faf5 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //3
			Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color,
 80092f6:	19bb      	adds	r3, r7, r6
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	1dba      	adds	r2, r7, #6
 80092fc:	8812      	ldrh	r2, [r2, #0]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	b298      	uxth	r0, r3
 8009302:	197b      	adds	r3, r7, r5
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	1d3a      	adds	r2, r7, #4
 8009308:	8812      	ldrh	r2, [r2, #0]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	b299      	uxth	r1, r3
 800930e:	2320      	movs	r3, #32
 8009310:	2208      	movs	r2, #8
 8009312:	4694      	mov	ip, r2
 8009314:	44bc      	add	ip, r7
 8009316:	4463      	add	r3, ip
 8009318:	781c      	ldrb	r4, [r3, #0]
 800931a:	003b      	movs	r3, r7
 800931c:	881a      	ldrh	r2, [r3, #0]
 800931e:	2301      	movs	r3, #1
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	0023      	movs	r3, r4
 8009324:	f7ff fadc 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //4
			Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color,
 8009328:	197b      	adds	r3, r7, r5
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	1dba      	adds	r2, r7, #6
 800932e:	8812      	ldrh	r2, [r2, #0]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	b298      	uxth	r0, r3
 8009334:	19bb      	adds	r3, r7, r6
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	1d3a      	adds	r2, r7, #4
 800933a:	8812      	ldrh	r2, [r2, #0]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	b299      	uxth	r1, r3
 8009340:	2320      	movs	r3, #32
 8009342:	2208      	movs	r2, #8
 8009344:	4694      	mov	ip, r2
 8009346:	44bc      	add	ip, r7
 8009348:	4463      	add	r3, ip
 800934a:	781c      	ldrb	r4, [r3, #0]
 800934c:	003b      	movs	r3, r7
 800934e:	881a      	ldrh	r2, [r3, #0]
 8009350:	2301      	movs	r3, #1
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	0023      	movs	r3, r4
 8009356:	f7ff fac3 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //5
			Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color,
 800935a:	197b      	adds	r3, r7, r5
 800935c:	881a      	ldrh	r2, [r3, #0]
 800935e:	1dbb      	adds	r3, r7, #6
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	18d3      	adds	r3, r2, r3
 8009364:	b298      	uxth	r0, r3
 8009366:	19bb      	adds	r3, r7, r6
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	1d3a      	adds	r2, r7, #4
 800936c:	8812      	ldrh	r2, [r2, #0]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	b299      	uxth	r1, r3
 8009372:	2320      	movs	r3, #32
 8009374:	2208      	movs	r2, #8
 8009376:	4694      	mov	ip, r2
 8009378:	44bc      	add	ip, r7
 800937a:	4463      	add	r3, ip
 800937c:	781c      	ldrb	r4, [r3, #0]
 800937e:	003b      	movs	r3, r7
 8009380:	881a      	ldrh	r2, [r3, #0]
 8009382:	2301      	movs	r3, #1
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	0023      	movs	r3, r4
 8009388:	f7ff faaa 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //6
			Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color,
 800938c:	19bb      	adds	r3, r7, r6
 800938e:	881a      	ldrh	r2, [r3, #0]
 8009390:	1dbb      	adds	r3, r7, #6
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	18d3      	adds	r3, r2, r3
 8009396:	b298      	uxth	r0, r3
 8009398:	197b      	adds	r3, r7, r5
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	1d3a      	adds	r2, r7, #4
 800939e:	8812      	ldrh	r2, [r2, #0]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	b299      	uxth	r1, r3
 80093a4:	2320      	movs	r3, #32
 80093a6:	2208      	movs	r2, #8
 80093a8:	4694      	mov	ip, r2
 80093aa:	44bc      	add	ip, r7
 80093ac:	4463      	add	r3, ip
 80093ae:	781c      	ldrb	r4, [r3, #0]
 80093b0:	003b      	movs	r3, r7
 80093b2:	881a      	ldrh	r2, [r3, #0]
 80093b4:	2301      	movs	r3, #1
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	0023      	movs	r3, r4
 80093ba:	f7ff fa91 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //7
			Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color,
 80093be:	19bb      	adds	r3, r7, r6
 80093c0:	881a      	ldrh	r2, [r3, #0]
 80093c2:	1dbb      	adds	r3, r7, #6
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	18d3      	adds	r3, r2, r3
 80093c8:	b298      	uxth	r0, r3
 80093ca:	197b      	adds	r3, r7, r5
 80093cc:	881a      	ldrh	r2, [r3, #0]
 80093ce:	1d3b      	adds	r3, r7, #4
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	18d3      	adds	r3, r2, r3
 80093d4:	b299      	uxth	r1, r3
 80093d6:	2320      	movs	r3, #32
 80093d8:	2208      	movs	r2, #8
 80093da:	4694      	mov	ip, r2
 80093dc:	44bc      	add	ip, r7
 80093de:	4463      	add	r3, ip
 80093e0:	781c      	ldrb	r4, [r3, #0]
 80093e2:	003b      	movs	r3, r7
 80093e4:	881a      	ldrh	r2, [r3, #0]
 80093e6:	2301      	movs	r3, #1
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	0023      	movs	r3, r4
 80093ec:	f7ff fa78 	bl	80088e0 <Paint_DrawPoint>
					Line_width, DOT_STYLE_DFT); //0

			if (Esp < 0)
 80093f0:	210a      	movs	r1, #10
 80093f2:	187b      	adds	r3, r7, r1
 80093f4:	2200      	movs	r2, #0
 80093f6:	5e9b      	ldrsh	r3, [r3, r2]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da0c      	bge.n	8009416 <Paint_DrawCircle+0x43a>
				Esp += 4 * XCurrent + 6;
 80093fc:	197b      	adds	r3, r7, r5
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	b29a      	uxth	r2, r3
 8009404:	187b      	adds	r3, r7, r1
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	18d3      	adds	r3, r2, r3
 800940a:	b29b      	uxth	r3, r3
 800940c:	3306      	adds	r3, #6
 800940e:	b29a      	uxth	r2, r3
 8009410:	187b      	adds	r3, r7, r1
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	e01c      	b.n	8009450 <Paint_DrawCircle+0x474>
			else {
				Esp += 10 + 4 * (XCurrent - YCurrent);
 8009416:	230e      	movs	r3, #14
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	2200      	movs	r2, #0
 800941c:	5e9a      	ldrsh	r2, [r3, r2]
 800941e:	210c      	movs	r1, #12
 8009420:	187b      	adds	r3, r7, r1
 8009422:	2000      	movs	r0, #0
 8009424:	5e1b      	ldrsh	r3, [r3, r0]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	b29b      	uxth	r3, r3
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	b29a      	uxth	r2, r3
 800942e:	200a      	movs	r0, #10
 8009430:	183b      	adds	r3, r7, r0
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	18d3      	adds	r3, r2, r3
 8009436:	b29b      	uxth	r3, r3
 8009438:	330a      	adds	r3, #10
 800943a:	b29a      	uxth	r2, r3
 800943c:	183b      	adds	r3, r7, r0
 800943e:	801a      	strh	r2, [r3, #0]
				YCurrent--;
 8009440:	187b      	adds	r3, r7, r1
 8009442:	2200      	movs	r2, #0
 8009444:	5e9b      	ldrsh	r3, [r3, r2]
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	187b      	adds	r3, r7, r1
 800944e:	801a      	strh	r2, [r3, #0]
			}
			XCurrent++;
 8009450:	210e      	movs	r1, #14
 8009452:	187b      	adds	r3, r7, r1
 8009454:	2200      	movs	r2, #0
 8009456:	5e9b      	ldrsh	r3, [r3, r2]
 8009458:	b29b      	uxth	r3, r3
 800945a:	3301      	adds	r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	187b      	adds	r3, r7, r1
 8009460:	801a      	strh	r2, [r3, #0]
		while (XCurrent <= YCurrent) {
 8009462:	230e      	movs	r3, #14
 8009464:	18fa      	adds	r2, r7, r3
 8009466:	230c      	movs	r3, #12
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	2100      	movs	r1, #0
 800946c:	5e52      	ldrsh	r2, [r2, r1]
 800946e:	2100      	movs	r1, #0
 8009470:	5e5b      	ldrsh	r3, [r3, r1]
 8009472:	429a      	cmp	r2, r3
 8009474:	dc00      	bgt.n	8009478 <Paint_DrawCircle+0x49c>
 8009476:	e6f1      	b.n	800925c <Paint_DrawCircle+0x280>
		}
	}
}
 8009478:	46bd      	mov	sp, r7
 800947a:	b005      	add	sp, #20
 800947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947e:	46c0      	nop			; (mov r8, r8)

08009480 <Paint_DrawChar>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009480:	b5b0      	push	{r4, r5, r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af00      	add	r7, sp, #0
 8009486:	0004      	movs	r4, r0
 8009488:	0008      	movs	r0, r1
 800948a:	0011      	movs	r1, r2
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	250e      	movs	r5, #14
 8009490:	197b      	adds	r3, r7, r5
 8009492:	1c22      	adds	r2, r4, #0
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	240c      	movs	r4, #12
 8009498:	193b      	adds	r3, r7, r4
 800949a:	1c02      	adds	r2, r0, #0
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	230b      	movs	r3, #11
 80094a0:	18fb      	adds	r3, r7, r3
 80094a2:	1c0a      	adds	r2, r1, #0
 80094a4:	701a      	strb	r2, [r3, #0]
	UWORD Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80094a6:	4b66      	ldr	r3, [pc, #408]	; (8009640 <Paint_DrawChar+0x1c0>)
 80094a8:	889b      	ldrh	r3, [r3, #4]
 80094aa:	197a      	adds	r2, r7, r5
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d805      	bhi.n	80094be <Paint_DrawChar+0x3e>
 80094b2:	4b63      	ldr	r3, [pc, #396]	; (8009640 <Paint_DrawChar+0x1c0>)
 80094b4:	88db      	ldrh	r3, [r3, #6]
 80094b6:	193a      	adds	r2, r7, r4
 80094b8:	8812      	ldrh	r2, [r2, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d904      	bls.n	80094c8 <Paint_DrawChar+0x48>
		Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80094be:	4b61      	ldr	r3, [pc, #388]	; (8009644 <Paint_DrawChar+0x1c4>)
 80094c0:	0018      	movs	r0, r3
 80094c2:	f005 fc5d 	bl	800ed80 <puts>
		return;
 80094c6:	e0b7      	b.n	8009638 <Paint_DrawChar+0x1b8>
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80094c8:	230b      	movs	r3, #11
 80094ca:	18fb      	adds	r3, r7, r3
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	3b20      	subs	r3, #32
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	88d2      	ldrh	r2, [r2, #6]
 80094d4:	4353      	muls	r3, r2
			* (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	8892      	ldrh	r2, [r2, #4]
 80094da:	08d2      	lsrs	r2, r2, #3
 80094dc:	b292      	uxth	r2, r2
 80094de:	0010      	movs	r0, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	8892      	ldrh	r2, [r2, #4]
 80094e4:	2107      	movs	r1, #7
 80094e6:	400a      	ands	r2, r1
 80094e8:	b292      	uxth	r2, r2
 80094ea:	1e51      	subs	r1, r2, #1
 80094ec:	418a      	sbcs	r2, r1
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	1882      	adds	r2, r0, r2
 80094f2:	4353      	muls	r3, r2
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height
 80094f4:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	18d3      	adds	r3, r2, r3
 80094fe:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 8009500:	231e      	movs	r3, #30
 8009502:	18fb      	adds	r3, r7, r3
 8009504:	2200      	movs	r2, #0
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e08e      	b.n	8009628 <Paint_DrawChar+0x1a8>
		for (Column = 0; Column < Font->Width; Column++) {
 800950a:	231c      	movs	r3, #28
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	2200      	movs	r2, #0
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	e071      	b.n	80095f8 <Paint_DrawChar+0x178>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8009514:	2334      	movs	r3, #52	; 0x34
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	2bff      	cmp	r3, #255	; 0xff
 800951c:	d122      	bne.n	8009564 <Paint_DrawChar+0xe4>
				if (*ptr & (0x80 >> (Column % 8)))
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	0019      	movs	r1, r3
 8009524:	201c      	movs	r0, #28
 8009526:	183b      	adds	r3, r7, r0
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	2207      	movs	r2, #7
 800952c:	4013      	ands	r3, r2
 800952e:	2280      	movs	r2, #128	; 0x80
 8009530:	411a      	asrs	r2, r3
 8009532:	0013      	movs	r3, r2
 8009534:	400b      	ands	r3, r1
 8009536:	d04e      	beq.n	80095d6 <Paint_DrawChar+0x156>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 8009538:	230e      	movs	r3, #14
 800953a:	18fa      	adds	r2, r7, r3
 800953c:	183b      	adds	r3, r7, r0
 800953e:	8812      	ldrh	r2, [r2, #0]
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	18d3      	adds	r3, r2, r3
 8009544:	b298      	uxth	r0, r3
 8009546:	230c      	movs	r3, #12
 8009548:	18fa      	adds	r2, r7, r3
 800954a:	231e      	movs	r3, #30
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	8812      	ldrh	r2, [r2, #0]
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	18d3      	adds	r3, r2, r3
 8009554:	b299      	uxth	r1, r3
 8009556:	2330      	movs	r3, #48	; 0x30
 8009558:	18fb      	adds	r3, r7, r3
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	001a      	movs	r2, r3
 800955e:	f7fe ff8d 	bl	800847c <Paint_SetPixel>
 8009562:	e038      	b.n	80095d6 <Paint_DrawChar+0x156>
							Color_Foreground);
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	0019      	movs	r1, r3
 800956a:	201c      	movs	r0, #28
 800956c:	183b      	adds	r3, r7, r0
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	2207      	movs	r2, #7
 8009572:	4013      	ands	r3, r2
 8009574:	2280      	movs	r2, #128	; 0x80
 8009576:	411a      	asrs	r2, r3
 8009578:	0013      	movs	r3, r2
 800957a:	400b      	ands	r3, r1
 800957c:	d015      	beq.n	80095aa <Paint_DrawChar+0x12a>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 800957e:	230e      	movs	r3, #14
 8009580:	18fa      	adds	r2, r7, r3
 8009582:	183b      	adds	r3, r7, r0
 8009584:	8812      	ldrh	r2, [r2, #0]
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	18d3      	adds	r3, r2, r3
 800958a:	b298      	uxth	r0, r3
 800958c:	230c      	movs	r3, #12
 800958e:	18fa      	adds	r2, r7, r3
 8009590:	231e      	movs	r3, #30
 8009592:	18fb      	adds	r3, r7, r3
 8009594:	8812      	ldrh	r2, [r2, #0]
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	b299      	uxth	r1, r3
 800959c:	2330      	movs	r3, #48	; 0x30
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	001a      	movs	r2, r3
 80095a4:	f7fe ff6a 	bl	800847c <Paint_SetPixel>
 80095a8:	e015      	b.n	80095d6 <Paint_DrawChar+0x156>
							Color_Foreground);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page,
 80095aa:	230e      	movs	r3, #14
 80095ac:	18fa      	adds	r2, r7, r3
 80095ae:	231c      	movs	r3, #28
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	8812      	ldrh	r2, [r2, #0]
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	18d3      	adds	r3, r2, r3
 80095b8:	b298      	uxth	r0, r3
 80095ba:	230c      	movs	r3, #12
 80095bc:	18fa      	adds	r2, r7, r3
 80095be:	231e      	movs	r3, #30
 80095c0:	18fb      	adds	r3, r7, r3
 80095c2:	8812      	ldrh	r2, [r2, #0]
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	18d3      	adds	r3, r2, r3
 80095c8:	b299      	uxth	r1, r3
 80095ca:	2334      	movs	r3, #52	; 0x34
 80095cc:	18fb      	adds	r3, r7, r3
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	001a      	movs	r2, r3
 80095d2:	f7fe ff53 	bl	800847c <Paint_SetPixel>
							Color_Background);
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 80095d6:	231c      	movs	r3, #28
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	2207      	movs	r2, #7
 80095de:	4013      	ands	r3, r2
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	2b07      	cmp	r3, #7
 80095e4:	d102      	bne.n	80095ec <Paint_DrawChar+0x16c>
				ptr++;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	3301      	adds	r3, #1
 80095ea:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 80095ec:	211c      	movs	r1, #28
 80095ee:	187b      	adds	r3, r7, r1
 80095f0:	881a      	ldrh	r2, [r3, #0]
 80095f2:	187b      	adds	r3, r7, r1
 80095f4:	3201      	adds	r2, #1
 80095f6:	801a      	strh	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	889b      	ldrh	r3, [r3, #4]
 80095fc:	221c      	movs	r2, #28
 80095fe:	18ba      	adds	r2, r7, r2
 8009600:	8812      	ldrh	r2, [r2, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d200      	bcs.n	8009608 <Paint_DrawChar+0x188>
 8009606:	e785      	b.n	8009514 <Paint_DrawChar+0x94>
		} // Write a line
		if (Font->Width % 8 != 0)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	889b      	ldrh	r3, [r3, #4]
 800960c:	2207      	movs	r2, #7
 800960e:	4013      	ands	r3, r2
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <Paint_DrawChar+0x19c>
			ptr++;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	3301      	adds	r3, #1
 800961a:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 800961c:	211e      	movs	r1, #30
 800961e:	187b      	adds	r3, r7, r1
 8009620:	881a      	ldrh	r2, [r3, #0]
 8009622:	187b      	adds	r3, r7, r1
 8009624:	3201      	adds	r2, #1
 8009626:	801a      	strh	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	88db      	ldrh	r3, [r3, #6]
 800962c:	221e      	movs	r2, #30
 800962e:	18ba      	adds	r2, r7, r2
 8009630:	8812      	ldrh	r2, [r2, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d200      	bcs.n	8009638 <Paint_DrawChar+0x1b8>
 8009636:	e768      	b.n	800950a <Paint_DrawChar+0x8a>
	} // Write all
}
 8009638:	46bd      	mov	sp, r7
 800963a:	b008      	add	sp, #32
 800963c:	bdb0      	pop	{r4, r5, r7, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	20000520 	.word	0x20000520
 8009644:	08011724 	.word	0x08011724

08009648 <Paint_DrawString_EN>:
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
		sFONT *Font, UWORD Color_Foreground, UWORD Color_Background) {
 8009648:	b5b0      	push	{r4, r5, r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af02      	add	r7, sp, #8
 800964e:	60ba      	str	r2, [r7, #8]
 8009650:	607b      	str	r3, [r7, #4]
 8009652:	240e      	movs	r4, #14
 8009654:	193b      	adds	r3, r7, r4
 8009656:	1c02      	adds	r2, r0, #0
 8009658:	801a      	strh	r2, [r3, #0]
 800965a:	200c      	movs	r0, #12
 800965c:	183b      	adds	r3, r7, r0
 800965e:	1c0a      	adds	r2, r1, #0
 8009660:	801a      	strh	r2, [r3, #0]
	UWORD Xpoint = Xstart;
 8009662:	2316      	movs	r3, #22
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	0021      	movs	r1, r4
 8009668:	187a      	adds	r2, r7, r1
 800966a:	8812      	ldrh	r2, [r2, #0]
 800966c:	801a      	strh	r2, [r3, #0]
	UWORD Ypoint = Ystart;
 800966e:	2314      	movs	r3, #20
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	183a      	adds	r2, r7, r0
 8009674:	8812      	ldrh	r2, [r2, #0]
 8009676:	801a      	strh	r2, [r3, #0]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8009678:	4b30      	ldr	r3, [pc, #192]	; (800973c <Paint_DrawString_EN+0xf4>)
 800967a:	889b      	ldrh	r3, [r3, #4]
 800967c:	187a      	adds	r2, r7, r1
 800967e:	8812      	ldrh	r2, [r2, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d805      	bhi.n	8009690 <Paint_DrawString_EN+0x48>
 8009684:	4b2d      	ldr	r3, [pc, #180]	; (800973c <Paint_DrawString_EN+0xf4>)
 8009686:	88db      	ldrh	r3, [r3, #6]
 8009688:	183a      	adds	r2, r7, r0
 800968a:	8812      	ldrh	r2, [r2, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d94e      	bls.n	800972e <Paint_DrawString_EN+0xe6>
		Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8009690:	4b2b      	ldr	r3, [pc, #172]	; (8009740 <Paint_DrawString_EN+0xf8>)
 8009692:	0018      	movs	r0, r3
 8009694:	f005 fb74 	bl	800ed80 <puts>
		return;
 8009698:	e04d      	b.n	8009736 <Paint_DrawString_EN+0xee>
	}

	while (*pString != '\0') {
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 800969a:	2116      	movs	r1, #22
 800969c:	187b      	adds	r3, r7, r1
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	8892      	ldrh	r2, [r2, #4]
 80096a4:	189b      	adds	r3, r3, r2
 80096a6:	4a25      	ldr	r2, [pc, #148]	; (800973c <Paint_DrawString_EN+0xf4>)
 80096a8:	8892      	ldrh	r2, [r2, #4]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	dd0c      	ble.n	80096c8 <Paint_DrawString_EN+0x80>
			Xpoint = Xstart;
 80096ae:	187b      	adds	r3, r7, r1
 80096b0:	220e      	movs	r2, #14
 80096b2:	18ba      	adds	r2, r7, r2
 80096b4:	8812      	ldrh	r2, [r2, #0]
 80096b6:	801a      	strh	r2, [r3, #0]
			Ypoint += Font->Height;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	88d9      	ldrh	r1, [r3, #6]
 80096bc:	2214      	movs	r2, #20
 80096be:	18bb      	adds	r3, r7, r2
 80096c0:	18ba      	adds	r2, r7, r2
 80096c2:	8812      	ldrh	r2, [r2, #0]
 80096c4:	188a      	adds	r2, r1, r2
 80096c6:	801a      	strh	r2, [r3, #0]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 80096c8:	2114      	movs	r1, #20
 80096ca:	187b      	adds	r3, r7, r1
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	88d2      	ldrh	r2, [r2, #6]
 80096d2:	189b      	adds	r3, r3, r2
 80096d4:	4a19      	ldr	r2, [pc, #100]	; (800973c <Paint_DrawString_EN+0xf4>)
 80096d6:	88d2      	ldrh	r2, [r2, #6]
 80096d8:	4293      	cmp	r3, r2
 80096da:	dd0a      	ble.n	80096f2 <Paint_DrawString_EN+0xaa>
			Xpoint = Xstart;
 80096dc:	2316      	movs	r3, #22
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	220e      	movs	r2, #14
 80096e2:	18ba      	adds	r2, r7, r2
 80096e4:	8812      	ldrh	r2, [r2, #0]
 80096e6:	801a      	strh	r2, [r3, #0]
			Ypoint = Ystart;
 80096e8:	187b      	adds	r3, r7, r1
 80096ea:	220c      	movs	r2, #12
 80096ec:	18ba      	adds	r2, r7, r2
 80096ee:	8812      	ldrh	r2, [r2, #0]
 80096f0:	801a      	strh	r2, [r3, #0]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground,
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	781a      	ldrb	r2, [r3, #0]
 80096f6:	687c      	ldr	r4, [r7, #4]
 80096f8:	2314      	movs	r3, #20
 80096fa:	18fb      	adds	r3, r7, r3
 80096fc:	8819      	ldrh	r1, [r3, #0]
 80096fe:	2516      	movs	r5, #22
 8009700:	197b      	adds	r3, r7, r5
 8009702:	8818      	ldrh	r0, [r3, #0]
 8009704:	232c      	movs	r3, #44	; 0x2c
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	2328      	movs	r3, #40	; 0x28
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	0023      	movs	r3, r4
 8009716:	f7ff feb3 	bl	8009480 <Paint_DrawChar>
				Color_Background); //edited by Bart

		//The next character of the address
		pString++;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	3301      	adds	r3, #1
 800971e:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8899      	ldrh	r1, [r3, #4]
 8009724:	197b      	adds	r3, r7, r5
 8009726:	197a      	adds	r2, r7, r5
 8009728:	8812      	ldrh	r2, [r2, #0]
 800972a:	188a      	adds	r2, r1, r2
 800972c:	801a      	strh	r2, [r3, #0]
	while (*pString != '\0') {
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1b1      	bne.n	800969a <Paint_DrawString_EN+0x52>
	}
}
 8009736:	46bd      	mov	sp, r7
 8009738:	b006      	add	sp, #24
 800973a:	bdb0      	pop	{r4, r5, r7, pc}
 800973c:	20000520 	.word	0x20000520
 8009740:	08011764 	.word	0x08011764

08009744 <Paint_DrawNum>:
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber, sFONT *Font,
		UWORD Color_Foreground, UWORD Color_Background) {
 8009744:	b5b0      	push	{r4, r5, r7, lr}
 8009746:	4c6b      	ldr	r4, [pc, #428]	; (80098f4 <Paint_DrawNum+0x1b0>)
 8009748:	44a5      	add	sp, r4
 800974a:	af02      	add	r7, sp, #8
 800974c:	60ba      	str	r2, [r7, #8]
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	4b69      	ldr	r3, [pc, #420]	; (80098f8 <Paint_DrawNum+0x1b4>)
 8009752:	2286      	movs	r2, #134	; 0x86
 8009754:	0092      	lsls	r2, r2, #2
 8009756:	4694      	mov	ip, r2
 8009758:	44bc      	add	ip, r7
 800975a:	4463      	add	r3, ip
 800975c:	1c02      	adds	r2, r0, #0
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	4b66      	ldr	r3, [pc, #408]	; (80098fc <Paint_DrawNum+0x1b8>)
 8009762:	2286      	movs	r2, #134	; 0x86
 8009764:	0092      	lsls	r2, r2, #2
 8009766:	4694      	mov	ip, r2
 8009768:	44bc      	add	ip, r7
 800976a:	4463      	add	r3, ip
 800976c:	1c0a      	adds	r2, r1, #0
 800976e:	801a      	strh	r2, [r3, #0]

	int16_t Num_Bit = 0, Str_Bit = 0;
 8009770:	4b63      	ldr	r3, [pc, #396]	; (8009900 <Paint_DrawNum+0x1bc>)
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	2200      	movs	r2, #0
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	2385      	movs	r3, #133	; 0x85
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	18fb      	adds	r3, r7, r3
 800977e:	2200      	movs	r2, #0
 8009780:	801a      	strh	r2, [r3, #0]
	uint8_t Str_Array[ARRAY_LEN] = { 0 }, Num_Array[ARRAY_LEN] = { 0 };
 8009782:	4b60      	ldr	r3, [pc, #384]	; (8009904 <Paint_DrawNum+0x1c0>)
 8009784:	2286      	movs	r2, #134	; 0x86
 8009786:	0092      	lsls	r2, r2, #2
 8009788:	4694      	mov	ip, r2
 800978a:	44bc      	add	ip, r7
 800978c:	4463      	add	r3, ip
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	3304      	adds	r3, #4
 8009794:	22fb      	movs	r2, #251	; 0xfb
 8009796:	2100      	movs	r1, #0
 8009798:	0018      	movs	r0, r3
 800979a:	f005 f9b4 	bl	800eb06 <memset>
 800979e:	4b5a      	ldr	r3, [pc, #360]	; (8009908 <Paint_DrawNum+0x1c4>)
 80097a0:	2286      	movs	r2, #134	; 0x86
 80097a2:	0092      	lsls	r2, r2, #2
 80097a4:	4694      	mov	ip, r2
 80097a6:	44bc      	add	ip, r7
 80097a8:	4463      	add	r3, ip
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	22fb      	movs	r2, #251	; 0xfb
 80097b2:	2100      	movs	r1, #0
 80097b4:	0018      	movs	r0, r3
 80097b6:	f005 f9a6 	bl	800eb06 <memset>
	uint8_t *pStr = Str_Array;
 80097ba:	2388      	movs	r3, #136	; 0x88
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	2284      	movs	r2, #132	; 0x84
 80097c2:	0092      	lsls	r2, r2, #2
 80097c4:	18ba      	adds	r2, r7, r2
 80097c6:	6013      	str	r3, [r2, #0]

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80097c8:	4b50      	ldr	r3, [pc, #320]	; (800990c <Paint_DrawNum+0x1c8>)
 80097ca:	889b      	ldrh	r3, [r3, #4]
 80097cc:	4a4a      	ldr	r2, [pc, #296]	; (80098f8 <Paint_DrawNum+0x1b4>)
 80097ce:	2186      	movs	r1, #134	; 0x86
 80097d0:	0089      	lsls	r1, r1, #2
 80097d2:	468c      	mov	ip, r1
 80097d4:	44bc      	add	ip, r7
 80097d6:	4462      	add	r2, ip
 80097d8:	8812      	ldrh	r2, [r2, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d80a      	bhi.n	80097f4 <Paint_DrawNum+0xb0>
 80097de:	4b4b      	ldr	r3, [pc, #300]	; (800990c <Paint_DrawNum+0x1c8>)
 80097e0:	88db      	ldrh	r3, [r3, #6]
 80097e2:	4a46      	ldr	r2, [pc, #280]	; (80098fc <Paint_DrawNum+0x1b8>)
 80097e4:	2186      	movs	r1, #134	; 0x86
 80097e6:	0089      	lsls	r1, r1, #2
 80097e8:	468c      	mov	ip, r1
 80097ea:	44bc      	add	ip, r7
 80097ec:	4462      	add	r2, ip
 80097ee:	8812      	ldrh	r2, [r2, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d927      	bls.n	8009844 <Paint_DrawNum+0x100>
		Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 80097f4:	4b46      	ldr	r3, [pc, #280]	; (8009910 <Paint_DrawNum+0x1cc>)
 80097f6:	0018      	movs	r0, r3
 80097f8:	f005 fac2 	bl	800ed80 <puts>
 80097fc:	e074      	b.n	80098e8 <Paint_DrawNum+0x1a4>
		return;
	}

	//Converts a number to a string
	while (Nummber) {
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	210a      	movs	r1, #10
 8009802:	0018      	movs	r0, r3
 8009804:	f7f6 fdf8 	bl	80003f8 <__aeabi_idivmod>
 8009808:	000b      	movs	r3, r1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	483c      	ldr	r0, [pc, #240]	; (8009900 <Paint_DrawNum+0x1bc>)
 800980e:	183b      	adds	r3, r7, r0
 8009810:	2100      	movs	r1, #0
 8009812:	5e5b      	ldrsh	r3, [r3, r1]
 8009814:	3230      	adds	r2, #48	; 0x30
 8009816:	b2d1      	uxtb	r1, r2
 8009818:	4a3b      	ldr	r2, [pc, #236]	; (8009908 <Paint_DrawNum+0x1c4>)
 800981a:	2486      	movs	r4, #134	; 0x86
 800981c:	00a4      	lsls	r4, r4, #2
 800981e:	46a4      	mov	ip, r4
 8009820:	44bc      	add	ip, r7
 8009822:	4462      	add	r2, ip
 8009824:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8009826:	183b      	adds	r3, r7, r0
 8009828:	2200      	movs	r2, #0
 800982a:	5e9b      	ldrsh	r3, [r3, r2]
 800982c:	b29b      	uxth	r3, r3
 800982e:	3301      	adds	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	183b      	adds	r3, r7, r0
 8009834:	801a      	strh	r2, [r3, #0]
		Nummber /= 10;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	210a      	movs	r1, #10
 800983a:	0018      	movs	r0, r3
 800983c:	f7f6 fcf6 	bl	800022c <__divsi3>
 8009840:	0003      	movs	r3, r0
 8009842:	60bb      	str	r3, [r7, #8]
	while (Nummber) {
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1d9      	bne.n	80097fe <Paint_DrawNum+0xba>
	}

	//The string is inverted
	while (Num_Bit > 0) {
 800984a:	e027      	b.n	800989c <Paint_DrawNum+0x158>
		Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 800984c:	482c      	ldr	r0, [pc, #176]	; (8009900 <Paint_DrawNum+0x1bc>)
 800984e:	183b      	adds	r3, r7, r0
 8009850:	2200      	movs	r2, #0
 8009852:	5e9b      	ldrsh	r3, [r3, r2]
 8009854:	1e5a      	subs	r2, r3, #1
 8009856:	2485      	movs	r4, #133	; 0x85
 8009858:	00a4      	lsls	r4, r4, #2
 800985a:	193b      	adds	r3, r7, r4
 800985c:	2100      	movs	r1, #0
 800985e:	5e5b      	ldrsh	r3, [r3, r1]
 8009860:	4929      	ldr	r1, [pc, #164]	; (8009908 <Paint_DrawNum+0x1c4>)
 8009862:	2586      	movs	r5, #134	; 0x86
 8009864:	00ad      	lsls	r5, r5, #2
 8009866:	46ac      	mov	ip, r5
 8009868:	44bc      	add	ip, r7
 800986a:	4461      	add	r1, ip
 800986c:	5c89      	ldrb	r1, [r1, r2]
 800986e:	4a25      	ldr	r2, [pc, #148]	; (8009904 <Paint_DrawNum+0x1c0>)
 8009870:	2586      	movs	r5, #134	; 0x86
 8009872:	00ad      	lsls	r5, r5, #2
 8009874:	46ac      	mov	ip, r5
 8009876:	44bc      	add	ip, r7
 8009878:	4462      	add	r2, ip
 800987a:	54d1      	strb	r1, [r2, r3]
		Str_Bit++;
 800987c:	193b      	adds	r3, r7, r4
 800987e:	2200      	movs	r2, #0
 8009880:	5e9b      	ldrsh	r3, [r3, r2]
 8009882:	b29b      	uxth	r3, r3
 8009884:	3301      	adds	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	193b      	adds	r3, r7, r4
 800988a:	801a      	strh	r2, [r3, #0]
		Num_Bit--;
 800988c:	183b      	adds	r3, r7, r0
 800988e:	2200      	movs	r2, #0
 8009890:	5e9b      	ldrsh	r3, [r3, r2]
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	183b      	adds	r3, r7, r0
 800989a:	801a      	strh	r2, [r3, #0]
	while (Num_Bit > 0) {
 800989c:	4b18      	ldr	r3, [pc, #96]	; (8009900 <Paint_DrawNum+0x1bc>)
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	2200      	movs	r2, #0
 80098a2:	5e9b      	ldrsh	r3, [r3, r2]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dcd1      	bgt.n	800984c <Paint_DrawNum+0x108>
	}

	//show
	Paint_DrawString_EN(Xpoint, Ypoint, (const char*) pStr, Font,
 80098a8:	687c      	ldr	r4, [r7, #4]
 80098aa:	2384      	movs	r3, #132	; 0x84
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b12      	ldr	r3, [pc, #72]	; (80098fc <Paint_DrawNum+0x1b8>)
 80098b4:	2186      	movs	r1, #134	; 0x86
 80098b6:	0089      	lsls	r1, r1, #2
 80098b8:	468c      	mov	ip, r1
 80098ba:	44bc      	add	ip, r7
 80098bc:	4463      	add	r3, ip
 80098be:	8819      	ldrh	r1, [r3, #0]
 80098c0:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <Paint_DrawNum+0x1b4>)
 80098c2:	2086      	movs	r0, #134	; 0x86
 80098c4:	0080      	lsls	r0, r0, #2
 80098c6:	4684      	mov	ip, r0
 80098c8:	44bc      	add	ip, r7
 80098ca:	4463      	add	r3, ip
 80098cc:	8818      	ldrh	r0, [r3, #0]
 80098ce:	238b      	movs	r3, #139	; 0x8b
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	18fb      	adds	r3, r7, r3
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	238a      	movs	r3, #138	; 0x8a
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	0023      	movs	r3, r4
 80098e4:	f7ff feb0 	bl	8009648 <Paint_DrawString_EN>
			Color_Foreground, Color_Background); //edited by Bart
}
 80098e8:	46bd      	mov	sp, r7
 80098ea:	2386      	movs	r3, #134	; 0x86
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	449d      	add	sp, r3
 80098f0:	bdb0      	pop	{r4, r5, r7, pc}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	fffffde0 	.word	0xfffffde0
 80098f8:	fffffdf6 	.word	0xfffffdf6
 80098fc:	fffffdf4 	.word	0xfffffdf4
 8009900:	00000216 	.word	0x00000216
 8009904:	fffffef8 	.word	0xfffffef8
 8009908:	fffffdf8 	.word	0xfffffdf8
 800990c:	20000520 	.word	0x20000520
 8009910:	080117a8 	.word	0x080117a8

08009914 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800991a:	1d3b      	adds	r3, r7, #4
 800991c:	0018      	movs	r0, r3
 800991e:	230c      	movs	r3, #12
 8009920:	001a      	movs	r2, r3
 8009922:	2100      	movs	r1, #0
 8009924:	f005 f8ef 	bl	800eb06 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009928:	4b2c      	ldr	r3, [pc, #176]	; (80099dc <MX_ADC1_Init+0xc8>)
 800992a:	4a2d      	ldr	r2, [pc, #180]	; (80099e0 <MX_ADC1_Init+0xcc>)
 800992c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800992e:	4b2b      	ldr	r3, [pc, #172]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009930:	2280      	movs	r2, #128	; 0x80
 8009932:	05d2      	lsls	r2, r2, #23
 8009934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009936:	4b29      	ldr	r3, [pc, #164]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009938:	2200      	movs	r2, #0
 800993a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800993c:	4b27      	ldr	r3, [pc, #156]	; (80099dc <MX_ADC1_Init+0xc8>)
 800993e:	2200      	movs	r2, #0
 8009940:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009942:	4b26      	ldr	r3, [pc, #152]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009944:	2200      	movs	r2, #0
 8009946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009948:	4b24      	ldr	r3, [pc, #144]	; (80099dc <MX_ADC1_Init+0xc8>)
 800994a:	2204      	movs	r2, #4
 800994c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800994e:	4b23      	ldr	r3, [pc, #140]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009950:	2200      	movs	r2, #0
 8009952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8009954:	4b21      	ldr	r3, [pc, #132]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009956:	2200      	movs	r2, #0
 8009958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800995a:	4b20      	ldr	r3, [pc, #128]	; (80099dc <MX_ADC1_Init+0xc8>)
 800995c:	2200      	movs	r2, #0
 800995e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8009960:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009962:	2201      	movs	r2, #1
 8009964:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009966:	4b1d      	ldr	r3, [pc, #116]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009968:	2200      	movs	r2, #0
 800996a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800996c:	4b1b      	ldr	r3, [pc, #108]	; (80099dc <MX_ADC1_Init+0xc8>)
 800996e:	2200      	movs	r2, #0
 8009970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009972:	4b1a      	ldr	r3, [pc, #104]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009974:	222c      	movs	r2, #44	; 0x2c
 8009976:	2100      	movs	r1, #0
 8009978:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800997a:	4b18      	ldr	r3, [pc, #96]	; (80099dc <MX_ADC1_Init+0xc8>)
 800997c:	2280      	movs	r2, #128	; 0x80
 800997e:	0152      	lsls	r2, r2, #5
 8009980:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009982:	4b16      	ldr	r3, [pc, #88]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009984:	2200      	movs	r2, #0
 8009986:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8009988:	4b14      	ldr	r3, [pc, #80]	; (80099dc <MX_ADC1_Init+0xc8>)
 800998a:	2200      	movs	r2, #0
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800998e:	4b13      	ldr	r3, [pc, #76]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009990:	223c      	movs	r2, #60	; 0x3c
 8009992:	2100      	movs	r1, #0
 8009994:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009996:	4b11      	ldr	r3, [pc, #68]	; (80099dc <MX_ADC1_Init+0xc8>)
 8009998:	2200      	movs	r2, #0
 800999a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800999c:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <MX_ADC1_Init+0xc8>)
 800999e:	0018      	movs	r0, r3
 80099a0:	f7f9 ff5e 	bl	8003860 <HAL_ADC_Init>
 80099a4:	1e03      	subs	r3, r0, #0
 80099a6:	d001      	beq.n	80099ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80099a8:	f000 fb47 	bl	800a03a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80099ac:	1d3b      	adds	r3, r7, #4
 80099ae:	4a0d      	ldr	r2, [pc, #52]	; (80099e4 <MX_ADC1_Init+0xd0>)
 80099b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80099b2:	1d3b      	adds	r3, r7, #4
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80099b8:	1d3b      	adds	r3, r7, #4
 80099ba:	2200      	movs	r2, #0
 80099bc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80099be:	1d3a      	adds	r2, r7, #4
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <MX_ADC1_Init+0xc8>)
 80099c2:	0011      	movs	r1, r2
 80099c4:	0018      	movs	r0, r3
 80099c6:	f7fa f9e1 	bl	8003d8c <HAL_ADC_ConfigChannel>
 80099ca:	1e03      	subs	r3, r0, #0
 80099cc:	d001      	beq.n	80099d2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80099ce:	f000 fb34 	bl	800a03a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	46bd      	mov	sp, r7
 80099d6:	b004      	add	sp, #16
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	20000538 	.word	0x20000538
 80099e0:	40012400 	.word	0x40012400
 80099e4:	04000002 	.word	0x04000002

080099e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b097      	sub	sp, #92	; 0x5c
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099f0:	2344      	movs	r3, #68	; 0x44
 80099f2:	18fb      	adds	r3, r7, r3
 80099f4:	0018      	movs	r0, r3
 80099f6:	2314      	movs	r3, #20
 80099f8:	001a      	movs	r2, r3
 80099fa:	2100      	movs	r1, #0
 80099fc:	f005 f883 	bl	800eb06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a00:	2410      	movs	r4, #16
 8009a02:	193b      	adds	r3, r7, r4
 8009a04:	0018      	movs	r0, r3
 8009a06:	2334      	movs	r3, #52	; 0x34
 8009a08:	001a      	movs	r2, r3
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f005 f87b 	bl	800eb06 <memset>
  if(adcHandle->Instance==ADC1)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a20      	ldr	r2, [pc, #128]	; (8009a98 <HAL_ADC_MspInit+0xb0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d139      	bne.n	8009a8e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009a1a:	193b      	adds	r3, r7, r4
 8009a1c:	2280      	movs	r2, #128	; 0x80
 8009a1e:	01d2      	lsls	r2, r2, #7
 8009a20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8009a22:	193b      	adds	r3, r7, r4
 8009a24:	2200      	movs	r2, #0
 8009a26:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a28:	193b      	adds	r3, r7, r4
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f7fc fc04 	bl	8006238 <HAL_RCCEx_PeriphCLKConfig>
 8009a30:	1e03      	subs	r3, r0, #0
 8009a32:	d001      	beq.n	8009a38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8009a34:	f000 fb01 	bl	800a03a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009a38:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <HAL_ADC_MspInit+0xb4>)
 8009a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a3c:	4b17      	ldr	r3, [pc, #92]	; (8009a9c <HAL_ADC_MspInit+0xb4>)
 8009a3e:	2180      	movs	r1, #128	; 0x80
 8009a40:	0349      	lsls	r1, r1, #13
 8009a42:	430a      	orrs	r2, r1
 8009a44:	641a      	str	r2, [r3, #64]	; 0x40
 8009a46:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <HAL_ADC_MspInit+0xb4>)
 8009a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a4a:	2380      	movs	r3, #128	; 0x80
 8009a4c:	035b      	lsls	r3, r3, #13
 8009a4e:	4013      	ands	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a54:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <HAL_ADC_MspInit+0xb4>)
 8009a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <HAL_ADC_MspInit+0xb4>)
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8009a60:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <HAL_ADC_MspInit+0xb4>)
 8009a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a64:	2201      	movs	r2, #1
 8009a66:	4013      	ands	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BATT_Pin;
 8009a6c:	2144      	movs	r1, #68	; 0x44
 8009a6e:	187b      	adds	r3, r7, r1
 8009a70:	2202      	movs	r2, #2
 8009a72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009a74:	187b      	adds	r3, r7, r1
 8009a76:	2203      	movs	r2, #3
 8009a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7a:	187b      	adds	r3, r7, r1
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 8009a80:	187a      	adds	r2, r7, r1
 8009a82:	23a0      	movs	r3, #160	; 0xa0
 8009a84:	05db      	lsls	r3, r3, #23
 8009a86:	0011      	movs	r1, r2
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f7fa fe6f 	bl	800476c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009a8e:	46c0      	nop			; (mov r8, r8)
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b017      	add	sp, #92	; 0x5c
 8009a94:	bd90      	pop	{r4, r7, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	40012400 	.word	0x40012400
 8009a9c:	40021000 	.word	0x40021000

08009aa0 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2218      	movs	r2, #24
 8009ab0:	4393      	bics	r3, r2
 8009ab2:	001a      	movs	r2, r3
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	609a      	str	r2, [r3, #8]
}
 8009abc:	46c0      	nop			; (mov r8, r8)
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2260      	movs	r2, #96	; 0x60
 8009ad4:	4393      	bics	r3, r2
 8009ad6:	001a      	movs	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	609a      	str	r2, [r3, #8]
}
 8009ae0:	46c0      	nop			; (mov r8, r8)
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b002      	add	sp, #8
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	2280      	movs	r2, #128	; 0x80
 8009af8:	4393      	bics	r3, r2
 8009afa:	001a      	movs	r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	609a      	str	r2, [r3, #8]
}
 8009b04:	46c0      	nop			; (mov r8, r8)
 8009b06:	46bd      	mov	sp, r7
 8009b08:	b002      	add	sp, #8
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	611a      	str	r2, [r3, #16]
}
 8009b1c:	46c0      	nop			; (mov r8, r8)
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	b002      	add	sp, #8
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	615a      	str	r2, [r3, #20]
}
 8009b34:	46c0      	nop			; (mov r8, r8)
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b002      	add	sp, #8
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009b46:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009b48:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <LL_AHB1_GRP1_EnableClock+0x28>)
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	4013      	ands	r3, r2
 8009b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
}
 8009b5c:	46c0      	nop			; (mov r8, r8)
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b004      	add	sp, #16
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	40021000 	.word	0x40021000

08009b68 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	015b      	lsls	r3, r3, #5
 8009b70:	0018      	movs	r0, r3
 8009b72:	f7ff ffe3 	bl	8009b3c <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 8009b76:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <MX_CRC_Init+0x4c>)
 8009b78:	2100      	movs	r1, #0
 8009b7a:	0018      	movs	r0, r3
 8009b7c:	f7ff ffa2 	bl	8009ac4 <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <MX_CRC_Init+0x4c>)
 8009b82:	2100      	movs	r1, #0
 8009b84:	0018      	movs	r0, r3
 8009b86:	f7ff ffaf 	bl	8009ae8 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 8009b8a:	4a0b      	ldr	r2, [pc, #44]	; (8009bb8 <MX_CRC_Init+0x50>)
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <MX_CRC_Init+0x4c>)
 8009b8e:	0011      	movs	r1, r2
 8009b90:	0018      	movs	r0, r3
 8009b92:	f7ff ffc7 	bl	8009b24 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 8009b96:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <MX_CRC_Init+0x4c>)
 8009b98:	2100      	movs	r1, #0
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	f7ff ff80 	bl	8009aa0 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	425b      	negs	r3, r3
 8009ba4:	4a03      	ldr	r2, [pc, #12]	; (8009bb4 <MX_CRC_Init+0x4c>)
 8009ba6:	0019      	movs	r1, r3
 8009ba8:	0010      	movs	r0, r2
 8009baa:	f7ff ffaf 	bl	8009b0c <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40023000 	.word	0x40023000
 8009bb8:	04c11db7 	.word	0x04c11db7

08009bbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc2:	240c      	movs	r4, #12
 8009bc4:	193b      	adds	r3, r7, r4
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	2314      	movs	r3, #20
 8009bca:	001a      	movs	r2, r3
 8009bcc:	2100      	movs	r1, #0
 8009bce:	f004 ff9a 	bl	800eb06 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009bd2:	4b48      	ldr	r3, [pc, #288]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd6:	4b47      	ldr	r3, [pc, #284]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009bd8:	2104      	movs	r1, #4
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8009bde:	4b45      	ldr	r3, [pc, #276]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	2204      	movs	r2, #4
 8009be4:	4013      	ands	r3, r2
 8009be6:	60bb      	str	r3, [r7, #8]
 8009be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bea:	4b42      	ldr	r3, [pc, #264]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bee:	4b41      	ldr	r3, [pc, #260]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8009bf6:	4b3f      	ldr	r3, [pc, #252]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	607b      	str	r3, [r7, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c02:	4b3c      	ldr	r3, [pc, #240]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c06:	4b3b      	ldr	r3, [pc, #236]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009c08:	2102      	movs	r1, #2
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8009c0e:	4b39      	ldr	r3, [pc, #228]	; (8009cf4 <MX_GPIO_Init+0x138>)
 8009c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c12:	2202      	movs	r2, #2
 8009c14:	4013      	ands	r3, r2
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8009c1a:	23e0      	movs	r3, #224	; 0xe0
 8009c1c:	00d9      	lsls	r1, r3, #3
 8009c1e:	23a0      	movs	r3, #160	; 0xa0
 8009c20:	05db      	lsls	r3, r3, #23
 8009c22:	2200      	movs	r2, #0
 8009c24:	0018      	movs	r0, r3
 8009c26:	f7fa ff22 	bl	8004a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, GPIO_PIN_RESET);
 8009c2a:	4b33      	ldr	r3, [pc, #204]	; (8009cf8 <MX_GPIO_Init+0x13c>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2140      	movs	r1, #64	; 0x40
 8009c30:	0018      	movs	r0, r3
 8009c32:	f7fa ff1c 	bl	8004a6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_START_Pin|BUTTON_SET_Pin|BUTTON_RESET_Pin;
 8009c36:	193b      	adds	r3, r7, r4
 8009c38:	221c      	movs	r2, #28
 8009c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009c3c:	193b      	adds	r3, r7, r4
 8009c3e:	2284      	movs	r2, #132	; 0x84
 8009c40:	0392      	lsls	r2, r2, #14
 8009c42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c44:	193b      	adds	r3, r7, r4
 8009c46:	2201      	movs	r2, #1
 8009c48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c4a:	193a      	adds	r2, r7, r4
 8009c4c:	23a0      	movs	r3, #160	; 0xa0
 8009c4e:	05db      	lsls	r3, r3, #23
 8009c50:	0011      	movs	r1, r2
 8009c52:	0018      	movs	r0, r3
 8009c54:	f7fa fd8a 	bl	800476c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DC_Pin|RST_Pin;
 8009c58:	0021      	movs	r1, r4
 8009c5a:	187b      	adds	r3, r7, r1
 8009c5c:	22e0      	movs	r2, #224	; 0xe0
 8009c5e:	00d2      	lsls	r2, r2, #3
 8009c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c62:	000c      	movs	r4, r1
 8009c64:	193b      	adds	r3, r7, r4
 8009c66:	2201      	movs	r2, #1
 8009c68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6a:	193b      	adds	r3, r7, r4
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c70:	193b      	adds	r3, r7, r4
 8009c72:	2200      	movs	r2, #0
 8009c74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c76:	193a      	adds	r2, r7, r4
 8009c78:	23a0      	movs	r3, #160	; 0xa0
 8009c7a:	05db      	lsls	r3, r3, #23
 8009c7c:	0011      	movs	r1, r2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7fa fd74 	bl	800476c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8009c84:	193b      	adds	r3, r7, r4
 8009c86:	2280      	movs	r2, #128	; 0x80
 8009c88:	0152      	lsls	r2, r2, #5
 8009c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c8c:	193b      	adds	r3, r7, r4
 8009c8e:	2200      	movs	r2, #0
 8009c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c92:	193b      	adds	r3, r7, r4
 8009c94:	2200      	movs	r2, #0
 8009c96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8009c98:	193a      	adds	r2, r7, r4
 8009c9a:	23a0      	movs	r3, #160	; 0xa0
 8009c9c:	05db      	lsls	r3, r3, #23
 8009c9e:	0011      	movs	r1, r2
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	f7fa fd63 	bl	800476c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WKUP_Pin;
 8009ca6:	0021      	movs	r1, r4
 8009ca8:	187b      	adds	r3, r7, r1
 8009caa:	2240      	movs	r2, #64	; 0x40
 8009cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cae:	187b      	adds	r3, r7, r1
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cb4:	187b      	adds	r3, r7, r1
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cba:	187b      	adds	r3, r7, r1
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_WKUP_GPIO_Port, &GPIO_InitStruct);
 8009cc0:	187b      	adds	r3, r7, r1
 8009cc2:	4a0d      	ldr	r2, [pc, #52]	; (8009cf8 <MX_GPIO_Init+0x13c>)
 8009cc4:	0019      	movs	r1, r3
 8009cc6:	0010      	movs	r0, r2
 8009cc8:	f7fa fd50 	bl	800476c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	2006      	movs	r0, #6
 8009cd2:	f7fa fd19 	bl	8004708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8009cd6:	2006      	movs	r0, #6
 8009cd8:	f7fa fd2b 	bl	8004732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	2007      	movs	r0, #7
 8009ce2:	f7fa fd11 	bl	8004708 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009ce6:	2007      	movs	r0, #7
 8009ce8:	f7fa fd23 	bl	8004732 <HAL_NVIC_EnableIRQ>

}
 8009cec:	46c0      	nop			; (mov r8, r8)
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	b009      	add	sp, #36	; 0x24
 8009cf2:	bd90      	pop	{r4, r7, pc}
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	50000400 	.word	0x50000400

08009cfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009d00:	4b1b      	ldr	r3, [pc, #108]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d02:	4a1c      	ldr	r2, [pc, #112]	; (8009d74 <MX_I2C1_Init+0x78>)
 8009d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8009d06:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d08:	4a1b      	ldr	r2, [pc, #108]	; (8009d78 <MX_I2C1_Init+0x7c>)
 8009d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009d0c:	4b18      	ldr	r3, [pc, #96]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d12:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009d1e:	4b14      	ldr	r3, [pc, #80]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009d24:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d2a:	4b11      	ldr	r3, [pc, #68]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009d36:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f7fa fee9 	bl	8004b10 <HAL_I2C_Init>
 8009d3e:	1e03      	subs	r3, r0, #0
 8009d40:	d001      	beq.n	8009d46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009d42:	f000 f97a 	bl	800a03a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009d46:	4b0a      	ldr	r3, [pc, #40]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d48:	2100      	movs	r1, #0
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	f7fb fcc0 	bl	80056d0 <HAL_I2CEx_ConfigAnalogFilter>
 8009d50:	1e03      	subs	r3, r0, #0
 8009d52:	d001      	beq.n	8009d58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009d54:	f000 f971 	bl	800a03a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <MX_I2C1_Init+0x74>)
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	f7fb fd03 	bl	8005768 <HAL_I2CEx_ConfigDigitalFilter>
 8009d62:	1e03      	subs	r3, r0, #0
 8009d64:	d001      	beq.n	8009d6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009d66:	f000 f968 	bl	800a03a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	2000059c 	.word	0x2000059c
 8009d74:	40005400 	.word	0x40005400
 8009d78:	00602173 	.word	0x00602173

08009d7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b097      	sub	sp, #92	; 0x5c
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d84:	2344      	movs	r3, #68	; 0x44
 8009d86:	18fb      	adds	r3, r7, r3
 8009d88:	0018      	movs	r0, r3
 8009d8a:	2314      	movs	r3, #20
 8009d8c:	001a      	movs	r2, r3
 8009d8e:	2100      	movs	r1, #0
 8009d90:	f004 feb9 	bl	800eb06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d94:	2410      	movs	r4, #16
 8009d96:	193b      	adds	r3, r7, r4
 8009d98:	0018      	movs	r0, r3
 8009d9a:	2334      	movs	r3, #52	; 0x34
 8009d9c:	001a      	movs	r2, r3
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f004 feb1 	bl	800eb06 <memset>
  if(i2cHandle->Instance==I2C1)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a22      	ldr	r2, [pc, #136]	; (8009e34 <HAL_I2C_MspInit+0xb8>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d13e      	bne.n	8009e2c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009dae:	193b      	adds	r3, r7, r4
 8009db0:	2220      	movs	r2, #32
 8009db2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009db4:	193b      	adds	r3, r7, r4
 8009db6:	2200      	movs	r2, #0
 8009db8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009dba:	193b      	adds	r3, r7, r4
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7fc fa3b 	bl	8006238 <HAL_RCCEx_PeriphCLKConfig>
 8009dc2:	1e03      	subs	r3, r0, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8009dc6:	f000 f938 	bl	800a03a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dca:	4b1b      	ldr	r3, [pc, #108]	; (8009e38 <HAL_I2C_MspInit+0xbc>)
 8009dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dce:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <HAL_I2C_MspInit+0xbc>)
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <HAL_I2C_MspInit+0xbc>)
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dda:	2202      	movs	r2, #2
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009de2:	2144      	movs	r1, #68	; 0x44
 8009de4:	187b      	adds	r3, r7, r1
 8009de6:	22c0      	movs	r2, #192	; 0xc0
 8009de8:	0052      	lsls	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009dec:	187b      	adds	r3, r7, r1
 8009dee:	2212      	movs	r2, #18
 8009df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df2:	187b      	adds	r3, r7, r1
 8009df4:	2200      	movs	r2, #0
 8009df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009df8:	187b      	adds	r3, r7, r1
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8009dfe:	187b      	adds	r3, r7, r1
 8009e00:	2206      	movs	r2, #6
 8009e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e04:	187b      	adds	r3, r7, r1
 8009e06:	4a0d      	ldr	r2, [pc, #52]	; (8009e3c <HAL_I2C_MspInit+0xc0>)
 8009e08:	0019      	movs	r1, r3
 8009e0a:	0010      	movs	r0, r2
 8009e0c:	f7fa fcae 	bl	800476c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009e10:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <HAL_I2C_MspInit+0xbc>)
 8009e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e14:	4b08      	ldr	r3, [pc, #32]	; (8009e38 <HAL_I2C_MspInit+0xbc>)
 8009e16:	2180      	movs	r1, #128	; 0x80
 8009e18:	0389      	lsls	r1, r1, #14
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e1e:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <HAL_I2C_MspInit+0xbc>)
 8009e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e22:	2380      	movs	r3, #128	; 0x80
 8009e24:	039b      	lsls	r3, r3, #14
 8009e26:	4013      	ands	r3, r2
 8009e28:	60bb      	str	r3, [r7, #8]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8009e2c:	46c0      	nop			; (mov r8, r8)
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	b017      	add	sp, #92	; 0x5c
 8009e32:	bd90      	pop	{r4, r7, pc}
 8009e34:	40005400 	.word	0x40005400
 8009e38:	40021000 	.word	0x40021000
 8009e3c:	50000400 	.word	0x50000400

08009e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e46:	f7f9 fad7 	bl	80033f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e4a:	f000 f895 	bl	8009f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e4e:	f7ff feb5 	bl	8009bbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8009e52:	f7ff fd5f 	bl	8009914 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009e56:	f7ff ff51 	bl	8009cfc <MX_I2C1_Init>
  MX_RTC_Init();
 8009e5a:	f000 f8f3 	bl	800a044 <MX_RTC_Init>
  MX_SPI1_Init();
 8009e5e:	f000 f9ad 	bl	800a1bc <MX_SPI1_Init>
  MX_TIM3_Init();
 8009e62:	f000 fb65 	bl	800a530 <MX_TIM3_Init>
  MX_CRC_Init();
 8009e66:	f7ff fe7f 	bl	8009b68 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	rtcInit(&chrono);
 8009e6a:	4b3c      	ldr	r3, [pc, #240]	; (8009f5c <main+0x11c>)
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f001 fb31 	bl	800b4d4 <rtcInit>
	lis3mdlInit(&magnetometer, &hi2c1);
 8009e72:	4a3b      	ldr	r2, [pc, #236]	; (8009f60 <main+0x120>)
 8009e74:	4b3b      	ldr	r3, [pc, #236]	; (8009f64 <main+0x124>)
 8009e76:	0011      	movs	r1, r2
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f001 f8db 	bl	800b034 <lis3mdlInit>
	bme280Init(&atmospherical, &hi2c1);
 8009e7e:	4a38      	ldr	r2, [pc, #224]	; (8009f60 <main+0x120>)
 8009e80:	4b39      	ldr	r3, [pc, #228]	; (8009f68 <main+0x128>)
 8009e82:	0011      	movs	r1, r2
 8009e84:	0018      	movs	r0, r3
 8009e86:	f000 fbd1 	bl	800a62c <bme280Init>
	interfaceInit(&interface);
 8009e8a:	4b38      	ldr	r3, [pc, #224]	; (8009f6c <main+0x12c>)
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f002 f981 	bl	800c194 <interfaceInit>
	interfaceSettingsInit(&settings);
 8009e92:	4b37      	ldr	r3, [pc, #220]	; (8009f70 <main+0x130>)
 8009e94:	0018      	movs	r0, r3
 8009e96:	f002 fa5d 	bl	800c354 <interfaceSettingsInit>
	watchInit(&watch);
 8009e9a:	4b36      	ldr	r3, [pc, #216]	; (8009f74 <main+0x134>)
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f004 fd93 	bl	800e9c8 <watchInit>
	timersInit();
 8009ea2:	f004 fd85 	bl	800e9b0 <timersInit>
	batteryCheckInit();
 8009ea6:	f002 f827 	bl	800bef8 <batteryCheckInit>

	rtcGetTime(&chrono);
 8009eaa:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <main+0x11c>)
 8009eac:	0018      	movs	r0, r3
 8009eae:	f001 fb39 	bl	800b524 <rtcGetTime>
	lis3mdlRead(&magnetometer);
 8009eb2:	4b2c      	ldr	r3, [pc, #176]	; (8009f64 <main+0x124>)
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f001 f8fb 	bl	800b0b0 <lis3mdlRead>
	bme280Read(&atmospherical);
 8009eba:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <main+0x128>)
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f000 fd0b 	bl	800a8d8 <bme280Read>

	interfaceClear(&interface);
 8009ec2:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <main+0x12c>)
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f002 faf7 	bl	800c4b8 <interfaceClear>
	interfaceUpdateModeSwitch(&interface, INTERFACE_UPDATE_MODE_PARTIAL);
 8009eca:	4b28      	ldr	r3, [pc, #160]	; (8009f6c <main+0x12c>)
 8009ecc:	2101      	movs	r1, #1
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f002 fa98 	bl	800c404 <interfaceUpdateModeSwitch>
  /* USER CODE BEGIN WHILE */
	while (1) {

//		HAL_GPIO_TogglePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin);

		rtcGetTime(&chrono);
 8009ed4:	4b21      	ldr	r3, [pc, #132]	; (8009f5c <main+0x11c>)
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f001 fb24 	bl	800b524 <rtcGetTime>
		lis3mdlRead(&magnetometer);
 8009edc:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <main+0x124>)
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f001 f8e6 	bl	800b0b0 <lis3mdlRead>
		lis3mdlGetCalibrationSample(&magnetometer);
 8009ee4:	4b1f      	ldr	r3, [pc, #124]	; (8009f64 <main+0x124>)
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	f001 fa4e 	bl	800b388 <lis3mdlGetCalibrationSample>
		bme280Read(&atmospherical);
 8009eec:	4b1e      	ldr	r3, [pc, #120]	; (8009f68 <main+0x128>)
 8009eee:	0018      	movs	r0, r3
 8009ef0:	f000 fcf2 	bl	800a8d8 <bme280Read>
		batteryReadState();
 8009ef4:	f002 f80c 	bl	800bf10 <batteryReadState>

		if (watch.mode == WATCH_MODE_NORMAL) {
 8009ef8:	4b1e      	ldr	r3, [pc, #120]	; (8009f74 <main+0x134>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10d      	bne.n	8009f1c <main+0xdc>
			interfaceClear(&interface);
 8009f00:	4b1a      	ldr	r3, [pc, #104]	; (8009f6c <main+0x12c>)
 8009f02:	0018      	movs	r0, r3
 8009f04:	f002 fad8 	bl	800c4b8 <interfaceClear>
			interfaceDraw(&interface, &chrono, &magnetometer, &atmospherical,
 8009f08:	4c17      	ldr	r4, [pc, #92]	; (8009f68 <main+0x128>)
 8009f0a:	4a16      	ldr	r2, [pc, #88]	; (8009f64 <main+0x124>)
 8009f0c:	4913      	ldr	r1, [pc, #76]	; (8009f5c <main+0x11c>)
 8009f0e:	4817      	ldr	r0, [pc, #92]	; (8009f6c <main+0x12c>)
 8009f10:	4b18      	ldr	r3, [pc, #96]	; (8009f74 <main+0x134>)
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	0023      	movs	r3, r4
 8009f16:	f002 faef 	bl	800c4f8 <interfaceDraw>
 8009f1a:	e010      	b.n	8009f3e <main+0xfe>
					&watch);
		} else if (watch.mode == WATCH_MODE_SETTINGS) {
 8009f1c:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <main+0x134>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d10c      	bne.n	8009f3e <main+0xfe>
			interfaceSettingsClear(&settings);
 8009f24:	4b12      	ldr	r3, [pc, #72]	; (8009f70 <main+0x130>)
 8009f26:	0018      	movs	r0, r3
 8009f28:	f002 fad6 	bl	800c4d8 <interfaceSettingsClear>
			interfaceSettingsDraw(&settings, &chrono, &magnetometer,
 8009f2c:	4c0e      	ldr	r4, [pc, #56]	; (8009f68 <main+0x128>)
 8009f2e:	4a0d      	ldr	r2, [pc, #52]	; (8009f64 <main+0x124>)
 8009f30:	490a      	ldr	r1, [pc, #40]	; (8009f5c <main+0x11c>)
 8009f32:	480f      	ldr	r0, [pc, #60]	; (8009f70 <main+0x130>)
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <main+0x134>)
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	0023      	movs	r3, r4
 8009f3a:	f004 f945 	bl	800e1c8 <interfaceSettingsDraw>
					&atmospherical, &watch);
		}

		interfaceBurn(&interface);
 8009f3e:	4b0b      	ldr	r3, [pc, #44]	; (8009f6c <main+0x12c>)
 8009f40:	0018      	movs	r0, r3
 8009f42:	f002 fa96 	bl	800c472 <interfaceBurn>

		if (watch.mode == WATCH_MODE_NORMAL
 8009f46:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <main+0x134>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1c2      	bne.n	8009ed4 <main+0x94>
				&& watch.counterDontSleepTimer >= WATCH_TIME_DONT_SLEEP) {
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <main+0x134>)
 8009f50:	789b      	ldrb	r3, [r3, #2]
 8009f52:	2b3b      	cmp	r3, #59	; 0x3b
 8009f54:	d9be      	bls.n	8009ed4 <main+0x94>
			goodNight();
 8009f56:	f004 fcd1 	bl	800e8fc <goodNight>
		rtcGetTime(&chrono);
 8009f5a:	e7bb      	b.n	8009ed4 <main+0x94>
 8009f5c:	200000b8 	.word	0x200000b8
 8009f60:	2000059c 	.word	0x2000059c
 8009f64:	200000e0 	.word	0x200000e0
 8009f68:	20000368 	.word	0x20000368
 8009f6c:	200003b8 	.word	0x200003b8
 8009f70:	200004e4 	.word	0x200004e4
 8009f74:	20000508 	.word	0x20000508

08009f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f78:	b590      	push	{r4, r7, lr}
 8009f7a:	b093      	sub	sp, #76	; 0x4c
 8009f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f7e:	2410      	movs	r4, #16
 8009f80:	193b      	adds	r3, r7, r4
 8009f82:	0018      	movs	r0, r3
 8009f84:	2338      	movs	r3, #56	; 0x38
 8009f86:	001a      	movs	r2, r3
 8009f88:	2100      	movs	r1, #0
 8009f8a:	f004 fdbc 	bl	800eb06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f8e:	003b      	movs	r3, r7
 8009f90:	0018      	movs	r0, r3
 8009f92:	2310      	movs	r3, #16
 8009f94:	001a      	movs	r2, r3
 8009f96:	2100      	movs	r1, #0
 8009f98:	f004 fdb5 	bl	800eb06 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f9c:	2380      	movs	r3, #128	; 0x80
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f7fb fc65 	bl	8005870 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009fa6:	193b      	adds	r3, r7, r4
 8009fa8:	220a      	movs	r2, #10
 8009faa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009fac:	193b      	adds	r3, r7, r4
 8009fae:	2280      	movs	r2, #128	; 0x80
 8009fb0:	0052      	lsls	r2, r2, #1
 8009fb2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8009fb4:	0021      	movs	r1, r4
 8009fb6:	187b      	adds	r3, r7, r1
 8009fb8:	2200      	movs	r2, #0
 8009fba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009fbc:	187b      	adds	r3, r7, r1
 8009fbe:	2240      	movs	r2, #64	; 0x40
 8009fc0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009fc2:	187b      	adds	r3, r7, r1
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009fc8:	187b      	adds	r3, r7, r1
 8009fca:	2202      	movs	r2, #2
 8009fcc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009fce:	187b      	adds	r3, r7, r1
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8009fd4:	187b      	adds	r3, r7, r1
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	2208      	movs	r2, #8
 8009fde:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009fe0:	187b      	adds	r3, r7, r1
 8009fe2:	2280      	movs	r2, #128	; 0x80
 8009fe4:	0292      	lsls	r2, r2, #10
 8009fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009fe8:	187b      	adds	r3, r7, r1
 8009fea:	2280      	movs	r2, #128	; 0x80
 8009fec:	0492      	lsls	r2, r2, #18
 8009fee:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009ff0:	187b      	adds	r3, r7, r1
 8009ff2:	2280      	movs	r2, #128	; 0x80
 8009ff4:	0592      	lsls	r2, r2, #22
 8009ff6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009ff8:	187b      	adds	r3, r7, r1
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7fb fc78 	bl	80058f0 <HAL_RCC_OscConfig>
 800a000:	1e03      	subs	r3, r0, #0
 800a002:	d001      	beq.n	800a008 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800a004:	f000 f819 	bl	800a03a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a008:	003b      	movs	r3, r7
 800a00a:	2207      	movs	r2, #7
 800a00c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a00e:	003b      	movs	r3, r7
 800a010:	2202      	movs	r2, #2
 800a012:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a014:	003b      	movs	r3, r7
 800a016:	2200      	movs	r2, #0
 800a018:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a01a:	003b      	movs	r3, r7
 800a01c:	2200      	movs	r2, #0
 800a01e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a020:	003b      	movs	r3, r7
 800a022:	2102      	movs	r1, #2
 800a024:	0018      	movs	r0, r3
 800a026:	f7fb ff7d 	bl	8005f24 <HAL_RCC_ClockConfig>
 800a02a:	1e03      	subs	r3, r0, #0
 800a02c:	d001      	beq.n	800a032 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800a02e:	f000 f804 	bl	800a03a <Error_Handler>
  }
}
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	46bd      	mov	sp, r7
 800a036:	b013      	add	sp, #76	; 0x4c
 800a038:	bd90      	pop	{r4, r7, pc}

0800a03a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a03e:	b672      	cpsid	i
}
 800a040:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800a042:	e7fe      	b.n	800a042 <Error_Handler+0x8>

0800a044 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a04a:	1d3b      	adds	r3, r7, #4
 800a04c:	0018      	movs	r0, r3
 800a04e:	2314      	movs	r3, #20
 800a050:	001a      	movs	r2, r3
 800a052:	2100      	movs	r1, #0
 800a054:	f004 fd57 	bl	800eb06 <memset>
  RTC_DateTypeDef sDate = {0};
 800a058:	003b      	movs	r3, r7
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a05e:	4b32      	ldr	r3, [pc, #200]	; (800a128 <MX_RTC_Init+0xe4>)
 800a060:	4a32      	ldr	r2, [pc, #200]	; (800a12c <MX_RTC_Init+0xe8>)
 800a062:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a064:	4b30      	ldr	r3, [pc, #192]	; (800a128 <MX_RTC_Init+0xe4>)
 800a066:	2200      	movs	r2, #0
 800a068:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800a06a:	4b2f      	ldr	r3, [pc, #188]	; (800a128 <MX_RTC_Init+0xe4>)
 800a06c:	227f      	movs	r2, #127	; 0x7f
 800a06e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800a070:	4b2d      	ldr	r3, [pc, #180]	; (800a128 <MX_RTC_Init+0xe4>)
 800a072:	22ff      	movs	r2, #255	; 0xff
 800a074:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a076:	4b2c      	ldr	r3, [pc, #176]	; (800a128 <MX_RTC_Init+0xe4>)
 800a078:	2200      	movs	r2, #0
 800a07a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a07c:	4b2a      	ldr	r3, [pc, #168]	; (800a128 <MX_RTC_Init+0xe4>)
 800a07e:	2200      	movs	r2, #0
 800a080:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a082:	4b29      	ldr	r3, [pc, #164]	; (800a128 <MX_RTC_Init+0xe4>)
 800a084:	2200      	movs	r2, #0
 800a086:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a088:	4b27      	ldr	r3, [pc, #156]	; (800a128 <MX_RTC_Init+0xe4>)
 800a08a:	2280      	movs	r2, #128	; 0x80
 800a08c:	05d2      	lsls	r2, r2, #23
 800a08e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <MX_RTC_Init+0xe4>)
 800a092:	2200      	movs	r2, #0
 800a094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a096:	4b24      	ldr	r3, [pc, #144]	; (800a128 <MX_RTC_Init+0xe4>)
 800a098:	0018      	movs	r0, r3
 800a09a:	f7fc fa85 	bl	80065a8 <HAL_RTC_Init>
 800a09e:	1e03      	subs	r3, r0, #0
 800a0a0:	d001      	beq.n	800a0a6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800a0a2:	f7ff ffca 	bl	800a03a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	220a      	movs	r2, #10
 800a0aa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 800a0ac:	1d3b      	adds	r3, r7, #4
 800a0ae:	220a      	movs	r2, #10
 800a0b0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800a0b2:	1d3b      	adds	r3, r7, #4
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800a0b8:	1d3b      	adds	r3, r7, #4
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a0be:	1d3b      	adds	r3, r7, #4
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a0c4:	1d3b      	adds	r3, r7, #4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a0ca:	1d39      	adds	r1, r7, #4
 800a0cc:	4b16      	ldr	r3, [pc, #88]	; (800a128 <MX_RTC_Init+0xe4>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7fc faff 	bl	80066d4 <HAL_RTC_SetTime>
 800a0d6:	1e03      	subs	r3, r0, #0
 800a0d8:	d001      	beq.n	800a0de <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800a0da:	f7ff ffae 	bl	800a03a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800a0de:	003b      	movs	r3, r7
 800a0e0:	2206      	movs	r2, #6
 800a0e2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800a0e4:	003b      	movs	r3, r7
 800a0e6:	2211      	movs	r2, #17
 800a0e8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 12;
 800a0ea:	003b      	movs	r3, r7
 800a0ec:	220c      	movs	r2, #12
 800a0ee:	709a      	strb	r2, [r3, #2]
  sDate.Year = 22;
 800a0f0:	003b      	movs	r3, r7
 800a0f2:	2216      	movs	r2, #22
 800a0f4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a0f6:	0039      	movs	r1, r7
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <MX_RTC_Init+0xe4>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7fc fbed 	bl	80068dc <HAL_RTC_SetDate>
 800a102:	1e03      	subs	r3, r0, #0
 800a104:	d001      	beq.n	800a10a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800a106:	f7ff ff98 	bl	800a03a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800a10a:	4b07      	ldr	r3, [pc, #28]	; (800a128 <MX_RTC_Init+0xe4>)
 800a10c:	2204      	movs	r2, #4
 800a10e:	213c      	movs	r1, #60	; 0x3c
 800a110:	0018      	movs	r0, r3
 800a112:	f7fc fdb7 	bl	8006c84 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a116:	1e03      	subs	r3, r0, #0
 800a118:	d001      	beq.n	800a11e <MX_RTC_Init+0xda>
  {
    Error_Handler();
 800a11a:	f7ff ff8e 	bl	800a03a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a11e:	46c0      	nop			; (mov r8, r8)
 800a120:	46bd      	mov	sp, r7
 800a122:	b006      	add	sp, #24
 800a124:	bd80      	pop	{r7, pc}
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	20000604 	.word	0x20000604
 800a12c:	40002800 	.word	0x40002800

0800a130 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b091      	sub	sp, #68	; 0x44
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a138:	240c      	movs	r4, #12
 800a13a:	193b      	adds	r3, r7, r4
 800a13c:	0018      	movs	r0, r3
 800a13e:	2334      	movs	r3, #52	; 0x34
 800a140:	001a      	movs	r2, r3
 800a142:	2100      	movs	r1, #0
 800a144:	f004 fcdf 	bl	800eb06 <memset>
  if(rtcHandle->Instance==RTC)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a19      	ldr	r2, [pc, #100]	; (800a1b4 <HAL_RTC_MspInit+0x84>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d12c      	bne.n	800a1ac <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a152:	193b      	adds	r3, r7, r4
 800a154:	2280      	movs	r2, #128	; 0x80
 800a156:	0292      	lsls	r2, r2, #10
 800a158:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a15a:	193b      	adds	r3, r7, r4
 800a15c:	2280      	movs	r2, #128	; 0x80
 800a15e:	0092      	lsls	r2, r2, #2
 800a160:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a162:	193b      	adds	r3, r7, r4
 800a164:	0018      	movs	r0, r3
 800a166:	f7fc f867 	bl	8006238 <HAL_RCCEx_PeriphCLKConfig>
 800a16a:	1e03      	subs	r3, r0, #0
 800a16c:	d001      	beq.n	800a172 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800a16e:	f7ff ff64 	bl	800a03a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a172:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_RTC_MspInit+0x88>)
 800a174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <HAL_RTC_MspInit+0x88>)
 800a178:	2180      	movs	r1, #128	; 0x80
 800a17a:	0209      	lsls	r1, r1, #8
 800a17c:	430a      	orrs	r2, r1
 800a17e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a180:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <HAL_RTC_MspInit+0x88>)
 800a182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <HAL_RTC_MspInit+0x88>)
 800a186:	2180      	movs	r1, #128	; 0x80
 800a188:	00c9      	lsls	r1, r1, #3
 800a18a:	430a      	orrs	r2, r1
 800a18c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a18e:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <HAL_RTC_MspInit+0x88>)
 800a190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a192:	2380      	movs	r3, #128	; 0x80
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	4013      	ands	r3, r2
 800a198:	60bb      	str	r3, [r7, #8]
 800a19a:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a19c:	2200      	movs	r2, #0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	2002      	movs	r0, #2
 800a1a2:	f7fa fab1 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800a1a6:	2002      	movs	r0, #2
 800a1a8:	f7fa fac3 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a1ac:	46c0      	nop			; (mov r8, r8)
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b011      	add	sp, #68	; 0x44
 800a1b2:	bd90      	pop	{r4, r7, pc}
 800a1b4:	40002800 	.word	0x40002800
 800a1b8:	40021000 	.word	0x40021000

0800a1bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a1c0:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1c2:	4a1c      	ldr	r2, [pc, #112]	; (800a234 <MX_SPI1_Init+0x78>)
 800a1c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a1c6:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1c8:	2282      	movs	r2, #130	; 0x82
 800a1ca:	0052      	lsls	r2, r2, #1
 800a1cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1d6:	22e0      	movs	r2, #224	; 0xe0
 800a1d8:	00d2      	lsls	r2, r2, #3
 800a1da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a1e2:	4b13      	ldr	r3, [pc, #76]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a1e8:	4b11      	ldr	r3, [pc, #68]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1ea:	2280      	movs	r2, #128	; 0x80
 800a1ec:	0092      	lsls	r2, r2, #2
 800a1ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1f2:	2208      	movs	r2, #8
 800a1f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a1f6:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <MX_SPI1_Init+0x74>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <MX_SPI1_Init+0x74>)
 800a204:	2200      	movs	r2, #0
 800a206:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a208:	4b09      	ldr	r3, [pc, #36]	; (800a230 <MX_SPI1_Init+0x74>)
 800a20a:	2207      	movs	r2, #7
 800a20c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a20e:	4b08      	ldr	r3, [pc, #32]	; (800a230 <MX_SPI1_Init+0x74>)
 800a210:	2200      	movs	r2, #0
 800a212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a214:	4b06      	ldr	r3, [pc, #24]	; (800a230 <MX_SPI1_Init+0x74>)
 800a216:	2208      	movs	r2, #8
 800a218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <MX_SPI1_Init+0x74>)
 800a21c:	0018      	movs	r0, r3
 800a21e:	f7fc fdf1 	bl	8006e04 <HAL_SPI_Init>
 800a222:	1e03      	subs	r3, r0, #0
 800a224:	d001      	beq.n	800a22a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a226:	f7ff ff08 	bl	800a03a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a22a:	46c0      	nop			; (mov r8, r8)
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20000630 	.word	0x20000630
 800a234:	40013000 	.word	0x40013000

0800a238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b08b      	sub	sp, #44	; 0x2c
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a240:	2414      	movs	r4, #20
 800a242:	193b      	adds	r3, r7, r4
 800a244:	0018      	movs	r0, r3
 800a246:	2314      	movs	r3, #20
 800a248:	001a      	movs	r2, r3
 800a24a:	2100      	movs	r1, #0
 800a24c:	f004 fc5b 	bl	800eb06 <memset>
  if(spiHandle->Instance==SPI1)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a2c      	ldr	r2, [pc, #176]	; (800a308 <HAL_SPI_MspInit+0xd0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d151      	bne.n	800a2fe <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a25a:	4b2c      	ldr	r3, [pc, #176]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a25c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a25e:	4b2b      	ldr	r3, [pc, #172]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a260:	2180      	movs	r1, #128	; 0x80
 800a262:	0149      	lsls	r1, r1, #5
 800a264:	430a      	orrs	r2, r1
 800a266:	641a      	str	r2, [r3, #64]	; 0x40
 800a268:	4b28      	ldr	r3, [pc, #160]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a26a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a26c:	2380      	movs	r3, #128	; 0x80
 800a26e:	015b      	lsls	r3, r3, #5
 800a270:	4013      	ands	r3, r2
 800a272:	613b      	str	r3, [r7, #16]
 800a274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a276:	4b25      	ldr	r3, [pc, #148]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a27a:	4b24      	ldr	r3, [pc, #144]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a27c:	2101      	movs	r1, #1
 800a27e:	430a      	orrs	r2, r1
 800a280:	635a      	str	r2, [r3, #52]	; 0x34
 800a282:	4b22      	ldr	r3, [pc, #136]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a286:	2201      	movs	r2, #1
 800a288:	4013      	ands	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a28e:	4b1f      	ldr	r3, [pc, #124]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a292:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a294:	2102      	movs	r1, #2
 800a296:	430a      	orrs	r2, r1
 800a298:	635a      	str	r2, [r3, #52]	; 0x34
 800a29a:	4b1c      	ldr	r3, [pc, #112]	; (800a30c <HAL_SPI_MspInit+0xd4>)
 800a29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29e:	2202      	movs	r2, #2
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	60bb      	str	r3, [r7, #8]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a2a6:	193b      	adds	r3, r7, r4
 800a2a8:	2280      	movs	r2, #128	; 0x80
 800a2aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ac:	193b      	adds	r3, r7, r4
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b2:	193b      	adds	r3, r7, r4
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2b8:	193b      	adds	r3, r7, r4
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a2be:	193b      	adds	r3, r7, r4
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2c4:	193a      	adds	r2, r7, r4
 800a2c6:	23a0      	movs	r3, #160	; 0xa0
 800a2c8:	05db      	lsls	r3, r3, #23
 800a2ca:	0011      	movs	r1, r2
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f7fa fa4d 	bl	800476c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a2d2:	0021      	movs	r1, r4
 800a2d4:	187b      	adds	r3, r7, r1
 800a2d6:	2208      	movs	r2, #8
 800a2d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2da:	187b      	adds	r3, r7, r1
 800a2dc:	2202      	movs	r2, #2
 800a2de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e0:	187b      	adds	r3, r7, r1
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e6:	187b      	adds	r3, r7, r1
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a2ec:	187b      	adds	r3, r7, r1
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2f2:	187b      	adds	r3, r7, r1
 800a2f4:	4a06      	ldr	r2, [pc, #24]	; (800a310 <HAL_SPI_MspInit+0xd8>)
 800a2f6:	0019      	movs	r1, r3
 800a2f8:	0010      	movs	r0, r2
 800a2fa:	f7fa fa37 	bl	800476c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800a2fe:	46c0      	nop			; (mov r8, r8)
 800a300:	46bd      	mov	sp, r7
 800a302:	b00b      	add	sp, #44	; 0x2c
 800a304:	bd90      	pop	{r4, r7, pc}
 800a306:	46c0      	nop			; (mov r8, r8)
 800a308:	40013000 	.word	0x40013000
 800a30c:	40021000 	.word	0x40021000
 800a310:	50000400 	.word	0x50000400

0800a314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a31a:	4b11      	ldr	r3, [pc, #68]	; (800a360 <HAL_MspInit+0x4c>)
 800a31c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a31e:	4b10      	ldr	r3, [pc, #64]	; (800a360 <HAL_MspInit+0x4c>)
 800a320:	2101      	movs	r1, #1
 800a322:	430a      	orrs	r2, r1
 800a324:	641a      	str	r2, [r3, #64]	; 0x40
 800a326:	4b0e      	ldr	r3, [pc, #56]	; (800a360 <HAL_MspInit+0x4c>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	2201      	movs	r2, #1
 800a32c:	4013      	ands	r3, r2
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a332:	4b0b      	ldr	r3, [pc, #44]	; (800a360 <HAL_MspInit+0x4c>)
 800a334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a336:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <HAL_MspInit+0x4c>)
 800a338:	2180      	movs	r1, #128	; 0x80
 800a33a:	0549      	lsls	r1, r1, #21
 800a33c:	430a      	orrs	r2, r1
 800a33e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a340:	4b07      	ldr	r3, [pc, #28]	; (800a360 <HAL_MspInit+0x4c>)
 800a342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a344:	2380      	movs	r3, #128	; 0x80
 800a346:	055b      	lsls	r3, r3, #21
 800a348:	4013      	ands	r3, r2
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800a34e:	2380      	movs	r3, #128	; 0x80
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	0018      	movs	r0, r3
 800a354:	f7f9 f916 	bl	8003584 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a358:	46c0      	nop			; (mov r8, r8)
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b002      	add	sp, #8
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	40021000 	.word	0x40021000

0800a364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a368:	e7fe      	b.n	800a368 <NMI_Handler+0x4>

0800a36a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a36e:	e7fe      	b.n	800a36e <HardFault_Handler+0x4>

0800a370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a374:	46c0      	nop			; (mov r8, r8)
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a388:	f7f9 f8a0 	bl	80034cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a38c:	46c0      	nop			; (mov r8, r8)
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a398:	4b03      	ldr	r3, [pc, #12]	; (800a3a8 <RTC_TAMP_IRQHandler+0x14>)
 800a39a:	0018      	movs	r0, r3
 800a39c:	f7fc fd0c 	bl	8006db8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800a3a0:	46c0      	nop			; (mov r8, r8)
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	20000604 	.word	0x20000604

0800a3ac <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_START_Pin);
 800a3b0:	2004      	movs	r0, #4
 800a3b2:	f7fa fb79 	bl	8004aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SET_Pin);
 800a3b6:	2008      	movs	r0, #8
 800a3b8:	f7fa fb76 	bl	8004aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800a3bc:	46c0      	nop			; (mov r8, r8)
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_RESET_Pin);
 800a3c6:	2010      	movs	r0, #16
 800a3c8:	f7fa fb6e 	bl	8004aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800a3cc:	46c0      	nop			; (mov r8, r8)
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <TIM3_IRQHandler+0x14>)
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f7fd f94c 	bl	8007678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a3e0:	46c0      	nop			; (mov r8, r8)
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	20000694 	.word	0x20000694

0800a3ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e00a      	b.n	800a414 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a3fe:	e000      	b.n	800a402 <_read+0x16>
 800a400:	bf00      	nop
 800a402:	0001      	movs	r1, r0
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	60ba      	str	r2, [r7, #8]
 800a40a:	b2ca      	uxtb	r2, r1
 800a40c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	3301      	adds	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	429a      	cmp	r2, r3
 800a41a:	dbf0      	blt.n	800a3fe <_read+0x12>
	}

return len;
 800a41c:	687b      	ldr	r3, [r7, #4]
}
 800a41e:	0018      	movs	r0, r3
 800a420:	46bd      	mov	sp, r7
 800a422:	b006      	add	sp, #24
 800a424:	bd80      	pop	{r7, pc}

0800a426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b086      	sub	sp, #24
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	e009      	b.n	800a44c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	60ba      	str	r2, [r7, #8]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	0018      	movs	r0, r3
 800a442:	e000      	b.n	800a446 <_write+0x20>
 800a444:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	3301      	adds	r3, #1
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	429a      	cmp	r2, r3
 800a452:	dbf1      	blt.n	800a438 <_write+0x12>
	}
	return len;
 800a454:	687b      	ldr	r3, [r7, #4]
}
 800a456:	0018      	movs	r0, r3
 800a458:	46bd      	mov	sp, r7
 800a45a:	b006      	add	sp, #24
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <_close>:

int _close(int file)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
	return -1;
 800a466:	2301      	movs	r3, #1
 800a468:	425b      	negs	r3, r3
}
 800a46a:	0018      	movs	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	b002      	add	sp, #8
 800a470:	bd80      	pop	{r7, pc}

0800a472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2280      	movs	r2, #128	; 0x80
 800a480:	0192      	lsls	r2, r2, #6
 800a482:	605a      	str	r2, [r3, #4]
	return 0;
 800a484:	2300      	movs	r3, #0
}
 800a486:	0018      	movs	r0, r3
 800a488:	46bd      	mov	sp, r7
 800a48a:	b002      	add	sp, #8
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <_isatty>:

int _isatty(int file)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
	return 1;
 800a496:	2301      	movs	r3, #1
}
 800a498:	0018      	movs	r0, r3
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b002      	add	sp, #8
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
	return 0;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	b004      	add	sp, #16
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a4c0:	4a14      	ldr	r2, [pc, #80]	; (800a514 <_sbrk+0x5c>)
 800a4c2:	4b15      	ldr	r3, [pc, #84]	; (800a518 <_sbrk+0x60>)
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a4cc:	4b13      	ldr	r3, [pc, #76]	; (800a51c <_sbrk+0x64>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a4d4:	4b11      	ldr	r3, [pc, #68]	; (800a51c <_sbrk+0x64>)
 800a4d6:	4a12      	ldr	r2, [pc, #72]	; (800a520 <_sbrk+0x68>)
 800a4d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a4da:	4b10      	ldr	r3, [pc, #64]	; (800a51c <_sbrk+0x64>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	18d3      	adds	r3, r2, r3
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d207      	bcs.n	800a4f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a4e8:	f004 fad0 	bl	800ea8c <__errno>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	220c      	movs	r2, #12
 800a4f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	425b      	negs	r3, r3
 800a4f6:	e009      	b.n	800a50c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a4f8:	4b08      	ldr	r3, [pc, #32]	; (800a51c <_sbrk+0x64>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a4fe:	4b07      	ldr	r3, [pc, #28]	; (800a51c <_sbrk+0x64>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	18d2      	adds	r2, r2, r3
 800a506:	4b05      	ldr	r3, [pc, #20]	; (800a51c <_sbrk+0x64>)
 800a508:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800a50a:	68fb      	ldr	r3, [r7, #12]
}
 800a50c:	0018      	movs	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	b006      	add	sp, #24
 800a512:	bd80      	pop	{r7, pc}
 800a514:	20009000 	.word	0x20009000
 800a518:	00000400 	.word	0x00000400
 800a51c:	20000510 	.word	0x20000510
 800a520:	200006f0 	.word	0x200006f0

0800a524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a528:	46c0      	nop			; (mov r8, r8)
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
	...

0800a530 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a536:	2310      	movs	r3, #16
 800a538:	18fb      	adds	r3, r7, r3
 800a53a:	0018      	movs	r0, r3
 800a53c:	2310      	movs	r3, #16
 800a53e:	001a      	movs	r2, r3
 800a540:	2100      	movs	r1, #0
 800a542:	f004 fae0 	bl	800eb06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a546:	1d3b      	adds	r3, r7, #4
 800a548:	0018      	movs	r0, r3
 800a54a:	230c      	movs	r3, #12
 800a54c:	001a      	movs	r2, r3
 800a54e:	2100      	movs	r1, #0
 800a550:	f004 fad9 	bl	800eb06 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a554:	4b1e      	ldr	r3, [pc, #120]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a556:	4a1f      	ldr	r2, [pc, #124]	; (800a5d4 <MX_TIM3_Init+0xa4>)
 800a558:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3199;
 800a55a:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a55c:	4a1e      	ldr	r2, [pc, #120]	; (800a5d8 <MX_TIM3_Init+0xa8>)
 800a55e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a560:	4b1b      	ldr	r3, [pc, #108]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a562:	2200      	movs	r2, #0
 800a564:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800a566:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a568:	4a1c      	ldr	r2, [pc, #112]	; (800a5dc <MX_TIM3_Init+0xac>)
 800a56a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a56c:	4b18      	ldr	r3, [pc, #96]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a56e:	2200      	movs	r2, #0
 800a570:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a572:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a574:	2200      	movs	r2, #0
 800a576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a578:	4b15      	ldr	r3, [pc, #84]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a57a:	0018      	movs	r0, r3
 800a57c:	f7fc ffc8 	bl	8007510 <HAL_TIM_Base_Init>
 800a580:	1e03      	subs	r3, r0, #0
 800a582:	d001      	beq.n	800a588 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800a584:	f7ff fd59 	bl	800a03a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a588:	2110      	movs	r1, #16
 800a58a:	187b      	adds	r3, r7, r1
 800a58c:	2280      	movs	r2, #128	; 0x80
 800a58e:	0152      	lsls	r2, r2, #5
 800a590:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a592:	187a      	adds	r2, r7, r1
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a596:	0011      	movs	r1, r2
 800a598:	0018      	movs	r0, r3
 800a59a:	f7fd f99f 	bl	80078dc <HAL_TIM_ConfigClockSource>
 800a59e:	1e03      	subs	r3, r0, #0
 800a5a0:	d001      	beq.n	800a5a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800a5a2:	f7ff fd4a 	bl	800a03a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a5a6:	1d3b      	adds	r3, r7, #4
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a5ac:	1d3b      	adds	r3, r7, #4
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a5b2:	1d3a      	adds	r2, r7, #4
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <MX_TIM3_Init+0xa0>)
 800a5b6:	0011      	movs	r1, r2
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	f7fd fba1 	bl	8007d00 <HAL_TIMEx_MasterConfigSynchronization>
 800a5be:	1e03      	subs	r3, r0, #0
 800a5c0:	d001      	beq.n	800a5c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800a5c2:	f7ff fd3a 	bl	800a03a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	b008      	add	sp, #32
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	46c0      	nop			; (mov r8, r8)
 800a5d0:	20000694 	.word	0x20000694
 800a5d4:	40000400 	.word	0x40000400
 800a5d8:	00000c7f 	.word	0x00000c7f
 800a5dc:	00004e1f 	.word	0x00004e1f

0800a5e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a0d      	ldr	r2, [pc, #52]	; (800a624 <HAL_TIM_Base_MspInit+0x44>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d113      	bne.n	800a61a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <HAL_TIM_Base_MspInit+0x48>)
 800a5f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <HAL_TIM_Base_MspInit+0x48>)
 800a5f8:	2102      	movs	r1, #2
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <HAL_TIM_Base_MspInit+0x48>)
 800a600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a602:	2202      	movs	r2, #2
 800a604:	4013      	ands	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a60a:	2200      	movs	r2, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	2010      	movs	r0, #16
 800a610:	f7fa f87a 	bl	8004708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a614:	2010      	movs	r0, #16
 800a616:	f7fa f88c 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	46bd      	mov	sp, r7
 800a61e:	b004      	add	sp, #16
 800a620:	bd80      	pop	{r7, pc}
 800a622:	46c0      	nop			; (mov r8, r8)
 800a624:	40000400 	.word	0x40000400
 800a628:	40021000 	.word	0x40021000

0800a62c <bme280Init>:
 *
 * @param  i2C handler
 *
 * @retval None
 */
void bme280Init(bme280TypeDef *bme280, I2C_HandleTypeDef *I2Chandler) {
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b091      	sub	sp, #68	; 0x44
 800a630:	af04      	add	r7, sp, #16
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]

	bme280->pressureReference = 1013;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4aa6      	ldr	r2, [pc, #664]	; (800a8d4 <bme280Init+0x2a8>)
 800a63a:	615a      	str	r2, [r3, #20]
	bme280->temperatureOffset = -7;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2207      	movs	r2, #7
 800a640:	4252      	negs	r2, r2
 800a642:	619a      	str	r2, [r3, #24]

	bme280->I2Chandler = I2Chandler;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	64da      	str	r2, [r3, #76]	; 0x4c

	bme280->i2cTimeout = BME280_I2C_TIMEOUT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2223      	movs	r2, #35	; 0x23
 800a64e:	2164      	movs	r1, #100	; 0x64
 800a650:	5499      	strb	r1, [r3, r2]
//	bme280->ctrlHum = 0x01; //oversampling for humidity disabled
////	bme280->ctrlMeas = 0x24; //oversampling for temp, pressure disabled
//	bme280->ctrlMeas = 0x34; //pressure oversampling x16

//set oversampling
	bme280->ctrlMeas = (BME280_OVERSAMPLING_TEM << 5)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	21b4      	movs	r1, #180	; 0xb4
 800a658:	5499      	strb	r1, [r3, r2]
			| (BME280_OVERSAMPLING_PRE << 2);
	bme280->ctrlHum = BME280_OVERSAMPLING_HUM;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2221      	movs	r2, #33	; 0x21
 800a65e:	2105      	movs	r1, #5
 800a660:	5499      	strb	r1, [r3, r2]
	bme280->config = BME280_IIR_FILTER << 2;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2222      	movs	r2, #34	; 0x22
 800a666:	2108      	movs	r1, #8
 800a668:	5499      	strb	r1, [r3, r2]
	uint8_t dig_H_1;
	uint8_t dig_H_2_6[7];

	//								READING CALIBRATION DATA

	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			dig_T, 6, bme280->i2cTimeout) != HAL_OK) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2223      	movs	r2, #35	; 0x23
 800a672:	5c9b      	ldrb	r3, [r3, r2]
	if (HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_T1_REG, 1,
 800a674:	9302      	str	r3, [sp, #8]
 800a676:	2306      	movs	r3, #6
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	2428      	movs	r4, #40	; 0x28
 800a67c:	193b      	adds	r3, r7, r4
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	2301      	movs	r3, #1
 800a682:	2288      	movs	r2, #136	; 0x88
 800a684:	21ee      	movs	r1, #238	; 0xee
 800a686:	f7fa fc07 	bl	8004e98 <HAL_I2C_Mem_Read>

	}
	bme280->dig_T1 = ((uint16_t) dig_T[0] | (uint16_t) dig_T[1] << 8);
 800a68a:	0021      	movs	r1, r4
 800a68c:	187b      	adds	r3, r7, r1
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	b21a      	sxth	r2, r3
 800a692:	187b      	adds	r3, r7, r1
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	b21b      	sxth	r3, r3
 800a69a:	4313      	orrs	r3, r2
 800a69c:	b21b      	sxth	r3, r3
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280->dig_T2 = ((int16_t) dig_T[2] | (int16_t) dig_T[3] << 8);
 800a6a4:	187b      	adds	r3, r7, r1
 800a6a6:	789b      	ldrb	r3, [r3, #2]
 800a6a8:	b21a      	sxth	r2, r3
 800a6aa:	187b      	adds	r3, r7, r1
 800a6ac:	78db      	ldrb	r3, [r3, #3]
 800a6ae:	021b      	lsls	r3, r3, #8
 800a6b0:	b21b      	sxth	r3, r3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	b21a      	sxth	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280->dig_T3 = ((int16_t) dig_T[4] | (int16_t) dig_T[4] << 8);
 800a6ba:	187b      	adds	r3, r7, r1
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	b21a      	sxth	r2, r3
 800a6c0:	187b      	adds	r3, r7, r1
 800a6c2:	791b      	ldrb	r3, [r3, #4]
 800a6c4:	021b      	lsls	r3, r3, #8
 800a6c6:	b21b      	sxth	r3, r3
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	b21a      	sxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	851a      	strh	r2, [r3, #40]	; 0x28

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			dig_P, 18, bme280->i2cTimeout);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2223      	movs	r2, #35	; 0x23
 800a6d8:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_P1_REG, 1,
 800a6da:	9302      	str	r3, [sp, #8]
 800a6dc:	2312      	movs	r3, #18
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	2414      	movs	r4, #20
 800a6e2:	193b      	adds	r3, r7, r4
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	228e      	movs	r2, #142	; 0x8e
 800a6ea:	21ee      	movs	r1, #238	; 0xee
 800a6ec:	f7fa fbd4 	bl	8004e98 <HAL_I2C_Mem_Read>
	bme280->dig_P1 = ((uint16_t) dig_P[0] | (uint16_t) dig_P[1] << 8);
 800a6f0:	0021      	movs	r1, r4
 800a6f2:	187b      	adds	r3, r7, r1
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	b21a      	sxth	r2, r3
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	b21b      	sxth	r3, r3
 800a700:	4313      	orrs	r3, r2
 800a702:	b21b      	sxth	r3, r3
 800a704:	b29a      	uxth	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280->dig_P2 = ((int16_t) dig_P[2] | (int16_t) dig_P[3] << 8);
 800a70a:	187b      	adds	r3, r7, r1
 800a70c:	789b      	ldrb	r3, [r3, #2]
 800a70e:	b21a      	sxth	r2, r3
 800a710:	187b      	adds	r3, r7, r1
 800a712:	78db      	ldrb	r3, [r3, #3]
 800a714:	021b      	lsls	r3, r3, #8
 800a716:	b21b      	sxth	r3, r3
 800a718:	4313      	orrs	r3, r2
 800a71a:	b21a      	sxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280->dig_P3 = ((int16_t) dig_P[4] | (int16_t) dig_P[5] << 8);
 800a720:	187b      	adds	r3, r7, r1
 800a722:	791b      	ldrb	r3, [r3, #4]
 800a724:	b21a      	sxth	r2, r3
 800a726:	187b      	adds	r3, r7, r1
 800a728:	795b      	ldrb	r3, [r3, #5]
 800a72a:	021b      	lsls	r3, r3, #8
 800a72c:	b21b      	sxth	r3, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	b21a      	sxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	85da      	strh	r2, [r3, #46]	; 0x2e
	bme280->dig_P4 = ((int16_t) dig_P[6] | (int16_t) dig_P[7] << 8);
 800a736:	187b      	adds	r3, r7, r1
 800a738:	799b      	ldrb	r3, [r3, #6]
 800a73a:	b21a      	sxth	r2, r3
 800a73c:	187b      	adds	r3, r7, r1
 800a73e:	79db      	ldrb	r3, [r3, #7]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	b21b      	sxth	r3, r3
 800a744:	4313      	orrs	r3, r2
 800a746:	b21a      	sxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	861a      	strh	r2, [r3, #48]	; 0x30
	bme280->dig_P5 = ((int16_t) dig_P[8] | (int16_t) dig_P[9] << 8);
 800a74c:	187b      	adds	r3, r7, r1
 800a74e:	7a1b      	ldrb	r3, [r3, #8]
 800a750:	b21a      	sxth	r2, r3
 800a752:	187b      	adds	r3, r7, r1
 800a754:	7a5b      	ldrb	r3, [r3, #9]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	b21b      	sxth	r3, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	b21a      	sxth	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	865a      	strh	r2, [r3, #50]	; 0x32
	bme280->dig_P6 = ((int16_t) dig_P[10] | (int16_t) dig_P[11] << 8);
 800a762:	187b      	adds	r3, r7, r1
 800a764:	7a9b      	ldrb	r3, [r3, #10]
 800a766:	b21a      	sxth	r2, r3
 800a768:	187b      	adds	r3, r7, r1
 800a76a:	7adb      	ldrb	r3, [r3, #11]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	b21b      	sxth	r3, r3
 800a770:	4313      	orrs	r3, r2
 800a772:	b21a      	sxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	869a      	strh	r2, [r3, #52]	; 0x34
	bme280->dig_P7 = ((int16_t) dig_P[12] | (int16_t) dig_P[13] << 8);
 800a778:	187b      	adds	r3, r7, r1
 800a77a:	7b1b      	ldrb	r3, [r3, #12]
 800a77c:	b21a      	sxth	r2, r3
 800a77e:	187b      	adds	r3, r7, r1
 800a780:	7b5b      	ldrb	r3, [r3, #13]
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	b21b      	sxth	r3, r3
 800a786:	4313      	orrs	r3, r2
 800a788:	b21a      	sxth	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	86da      	strh	r2, [r3, #54]	; 0x36
	bme280->dig_P8 = ((int16_t) dig_P[14] | (int16_t) dig_P[15] << 8);
 800a78e:	187b      	adds	r3, r7, r1
 800a790:	7b9b      	ldrb	r3, [r3, #14]
 800a792:	b21a      	sxth	r2, r3
 800a794:	187b      	adds	r3, r7, r1
 800a796:	7bdb      	ldrb	r3, [r3, #15]
 800a798:	021b      	lsls	r3, r3, #8
 800a79a:	b21b      	sxth	r3, r3
 800a79c:	4313      	orrs	r3, r2
 800a79e:	b21a      	sxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	871a      	strh	r2, [r3, #56]	; 0x38
	bme280->dig_P9 = ((int16_t) dig_P[16] | (int16_t) dig_P[17] << 8);
 800a7a4:	187b      	adds	r3, r7, r1
 800a7a6:	7c1b      	ldrb	r3, [r3, #16]
 800a7a8:	b21a      	sxth	r2, r3
 800a7aa:	187b      	adds	r3, r7, r1
 800a7ac:	7c5b      	ldrb	r3, [r3, #17]
 800a7ae:	021b      	lsls	r3, r3, #8
 800a7b0:	b21b      	sxth	r3, r3
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	b21a      	sxth	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	875a      	strh	r2, [r3, #58]	; 0x3a

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			&dig_H_1, 1, bme280->i2cTimeout);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2223      	movs	r2, #35	; 0x23
 800a7c2:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H1_REG, 1,
 800a7c4:	9302      	str	r3, [sp, #8]
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	9301      	str	r3, [sp, #4]
 800a7ca:	2413      	movs	r4, #19
 800a7cc:	193b      	adds	r3, r7, r4
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	22a1      	movs	r2, #161	; 0xa1
 800a7d4:	21ee      	movs	r1, #238	; 0xee
 800a7d6:	f7fa fb5f 	bl	8004e98 <HAL_I2C_Mem_Read>
	bme280->dig_H1 = ((unsigned char) dig_H_1);
 800a7da:	193b      	adds	r3, r7, r4
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	223c      	movs	r2, #60	; 0x3c
 800a7e2:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			dig_H_2_6, 7, bme280->i2cTimeout);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2223      	movs	r2, #35	; 0x23
 800a7ec:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_DIG_H2_REG, 1,
 800a7ee:	9302      	str	r3, [sp, #8]
 800a7f0:	2307      	movs	r3, #7
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	240c      	movs	r4, #12
 800a7f6:	193b      	adds	r3, r7, r4
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	22e1      	movs	r2, #225	; 0xe1
 800a7fe:	21ee      	movs	r1, #238	; 0xee
 800a800:	f7fa fb4a 	bl	8004e98 <HAL_I2C_Mem_Read>
	bme280->dig_H2 = ((int16_t) dig_H_2_6[0] | (int16_t) dig_H_2_6[1] << 8);
 800a804:	0020      	movs	r0, r4
 800a806:	183b      	adds	r3, r7, r0
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	b21a      	sxth	r2, r3
 800a80c:	183b      	adds	r3, r7, r0
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	b21b      	sxth	r3, r3
 800a814:	4313      	orrs	r3, r2
 800a816:	b21a      	sxth	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	87da      	strh	r2, [r3, #62]	; 0x3e
	bme280->dig_H3 = ((unsigned char) dig_H_2_6[2]);
 800a81c:	183b      	adds	r3, r7, r0
 800a81e:	7899      	ldrb	r1, [r3, #2]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2240      	movs	r2, #64	; 0x40
 800a824:	5499      	strb	r1, [r3, r2]

	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 800a826:	183b      	adds	r3, r7, r0
 800a828:	78db      	ldrb	r3, [r3, #3]
 800a82a:	011b      	lsls	r3, r3, #4
			| (((int16_t) dig_H_2_6[4]) & 0x0f));
 800a82c:	b21a      	sxth	r2, r3
 800a82e:	183b      	adds	r3, r7, r0
 800a830:	791b      	ldrb	r3, [r3, #4]
 800a832:	b21b      	sxth	r3, r3
 800a834:	210f      	movs	r1, #15
 800a836:	400b      	ands	r3, r1
 800a838:	b21b      	sxth	r3, r3
 800a83a:	4313      	orrs	r3, r2
 800a83c:	b219      	sxth	r1, r3
	bme280->dig_H4 = (((int16_t) dig_H_2_6[3]) << 4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2242      	movs	r2, #66	; 0x42
 800a842:	5299      	strh	r1, [r3, r2]
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 800a844:	183b      	adds	r3, r7, r0
 800a846:	791b      	ldrb	r3, [r3, #4]
			| ((int16_t) dig_H_2_6[5]) << 4);
 800a848:	091b      	lsrs	r3, r3, #4
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	b21a      	sxth	r2, r3
 800a84e:	183b      	adds	r3, r7, r0
 800a850:	795b      	ldrb	r3, [r3, #5]
 800a852:	011b      	lsls	r3, r3, #4
 800a854:	b21b      	sxth	r3, r3
 800a856:	4313      	orrs	r3, r2
 800a858:	b219      	sxth	r1, r3
	bme280->dig_H5 = (((int16_t) dig_H_2_6[4]) >> 4
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2244      	movs	r2, #68	; 0x44
 800a85e:	5299      	strh	r1, [r3, r2]
	bme280->dig_H6 = ((unsigned char) dig_H_2_6[6]);
 800a860:	183b      	adds	r3, r7, r0
 800a862:	7999      	ldrb	r1, [r3, #6]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2246      	movs	r2, #70	; 0x46
 800a868:	5499      	strb	r1, [r3, r2]

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3320      	adds	r3, #32
			&bme280->ctrlMeas, 1, bme280->i2cTimeout); //write temp and press oversampling
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	2123      	movs	r1, #35	; 0x23
 800a876:	5c52      	ldrb	r2, [r2, r1]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a878:	9202      	str	r2, [sp, #8]
 800a87a:	2201      	movs	r2, #1
 800a87c:	9201      	str	r2, [sp, #4]
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	2301      	movs	r3, #1
 800a882:	22f4      	movs	r2, #244	; 0xf4
 800a884:	21ee      	movs	r1, #238	; 0xee
 800a886:	f7fa f9d9 	bl	8004c3c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3321      	adds	r3, #33	; 0x21
			&bme280->ctrlHum, 1, bme280->i2cTimeout); //write humidity oversampling
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	2123      	movs	r1, #35	; 0x23
 800a896:	5c52      	ldrb	r2, [r2, r1]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_HUM_REG, 1,
 800a898:	9202      	str	r2, [sp, #8]
 800a89a:	2201      	movs	r2, #1
 800a89c:	9201      	str	r2, [sp, #4]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	22f2      	movs	r2, #242	; 0xf2
 800a8a4:	21ee      	movs	r1, #238	; 0xee
 800a8a6:	f7fa f9c9 	bl	8004c3c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3322      	adds	r3, #34	; 0x22
			&bme280->config, 1, bme280->i2cTimeout); //write iir filter config
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	2123      	movs	r1, #35	; 0x23
 800a8b6:	5c52      	ldrb	r2, [r2, r1]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CONFIG_REG, 1,
 800a8b8:	9202      	str	r2, [sp, #8]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	9201      	str	r2, [sp, #4]
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	22f5      	movs	r2, #245	; 0xf5
 800a8c4:	21ee      	movs	r1, #238	; 0xee
 800a8c6:	f7fa f9b9 	bl	8004c3c <HAL_I2C_Mem_Write>

}
 800a8ca:	46c0      	nop			; (mov r8, r8)
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	b00d      	add	sp, #52	; 0x34
 800a8d0:	bd90      	pop	{r4, r7, pc}
 800a8d2:	46c0      	nop			; (mov r8, r8)
 800a8d4:	000003f5 	.word	0x000003f5

0800a8d8 <bme280Read>:
 *
 * @param  BME280 handler
 *
 * @retval None
 */
void bme280Read(bme280TypeDef *bme280) {
 800a8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8da:	b08d      	sub	sp, #52	; 0x34
 800a8dc:	af04      	add	r7, sp, #16
 800a8de:	6078      	str	r0, [r7, #4]

	uint8_t readings[8] = { 0 };
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	18fb      	adds	r3, r7, r3
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	605a      	str	r2, [r3, #4]

	//adc data
	int32_t temperatureADC = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61fb      	str	r3, [r7, #28]
	int32_t pressureADC = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61bb      	str	r3, [r7, #24]
	int32_t humidityADC = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]

	//start measure by setting las bit of ctrlMeas register
	uint8_t startConversion = (bme280->ctrlMeas) + 1;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	5c9b      	ldrb	r3, [r3, r2]
 800a8fe:	3301      	adds	r3, #1
 800a900:	b2da      	uxtb	r2, r3
 800a902:	210b      	movs	r1, #11
 800a904:	187b      	adds	r3, r7, r1
 800a906:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			&startConversion, 1, bme280->i2cTimeout);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2223      	movs	r2, #35	; 0x23
 800a910:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Write(bme280->I2Chandler, BME280_ADDR, BME280_CTRL_MEAS_REG, 1,
 800a912:	9302      	str	r3, [sp, #8]
 800a914:	2301      	movs	r3, #1
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	187b      	adds	r3, r7, r1
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	2301      	movs	r3, #1
 800a91e:	22f4      	movs	r2, #244	; 0xf4
 800a920:	21ee      	movs	r1, #238	; 0xee
 800a922:	f7fa f98b 	bl	8004c3c <HAL_I2C_Mem_Write>

	//wait for measurement
	uint8_t status = 0;
 800a926:	230a      	movs	r3, #10
 800a928:	18fb      	adds	r3, r7, r3
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
	do {
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
				&status, 1, bme280->i2cTimeout);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2223      	movs	r2, #35	; 0x23
 800a936:	5c9b      	ldrb	r3, [r3, r2]
		HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_STATUS_REG, 1,
 800a938:	9302      	str	r3, [sp, #8]
 800a93a:	2301      	movs	r3, #1
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	260a      	movs	r6, #10
 800a940:	19bb      	adds	r3, r7, r6
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	2301      	movs	r3, #1
 800a946:	22f3      	movs	r2, #243	; 0xf3
 800a948:	21ee      	movs	r1, #238	; 0xee
 800a94a:	f7fa faa5 	bl	8004e98 <HAL_I2C_Mem_Read>
	} while (((status >> 3) & 1) == 1);
 800a94e:	19bb      	adds	r3, r7, r6
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	08db      	lsrs	r3, r3, #3
 800a954:	b2db      	uxtb	r3, r3
 800a956:	001a      	movs	r2, r3
 800a958:	2301      	movs	r3, #1
 800a95a:	4013      	ands	r3, r2
 800a95c:	d1e7      	bne.n	800a92e <bme280Read+0x56>

	//read output registers
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
			readings, 8, bme280->i2cTimeout);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2223      	movs	r2, #35	; 0x23
 800a966:	5c9b      	ldrb	r3, [r3, r2]
	HAL_I2C_Mem_Read(bme280->I2Chandler, BME280_ADDR, BME280_PRESS_MSB_REG, 1,
 800a968:	9302      	str	r3, [sp, #8]
 800a96a:	2308      	movs	r3, #8
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	260c      	movs	r6, #12
 800a970:	19bb      	adds	r3, r7, r6
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	2301      	movs	r3, #1
 800a976:	22f7      	movs	r2, #247	; 0xf7
 800a978:	21ee      	movs	r1, #238	; 0xee
 800a97a:	f7fa fa8d 	bl	8004e98 <HAL_I2C_Mem_Read>

	//TEMPERATURE
	temperatureADC = ((((int32_t) readings[3] << 12)
 800a97e:	19bb      	adds	r3, r7, r6
 800a980:	78db      	ldrb	r3, [r3, #3]
 800a982:	031a      	lsls	r2, r3, #12
			| ((int32_t) readings[4] << 4) | ((int32_t) readings[5] >> 4)));
 800a984:	19bb      	adds	r3, r7, r6
 800a986:	791b      	ldrb	r3, [r3, #4]
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	4313      	orrs	r3, r2
 800a98c:	19ba      	adds	r2, r7, r6
 800a98e:	7952      	ldrb	r2, [r2, #5]
 800a990:	0912      	lsrs	r2, r2, #4
 800a992:	b2d2      	uxtb	r2, r2
	temperatureADC = ((((int32_t) readings[3] << 12)
 800a994:	4313      	orrs	r3, r2
 800a996:	61fb      	str	r3, [r7, #28]

	bme280->temperatureValue = (_BME280_compensate_T_int32(bme280,
 800a998:	69fa      	ldr	r2, [r7, #28]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	0011      	movs	r1, r2
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f000 f8fe 	bl	800aba0 <_BME280_compensate_T_int32>
 800a9a4:	0002      	movs	r2, r0
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	605a      	str	r2, [r3, #4]
			temperatureADC));
	bme280->temperatureValueCompensated = bme280->temperatureValue
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685a      	ldr	r2, [r3, #4]
			+ (bme280->temperatureOffset * 100);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	2164      	movs	r1, #100	; 0x64
 800a9b4:	434b      	muls	r3, r1
 800a9b6:	18d2      	adds	r2, r2, r3
	bme280->temperatureValueCompensated = bme280->temperatureValue
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	61da      	str	r2, [r3, #28]

	//PRESSURE
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 800a9bc:	19bb      	adds	r3, r7, r6
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	031a      	lsls	r2, r3, #12
 800a9c2:	19bb      	adds	r3, r7, r6
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	011b      	lsls	r3, r3, #4
 800a9c8:	4313      	orrs	r3, r2
			| ((int32_t) readings[2] >> 4)));
 800a9ca:	19ba      	adds	r2, r7, r6
 800a9cc:	7892      	ldrb	r2, [r2, #2]
 800a9ce:	0912      	lsrs	r2, r2, #4
 800a9d0:	b2d2      	uxtb	r2, r2
	pressureADC = ((((int32_t) readings[0] << 12) | ((int32_t) readings[1] << 4)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]

	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	0011      	movs	r1, r2
 800a9dc:	0018      	movs	r0, r3
 800a9de:	f000 f915 	bl	800ac0c <_BME280_compensate_P_int64>
 800a9e2:	0003      	movs	r3, r0
			/ 256;
 800a9e4:	0a1a      	lsrs	r2, r3, #8
	bme280->pressureValue = _BME280_compensate_P_int64(bme280, pressureADC)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	609a      	str	r2, [r3, #8]

	//HUMIDITY
	humidityADC = (((int32_t) readings[6] << 8) | (int32_t) readings[7]);
 800a9ea:	19bb      	adds	r3, r7, r6
 800a9ec:	799b      	ldrb	r3, [r3, #6]
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	19ba      	adds	r2, r7, r6
 800a9f2:	79d2      	ldrb	r2, [r2, #7]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	617b      	str	r3, [r7, #20]

	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	0011      	movs	r1, r2
 800a9fe:	0018      	movs	r0, r3
 800aa00:	f000 fab4 	bl	800af6c <_BME280_compensate_H_int32>
 800aa04:	0003      	movs	r3, r0
			/ 1024;
 800aa06:	0a9a      	lsrs	r2, r3, #10
	bme280->humidityValue = _BME280_compensate_H_int32(bme280, humidityADC)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60da      	str	r2, [r3, #12]
	 * T- air temperature[K]
	 *
	 */

	bme280->altitudeValue = (-((8.314
			* ((((float) bme280->temperatureValue) / 100) + 273.15))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	0018      	movs	r0, r3
 800aa12:	f7f6 fb7f 	bl	8001114 <__aeabi_i2f>
 800aa16:	1c03      	adds	r3, r0, #0
 800aa18:	492e      	ldr	r1, [pc, #184]	; (800aad4 <bme280Read+0x1fc>)
 800aa1a:	1c18      	adds	r0, r3, #0
 800aa1c:	f7f5 ff6c 	bl	80008f8 <__aeabi_fdiv>
 800aa20:	1c03      	adds	r3, r0, #0
 800aa22:	1c18      	adds	r0, r3, #0
 800aa24:	f7f8 fa10 	bl	8002e48 <__aeabi_f2d>
 800aa28:	4a2b      	ldr	r2, [pc, #172]	; (800aad8 <bme280Read+0x200>)
 800aa2a:	4b2c      	ldr	r3, [pc, #176]	; (800aadc <bme280Read+0x204>)
 800aa2c:	f7f6 fbf4 	bl	8001218 <__aeabi_dadd>
 800aa30:	0002      	movs	r2, r0
 800aa32:	000b      	movs	r3, r1
 800aa34:	0010      	movs	r0, r2
 800aa36:	0019      	movs	r1, r3
 800aa38:	4a29      	ldr	r2, [pc, #164]	; (800aae0 <bme280Read+0x208>)
 800aa3a:	4b2a      	ldr	r3, [pc, #168]	; (800aae4 <bme280Read+0x20c>)
 800aa3c:	f7f7 fb5c 	bl	80020f8 <__aeabi_dmul>
 800aa40:	0002      	movs	r2, r0
 800aa42:	000b      	movs	r3, r1
 800aa44:	0010      	movs	r0, r2
 800aa46:	0019      	movs	r1, r3
			/ (10 * 0.0289))
 800aa48:	4a27      	ldr	r2, [pc, #156]	; (800aae8 <bme280Read+0x210>)
 800aa4a:	4b28      	ldr	r3, [pc, #160]	; (800aaec <bme280Read+0x214>)
 800aa4c:	f7f6 ff4e 	bl	80018ec <__aeabi_ddiv>
 800aa50:	0002      	movs	r2, r0
 800aa52:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 800aa54:	0011      	movs	r1, r2
 800aa56:	000c      	movs	r4, r1
 800aa58:	2180      	movs	r1, #128	; 0x80
 800aa5a:	0609      	lsls	r1, r1, #24
 800aa5c:	4059      	eors	r1, r3
 800aa5e:	000d      	movs	r5, r1
			* log(
					(float) bme280->pressureValue
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	0018      	movs	r0, r3
 800aa66:	f7f6 fb9b 	bl	80011a0 <__aeabi_ui2f>
 800aa6a:	1c06      	adds	r6, r0, #0
							/ (((float) bme280->pressureReference) * 100)))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	0018      	movs	r0, r3
 800aa72:	f7f6 fb95 	bl	80011a0 <__aeabi_ui2f>
 800aa76:	1c03      	adds	r3, r0, #0
 800aa78:	4916      	ldr	r1, [pc, #88]	; (800aad4 <bme280Read+0x1fc>)
 800aa7a:	1c18      	adds	r0, r3, #0
 800aa7c:	f7f6 f848 	bl	8000b10 <__aeabi_fmul>
 800aa80:	1c03      	adds	r3, r0, #0
 800aa82:	1c19      	adds	r1, r3, #0
 800aa84:	1c30      	adds	r0, r6, #0
 800aa86:	f7f5 ff37 	bl	80008f8 <__aeabi_fdiv>
 800aa8a:	1c03      	adds	r3, r0, #0
			* log(
 800aa8c:	1c18      	adds	r0, r3, #0
 800aa8e:	f7f8 f9db 	bl	8002e48 <__aeabi_f2d>
 800aa92:	0002      	movs	r2, r0
 800aa94:	000b      	movs	r3, r1
 800aa96:	0010      	movs	r0, r2
 800aa98:	0019      	movs	r1, r3
 800aa9a:	f005 f8e3 	bl	800fc64 <log>
 800aa9e:	0002      	movs	r2, r0
 800aaa0:	000b      	movs	r3, r1
 800aaa2:	0020      	movs	r0, r4
 800aaa4:	0029      	movs	r1, r5
 800aaa6:	f7f7 fb27 	bl	80020f8 <__aeabi_dmul>
 800aaaa:	0002      	movs	r2, r0
 800aaac:	000b      	movs	r3, r1
 800aaae:	0010      	movs	r0, r2
 800aab0:	0019      	movs	r1, r3
			* 100;
 800aab2:	2200      	movs	r2, #0
 800aab4:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <bme280Read+0x218>)
 800aab6:	f7f7 fb1f 	bl	80020f8 <__aeabi_dmul>
 800aaba:	0002      	movs	r2, r0
 800aabc:	000b      	movs	r3, r1
	bme280->altitudeValue = (-((8.314
 800aabe:	0010      	movs	r0, r2
 800aac0:	0019      	movs	r1, r3
 800aac2:	f7f8 f935 	bl	8002d30 <__aeabi_d2iz>
 800aac6:	0002      	movs	r2, r0
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	611a      	str	r2, [r3, #16]
}
 800aacc:	46c0      	nop			; (mov r8, r8)
 800aace:	46bd      	mov	sp, r7
 800aad0:	b009      	add	sp, #36	; 0x24
 800aad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad4:	42c80000 	.word	0x42c80000
 800aad8:	66666666 	.word	0x66666666
 800aadc:	40711266 	.word	0x40711266
 800aae0:	9ba5e354 	.word	0x9ba5e354
 800aae4:	4020a0c4 	.word	0x4020a0c4
 800aae8:	db22d0e5 	.word	0xdb22d0e5
 800aaec:	3fd27ef9 	.word	0x3fd27ef9
 800aaf0:	40590000 	.word	0x40590000

0800aaf4 <bme280ChangeValue>:

void bme280ChangeValue(bme280TypeDef *bme280, uint8_t value, uint8_t direction) {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	0008      	movs	r0, r1
 800aafe:	0011      	movs	r1, r2
 800ab00:	1cfb      	adds	r3, r7, #3
 800ab02:	1c02      	adds	r2, r0, #0
 800ab04:	701a      	strb	r2, [r3, #0]
 800ab06:	1cbb      	adds	r3, r7, #2
 800ab08:	1c0a      	adds	r2, r1, #0
 800ab0a:	701a      	strb	r2, [r3, #0]

	if (value == BME280_CHANGE_PREF) {
 800ab0c:	1cfb      	adds	r3, r7, #3
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d11e      	bne.n	800ab52 <bme280ChangeValue+0x5e>

		if (direction == BME280_CHANGE_DIR_UP && bme280->pressureReference < 1100) {
 800ab14:	1cbb      	adds	r3, r7, #2
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <bme280ChangeValue+0x3e>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	4a1e      	ldr	r2, [pc, #120]	; (800ab9c <bme280ChangeValue+0xa8>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d805      	bhi.n	800ab32 <bme280ChangeValue+0x3e>
			bme280->pressureReference++;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	615a      	str	r2, [r3, #20]
 800ab30:	e02f      	b.n	800ab92 <bme280ChangeValue+0x9e>
		} else if (direction == BME280_CHANGE_DIR_DOWN && bme280->pressureReference > 900) {
 800ab32:	1cbb      	adds	r3, r7, #2
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d12b      	bne.n	800ab92 <bme280ChangeValue+0x9e>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695a      	ldr	r2, [r3, #20]
 800ab3e:	23e1      	movs	r3, #225	; 0xe1
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d925      	bls.n	800ab92 <bme280ChangeValue+0x9e>
			bme280->pressureReference--;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	1e5a      	subs	r2, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	615a      	str	r2, [r3, #20]
		} else if (direction == BME280_CHANGE_DIR_DOWN && bme280->temperatureOffset > -20) {
			bme280->temperatureOffset--;
		}
	}

}
 800ab50:	e01f      	b.n	800ab92 <bme280ChangeValue+0x9e>
	} else if (value == BME280_CHANGE_TOFFSET) {
 800ab52:	1cfb      	adds	r3, r7, #3
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d11b      	bne.n	800ab92 <bme280ChangeValue+0x9e>
		if (direction == BME280_CHANGE_DIR_UP && bme280->temperatureOffset < 20) {
 800ab5a:	1cbb      	adds	r3, r7, #2
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <bme280ChangeValue+0x82>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	2b13      	cmp	r3, #19
 800ab68:	dc05      	bgt.n	800ab76 <bme280ChangeValue+0x82>
			bme280->temperatureOffset++;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	619a      	str	r2, [r3, #24]
 800ab74:	e00d      	b.n	800ab92 <bme280ChangeValue+0x9e>
		} else if (direction == BME280_CHANGE_DIR_DOWN && bme280->temperatureOffset > -20) {
 800ab76:	1cbb      	adds	r3, r7, #2
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d109      	bne.n	800ab92 <bme280ChangeValue+0x9e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	3313      	adds	r3, #19
 800ab84:	db05      	blt.n	800ab92 <bme280ChangeValue+0x9e>
			bme280->temperatureOffset--;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	1e5a      	subs	r2, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	619a      	str	r2, [r3, #24]
}
 800ab90:	e7ff      	b.n	800ab92 <bme280ChangeValue+0x9e>
 800ab92:	46c0      	nop			; (mov r8, r8)
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b002      	add	sp, #8
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	0000044b 	.word	0x0000044b

0800aba0 <_BME280_compensate_T_int32>:
//									COMP FUNCTIONS DEFINITIONS

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t _BME280_compensate_T_int32(bme280TypeDef *bme280, int32_t adc_T) {
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
	int32_t var1, var2, T;
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	10da      	asrs	r2, r3, #3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	1ad3      	subs	r3, r2, r3
			* ((int32_t) bme280->dig_T2)) >> 11;
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	2126      	movs	r1, #38	; 0x26
 800abba:	5e52      	ldrsh	r2, [r2, r1]
 800abbc:	4353      	muls	r3, r2
	var1 = ((((adc_T >> 3) - ((int32_t) bme280->dig_T1 << 1)))
 800abbe:	12db      	asrs	r3, r3, #11
 800abc0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	111b      	asrs	r3, r3, #4
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800abca:	1a9b      	subs	r3, r3, r2
			* ((adc_T >> 4) - ((int32_t) bme280->dig_T1))) >> 12)
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	1112      	asrs	r2, r2, #4
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	8c89      	ldrh	r1, [r1, #36]	; 0x24
 800abd4:	1a52      	subs	r2, r2, r1
 800abd6:	4353      	muls	r3, r2
 800abd8:	131b      	asrs	r3, r3, #12
			* ((int32_t) bme280->dig_T3)) >> 14;
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	2128      	movs	r1, #40	; 0x28
 800abde:	5e52      	ldrsh	r2, [r2, r1]
 800abe0:	4353      	muls	r3, r2
	var2 = (((((adc_T >> 4) - ((int32_t) bme280->dig_T1))
 800abe2:	139b      	asrs	r3, r3, #14
 800abe4:	613b      	str	r3, [r7, #16]
	bme280->t_fine = var1 + var2;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	18d2      	adds	r2, r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	649a      	str	r2, [r3, #72]	; 0x48
	T = (bme280->t_fine * 5 + 128) >> 8;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abf4:	0013      	movs	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	189b      	adds	r3, r3, r2
 800abfa:	3380      	adds	r3, #128	; 0x80
 800abfc:	121b      	asrs	r3, r3, #8
 800abfe:	60fb      	str	r3, [r7, #12]
	return T;
 800ac00:	68fb      	ldr	r3, [r7, #12]
}
 800ac02:	0018      	movs	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	b006      	add	sp, #24
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <_BME280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t _BME280_compensate_P_int64(bme280TypeDef *bme280, int32_t adc_P) {
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b0ad      	sub	sp, #180	; 0xb4
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	2394      	movs	r3, #148	; 0x94
 800ac14:	18fa      	adds	r2, r7, r3
 800ac16:	6010      	str	r0, [r2, #0]
 800ac18:	2290      	movs	r2, #144	; 0x90
 800ac1a:	18ba      	adds	r2, r7, r2
 800ac1c:	6011      	str	r1, [r2, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t) bme280->t_fine) - 128000;
 800ac1e:	18fa      	adds	r2, r7, r3
 800ac20:	6813      	ldr	r3, [r2, #0]
 800ac22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac24:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac26:	17db      	asrs	r3, r3, #31
 800ac28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac2a:	4ace      	ldr	r2, [pc, #824]	; (800af64 <_BME280_compensate_P_int64+0x358>)
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	425b      	negs	r3, r3
 800ac30:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ac32:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ac34:	1880      	adds	r0, r0, r2
 800ac36:	4159      	adcs	r1, r3
 800ac38:	0002      	movs	r2, r0
 800ac3a:	000b      	movs	r3, r1
 800ac3c:	26a8      	movs	r6, #168	; 0xa8
 800ac3e:	19b9      	adds	r1, r7, r6
 800ac40:	600a      	str	r2, [r1, #0]
 800ac42:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) bme280->dig_P6;
 800ac44:	19ba      	adds	r2, r7, r6
 800ac46:	6853      	ldr	r3, [r2, #4]
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	19b9      	adds	r1, r7, r6
 800ac4c:	6808      	ldr	r0, [r1, #0]
 800ac4e:	6849      	ldr	r1, [r1, #4]
 800ac50:	f7f5 fc3a 	bl	80004c8 <__aeabi_lmul>
 800ac54:	0002      	movs	r2, r0
 800ac56:	000b      	movs	r3, r1
 800ac58:	0010      	movs	r0, r2
 800ac5a:	0019      	movs	r1, r3
 800ac5c:	2394      	movs	r3, #148	; 0x94
 800ac5e:	18fa      	adds	r2, r7, r3
 800ac60:	6813      	ldr	r3, [r2, #0]
 800ac62:	2234      	movs	r2, #52	; 0x34
 800ac64:	5e9b      	ldrsh	r3, [r3, r2]
 800ac66:	653b      	str	r3, [r7, #80]	; 0x50
 800ac68:	17db      	asrs	r3, r3, #31
 800ac6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac70:	f7f5 fc2a 	bl	80004c8 <__aeabi_lmul>
 800ac74:	0002      	movs	r2, r0
 800ac76:	000b      	movs	r3, r1
 800ac78:	21a0      	movs	r1, #160	; 0xa0
 800ac7a:	1878      	adds	r0, r7, r1
 800ac7c:	6002      	str	r2, [r0, #0]
 800ac7e:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) bme280->dig_P5) << 17);
 800ac80:	2394      	movs	r3, #148	; 0x94
 800ac82:	18fa      	adds	r2, r7, r3
 800ac84:	6813      	ldr	r3, [r2, #0]
 800ac86:	2232      	movs	r2, #50	; 0x32
 800ac88:	5e9b      	ldrsh	r3, [r3, r2]
 800ac8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac8c:	17db      	asrs	r3, r3, #31
 800ac8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac90:	19ba      	adds	r2, r7, r6
 800ac92:	6853      	ldr	r3, [r2, #4]
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac9a:	f7f5 fc15 	bl	80004c8 <__aeabi_lmul>
 800ac9e:	0002      	movs	r2, r0
 800aca0:	000b      	movs	r3, r1
 800aca2:	0bd1      	lsrs	r1, r2, #15
 800aca4:	045d      	lsls	r5, r3, #17
 800aca6:	430d      	orrs	r5, r1
 800aca8:	0454      	lsls	r4, r2, #17
 800acaa:	21a0      	movs	r1, #160	; 0xa0
 800acac:	187a      	adds	r2, r7, r1
 800acae:	6853      	ldr	r3, [r2, #4]
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	1912      	adds	r2, r2, r4
 800acb4:	416b      	adcs	r3, r5
 800acb6:	1878      	adds	r0, r7, r1
 800acb8:	6002      	str	r2, [r0, #0]
 800acba:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) bme280->dig_P4) << 35);
 800acbc:	2594      	movs	r5, #148	; 0x94
 800acbe:	197b      	adds	r3, r7, r5
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2230      	movs	r2, #48	; 0x30
 800acc4:	5e9b      	ldrsh	r3, [r3, r2]
 800acc6:	643b      	str	r3, [r7, #64]	; 0x40
 800acc8:	17db      	asrs	r3, r3, #31
 800acca:	647b      	str	r3, [r7, #68]	; 0x44
 800accc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd2:	2300      	movs	r3, #0
 800acd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800acd6:	000c      	movs	r4, r1
 800acd8:	187b      	adds	r3, r7, r1
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ace0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ace2:	1812      	adds	r2, r2, r0
 800ace4:	414b      	adcs	r3, r1
 800ace6:	1939      	adds	r1, r7, r4
 800ace8:	600a      	str	r2, [r1, #0]
 800acea:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 800acec:	0034      	movs	r4, r6
 800acee:	193b      	adds	r3, r7, r4
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	1939      	adds	r1, r7, r4
 800acf6:	6808      	ldr	r0, [r1, #0]
 800acf8:	6849      	ldr	r1, [r1, #4]
 800acfa:	f7f5 fbe5 	bl	80004c8 <__aeabi_lmul>
 800acfe:	0002      	movs	r2, r0
 800ad00:	000b      	movs	r3, r1
 800ad02:	0010      	movs	r0, r2
 800ad04:	0019      	movs	r1, r3
 800ad06:	197b      	adds	r3, r7, r5
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	222e      	movs	r2, #46	; 0x2e
 800ad0c:	5e9b      	ldrsh	r3, [r3, r2]
 800ad0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad10:	17db      	asrs	r3, r3, #31
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	f7f5 fbd6 	bl	80004c8 <__aeabi_lmul>
 800ad1c:	0002      	movs	r2, r0
 800ad1e:	000b      	movs	r3, r1
 800ad20:	0619      	lsls	r1, r3, #24
 800ad22:	468c      	mov	ip, r1
 800ad24:	0a10      	lsrs	r0, r2, #8
 800ad26:	2688      	movs	r6, #136	; 0x88
 800ad28:	19b9      	adds	r1, r7, r6
 800ad2a:	6008      	str	r0, [r1, #0]
 800ad2c:	19b8      	adds	r0, r7, r6
 800ad2e:	6800      	ldr	r0, [r0, #0]
 800ad30:	4661      	mov	r1, ip
 800ad32:	4308      	orrs	r0, r1
 800ad34:	19b9      	adds	r1, r7, r6
 800ad36:	6008      	str	r0, [r1, #0]
 800ad38:	121b      	asrs	r3, r3, #8
 800ad3a:	228c      	movs	r2, #140	; 0x8c
 800ad3c:	18ba      	adds	r2, r7, r2
 800ad3e:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) bme280->dig_P2) << 12);
 800ad40:	197b      	adds	r3, r7, r5
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	222c      	movs	r2, #44	; 0x2c
 800ad46:	5e9b      	ldrsh	r3, [r3, r2]
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad4a:	17db      	asrs	r3, r3, #31
 800ad4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad4e:	193b      	adds	r3, r7, r4
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad58:	f7f5 fbb6 	bl	80004c8 <__aeabi_lmul>
 800ad5c:	0002      	movs	r2, r0
 800ad5e:	000b      	movs	r3, r1
 800ad60:	0d11      	lsrs	r1, r2, #20
 800ad62:	468c      	mov	ip, r1
 800ad64:	0318      	lsls	r0, r3, #12
 800ad66:	2184      	movs	r1, #132	; 0x84
 800ad68:	1879      	adds	r1, r7, r1
 800ad6a:	6008      	str	r0, [r1, #0]
 800ad6c:	2084      	movs	r0, #132	; 0x84
 800ad6e:	1839      	adds	r1, r7, r0
 800ad70:	6808      	ldr	r0, [r1, #0]
 800ad72:	4661      	mov	r1, ip
 800ad74:	4308      	orrs	r0, r1
 800ad76:	2184      	movs	r1, #132	; 0x84
 800ad78:	1879      	adds	r1, r7, r1
 800ad7a:	6008      	str	r0, [r1, #0]
 800ad7c:	0313      	lsls	r3, r2, #12
 800ad7e:	2180      	movs	r1, #128	; 0x80
 800ad80:	187a      	adds	r2, r7, r1
 800ad82:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) bme280->dig_P3) >> 8)
 800ad84:	19bb      	adds	r3, r7, r6
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	1879      	adds	r1, r7, r1
 800ad8c:	6808      	ldr	r0, [r1, #0]
 800ad8e:	6849      	ldr	r1, [r1, #4]
 800ad90:	1812      	adds	r2, r2, r0
 800ad92:	414b      	adcs	r3, r1
 800ad94:	1939      	adds	r1, r7, r4
 800ad96:	600a      	str	r2, [r1, #0]
 800ad98:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) bme280->dig_P1) >> 33;
 800ad9a:	193b      	adds	r3, r7, r4
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	6859      	ldr	r1, [r3, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	2380      	movs	r3, #128	; 0x80
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	1880      	adds	r0, r0, r2
 800ada8:	4159      	adcs	r1, r3
 800adaa:	197b      	adds	r3, r7, r5
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb0:	623b      	str	r3, [r7, #32]
 800adb2:	2300      	movs	r3, #0
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
 800adb6:	6a3a      	ldr	r2, [r7, #32]
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	f7f5 fb85 	bl	80004c8 <__aeabi_lmul>
 800adbe:	0002      	movs	r2, r0
 800adc0:	000b      	movs	r3, r1
 800adc2:	1059      	asrs	r1, r3, #1
 800adc4:	1938      	adds	r0, r7, r4
 800adc6:	6001      	str	r1, [r0, #0]
 800adc8:	17db      	asrs	r3, r3, #31
 800adca:	21ac      	movs	r1, #172	; 0xac
 800adcc:	187a      	adds	r2, r7, r1
 800adce:	6013      	str	r3, [r2, #0]
	if (var1 == 0) {
 800add0:	193b      	adds	r3, r7, r4
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	187b      	adds	r3, r7, r1
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	431a      	orrs	r2, r3
 800adda:	d101      	bne.n	800ade0 <_BME280_compensate_P_int64+0x1d4>
		return 0; // avoid exception caused by division by zero
 800addc:	2300      	movs	r3, #0
 800adde:	e0bc      	b.n	800af5a <_BME280_compensate_P_int64+0x34e>
	}
	p = 1048576 - adc_P;
 800ade0:	2390      	movs	r3, #144	; 0x90
 800ade2:	18fb      	adds	r3, r7, r3
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	2380      	movs	r3, #128	; 0x80
 800ade8:	035b      	lsls	r3, r3, #13
 800adea:	1a9b      	subs	r3, r3, r2
 800adec:	2498      	movs	r4, #152	; 0x98
 800adee:	193a      	adds	r2, r7, r4
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	17db      	asrs	r3, r3, #31
 800adf4:	259c      	movs	r5, #156	; 0x9c
 800adf6:	197a      	adds	r2, r7, r5
 800adf8:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 800adfa:	193b      	adds	r3, r7, r4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	105b      	asrs	r3, r3, #1
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	193b      	adds	r3, r7, r4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	07db      	lsls	r3, r3, #31
 800ae08:	61bb      	str	r3, [r7, #24]
 800ae0a:	20a0      	movs	r0, #160	; 0xa0
 800ae0c:	183a      	adds	r2, r7, r0
 800ae0e:	6853      	ldr	r3, [r2, #4]
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	69b8      	ldr	r0, [r7, #24]
 800ae14:	69f9      	ldr	r1, [r7, #28]
 800ae16:	1a80      	subs	r0, r0, r2
 800ae18:	4199      	sbcs	r1, r3
 800ae1a:	4a53      	ldr	r2, [pc, #332]	; (800af68 <_BME280_compensate_P_int64+0x35c>)
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f7f5 fb53 	bl	80004c8 <__aeabi_lmul>
 800ae22:	0002      	movs	r2, r0
 800ae24:	000b      	movs	r3, r1
 800ae26:	0010      	movs	r0, r2
 800ae28:	0019      	movs	r1, r3
 800ae2a:	23a8      	movs	r3, #168	; 0xa8
 800ae2c:	18fa      	adds	r2, r7, r3
 800ae2e:	6853      	ldr	r3, [r2, #4]
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	f7f5 fb25 	bl	8000480 <__aeabi_ldivmod>
 800ae36:	0002      	movs	r2, r0
 800ae38:	000b      	movs	r3, r1
 800ae3a:	1939      	adds	r1, r7, r4
 800ae3c:	600a      	str	r2, [r1, #0]
 800ae3e:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) bme280->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800ae40:	2694      	movs	r6, #148	; 0x94
 800ae42:	19ba      	adds	r2, r7, r6
 800ae44:	6813      	ldr	r3, [r2, #0]
 800ae46:	223a      	movs	r2, #58	; 0x3a
 800ae48:	5e9b      	ldrsh	r3, [r3, r2]
 800ae4a:	613b      	str	r3, [r7, #16]
 800ae4c:	17db      	asrs	r3, r3, #31
 800ae4e:	617b      	str	r3, [r7, #20]
 800ae50:	197a      	adds	r2, r7, r5
 800ae52:	6813      	ldr	r3, [r2, #0]
 800ae54:	04da      	lsls	r2, r3, #19
 800ae56:	1939      	adds	r1, r7, r4
 800ae58:	680b      	ldr	r3, [r1, #0]
 800ae5a:	0b5b      	lsrs	r3, r3, #13
 800ae5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae60:	4313      	orrs	r3, r2
 800ae62:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae64:	197a      	adds	r2, r7, r5
 800ae66:	6813      	ldr	r3, [r2, #0]
 800ae68:	135b      	asrs	r3, r3, #13
 800ae6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae70:	6938      	ldr	r0, [r7, #16]
 800ae72:	6979      	ldr	r1, [r7, #20]
 800ae74:	f7f5 fb28 	bl	80004c8 <__aeabi_lmul>
 800ae78:	0002      	movs	r2, r0
 800ae7a:	000b      	movs	r3, r1
 800ae7c:	0010      	movs	r0, r2
 800ae7e:	0019      	movs	r1, r3
 800ae80:	197a      	adds	r2, r7, r5
 800ae82:	6813      	ldr	r3, [r2, #0]
 800ae84:	04da      	lsls	r2, r3, #19
 800ae86:	193b      	adds	r3, r7, r4
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	0b5b      	lsrs	r3, r3, #13
 800ae8c:	673b      	str	r3, [r7, #112]	; 0x70
 800ae8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae90:	4313      	orrs	r3, r2
 800ae92:	673b      	str	r3, [r7, #112]	; 0x70
 800ae94:	197a      	adds	r2, r7, r5
 800ae96:	6813      	ldr	r3, [r2, #0]
 800ae98:	135b      	asrs	r3, r3, #13
 800ae9a:	677b      	str	r3, [r7, #116]	; 0x74
 800ae9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ae9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aea0:	f7f5 fb12 	bl	80004c8 <__aeabi_lmul>
 800aea4:	0002      	movs	r2, r0
 800aea6:	000b      	movs	r3, r1
 800aea8:	01d9      	lsls	r1, r3, #7
 800aeaa:	0e50      	lsrs	r0, r2, #25
 800aeac:	4301      	orrs	r1, r0
 800aeae:	25a8      	movs	r5, #168	; 0xa8
 800aeb0:	1978      	adds	r0, r7, r5
 800aeb2:	6001      	str	r1, [r0, #0]
 800aeb4:	165b      	asrs	r3, r3, #25
 800aeb6:	22ac      	movs	r2, #172	; 0xac
 800aeb8:	18ba      	adds	r2, r7, r2
 800aeba:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t) bme280->dig_P8) * p) >> 19;
 800aebc:	19ba      	adds	r2, r7, r6
 800aebe:	6813      	ldr	r3, [r2, #0]
 800aec0:	2238      	movs	r2, #56	; 0x38
 800aec2:	5e9b      	ldrsh	r3, [r3, r2]
 800aec4:	60bb      	str	r3, [r7, #8]
 800aec6:	17db      	asrs	r3, r3, #31
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	193a      	adds	r2, r7, r4
 800aecc:	6853      	ldr	r3, [r2, #4]
 800aece:	6812      	ldr	r2, [r2, #0]
 800aed0:	68b8      	ldr	r0, [r7, #8]
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	f7f5 faf8 	bl	80004c8 <__aeabi_lmul>
 800aed8:	0002      	movs	r2, r0
 800aeda:	000b      	movs	r3, r1
 800aedc:	0359      	lsls	r1, r3, #13
 800aede:	0cd0      	lsrs	r0, r2, #19
 800aee0:	4301      	orrs	r1, r0
 800aee2:	20a0      	movs	r0, #160	; 0xa0
 800aee4:	1838      	adds	r0, r7, r0
 800aee6:	6001      	str	r1, [r0, #0]
 800aee8:	14db      	asrs	r3, r3, #19
 800aeea:	22a4      	movs	r2, #164	; 0xa4
 800aeec:	18ba      	adds	r2, r7, r2
 800aeee:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t) bme280->dig_P7) << 4);
 800aef0:	193a      	adds	r2, r7, r4
 800aef2:	6810      	ldr	r0, [r2, #0]
 800aef4:	6851      	ldr	r1, [r2, #4]
 800aef6:	197a      	adds	r2, r7, r5
 800aef8:	6853      	ldr	r3, [r2, #4]
 800aefa:	6812      	ldr	r2, [r2, #0]
 800aefc:	1880      	adds	r0, r0, r2
 800aefe:	4159      	adcs	r1, r3
 800af00:	23a0      	movs	r3, #160	; 0xa0
 800af02:	18fb      	adds	r3, r7, r3
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	1812      	adds	r2, r2, r0
 800af0a:	414b      	adcs	r3, r1
 800af0c:	0619      	lsls	r1, r3, #24
 800af0e:	0a10      	lsrs	r0, r2, #8
 800af10:	66b8      	str	r0, [r7, #104]	; 0x68
 800af12:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800af14:	4308      	orrs	r0, r1
 800af16:	66b8      	str	r0, [r7, #104]	; 0x68
 800af18:	121b      	asrs	r3, r3, #8
 800af1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af1c:	19bb      	adds	r3, r7, r6
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2236      	movs	r2, #54	; 0x36
 800af22:	5e9b      	ldrsh	r3, [r3, r2]
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	17db      	asrs	r3, r3, #31
 800af28:	607b      	str	r3, [r7, #4]
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	000b      	movs	r3, r1
 800af30:	0f1b      	lsrs	r3, r3, #28
 800af32:	0010      	movs	r0, r2
 800af34:	0100      	lsls	r0, r0, #4
 800af36:	6678      	str	r0, [r7, #100]	; 0x64
 800af38:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800af3a:	4318      	orrs	r0, r3
 800af3c:	6678      	str	r0, [r7, #100]	; 0x64
 800af3e:	000b      	movs	r3, r1
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	663b      	str	r3, [r7, #96]	; 0x60
 800af44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af48:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800af4a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800af4c:	1812      	adds	r2, r2, r0
 800af4e:	414b      	adcs	r3, r1
 800af50:	1939      	adds	r1, r7, r4
 800af52:	600a      	str	r2, [r1, #0]
 800af54:	604b      	str	r3, [r1, #4]
	return (uint32_t) p;
 800af56:	193b      	adds	r3, r7, r4
 800af58:	681b      	ldr	r3, [r3, #0]
}
 800af5a:	0018      	movs	r0, r3
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b02d      	add	sp, #180	; 0xb4
 800af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	fffe0c00 	.word	0xfffe0c00
 800af68:	00000c35 	.word	0x00000c35

0800af6c <_BME280_compensate_H_int32>:
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH
uint32_t _BME280_compensate_H_int32(bme280TypeDef *bme280, int32_t adc_H) {
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
	int32_t v_x1_u32r;
	v_x1_u32r = (bme280->t_fine - ((int32_t) 76800));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af7a:	4a2d      	ldr	r2, [pc, #180]	; (800b030 <_BME280_compensate_H_int32+0xc4>)
 800af7c:	4694      	mov	ip, r2
 800af7e:	4463      	add	r3, ip
 800af80:	60fb      	str	r3, [r7, #12]

	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	039a      	lsls	r2, r3, #14
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2142      	movs	r1, #66	; 0x42
 800af8a:	5e5b      	ldrsh	r3, [r3, r1]
 800af8c:	051b      	lsls	r3, r3, #20
 800af8e:	1ad2      	subs	r2, r2, r3
			- (((int32_t) bme280->dig_H5) * v_x1_u32r)) + ((int32_t) 16384))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2144      	movs	r1, #68	; 0x44
 800af94:	5e5b      	ldrsh	r3, [r3, r1]
 800af96:	0019      	movs	r1, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	434b      	muls	r3, r1
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	2280      	movs	r2, #128	; 0x80
 800afa0:	01d2      	lsls	r2, r2, #7
 800afa2:	4694      	mov	ip, r2
 800afa4:	4463      	add	r3, ip
			>> 15)
 800afa6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * ((int32_t) bme280->dig_H6)) >> 10)
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	2146      	movs	r1, #70	; 0x46
 800afac:	5c52      	ldrb	r2, [r2, r1]
 800afae:	0011      	movs	r1, r2
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	434a      	muls	r2, r1
 800afb4:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	2040      	movs	r0, #64	; 0x40
 800afba:	5c09      	ldrb	r1, [r1, r0]
 800afbc:	0008      	movs	r0, r1
 800afbe:	68f9      	ldr	r1, [r7, #12]
 800afc0:	4341      	muls	r1, r0
 800afc2:	12c9      	asrs	r1, r1, #11
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 800afc4:	2080      	movs	r0, #128	; 0x80
 800afc6:	0200      	lsls	r0, r0, #8
 800afc8:	4684      	mov	ip, r0
 800afca:	4461      	add	r1, ip
					* (((v_x1_u32r * ((int32_t) bme280->dig_H3)) >> 11)
 800afcc:	434a      	muls	r2, r1
							+ ((int32_t) 32768))) >> 10) + ((int32_t) 2097152))
 800afce:	1292      	asrs	r2, r2, #10
 800afd0:	2180      	movs	r1, #128	; 0x80
 800afd2:	0389      	lsls	r1, r1, #14
 800afd4:	468c      	mov	ip, r1
 800afd6:	4462      	add	r2, ip
					* ((int32_t) bme280->dig_H2) + 8192) >> 14));
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	203e      	movs	r0, #62	; 0x3e
 800afdc:	5e09      	ldrsh	r1, [r1, r0]
 800afde:	434a      	muls	r2, r1
 800afe0:	2180      	movs	r1, #128	; 0x80
 800afe2:	0189      	lsls	r1, r1, #6
 800afe4:	468c      	mov	ip, r1
 800afe6:	4462      	add	r2, ip
 800afe8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t) bme280->dig_H4) << 20)
 800afea:	4353      	muls	r3, r2
 800afec:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	13db      	asrs	r3, r3, #15
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	13d2      	asrs	r2, r2, #15
 800aff6:	4353      	muls	r3, r2
 800aff8:	11db      	asrs	r3, r3, #7
					* ((int32_t) bme280->dig_H1)) >> 4));
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	213c      	movs	r1, #60	; 0x3c
 800affe:	5c52      	ldrb	r2, [r2, r1]
 800b000:	4353      	muls	r3, r2
 800b002:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	da00      	bge.n	800b012 <_BME280_compensate_H_int32+0xa6>
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	22c8      	movs	r2, #200	; 0xc8
 800b018:	0552      	lsls	r2, r2, #21
 800b01a:	4293      	cmp	r3, r2
 800b01c:	dd01      	ble.n	800b022 <_BME280_compensate_H_int32+0xb6>
 800b01e:	23c8      	movs	r3, #200	; 0xc8
 800b020:	055b      	lsls	r3, r3, #21
 800b022:	60fb      	str	r3, [r7, #12]
	return (uint32_t) (v_x1_u32r >> 12);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	131b      	asrs	r3, r3, #12
}
 800b028:	0018      	movs	r0, r3
 800b02a:	46bd      	mov	sp, r7
 800b02c:	b004      	add	sp, #16
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	fffed400 	.word	0xfffed400

0800b034 <lis3mdlInit>:
 *
 * @param  I2C handler
 *
 * @retval None
 */
void lis3mdlInit(lis3mdlTypeDef *lis3mdl, I2C_HandleTypeDef *I2Chandler) {
 800b034:	b5b0      	push	{r4, r5, r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af04      	add	r7, sp, #16
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	uint8_t ctrl1 = LIS3MDL_CTRL1_REG_OM << 6 | LIS3MDL_CTRL1_REG_ODR << 4;
 800b03e:	210f      	movs	r1, #15
 800b040:	187b      	adds	r3, r7, r1
 800b042:	2240      	movs	r2, #64	; 0x40
 800b044:	701a      	strb	r2, [r3, #0]
	uint8_t ctrl2 = LIS3MDL_CTRL2_REG_FS << 6;
 800b046:	240e      	movs	r4, #14
 800b048:	193b      	adds	r3, r7, r4
 800b04a:	2200      	movs	r2, #0
 800b04c:	701a      	strb	r2, [r3, #0]
	uint8_t ctrl3 = LIS3MDL_CTRL3_REG_MODE_POWERDOWN;
 800b04e:	250d      	movs	r5, #13
 800b050:	197b      	adds	r3, r7, r5
 800b052:	2202      	movs	r2, #2
 800b054:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG1, 1, &ctrl1, 1,
 800b056:	6838      	ldr	r0, [r7, #0]
 800b058:	2364      	movs	r3, #100	; 0x64
 800b05a:	9302      	str	r3, [sp, #8]
 800b05c:	2301      	movs	r3, #1
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	187b      	adds	r3, r7, r1
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2301      	movs	r3, #1
 800b066:	2220      	movs	r2, #32
 800b068:	2138      	movs	r1, #56	; 0x38
 800b06a:	f7f9 fde7 	bl	8004c3c <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG2, 1, &ctrl2, 1,
 800b06e:	6838      	ldr	r0, [r7, #0]
 800b070:	2364      	movs	r3, #100	; 0x64
 800b072:	9302      	str	r3, [sp, #8]
 800b074:	2301      	movs	r3, #1
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	193b      	adds	r3, r7, r4
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	2301      	movs	r3, #1
 800b07e:	2221      	movs	r2, #33	; 0x21
 800b080:	2138      	movs	r1, #56	; 0x38
 800b082:	f7f9 fddb 	bl	8004c3c <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	HAL_I2C_Mem_Write(I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1, &ctrl3, 1,
 800b086:	6838      	ldr	r0, [r7, #0]
 800b088:	2364      	movs	r3, #100	; 0x64
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	2301      	movs	r3, #1
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	197b      	adds	r3, r7, r5
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	2301      	movs	r3, #1
 800b096:	2222      	movs	r2, #34	; 0x22
 800b098:	2138      	movs	r1, #56	; 0x38
 800b09a:	f7f9 fdcf 	bl	8004c3c <HAL_I2C_Mem_Write>
	LIS3MDL_I2C_TIMEOUT);
	lis3mdl->I2Chandler = I2Chandler;
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	23a1      	movs	r3, #161	; 0xa1
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	50d1      	str	r1, [r2, r3]
}
 800b0a8:	46c0      	nop			; (mov r8, r8)
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	b004      	add	sp, #16
 800b0ae:	bdb0      	pop	{r4, r5, r7, pc}

0800b0b0 <lis3mdlRead>:
 *
 * @param  LIS3MDL handler
 *
 * @retval None
 */
void lis3mdlRead(lis3mdlTypeDef *lis3mdl) {
 800b0b0:	b5b0      	push	{r4, r5, r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af04      	add	r7, sp, #16
 800b0b6:	6078      	str	r0, [r7, #4]

	uint8_t ctrl3 = LIS3MDL_CTRL3_REG_MODE_SINGLE; //set single
 800b0b8:	250f      	movs	r5, #15
 800b0ba:	197b      	adds	r3, r7, r5
 800b0bc:	2201      	movs	r2, #1
 800b0be:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1,
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	23a1      	movs	r3, #161	; 0xa1
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	58d0      	ldr	r0, [r2, r3]
 800b0c8:	2364      	movs	r3, #100	; 0x64
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	197b      	adds	r3, r7, r5
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	2222      	movs	r2, #34	; 0x22
 800b0d8:	2138      	movs	r1, #56	; 0x38
 800b0da:	f7f9 fdaf 	bl	8004c3c <HAL_I2C_Mem_Write>
			&ctrl3, 1, LIS3MDL_I2C_TIMEOUT); //turn on
	HAL_Delay(10);
 800b0de:	200a      	movs	r0, #10
 800b0e0:	f7f8 fa10 	bl	8003504 <HAL_Delay>
	uint8_t readings[6];

	HAL_I2C_Mem_Read(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_OUT_X_H, 1,
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	23a1      	movs	r3, #161	; 0xa1
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	58d0      	ldr	r0, [r2, r3]
 800b0ec:	2364      	movs	r3, #100	; 0x64
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	2306      	movs	r3, #6
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	2408      	movs	r4, #8
 800b0f6:	193b      	adds	r3, r7, r4
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	2229      	movs	r2, #41	; 0x29
 800b0fe:	2138      	movs	r1, #56	; 0x38
 800b100:	f7f9 feca 	bl	8004e98 <HAL_I2C_Mem_Read>
			readings, 6, LIS3MDL_I2C_TIMEOUT); //read

	ctrl3 = LIS3MDL_CTRL3_REG_MODE_POWERDOWN; //set power down
 800b104:	197b      	adds	r3, r7, r5
 800b106:	2202      	movs	r2, #2
 800b108:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(lis3mdl->I2Chandler, LIS3MDL_ADDR, LIS3MDL_CTRL_REG3, 1,
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	23a1      	movs	r3, #161	; 0xa1
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	58d0      	ldr	r0, [r2, r3]
 800b112:	2364      	movs	r3, #100	; 0x64
 800b114:	9302      	str	r3, [sp, #8]
 800b116:	2301      	movs	r3, #1
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	197b      	adds	r3, r7, r5
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	2301      	movs	r3, #1
 800b120:	2222      	movs	r2, #34	; 0x22
 800b122:	2138      	movs	r1, #56	; 0x38
 800b124:	f7f9 fd8a 	bl	8004c3c <HAL_I2C_Mem_Write>
			&ctrl3, 1, LIS3MDL_I2C_TIMEOUT); //turn off

	lis3mdl->xValue = (uint16_t) readings[0] << 8 | readings[1];
 800b128:	0021      	movs	r1, r4
 800b12a:	187b      	adds	r3, r7, r1
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	021b      	lsls	r3, r3, #8
 800b130:	b21a      	sxth	r2, r3
 800b132:	187b      	adds	r3, r7, r1
 800b134:	785b      	ldrb	r3, [r3, #1]
 800b136:	b21b      	sxth	r3, r3
 800b138:	4313      	orrs	r3, r2
 800b13a:	b21a      	sxth	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	801a      	strh	r2, [r3, #0]
	lis3mdl->yValue = (uint16_t) readings[2] << 8 | readings[3];
 800b140:	187b      	adds	r3, r7, r1
 800b142:	789b      	ldrb	r3, [r3, #2]
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	b21a      	sxth	r2, r3
 800b148:	187b      	adds	r3, r7, r1
 800b14a:	78db      	ldrb	r3, [r3, #3]
 800b14c:	b21b      	sxth	r3, r3
 800b14e:	4313      	orrs	r3, r2
 800b150:	b21a      	sxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	805a      	strh	r2, [r3, #2]
	lis3mdl->zValue = (uint16_t) readings[4] << 8 | readings[5];
 800b156:	187b      	adds	r3, r7, r1
 800b158:	791b      	ldrb	r3, [r3, #4]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	b21a      	sxth	r2, r3
 800b15e:	187b      	adds	r3, r7, r1
 800b160:	795b      	ldrb	r3, [r3, #5]
 800b162:	b21b      	sxth	r3, r3
 800b164:	4313      	orrs	r3, r2
 800b166:	b21a      	sxth	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	809a      	strh	r2, [r3, #4]

	//search for max and min values in conatainer
	lis3mdl->xMax = findMax(lis3mdl->xValueContainter,
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	330e      	adds	r3, #14
 800b170:	2164      	movs	r1, #100	; 0x64
 800b172:	0018      	movs	r0, r3
 800b174:	f000 f946 	bl	800b404 <findMax>
 800b178:	0003      	movs	r3, r0
 800b17a:	0019      	movs	r1, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a7d      	ldr	r2, [pc, #500]	; (800b374 <lis3mdlRead+0x2c4>)
 800b180:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->yMax = findMax(lis3mdl->yValueContainter,
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	33d6      	adds	r3, #214	; 0xd6
 800b186:	2164      	movs	r1, #100	; 0x64
 800b188:	0018      	movs	r0, r3
 800b18a:	f000 f93b 	bl	800b404 <findMax>
 800b18e:	0003      	movs	r3, r0
 800b190:	0019      	movs	r1, r3
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	239a      	movs	r3, #154	; 0x9a
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->zMax = findMax(lis3mdl->zValueContainter,
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	339f      	adds	r3, #159	; 0x9f
 800b19e:	33ff      	adds	r3, #255	; 0xff
 800b1a0:	2164      	movs	r1, #100	; 0x64
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f000 f92e 	bl	800b404 <findMax>
 800b1a8:	0003      	movs	r3, r0
 800b1aa:	0019      	movs	r1, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a72      	ldr	r2, [pc, #456]	; (800b378 <lis3mdlRead+0x2c8>)
 800b1b0:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);

	lis3mdl->xMin = findMin(lis3mdl->xValueContainter,
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	330e      	adds	r3, #14
 800b1b6:	2164      	movs	r1, #100	; 0x64
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f000 f957 	bl	800b46c <findMin>
 800b1be:	0003      	movs	r3, r0
 800b1c0:	0019      	movs	r1, r3
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	239b      	movs	r3, #155	; 0x9b
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->yMin = findMin(lis3mdl->yValueContainter,
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	33d6      	adds	r3, #214	; 0xd6
 800b1ce:	2164      	movs	r1, #100	; 0x64
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	f000 f94b 	bl	800b46c <findMin>
 800b1d6:	0003      	movs	r3, r0
 800b1d8:	0019      	movs	r1, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a67      	ldr	r2, [pc, #412]	; (800b37c <lis3mdlRead+0x2cc>)
 800b1de:	5299      	strh	r1, [r3, r2]
	LIS3MDL_CONTAINER_SIZE);
	lis3mdl->zMin = findMin(lis3mdl->zValueContainter,
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	339f      	adds	r3, #159	; 0x9f
 800b1e4:	33ff      	adds	r3, #255	; 0xff
 800b1e6:	2164      	movs	r1, #100	; 0x64
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f000 f93f 	bl	800b46c <findMin>
 800b1ee:	0003      	movs	r3, r0
 800b1f0:	0019      	movs	r1, r3
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	239c      	movs	r3, #156	; 0x9c
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	52d1      	strh	r1, [r2, r3]
	LIS3MDL_CONTAINER_SIZE);

	//count mid values
	lis3mdl->xMid = (lis3mdl->xMax + lis3mdl->xMin) / 2;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a5d      	ldr	r2, [pc, #372]	; (800b374 <lis3mdlRead+0x2c4>)
 800b1fe:	5e9b      	ldrsh	r3, [r3, r2]
 800b200:	0019      	movs	r1, r3
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	239b      	movs	r3, #155	; 0x9b
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	5ed3      	ldrsh	r3, [r2, r3]
 800b20a:	18cb      	adds	r3, r1, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	da00      	bge.n	800b212 <lis3mdlRead+0x162>
 800b210:	3301      	adds	r3, #1
 800b212:	105b      	asrs	r3, r3, #1
 800b214:	b219      	sxth	r1, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a59      	ldr	r2, [pc, #356]	; (800b380 <lis3mdlRead+0x2d0>)
 800b21a:	5299      	strh	r1, [r3, r2]
	lis3mdl->yMid = (lis3mdl->yMax + lis3mdl->yMin) / 2;
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	239a      	movs	r3, #154	; 0x9a
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	5ed3      	ldrsh	r3, [r2, r3]
 800b224:	0019      	movs	r1, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a54      	ldr	r2, [pc, #336]	; (800b37c <lis3mdlRead+0x2cc>)
 800b22a:	5e9b      	ldrsh	r3, [r3, r2]
 800b22c:	18cb      	adds	r3, r1, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da00      	bge.n	800b234 <lis3mdlRead+0x184>
 800b232:	3301      	adds	r3, #1
 800b234:	105b      	asrs	r3, r3, #1
 800b236:	b219      	sxth	r1, r3
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	239d      	movs	r3, #157	; 0x9d
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	52d1      	strh	r1, [r2, r3]
	lis3mdl->zMid = (lis3mdl->zMax + lis3mdl->zMin) / 2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a4d      	ldr	r2, [pc, #308]	; (800b378 <lis3mdlRead+0x2c8>)
 800b244:	5e9b      	ldrsh	r3, [r3, r2]
 800b246:	0019      	movs	r1, r3
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	239c      	movs	r3, #156	; 0x9c
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	5ed3      	ldrsh	r3, [r2, r3]
 800b250:	18cb      	adds	r3, r1, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	da00      	bge.n	800b258 <lis3mdlRead+0x1a8>
 800b256:	3301      	adds	r3, #1
 800b258:	105b      	asrs	r3, r3, #1
 800b25a:	b219      	sxth	r1, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a49      	ldr	r2, [pc, #292]	; (800b384 <lis3mdlRead+0x2d4>)
 800b260:	5299      	strh	r1, [r3, r2]

	//correct measurement with calibration data
	lis3mdl->xCalibrated = lis3mdl->xValue - lis3mdl->xMid;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	5e9b      	ldrsh	r3, [r3, r2]
 800b268:	b29a      	uxth	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4944      	ldr	r1, [pc, #272]	; (800b380 <lis3mdlRead+0x2d0>)
 800b26e:	5e5b      	ldrsh	r3, [r3, r1]
 800b270:	b29b      	uxth	r3, r3
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	b29b      	uxth	r3, r3
 800b276:	b21a      	sxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	80da      	strh	r2, [r3, #6]
	lis3mdl->yCalibrated = lis3mdl->yValue - lis3mdl->yMid;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	5e9b      	ldrsh	r3, [r3, r2]
 800b282:	b29a      	uxth	r2, r3
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	239d      	movs	r3, #157	; 0x9d
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	5ecb      	ldrsh	r3, [r1, r3]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	b29b      	uxth	r3, r3
 800b292:	b21a      	sxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	811a      	strh	r2, [r3, #8]
	lis3mdl->zCalibrated = lis3mdl->zValue - lis3mdl->zMid;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2204      	movs	r2, #4
 800b29c:	5e9b      	ldrsh	r3, [r3, r2]
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4938      	ldr	r1, [pc, #224]	; (800b384 <lis3mdlRead+0x2d4>)
 800b2a4:	5e5b      	ldrsh	r3, [r3, r1]
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	b21a      	sxth	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	815a      	strh	r2, [r3, #10]

	lis3mdl->compassAngleXY = atan2((double) lis3mdl->yCalibrated,
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	5e9b      	ldrsh	r3, [r3, r2]
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	f7f7 fd6f 	bl	8002d9c <__aeabi_i2d>
 800b2be:	0004      	movs	r4, r0
 800b2c0:	000d      	movs	r5, r1
			(double) lis3mdl->xCalibrated);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2206      	movs	r2, #6
 800b2c6:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleXY = atan2((double) lis3mdl->yCalibrated,
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f7f7 fd67 	bl	8002d9c <__aeabi_i2d>
 800b2ce:	0002      	movs	r2, r0
 800b2d0:	000b      	movs	r3, r1
 800b2d2:	0020      	movs	r0, r4
 800b2d4:	0029      	movs	r1, r5
 800b2d6:	f004 fcc1 	bl	800fc5c <atan2>
 800b2da:	0002      	movs	r2, r0
 800b2dc:	000b      	movs	r3, r1
 800b2de:	0010      	movs	r0, r2
 800b2e0:	0019      	movs	r1, r3
 800b2e2:	f7f7 fdf9 	bl	8002ed8 <__aeabi_d2f>
 800b2e6:	1c01      	adds	r1, r0, #0
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	239e      	movs	r3, #158	; 0x9e
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	50d1      	str	r1, [r2, r3]
	lis3mdl->compassAngleXZ = atan2((double) lis3mdl->zCalibrated,
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	220a      	movs	r2, #10
 800b2f4:	5e9b      	ldrsh	r3, [r3, r2]
 800b2f6:	0018      	movs	r0, r3
 800b2f8:	f7f7 fd50 	bl	8002d9c <__aeabi_i2d>
 800b2fc:	0004      	movs	r4, r0
 800b2fe:	000d      	movs	r5, r1
			(double) lis3mdl->xCalibrated);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2206      	movs	r2, #6
 800b304:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleXZ = atan2((double) lis3mdl->zCalibrated,
 800b306:	0018      	movs	r0, r3
 800b308:	f7f7 fd48 	bl	8002d9c <__aeabi_i2d>
 800b30c:	0002      	movs	r2, r0
 800b30e:	000b      	movs	r3, r1
 800b310:	0020      	movs	r0, r4
 800b312:	0029      	movs	r1, r5
 800b314:	f004 fca2 	bl	800fc5c <atan2>
 800b318:	0002      	movs	r2, r0
 800b31a:	000b      	movs	r3, r1
 800b31c:	0010      	movs	r0, r2
 800b31e:	0019      	movs	r1, r3
 800b320:	f7f7 fdda 	bl	8002ed8 <__aeabi_d2f>
 800b324:	1c01      	adds	r1, r0, #0
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	239f      	movs	r3, #159	; 0x9f
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	50d1      	str	r1, [r2, r3]
	lis3mdl->compassAngleYZ = atan2((double) lis3mdl->zCalibrated,
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	220a      	movs	r2, #10
 800b332:	5e9b      	ldrsh	r3, [r3, r2]
 800b334:	0018      	movs	r0, r3
 800b336:	f7f7 fd31 	bl	8002d9c <__aeabi_i2d>
 800b33a:	0004      	movs	r4, r0
 800b33c:	000d      	movs	r5, r1
			(double) lis3mdl->yCalibrated);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2208      	movs	r2, #8
 800b342:	5e9b      	ldrsh	r3, [r3, r2]
	lis3mdl->compassAngleYZ = atan2((double) lis3mdl->zCalibrated,
 800b344:	0018      	movs	r0, r3
 800b346:	f7f7 fd29 	bl	8002d9c <__aeabi_i2d>
 800b34a:	0002      	movs	r2, r0
 800b34c:	000b      	movs	r3, r1
 800b34e:	0020      	movs	r0, r4
 800b350:	0029      	movs	r1, r5
 800b352:	f004 fc83 	bl	800fc5c <atan2>
 800b356:	0002      	movs	r2, r0
 800b358:	000b      	movs	r3, r1
 800b35a:	0010      	movs	r0, r2
 800b35c:	0019      	movs	r1, r3
 800b35e:	f7f7 fdbb 	bl	8002ed8 <__aeabi_d2f>
 800b362:	1c01      	adds	r1, r0, #0
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	23a0      	movs	r3, #160	; 0xa0
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	50d1      	str	r1, [r2, r3]

}
 800b36c:	46c0      	nop			; (mov r8, r8)
 800b36e:	46bd      	mov	sp, r7
 800b370:	b004      	add	sp, #16
 800b372:	bdb0      	pop	{r4, r5, r7, pc}
 800b374:	00000266 	.word	0x00000266
 800b378:	0000026a 	.word	0x0000026a
 800b37c:	0000026e 	.word	0x0000026e
 800b380:	00000272 	.word	0x00000272
 800b384:	00000276 	.word	0x00000276

0800b388 <lis3mdlGetCalibrationSample>:
 *
 * @param  LIS3MDL handler
 *
 * @retval None
 */
void lis3mdlGetCalibrationSample(lis3mdlTypeDef *lis3mdl) {
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

	//store actual values into calibration containter
	lis3mdl->xValueContainter[lis3mdl->measurementCounter] = lis3mdl->xValue;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	899b      	ldrh	r3, [r3, #12]
 800b394:	0018      	movs	r0, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2100      	movs	r1, #0
 800b39a:	5e59      	ldrsh	r1, [r3, r1]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	1d03      	adds	r3, r0, #4
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	18d3      	adds	r3, r2, r3
 800b3a4:	3306      	adds	r3, #6
 800b3a6:	1c0a      	adds	r2, r1, #0
 800b3a8:	801a      	strh	r2, [r3, #0]
	lis3mdl->yValueContainter[lis3mdl->measurementCounter] = lis3mdl->yValue;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	899b      	ldrh	r3, [r3, #12]
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2102      	movs	r1, #2
 800b3b4:	5e59      	ldrsh	r1, [r3, r1]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	0003      	movs	r3, r0
 800b3ba:	3368      	adds	r3, #104	; 0x68
 800b3bc:	005b      	lsls	r3, r3, #1
 800b3be:	18d3      	adds	r3, r2, r3
 800b3c0:	3306      	adds	r3, #6
 800b3c2:	1c0a      	adds	r2, r1, #0
 800b3c4:	801a      	strh	r2, [r3, #0]
	lis3mdl->zValueContainter[lis3mdl->measurementCounter] = lis3mdl->zValue;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	899b      	ldrh	r3, [r3, #12]
 800b3ca:	0018      	movs	r0, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2104      	movs	r1, #4
 800b3d0:	5e59      	ldrsh	r1, [r3, r1]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	0003      	movs	r3, r0
 800b3d6:	33cc      	adds	r3, #204	; 0xcc
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	18d3      	adds	r3, r2, r3
 800b3dc:	3306      	adds	r3, #6
 800b3de:	1c0a      	adds	r2, r1, #0
 800b3e0:	801a      	strh	r2, [r3, #0]

	//increment counter of actually readed value
	lis3mdl->measurementCounter++;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	899b      	ldrh	r3, [r3, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	819a      	strh	r2, [r3, #12]
	if (lis3mdl->measurementCounter > (LIS3MDL_CONTAINER_SIZE - 1))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	899b      	ldrh	r3, [r3, #12]
 800b3f2:	2b63      	cmp	r3, #99	; 0x63
 800b3f4:	d902      	bls.n	800b3fc <lis3mdlGetCalibrationSample+0x74>
		lis3mdl->measurementCounter = 0;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	819a      	strh	r2, [r3, #12]
}
 800b3fc:	46c0      	nop			; (mov r8, r8)
 800b3fe:	46bd      	mov	sp, r7
 800b400:	b002      	add	sp, #8
 800b402:	bd80      	pop	{r7, pc}

0800b404 <findMax>:

int16_t findMax(int16_t *data, uint16_t size) {
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	000a      	movs	r2, r1
 800b40e:	1cbb      	adds	r3, r7, #2
 800b410:	801a      	strh	r2, [r3, #0]

	int16_t max = -32768;
 800b412:	230e      	movs	r3, #14
 800b414:	18fb      	adds	r3, r7, r3
 800b416:	4a14      	ldr	r2, [pc, #80]	; (800b468 <findMax+0x64>)
 800b418:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b41a:	2300      	movs	r3, #0
 800b41c:	60bb      	str	r3, [r7, #8]
 800b41e:	e015      	b.n	800b44c <findMax+0x48>
		if (data[i] > max)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	18d3      	adds	r3, r2, r3
 800b428:	2200      	movs	r2, #0
 800b42a:	5e9b      	ldrsh	r3, [r3, r2]
 800b42c:	210e      	movs	r1, #14
 800b42e:	187a      	adds	r2, r7, r1
 800b430:	2000      	movs	r0, #0
 800b432:	5e12      	ldrsh	r2, [r2, r0]
 800b434:	429a      	cmp	r2, r3
 800b436:	da06      	bge.n	800b446 <findMax+0x42>
			max = data[i];
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	18d2      	adds	r2, r2, r3
 800b440:	187b      	adds	r3, r7, r1
 800b442:	8812      	ldrh	r2, [r2, #0]
 800b444:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	3301      	adds	r3, #1
 800b44a:	60bb      	str	r3, [r7, #8]
 800b44c:	1cbb      	adds	r3, r7, #2
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	429a      	cmp	r2, r3
 800b454:	d3e4      	bcc.n	800b420 <findMax+0x1c>
	}

	return max;
 800b456:	230e      	movs	r3, #14
 800b458:	18fb      	adds	r3, r7, r3
 800b45a:	2200      	movs	r2, #0
 800b45c:	5e9b      	ldrsh	r3, [r3, r2]

}
 800b45e:	0018      	movs	r0, r3
 800b460:	46bd      	mov	sp, r7
 800b462:	b004      	add	sp, #16
 800b464:	bd80      	pop	{r7, pc}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	ffff8000 	.word	0xffff8000

0800b46c <findMin>:
int16_t findMin(int16_t *data, uint16_t size) {
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	000a      	movs	r2, r1
 800b476:	1cbb      	adds	r3, r7, #2
 800b478:	801a      	strh	r2, [r3, #0]
	int16_t min = 32767;
 800b47a:	230e      	movs	r3, #14
 800b47c:	18fb      	adds	r3, r7, r3
 800b47e:	4a14      	ldr	r2, [pc, #80]	; (800b4d0 <findMin+0x64>)
 800b480:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b482:	2300      	movs	r3, #0
 800b484:	60bb      	str	r3, [r7, #8]
 800b486:	e015      	b.n	800b4b4 <findMin+0x48>
		if (data[i] < min)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	18d3      	adds	r3, r2, r3
 800b490:	2200      	movs	r2, #0
 800b492:	5e9b      	ldrsh	r3, [r3, r2]
 800b494:	210e      	movs	r1, #14
 800b496:	187a      	adds	r2, r7, r1
 800b498:	2000      	movs	r0, #0
 800b49a:	5e12      	ldrsh	r2, [r2, r0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	dd06      	ble.n	800b4ae <findMin+0x42>
			min = data[i];
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	005b      	lsls	r3, r3, #1
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	18d2      	adds	r2, r2, r3
 800b4a8:	187b      	adds	r3, r7, r1
 800b4aa:	8812      	ldrh	r2, [r2, #0]
 800b4ac:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60bb      	str	r3, [r7, #8]
 800b4b4:	1cbb      	adds	r3, r7, #2
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d3e4      	bcc.n	800b488 <findMin+0x1c>
	}

	return min;
 800b4be:	230e      	movs	r3, #14
 800b4c0:	18fb      	adds	r3, r7, r3
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b4c6:	0018      	movs	r0, r3
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	b004      	add	sp, #16
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	46c0      	nop			; (mov r8, r8)
 800b4d0:	00007fff 	.word	0x00007fff

0800b4d4 <rtcInit>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcInit(RTCChronoTypeDef *chrono) {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	HAL_RTC_Init(&hrtc);
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <rtcInit+0x4c>)
 800b4de:	0018      	movs	r0, r3
 800b4e0:	f7fb f862 	bl	80065a8 <HAL_RTC_Init>
	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2224      	movs	r2, #36	; 0x24
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	5499      	strb	r1, [r3, r2]

	chrono->chrono.year = 0;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	761a      	strb	r2, [r3, #24]
	chrono->chrono.month = 0;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	765a      	strb	r2, [r3, #25]
	chrono->chrono.day = 0;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	769a      	strb	r2, [r3, #26]
	chrono->chrono.hour = 0;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	76da      	strb	r2, [r3, #27]
	chrono->chrono.minute = 0;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hundredth = 0;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	779a      	strb	r2, [r3, #30]

}
 800b516:	46c0      	nop			; (mov r8, r8)
 800b518:	46bd      	mov	sp, r7
 800b51a:	b002      	add	sp, #8
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	46c0      	nop			; (mov r8, r8)
 800b520:	20000604 	.word	0x20000604

0800b524 <rtcGetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcGetTime(RTCChronoTypeDef *chrono) {
 800b524:	b5b0      	push	{r4, r5, r7, lr}
 800b526:	b090      	sub	sp, #64	; 0x40
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800b52c:	49ee      	ldr	r1, [pc, #952]	; (800b8e8 <rtcGetTime+0x3c4>)
 800b52e:	4bef      	ldr	r3, [pc, #956]	; (800b8ec <rtcGetTime+0x3c8>)
 800b530:	2200      	movs	r2, #0
 800b532:	0018      	movs	r0, r3
 800b534:	f7fb f976 	bl	8006824 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800b538:	49ed      	ldr	r1, [pc, #948]	; (800b8f0 <rtcGetTime+0x3cc>)
 800b53a:	4bec      	ldr	r3, [pc, #944]	; (800b8ec <rtcGetTime+0x3c8>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	0018      	movs	r0, r3
 800b540:	f7fb fa5e 	bl	8006a00 <HAL_RTC_GetDate>

	chrono->actual.hour = Time.Hours;
 800b544:	4be8      	ldr	r3, [pc, #928]	; (800b8e8 <rtcGetTime+0x3c4>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b25a      	sxtb	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	70da      	strb	r2, [r3, #3]

	chrono->actual.minute = Time.Minutes;
 800b54e:	4be6      	ldr	r3, [pc, #920]	; (800b8e8 <rtcGetTime+0x3c4>)
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	b25a      	sxtb	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800b558:	4be3      	ldr	r3, [pc, #908]	; (800b8e8 <rtcGetTime+0x3c4>)
 800b55a:	789b      	ldrb	r3, [r3, #2]
 800b55c:	b25a      	sxtb	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	715a      	strb	r2, [r3, #5]

	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255); //^ subsecond from RTC is 1/255 of second(becouse of RTC sync predivider)
 800b562:	4be1      	ldr	r3, [pc, #900]	; (800b8e8 <rtcGetTime+0x3c4>)
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	0013      	movs	r3, r2
 800b568:	065b      	lsls	r3, r3, #25
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	189b      	adds	r3, r3, r2
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	1a9b      	subs	r3, r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4adf      	ldr	r2, [pc, #892]	; (800b8f4 <rtcGetTime+0x3d0>)
 800b578:	4694      	mov	ip, r2
 800b57a:	4463      	add	r3, ip
 800b57c:	21ff      	movs	r1, #255	; 0xff
 800b57e:	0018      	movs	r0, r3
 800b580:	f7f4 fdca 	bl	8000118 <__udivsi3>
 800b584:	0003      	movs	r3, r0
 800b586:	b25a      	sxtb	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	719a      	strb	r2, [r3, #6]

	chrono->actual.day = Date.Date;
 800b58c:	4bd8      	ldr	r3, [pc, #864]	; (800b8f0 <rtcGetTime+0x3cc>)
 800b58e:	789b      	ldrb	r3, [r3, #2]
 800b590:	b25a      	sxtb	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800b596:	4bd6      	ldr	r3, [pc, #856]	; (800b8f0 <rtcGetTime+0x3cc>)
 800b598:	785b      	ldrb	r3, [r3, #1]
 800b59a:	b25a      	sxtb	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800b5a0:	4bd3      	ldr	r3, [pc, #844]	; (800b8f0 <rtcGetTime+0x3cc>)
 800b5a2:	78db      	ldrb	r3, [r3, #3]
 800b5a4:	b25a      	sxtb	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	701a      	strb	r2, [r3, #0]

	//							MOON PHASE COUNT

	float X = (chrono->actual.month + 9) / 12;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	785b      	ldrb	r3, [r3, #1]
 800b5ae:	b25b      	sxtb	r3, r3
 800b5b0:	3309      	adds	r3, #9
 800b5b2:	210c      	movs	r1, #12
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f7f4 fe39 	bl	800022c <__divsi3>
 800b5ba:	0003      	movs	r3, r0
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f7f5 fda9 	bl	8001114 <__aeabi_i2f>
 800b5c2:	1c03      	adds	r3, r0, #0
 800b5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t A = 4716 + (chrono->actual.year + 2000) + (uint32_t) X;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	b25b      	sxtb	r3, r3
 800b5cc:	001c      	movs	r4, r3
 800b5ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5d0:	f7f4 ffa2 	bl	8000518 <__aeabi_f2uiz>
 800b5d4:	0003      	movs	r3, r0
 800b5d6:	18e3      	adds	r3, r4, r3
 800b5d8:	4ac7      	ldr	r2, [pc, #796]	; (800b8f8 <rtcGetTime+0x3d4>)
 800b5da:	4694      	mov	ip, r2
 800b5dc:	4463      	add	r3, ip
 800b5de:	63bb      	str	r3, [r7, #56]	; 0x38
	float Y = 275 * chrono->actual.month / 9;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	b25b      	sxtb	r3, r3
 800b5e6:	001a      	movs	r2, r3
 800b5e8:	0013      	movs	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	009a      	lsls	r2, r3, #2
 800b5f4:	189b      	adds	r3, r3, r2
 800b5f6:	2109      	movs	r1, #9
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f7f4 fe17 	bl	800022c <__divsi3>
 800b5fe:	0003      	movs	r3, r0
 800b600:	0018      	movs	r0, r3
 800b602:	f7f5 fd87 	bl	8001114 <__aeabi_i2f>
 800b606:	1c03      	adds	r3, r0, #0
 800b608:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 7 * A / 4;
 800b60a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b60c:	0013      	movs	r3, r2
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	1a9b      	subs	r3, r3, r2
 800b612:	089b      	lsrs	r3, r3, #2
 800b614:	0018      	movs	r0, r3
 800b616:	f7f5 fdc3 	bl	80011a0 <__aeabi_ui2f>
 800b61a:	1c03      	adds	r3, r0, #0
 800b61c:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	b25b      	sxtb	r3, r3
 800b624:	22fa      	movs	r2, #250	; 0xfa
 800b626:	00d2      	lsls	r2, r2, #3
 800b628:	189a      	adds	r2, r3, r2
 800b62a:	0013      	movs	r3, r2
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	189b      	adds	r3, r3, r2
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	0018      	movs	r0, r3
 800b63a:	f7f7 fbaf 	bl	8002d9c <__aeabi_i2d>
 800b63e:	2280      	movs	r2, #128	; 0x80
 800b640:	0612      	lsls	r2, r2, #24
 800b642:	4bae      	ldr	r3, [pc, #696]	; (800b8fc <rtcGetTime+0x3d8>)
 800b644:	f7f5 fde8 	bl	8001218 <__aeabi_dadd>
 800b648:	0002      	movs	r2, r0
 800b64a:	000b      	movs	r3, r1
 800b64c:	0014      	movs	r4, r2
 800b64e:	001d      	movs	r5, r3
 800b650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b652:	f7f4 ff61 	bl	8000518 <__aeabi_f2uiz>
 800b656:	0003      	movs	r3, r0
 800b658:	0018      	movs	r0, r3
 800b65a:	f7f7 fbcf 	bl	8002dfc <__aeabi_ui2d>
 800b65e:	0002      	movs	r2, r0
 800b660:	000b      	movs	r3, r1
 800b662:	0020      	movs	r0, r4
 800b664:	0029      	movs	r1, r5
 800b666:	f7f5 fdd7 	bl	8001218 <__aeabi_dadd>
 800b66a:	0002      	movs	r2, r0
 800b66c:	000b      	movs	r3, r1
 800b66e:	0014      	movs	r4, r2
 800b670:	001d      	movs	r5, r3
			- (uint32_t) V + chrono->actual.day;
 800b672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b674:	f7f4 ff50 	bl	8000518 <__aeabi_f2uiz>
 800b678:	0003      	movs	r3, r0
 800b67a:	0018      	movs	r0, r3
 800b67c:	f7f7 fbbe 	bl	8002dfc <__aeabi_ui2d>
 800b680:	0002      	movs	r2, r0
 800b682:	000b      	movs	r3, r1
 800b684:	0020      	movs	r0, r4
 800b686:	0029      	movs	r1, r5
 800b688:	f7f6 ffa2 	bl	80025d0 <__aeabi_dsub>
 800b68c:	0002      	movs	r2, r0
 800b68e:	000b      	movs	r3, r1
 800b690:	0014      	movs	r4, r2
 800b692:	001d      	movs	r5, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	789b      	ldrb	r3, [r3, #2]
 800b698:	b25b      	sxtb	r3, r3
 800b69a:	0018      	movs	r0, r3
 800b69c:	f7f7 fb7e 	bl	8002d9c <__aeabi_i2d>
 800b6a0:	0002      	movs	r2, r0
 800b6a2:	000b      	movs	r3, r1
 800b6a4:	0020      	movs	r0, r4
 800b6a6:	0029      	movs	r1, r5
 800b6a8:	f7f5 fdb6 	bl	8001218 <__aeabi_dadd>
 800b6ac:	0002      	movs	r2, r0
 800b6ae:	000b      	movs	r3, r1
	float B = 1729279.5 + 367 * (chrono->actual.year + 2000) + (uint32_t) Y
 800b6b0:	0010      	movs	r0, r2
 800b6b2:	0019      	movs	r1, r3
 800b6b4:	f7f7 fc10 	bl	8002ed8 <__aeabi_d2f>
 800b6b8:	1c03      	adds	r3, r0, #0
 800b6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Q = (A + 83) / 100;
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	3353      	adds	r3, #83	; 0x53
 800b6c0:	2164      	movs	r1, #100	; 0x64
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7f4 fd28 	bl	8000118 <__udivsi3>
 800b6c8:	0003      	movs	r3, r0
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f7f5 fd68 	bl	80011a0 <__aeabi_ui2f>
 800b6d0:	1c03      	adds	r3, r0, #0
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C = (uint32_t) Q;
 800b6d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6d6:	f7f4 ff1f 	bl	8000518 <__aeabi_f2uiz>
 800b6da:	0003      	movs	r3, r0
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
	float W = 3 * (C + 1) / 4;
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	0013      	movs	r3, r2
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	189b      	adds	r3, r3, r2
 800b6e8:	089b      	lsrs	r3, r3, #2
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7f5 fd58 	bl	80011a0 <__aeabi_ui2f>
 800b6f0:	1c03      	adds	r3, r0, #0
 800b6f2:	623b      	str	r3, [r7, #32]
	uint32_t E = (uint32_t) W;
 800b6f4:	6a38      	ldr	r0, [r7, #32]
 800b6f6:	f7f4 ff0f 	bl	8000518 <__aeabi_f2uiz>
 800b6fa:	0003      	movs	r3, r0
 800b6fc:	61fb      	str	r3, [r7, #28]
	float JD = B + 38 - E; //julian day
 800b6fe:	4980      	ldr	r1, [pc, #512]	; (800b900 <rtcGetTime+0x3dc>)
 800b700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b702:	f7f4 ff5d 	bl	80005c0 <__aeabi_fadd>
 800b706:	1c03      	adds	r3, r0, #0
 800b708:	1c1c      	adds	r4, r3, #0
 800b70a:	69f8      	ldr	r0, [r7, #28]
 800b70c:	f7f5 fd48 	bl	80011a0 <__aeabi_ui2f>
 800b710:	1c03      	adds	r3, r0, #0
 800b712:	1c19      	adds	r1, r3, #0
 800b714:	1c20      	adds	r0, r4, #0
 800b716:	f7f5 fb15 	bl	8000d44 <__aeabi_fsub>
 800b71a:	1c03      	adds	r3, r0, #0
 800b71c:	61bb      	str	r3, [r7, #24]
	float MS = 29.5305902778; //average value of synodic month
 800b71e:	4b79      	ldr	r3, [pc, #484]	; (800b904 <rtcGetTime+0x3e0>)
 800b720:	617b      	str	r3, [r7, #20]
	float phasePrimary = ((JD / MS) - 0.3033);
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	69b8      	ldr	r0, [r7, #24]
 800b726:	f7f5 f8e7 	bl	80008f8 <__aeabi_fdiv>
 800b72a:	1c03      	adds	r3, r0, #0
 800b72c:	1c18      	adds	r0, r3, #0
 800b72e:	f7f7 fb8b 	bl	8002e48 <__aeabi_f2d>
 800b732:	4a75      	ldr	r2, [pc, #468]	; (800b908 <rtcGetTime+0x3e4>)
 800b734:	4b75      	ldr	r3, [pc, #468]	; (800b90c <rtcGetTime+0x3e8>)
 800b736:	f7f6 ff4b 	bl	80025d0 <__aeabi_dsub>
 800b73a:	0002      	movs	r2, r0
 800b73c:	000b      	movs	r3, r1
 800b73e:	0010      	movs	r0, r2
 800b740:	0019      	movs	r1, r3
 800b742:	f7f7 fbc9 	bl	8002ed8 <__aeabi_d2f>
 800b746:	1c03      	adds	r3, r0, #0
 800b748:	613b      	str	r3, [r7, #16]
	uint32_t phaseInteger = (uint32_t) phasePrimary;
 800b74a:	6938      	ldr	r0, [r7, #16]
 800b74c:	f7f4 fee4 	bl	8000518 <__aeabi_f2uiz>
 800b750:	0003      	movs	r3, r0
 800b752:	60fb      	str	r3, [r7, #12]
	float phaseFinal = (phasePrimary - (float) phaseInteger) * 100;
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7f5 fd23 	bl	80011a0 <__aeabi_ui2f>
 800b75a:	1c03      	adds	r3, r0, #0
 800b75c:	1c19      	adds	r1, r3, #0
 800b75e:	6938      	ldr	r0, [r7, #16]
 800b760:	f7f5 faf0 	bl	8000d44 <__aeabi_fsub>
 800b764:	1c03      	adds	r3, r0, #0
 800b766:	496a      	ldr	r1, [pc, #424]	; (800b910 <rtcGetTime+0x3ec>)
 800b768:	1c18      	adds	r0, r3, #0
 800b76a:	f7f5 f9d1 	bl	8000b10 <__aeabi_fmul>
 800b76e:	1c03      	adds	r3, r0, #0
 800b770:	60bb      	str	r3, [r7, #8]
	chrono->actual.moonPhase = (uint32_t) phaseFinal;
 800b772:	68b8      	ldr	r0, [r7, #8]
 800b774:	f7f4 fed0 	bl	8000518 <__aeabi_f2uiz>
 800b778:	0002      	movs	r2, r0
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	609a      	str	r2, [r3, #8]

	// 0 - new moon, 25- I, 50- II(full moon), 75- III

	if (chrono->chronoMode == RTC_CHRONO_MODE_INACTIVE) {
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2224      	movs	r2, #36	; 0x24
 800b782:	5c9b      	ldrb	r3, [r3, r2]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d114      	bne.n	800b7b2 <rtcGetTime+0x28e>
		chrono->chrono.minute = 0;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	771a      	strb	r2, [r3, #28]
		chrono->chrono.second = 0;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	775a      	strb	r2, [r3, #29]
		chrono->chrono.hundredth = 0;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	779a      	strb	r2, [r3, #30]
		chrono->chrono.hour = 0;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = 0;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = 0;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	765a      	strb	r2, [r3, #25]
		chrono->chrono.year = 0;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	761a      	strb	r2, [r3, #24]
	}
	if (chrono->chronoMode == RTC_CHRONO_MODE_RUNNING) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2224      	movs	r2, #36	; 0x24
 800b7b6:	5c9b      	ldrb	r3, [r3, r2]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d000      	beq.n	800b7be <rtcGetTime+0x29a>
 800b7bc:	e0ef      	b.n	800b99e <rtcGetTime+0x47a>

		chrono->chrono.hundredth = chrono->actual.hundredth - chrono->chronoStart.hundredth;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	799b      	ldrb	r3, [r3, #6]
 800b7c2:	b25b      	sxtb	r3, r3
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7c9b      	ldrb	r3, [r3, #18]
 800b7ca:	b25b      	sxtb	r3, r3
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	b25a      	sxtb	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	779a      	strb	r2, [r3, #30]

		chrono->chrono.second = chrono->actual.second
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	795b      	ldrb	r3, [r3, #5]
 800b7dc:	b25b      	sxtb	r3, r3
 800b7de:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.second;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7c5b      	ldrb	r3, [r3, #17]
 800b7e4:	b25b      	sxtb	r3, r3
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	b25a      	sxtb	r2, r3
		chrono->chrono.second = chrono->actual.second
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	775a      	strb	r2, [r3, #29]
		chrono->chrono.minute = chrono->actual.minute
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	791b      	ldrb	r3, [r3, #4]
 800b7f6:	b25b      	sxtb	r3, r3
 800b7f8:	b2da      	uxtb	r2, r3
				- chrono->chronoStart.minute;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	7c1b      	ldrb	r3, [r3, #16]
 800b7fe:	b25b      	sxtb	r3, r3
 800b800:	b2db      	uxtb	r3, r3
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	b2db      	uxtb	r3, r3
 800b806:	b25a      	sxtb	r2, r3
		chrono->chrono.minute = chrono->actual.minute
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	771a      	strb	r2, [r3, #28]
		chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	78db      	ldrb	r3, [r3, #3]
 800b810:	b25b      	sxtb	r3, r3
 800b812:	b2da      	uxtb	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	7bdb      	ldrb	r3, [r3, #15]
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	b25a      	sxtb	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	76da      	strb	r2, [r3, #27]
		chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	789b      	ldrb	r3, [r3, #2]
 800b82a:	b25b      	sxtb	r3, r3
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7b9b      	ldrb	r3, [r3, #14]
 800b832:	b25b      	sxtb	r3, r3
 800b834:	b2db      	uxtb	r3, r3
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	b25a      	sxtb	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	769a      	strb	r2, [r3, #26]
		chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	785b      	ldrb	r3, [r3, #1]
 800b844:	b25b      	sxtb	r3, r3
 800b846:	b2da      	uxtb	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7b5b      	ldrb	r3, [r3, #13]
 800b84c:	b25b      	sxtb	r3, r3
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	b2db      	uxtb	r3, r3
 800b854:	b25a      	sxtb	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	765a      	strb	r2, [r3, #25]

		if (chrono->chrono.hundredth < 0) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	7f9b      	ldrb	r3, [r3, #30]
 800b85e:	b25b      	sxtb	r3, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	da11      	bge.n	800b888 <rtcGetTime+0x364>
			chrono->chrono.second--;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7f5b      	ldrb	r3, [r3, #29]
 800b868:	b25b      	sxtb	r3, r3
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	3b01      	subs	r3, #1
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	b25a      	sxtb	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	775a      	strb	r2, [r3, #29]
			chrono->chrono.hundredth = chrono->chrono.hundredth + 100;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	7f9b      	ldrb	r3, [r3, #30]
 800b87a:	b25b      	sxtb	r3, r3
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	3364      	adds	r3, #100	; 0x64
 800b880:	b2db      	uxtb	r3, r3
 800b882:	b25a      	sxtb	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	779a      	strb	r2, [r3, #30]
		}

		if (chrono->chrono.second < 0) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	7f5b      	ldrb	r3, [r3, #29]
 800b88c:	b25b      	sxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	da11      	bge.n	800b8b6 <rtcGetTime+0x392>
			chrono->chrono.minute--;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7f1b      	ldrb	r3, [r3, #28]
 800b896:	b25b      	sxtb	r3, r3
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	3b01      	subs	r3, #1
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	b25a      	sxtb	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	771a      	strb	r2, [r3, #28]
			chrono->chrono.second = chrono->chrono.second + 60;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	7f5b      	ldrb	r3, [r3, #29]
 800b8a8:	b25b      	sxtb	r3, r3
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	333c      	adds	r3, #60	; 0x3c
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	b25a      	sxtb	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	775a      	strb	r2, [r3, #29]
		}

		if (chrono->chrono.minute < 0) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	7f1b      	ldrb	r3, [r3, #28]
 800b8ba:	b25b      	sxtb	r3, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	da29      	bge.n	800b914 <rtcGetTime+0x3f0>
			chrono->chrono.hour--;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7edb      	ldrb	r3, [r3, #27]
 800b8c4:	b25b      	sxtb	r3, r3
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	b25a      	sxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	76da      	strb	r2, [r3, #27]
			chrono->chrono.minute = chrono->chrono.minute + 60;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	7f1b      	ldrb	r3, [r3, #28]
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	333c      	adds	r3, #60	; 0x3c
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	b25a      	sxtb	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	771a      	strb	r2, [r3, #28]
 800b8e4:	e016      	b.n	800b914 <rtcGetTime+0x3f0>
 800b8e6:	46c0      	nop			; (mov r8, r8)
 800b8e8:	200005ec 	.word	0x200005ec
 800b8ec:	20000604 	.word	0x20000604
 800b8f0:	200005e8 	.word	0x200005e8
 800b8f4:	0000639c 	.word	0x0000639c
 800b8f8:	00001a3c 	.word	0x00001a3c
 800b8fc:	413a62ff 	.word	0x413a62ff
 800b900:	42180000 	.word	0x42180000
 800b904:	41ec3ea6 	.word	0x41ec3ea6
 800b908:	67381d7e 	.word	0x67381d7e
 800b90c:	3fd36944 	.word	0x3fd36944
 800b910:	42c80000 	.word	0x42c80000
		}

		if (chrono->chrono.hour < 0) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	7edb      	ldrb	r3, [r3, #27]
 800b918:	b25b      	sxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	da11      	bge.n	800b942 <rtcGetTime+0x41e>
			chrono->chrono.day--;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	7e9b      	ldrb	r3, [r3, #26]
 800b922:	b25b      	sxtb	r3, r3
 800b924:	b2db      	uxtb	r3, r3
 800b926:	3b01      	subs	r3, #1
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	b25a      	sxtb	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	769a      	strb	r2, [r3, #26]
			chrono->chrono.hour = chrono->chrono.hour + 24;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	7edb      	ldrb	r3, [r3, #27]
 800b934:	b25b      	sxtb	r3, r3
 800b936:	b2db      	uxtb	r3, r3
 800b938:	3318      	adds	r3, #24
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	b25a      	sxtb	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	76da      	strb	r2, [r3, #27]
		}

		if (chrono->chrono.day < 0) {
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	7e9b      	ldrb	r3, [r3, #26]
 800b946:	b25b      	sxtb	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	da11      	bge.n	800b970 <rtcGetTime+0x44c>
			chrono->chrono.month--;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7e5b      	ldrb	r3, [r3, #25]
 800b950:	b25b      	sxtb	r3, r3
 800b952:	b2db      	uxtb	r3, r3
 800b954:	3b01      	subs	r3, #1
 800b956:	b2db      	uxtb	r3, r3
 800b958:	b25a      	sxtb	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	765a      	strb	r2, [r3, #25]
			chrono->chrono.day = chrono->chrono.day + 30;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7e9b      	ldrb	r3, [r3, #26]
 800b962:	b25b      	sxtb	r3, r3
 800b964:	b2db      	uxtb	r3, r3
 800b966:	331e      	adds	r3, #30
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	b25a      	sxtb	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	769a      	strb	r2, [r3, #26]
		}

		if (chrono->chrono.month < 0) {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	7e5b      	ldrb	r3, [r3, #25]
 800b974:	b25b      	sxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	da11      	bge.n	800b99e <rtcGetTime+0x47a>
			chrono->chrono.year--;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7e1b      	ldrb	r3, [r3, #24]
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	b2db      	uxtb	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	b2db      	uxtb	r3, r3
 800b986:	b25a      	sxtb	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	761a      	strb	r2, [r3, #24]
			chrono->chrono.month = chrono->chrono.month + 12;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7e5b      	ldrb	r3, [r3, #25]
 800b990:	b25b      	sxtb	r3, r3
 800b992:	b2db      	uxtb	r3, r3
 800b994:	330c      	adds	r3, #12
 800b996:	b2db      	uxtb	r3, r3
 800b998:	b25a      	sxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	765a      	strb	r2, [r3, #25]
		}

	}

}
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	b010      	add	sp, #64	; 0x40
 800b9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9a6:	46c0      	nop			; (mov r8, r8)

0800b9a8 <rtcSetTime>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcSetTime(RTCChronoTypeDef *chrono) {
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

	Time.Hours = chrono->actual.hour;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	78db      	ldrb	r3, [r3, #3]
 800b9b4:	b25b      	sxtb	r3, r3
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	4b17      	ldr	r3, [pc, #92]	; (800ba18 <rtcSetTime+0x70>)
 800b9ba:	701a      	strb	r2, [r3, #0]
	Time.Minutes = chrono->actual.minute;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	791b      	ldrb	r3, [r3, #4]
 800b9c0:	b25b      	sxtb	r3, r3
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <rtcSetTime+0x70>)
 800b9c6:	705a      	strb	r2, [r3, #1]
	Time.Seconds = chrono->actual.second;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	795b      	ldrb	r3, [r3, #5]
 800b9cc:	b25b      	sxtb	r3, r3
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <rtcSetTime+0x70>)
 800b9d2:	709a      	strb	r2, [r3, #2]
	Date.Date = chrono->actual.day;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	789b      	ldrb	r3, [r3, #2]
 800b9d8:	b25b      	sxtb	r3, r3
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <rtcSetTime+0x74>)
 800b9de:	709a      	strb	r2, [r3, #2]
	Date.Month = chrono->actual.month;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	785b      	ldrb	r3, [r3, #1]
 800b9e4:	b25b      	sxtb	r3, r3
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <rtcSetTime+0x74>)
 800b9ea:	705a      	strb	r2, [r3, #1]
	Date.Year = chrono->actual.year;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	b25b      	sxtb	r3, r3
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	4b09      	ldr	r3, [pc, #36]	; (800ba1c <rtcSetTime+0x74>)
 800b9f6:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800b9f8:	4907      	ldr	r1, [pc, #28]	; (800ba18 <rtcSetTime+0x70>)
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <rtcSetTime+0x78>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f7fa fe68 	bl	80066d4 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800ba04:	4905      	ldr	r1, [pc, #20]	; (800ba1c <rtcSetTime+0x74>)
 800ba06:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <rtcSetTime+0x78>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f7fa ff66 	bl	80068dc <HAL_RTC_SetDate>

}
 800ba10:	46c0      	nop			; (mov r8, r8)
 800ba12:	46bd      	mov	sp, r7
 800ba14:	b002      	add	sp, #8
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	200005ec 	.word	0x200005ec
 800ba1c:	200005e8 	.word	0x200005e8
 800ba20:	20000604 	.word	0x20000604

0800ba24 <rtcStartChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStartChrono(RTCChronoTypeDef *chrono) {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800ba2c:	4923      	ldr	r1, [pc, #140]	; (800babc <rtcStartChrono+0x98>)
 800ba2e:	4b24      	ldr	r3, [pc, #144]	; (800bac0 <rtcStartChrono+0x9c>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	0018      	movs	r0, r3
 800ba34:	f7fa fef6 	bl	8006824 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800ba38:	4922      	ldr	r1, [pc, #136]	; (800bac4 <rtcStartChrono+0xa0>)
 800ba3a:	4b21      	ldr	r3, [pc, #132]	; (800bac0 <rtcStartChrono+0x9c>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	0018      	movs	r0, r3
 800ba40:	f7fa ffde 	bl	8006a00 <HAL_RTC_GetDate>

	chrono->chronoStart.second = Time.Seconds;
 800ba44:	4b1d      	ldr	r3, [pc, #116]	; (800babc <rtcStartChrono+0x98>)
 800ba46:	789b      	ldrb	r3, [r3, #2]
 800ba48:	b25a      	sxtb	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = Time.Minutes;
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	; (800babc <rtcStartChrono+0x98>)
 800ba50:	785b      	ldrb	r3, [r3, #1]
 800ba52:	b25a      	sxtb	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800ba58:	4b18      	ldr	r3, [pc, #96]	; (800babc <rtcStartChrono+0x98>)
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	0013      	movs	r3, r2
 800ba5e:	065b      	lsls	r3, r3, #25
 800ba60:	1a9b      	subs	r3, r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	189b      	adds	r3, r3, r2
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4a16      	ldr	r2, [pc, #88]	; (800bac8 <rtcStartChrono+0xa4>)
 800ba6e:	4694      	mov	ip, r2
 800ba70:	4463      	add	r3, ip
 800ba72:	21ff      	movs	r1, #255	; 0xff
 800ba74:	0018      	movs	r0, r3
 800ba76:	f7f4 fb4f 	bl	8000118 <__udivsi3>
 800ba7a:	0003      	movs	r3, r0
 800ba7c:	b25a      	sxtb	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = Time.Hours;
 800ba82:	4b0e      	ldr	r3, [pc, #56]	; (800babc <rtcStartChrono+0x98>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b25a      	sxtb	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	73da      	strb	r2, [r3, #15]
	chrono->chronoStart.day = Date.Date;
 800ba8c:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <rtcStartChrono+0xa0>)
 800ba8e:	789b      	ldrb	r3, [r3, #2]
 800ba90:	b25a      	sxtb	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	739a      	strb	r2, [r3, #14]
	chrono->chronoStart.month = Date.Month;
 800ba96:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <rtcStartChrono+0xa0>)
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	b25a      	sxtb	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	735a      	strb	r2, [r3, #13]
	chrono->chronoStart.year = Date.Year;
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <rtcStartChrono+0xa0>)
 800baa2:	78db      	ldrb	r3, [r3, #3]
 800baa4:	b25a      	sxtb	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	731a      	strb	r2, [r3, #12]

	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2224      	movs	r2, #36	; 0x24
 800baae:	2101      	movs	r1, #1
 800bab0:	5499      	strb	r1, [r3, r2]
}
 800bab2:	46c0      	nop			; (mov r8, r8)
 800bab4:	46bd      	mov	sp, r7
 800bab6:	b002      	add	sp, #8
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	200005ec 	.word	0x200005ec
 800bac0:	20000604 	.word	0x20000604
 800bac4:	200005e8 	.word	0x200005e8
 800bac8:	0000639c 	.word	0x0000639c

0800bacc <rtcStopChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcStopChrono(RTCChronoTypeDef *chrono) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800bad4:	4952      	ldr	r1, [pc, #328]	; (800bc20 <rtcStopChrono+0x154>)
 800bad6:	4b53      	ldr	r3, [pc, #332]	; (800bc24 <rtcStopChrono+0x158>)
 800bad8:	2200      	movs	r2, #0
 800bada:	0018      	movs	r0, r3
 800badc:	f7fa fea2 	bl	8006824 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800bae0:	4951      	ldr	r1, [pc, #324]	; (800bc28 <rtcStopChrono+0x15c>)
 800bae2:	4b50      	ldr	r3, [pc, #320]	; (800bc24 <rtcStopChrono+0x158>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	0018      	movs	r0, r3
 800bae8:	f7fa ff8a 	bl	8006a00 <HAL_RTC_GetDate>

	chrono->actual.minute = Time.Minutes;
 800baec:	4b4c      	ldr	r3, [pc, #304]	; (800bc20 <rtcStopChrono+0x154>)
 800baee:	785b      	ldrb	r3, [r3, #1]
 800baf0:	b25a      	sxtb	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	711a      	strb	r2, [r3, #4]
	chrono->actual.second = Time.Seconds;
 800baf6:	4b4a      	ldr	r3, [pc, #296]	; (800bc20 <rtcStopChrono+0x154>)
 800baf8:	789b      	ldrb	r3, [r3, #2]
 800bafa:	b25a      	sxtb	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	715a      	strb	r2, [r3, #5]
	chrono->actual.hundredth = (((255 - Time.SubSeconds) * 100) / 255);
 800bb00:	4b47      	ldr	r3, [pc, #284]	; (800bc20 <rtcStopChrono+0x154>)
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	0013      	movs	r3, r2
 800bb06:	065b      	lsls	r3, r3, #25
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	189b      	adds	r3, r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	1a9b      	subs	r3, r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4a45      	ldr	r2, [pc, #276]	; (800bc2c <rtcStopChrono+0x160>)
 800bb16:	4694      	mov	ip, r2
 800bb18:	4463      	add	r3, ip
 800bb1a:	21ff      	movs	r1, #255	; 0xff
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f7f4 fafb 	bl	8000118 <__udivsi3>
 800bb22:	0003      	movs	r3, r0
 800bb24:	b25a      	sxtb	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	719a      	strb	r2, [r3, #6]
	chrono->actual.hour = Time.Hours;
 800bb2a:	4b3d      	ldr	r3, [pc, #244]	; (800bc20 <rtcStopChrono+0x154>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b25a      	sxtb	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	70da      	strb	r2, [r3, #3]
	chrono->actual.day = Date.Date;
 800bb34:	4b3c      	ldr	r3, [pc, #240]	; (800bc28 <rtcStopChrono+0x15c>)
 800bb36:	789b      	ldrb	r3, [r3, #2]
 800bb38:	b25a      	sxtb	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	709a      	strb	r2, [r3, #2]
	chrono->actual.month = Date.Month;
 800bb3e:	4b3a      	ldr	r3, [pc, #232]	; (800bc28 <rtcStopChrono+0x15c>)
 800bb40:	785b      	ldrb	r3, [r3, #1]
 800bb42:	b25a      	sxtb	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	705a      	strb	r2, [r3, #1]
	chrono->actual.year = Date.Year;
 800bb48:	4b37      	ldr	r3, [pc, #220]	; (800bc28 <rtcStopChrono+0x15c>)
 800bb4a:	78db      	ldrb	r3, [r3, #3]
 800bb4c:	b25a      	sxtb	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	701a      	strb	r2, [r3, #0]

	chrono->chrono.hundredth = chrono->actual.hundredth
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	799b      	ldrb	r3, [r3, #6]
 800bb56:	b25b      	sxtb	r3, r3
 800bb58:	b2da      	uxtb	r2, r3
			- chrono->chronoStart.hundredth;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7c9b      	ldrb	r3, [r3, #18]
 800bb5e:	b25b      	sxtb	r3, r3
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	b25a      	sxtb	r2, r3
	chrono->chrono.hundredth = chrono->actual.hundredth
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	779a      	strb	r2, [r3, #30]
	chrono->chrono.second = chrono->actual.second - chrono->chronoStart.second;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	795b      	ldrb	r3, [r3, #5]
 800bb70:	b25b      	sxtb	r3, r3
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	7c5b      	ldrb	r3, [r3, #17]
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	b25a      	sxtb	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	775a      	strb	r2, [r3, #29]
	chrono->chrono.minute = chrono->actual.minute - chrono->chronoStart.minute;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	791b      	ldrb	r3, [r3, #4]
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	7c1b      	ldrb	r3, [r3, #16]
 800bb92:	b25b      	sxtb	r3, r3
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	b25a      	sxtb	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	771a      	strb	r2, [r3, #28]
	chrono->chrono.hour = chrono->actual.hour - chrono->chronoStart.hour;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	78db      	ldrb	r3, [r3, #3]
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7bdb      	ldrb	r3, [r3, #15]
 800bbac:	b25b      	sxtb	r3, r3
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	b25a      	sxtb	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	76da      	strb	r2, [r3, #27]
	chrono->chrono.day = chrono->actual.day - chrono->chronoStart.day;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	789b      	ldrb	r3, [r3, #2]
 800bbbe:	b25b      	sxtb	r3, r3
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7b9b      	ldrb	r3, [r3, #14]
 800bbc6:	b25b      	sxtb	r3, r3
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	b25a      	sxtb	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	769a      	strb	r2, [r3, #26]
	chrono->chrono.month = chrono->actual.month - chrono->chronoStart.month;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	785b      	ldrb	r3, [r3, #1]
 800bbd8:	b25b      	sxtb	r3, r3
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7b5b      	ldrb	r3, [r3, #13]
 800bbe0:	b25b      	sxtb	r3, r3
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	b25a      	sxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	765a      	strb	r2, [r3, #25]
	chrono->chrono.year = chrono->actual.year - chrono->chronoStart.year;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7b1b      	ldrb	r3, [r3, #12]
 800bbfa:	b25b      	sxtb	r3, r3
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	b25a      	sxtb	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	761a      	strb	r2, [r3, #24]

	rtcGetTime(chrono);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f7ff fc8a 	bl	800b524 <rtcGetTime>

	chrono->chronoMode = RTC_CHRONO_MODE_STOP;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2224      	movs	r2, #36	; 0x24
 800bc14:	2102      	movs	r1, #2
 800bc16:	5499      	strb	r1, [r3, r2]


}
 800bc18:	46c0      	nop			; (mov r8, r8)
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	b002      	add	sp, #8
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	200005ec 	.word	0x200005ec
 800bc24:	20000604 	.word	0x20000604
 800bc28:	200005e8 	.word	0x200005e8
 800bc2c:	0000639c 	.word	0x0000639c

0800bc30 <rtcResumeChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResumeChrono(RTCChronoTypeDef * chrono){
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	chrono->chronoMode = RTC_CHRONO_MODE_RUNNING;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2224      	movs	r2, #36	; 0x24
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	5499      	strb	r1, [r3, r2]
}
 800bc40:	46c0      	nop			; (mov r8, r8)
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b002      	add	sp, #8
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <rtcResetChrono>:
 *
 * @param  RTC item handler
 *
 * @retval None
 */
void rtcResetChrono(RTCChronoTypeDef *chrono) {
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]

	chrono->chrono.hundredth = 0;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	779a      	strb	r2, [r3, #30]
	chrono->chrono.minute = 0;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	771a      	strb	r2, [r3, #28]
	chrono->chrono.second = 0;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	775a      	strb	r2, [r3, #29]
	chrono->chrono.hour = 0;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	76da      	strb	r2, [r3, #27]

	chrono->chronoStart.second = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	745a      	strb	r2, [r3, #17]
	chrono->chronoStart.minute = 0;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	741a      	strb	r2, [r3, #16]
	chrono->chronoStart.hundredth = 0;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	749a      	strb	r2, [r3, #18]
	chrono->chronoStart.hour = 0;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	73da      	strb	r2, [r3, #15]

	chrono->chronoMode = RTC_CHRONO_MODE_INACTIVE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2224      	movs	r2, #36	; 0x24
 800bc84:	2100      	movs	r1, #0
 800bc86:	5499      	strb	r1, [r3, r2]

}
 800bc88:	46c0      	nop			; (mov r8, r8)
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b002      	add	sp, #8
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <rtcChangeValue>:
 * @param RTC_CHANGE_DIR_UP/DOWN
 *
 * @retval None
 */
void rtcChangeValue(RTCChronoTypeDef *chrono, uint8_t element,
		uint8_t direction) {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	0008      	movs	r0, r1
 800bc9a:	0011      	movs	r1, r2
 800bc9c:	1cfb      	adds	r3, r7, #3
 800bc9e:	1c02      	adds	r2, r0, #0
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	1cbb      	adds	r3, r7, #2
 800bca4:	1c0a      	adds	r2, r1, #0
 800bca6:	701a      	strb	r2, [r3, #0]

	if (direction == RTC_CHANGE_DIR_DOWN) {
 800bca8:	1cbb      	adds	r3, r7, #2
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d000      	beq.n	800bcb2 <rtcChangeValue+0x22>
 800bcb0:	e08a      	b.n	800bdc8 <rtcChangeValue+0x138>
		switch (element) {
 800bcb2:	1cfb      	adds	r3, r7, #3
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b05      	cmp	r3, #5
 800bcb8:	d900      	bls.n	800bcbc <rtcChangeValue+0x2c>
 800bcba:	e080      	b.n	800bdbe <rtcChangeValue+0x12e>
 800bcbc:	009a      	lsls	r2, r3, #2
 800bcbe:	4b8c      	ldr	r3, [pc, #560]	; (800bef0 <rtcChangeValue+0x260>)
 800bcc0:	18d3      	adds	r3, r2, r3
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	469f      	mov	pc, r3
		case RTC_CHANGE_HOUR:
			if (chrono->actual.hour > 0)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	78db      	ldrb	r3, [r3, #3]
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dd09      	ble.n	800bce4 <rtcChangeValue+0x54>
				chrono->actual.hour--;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	78db      	ldrb	r3, [r3, #3]
 800bcd4:	b25b      	sxtb	r3, r3
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	b25a      	sxtb	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	70da      	strb	r2, [r3, #3]
			else if (chrono->actual.hour == 0)
				chrono->actual.hour = 23;
			break;
 800bce2:	e063      	b.n	800bdac <rtcChangeValue+0x11c>
			else if (chrono->actual.hour == 0)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	78db      	ldrb	r3, [r3, #3]
 800bce8:	b25b      	sxtb	r3, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d15e      	bne.n	800bdac <rtcChangeValue+0x11c>
				chrono->actual.hour = 23;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2217      	movs	r2, #23
 800bcf2:	70da      	strb	r2, [r3, #3]
			break;
 800bcf4:	e05a      	b.n	800bdac <rtcChangeValue+0x11c>
		case RTC_CHANGE_MINUTE:
			if (chrono->actual.minute > 0)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	791b      	ldrb	r3, [r3, #4]
 800bcfa:	b25b      	sxtb	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dd09      	ble.n	800bd14 <rtcChangeValue+0x84>
				chrono->actual.minute--;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	791b      	ldrb	r3, [r3, #4]
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	b25a      	sxtb	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	711a      	strb	r2, [r3, #4]
			else if (chrono->actual.minute == 0) {
				chrono->actual.minute = 59;
			}
			break;
 800bd12:	e04d      	b.n	800bdb0 <rtcChangeValue+0x120>
			else if (chrono->actual.minute == 0) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	791b      	ldrb	r3, [r3, #4]
 800bd18:	b25b      	sxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d148      	bne.n	800bdb0 <rtcChangeValue+0x120>
				chrono->actual.minute = 59;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	223b      	movs	r2, #59	; 0x3b
 800bd22:	711a      	strb	r2, [r3, #4]
			break;
 800bd24:	e044      	b.n	800bdb0 <rtcChangeValue+0x120>
		case RTC_CHANGE_SECOND:
			chrono->actual.second = 0;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	715a      	strb	r2, [r3, #5]
			break;
 800bd2c:	e047      	b.n	800bdbe <rtcChangeValue+0x12e>
		case RTC_CHANGE_DAY:
			if (chrono->actual.day > 1)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	789b      	ldrb	r3, [r3, #2]
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	dd09      	ble.n	800bd4c <rtcChangeValue+0xbc>
				chrono->actual.day--;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	789b      	ldrb	r3, [r3, #2]
 800bd3c:	b25b      	sxtb	r3, r3
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	3b01      	subs	r3, #1
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	b25a      	sxtb	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	709a      	strb	r2, [r3, #2]
			else if (chrono->actual.day == 1)
				chrono->actual.day = 31;
			break;
 800bd4a:	e033      	b.n	800bdb4 <rtcChangeValue+0x124>
			else if (chrono->actual.day == 1)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	b25b      	sxtb	r3, r3
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d12e      	bne.n	800bdb4 <rtcChangeValue+0x124>
				chrono->actual.day = 31;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	221f      	movs	r2, #31
 800bd5a:	709a      	strb	r2, [r3, #2]
			break;
 800bd5c:	e02a      	b.n	800bdb4 <rtcChangeValue+0x124>
		case RTC_CHANGE_MONTH:
			if (chrono->actual.month > 1)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	785b      	ldrb	r3, [r3, #1]
 800bd62:	b25b      	sxtb	r3, r3
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	dd09      	ble.n	800bd7c <rtcChangeValue+0xec>
				chrono->actual.month--;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	785b      	ldrb	r3, [r3, #1]
 800bd6c:	b25b      	sxtb	r3, r3
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	3b01      	subs	r3, #1
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	b25a      	sxtb	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	705a      	strb	r2, [r3, #1]
			else if(chrono->actual.month == 1)
				chrono->actual.month = 12;
			break;
 800bd7a:	e01d      	b.n	800bdb8 <rtcChangeValue+0x128>
			else if(chrono->actual.month == 1)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	b25b      	sxtb	r3, r3
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d118      	bne.n	800bdb8 <rtcChangeValue+0x128>
				chrono->actual.month = 12;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	220c      	movs	r2, #12
 800bd8a:	705a      	strb	r2, [r3, #1]
			break;
 800bd8c:	e014      	b.n	800bdb8 <rtcChangeValue+0x128>
		case RTC_CHANGE_YEAR:
			if (chrono->actual.year > 0)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	b25b      	sxtb	r3, r3
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dd11      	ble.n	800bdbc <rtcChangeValue+0x12c>
				chrono->actual.year--;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b25b      	sxtb	r3, r3
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	3b01      	subs	r3, #1
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	b25a      	sxtb	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	701a      	strb	r2, [r3, #0]
			break;
 800bdaa:	e007      	b.n	800bdbc <rtcChangeValue+0x12c>
			break;
 800bdac:	46c0      	nop			; (mov r8, r8)
 800bdae:	e006      	b.n	800bdbe <rtcChangeValue+0x12e>
			break;
 800bdb0:	46c0      	nop			; (mov r8, r8)
 800bdb2:	e004      	b.n	800bdbe <rtcChangeValue+0x12e>
			break;
 800bdb4:	46c0      	nop			; (mov r8, r8)
 800bdb6:	e002      	b.n	800bdbe <rtcChangeValue+0x12e>
			break;
 800bdb8:	46c0      	nop			; (mov r8, r8)
 800bdba:	e000      	b.n	800bdbe <rtcChangeValue+0x12e>
			break;
 800bdbc:	46c0      	nop			; (mov r8, r8)
		}

		rtcSetTime(chrono);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	0018      	movs	r0, r3
 800bdc2:	f7ff fdf1 	bl	800b9a8 <rtcSetTime>
		}

		rtcSetTime(chrono);
	}

}
 800bdc6:	e08e      	b.n	800bee6 <rtcChangeValue+0x256>
	} else if (direction == RTC_CHANGE_DIR_UP) {
 800bdc8:	1cbb      	adds	r3, r7, #2
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d000      	beq.n	800bdd2 <rtcChangeValue+0x142>
 800bdd0:	e089      	b.n	800bee6 <rtcChangeValue+0x256>
		switch (element) {
 800bdd2:	1cfb      	adds	r3, r7, #3
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	d900      	bls.n	800bddc <rtcChangeValue+0x14c>
 800bdda:	e080      	b.n	800bede <rtcChangeValue+0x24e>
 800bddc:	009a      	lsls	r2, r3, #2
 800bdde:	4b45      	ldr	r3, [pc, #276]	; (800bef4 <rtcChangeValue+0x264>)
 800bde0:	18d3      	adds	r3, r2, r3
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	469f      	mov	pc, r3
			if (chrono->actual.hour < 23)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	78db      	ldrb	r3, [r3, #3]
 800bdea:	b25b      	sxtb	r3, r3
 800bdec:	2b16      	cmp	r3, #22
 800bdee:	dc09      	bgt.n	800be04 <rtcChangeValue+0x174>
				chrono->actual.hour++;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	78db      	ldrb	r3, [r3, #3]
 800bdf4:	b25b      	sxtb	r3, r3
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	b25a      	sxtb	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	70da      	strb	r2, [r3, #3]
			break;
 800be02:	e063      	b.n	800becc <rtcChangeValue+0x23c>
			else if (chrono->actual.hour >= 23)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	78db      	ldrb	r3, [r3, #3]
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	2b16      	cmp	r3, #22
 800be0c:	dd5e      	ble.n	800becc <rtcChangeValue+0x23c>
				chrono->actual.hour = 0;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	70da      	strb	r2, [r3, #3]
			break;
 800be14:	e05a      	b.n	800becc <rtcChangeValue+0x23c>
			if (chrono->actual.minute < 59)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	791b      	ldrb	r3, [r3, #4]
 800be1a:	b25b      	sxtb	r3, r3
 800be1c:	2b3a      	cmp	r3, #58	; 0x3a
 800be1e:	dc09      	bgt.n	800be34 <rtcChangeValue+0x1a4>
				chrono->actual.minute++;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	791b      	ldrb	r3, [r3, #4]
 800be24:	b25b      	sxtb	r3, r3
 800be26:	b2db      	uxtb	r3, r3
 800be28:	3301      	adds	r3, #1
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	b25a      	sxtb	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	711a      	strb	r2, [r3, #4]
			break;
 800be32:	e04d      	b.n	800bed0 <rtcChangeValue+0x240>
			else if (chrono->actual.minute >= 59)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	791b      	ldrb	r3, [r3, #4]
 800be38:	b25b      	sxtb	r3, r3
 800be3a:	2b3a      	cmp	r3, #58	; 0x3a
 800be3c:	dd48      	ble.n	800bed0 <rtcChangeValue+0x240>
				chrono->actual.minute = 0;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	711a      	strb	r2, [r3, #4]
			break;
 800be44:	e044      	b.n	800bed0 <rtcChangeValue+0x240>
			chrono->actual.second = 0;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	715a      	strb	r2, [r3, #5]
			break;
 800be4c:	e047      	b.n	800bede <rtcChangeValue+0x24e>
			if (chrono->actual.day < 31)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	789b      	ldrb	r3, [r3, #2]
 800be52:	b25b      	sxtb	r3, r3
 800be54:	2b1e      	cmp	r3, #30
 800be56:	dc09      	bgt.n	800be6c <rtcChangeValue+0x1dc>
				chrono->actual.day++;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	789b      	ldrb	r3, [r3, #2]
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	3301      	adds	r3, #1
 800be62:	b2db      	uxtb	r3, r3
 800be64:	b25a      	sxtb	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	709a      	strb	r2, [r3, #2]
			break;
 800be6a:	e033      	b.n	800bed4 <rtcChangeValue+0x244>
			else if (chrono->actual.day == 31)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	789b      	ldrb	r3, [r3, #2]
 800be70:	b25b      	sxtb	r3, r3
 800be72:	2b1f      	cmp	r3, #31
 800be74:	d12e      	bne.n	800bed4 <rtcChangeValue+0x244>
				chrono->actual.day = 1;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	709a      	strb	r2, [r3, #2]
			break;
 800be7c:	e02a      	b.n	800bed4 <rtcChangeValue+0x244>
			if (chrono->actual.month < 12)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	785b      	ldrb	r3, [r3, #1]
 800be82:	b25b      	sxtb	r3, r3
 800be84:	2b0b      	cmp	r3, #11
 800be86:	dc09      	bgt.n	800be9c <rtcChangeValue+0x20c>
				chrono->actual.month++;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	785b      	ldrb	r3, [r3, #1]
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	3301      	adds	r3, #1
 800be92:	b2db      	uxtb	r3, r3
 800be94:	b25a      	sxtb	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	705a      	strb	r2, [r3, #1]
			break;
 800be9a:	e01d      	b.n	800bed8 <rtcChangeValue+0x248>
			else if(chrono->actual.month == 12)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	b25b      	sxtb	r3, r3
 800bea2:	2b0c      	cmp	r3, #12
 800bea4:	d118      	bne.n	800bed8 <rtcChangeValue+0x248>
				chrono->actual.month = 1;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	705a      	strb	r2, [r3, #1]
			break;
 800beac:	e014      	b.n	800bed8 <rtcChangeValue+0x248>
			if (chrono->actual.year < 99)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	2b62      	cmp	r3, #98	; 0x62
 800beb6:	dc11      	bgt.n	800bedc <rtcChangeValue+0x24c>
				chrono->actual.year++;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	3301      	adds	r3, #1
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	b25a      	sxtb	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	701a      	strb	r2, [r3, #0]
			break;
 800beca:	e007      	b.n	800bedc <rtcChangeValue+0x24c>
			break;
 800becc:	46c0      	nop			; (mov r8, r8)
 800bece:	e006      	b.n	800bede <rtcChangeValue+0x24e>
			break;
 800bed0:	46c0      	nop			; (mov r8, r8)
 800bed2:	e004      	b.n	800bede <rtcChangeValue+0x24e>
			break;
 800bed4:	46c0      	nop			; (mov r8, r8)
 800bed6:	e002      	b.n	800bede <rtcChangeValue+0x24e>
			break;
 800bed8:	46c0      	nop			; (mov r8, r8)
 800beda:	e000      	b.n	800bede <rtcChangeValue+0x24e>
			break;
 800bedc:	46c0      	nop			; (mov r8, r8)
		rtcSetTime(chrono);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	0018      	movs	r0, r3
 800bee2:	f7ff fd61 	bl	800b9a8 <rtcSetTime>
}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	46bd      	mov	sp, r7
 800beea:	b002      	add	sp, #8
 800beec:	bd80      	pop	{r7, pc}
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	080156fc 	.word	0x080156fc
 800bef4:	08015714 	.word	0x08015714

0800bef8 <batteryCheckInit>:
#include <tacho/battery.h>
#include <tacho/watch.h>

extern watchTypeDef watch;

void batteryCheckInit(void) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 800befc:	4b03      	ldr	r3, [pc, #12]	; (800bf0c <batteryCheckInit+0x14>)
 800befe:	0018      	movs	r0, r3
 800bf00:	f7f8 fa80 	bl	8004404 <HAL_ADCEx_Calibration_Start>

}
 800bf04:	46c0      	nop			; (mov r8, r8)
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	20000538 	.word	0x20000538

0800bf10 <batteryReadState>:

void batteryReadState(void){
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800bf16:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <batteryReadState+0x48>)
 800bf18:	0018      	movs	r0, r3
 800bf1a:	f7f7 fe49 	bl	8003bb0 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 200) == HAL_OK){
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	; (800bf58 <batteryReadState+0x48>)
 800bf20:	21c8      	movs	r1, #200	; 0xc8
 800bf22:	0018      	movs	r0, r3
 800bf24:	f7f7 fe92 	bl	8003c4c <HAL_ADC_PollForConversion>
 800bf28:	1e03      	subs	r3, r0, #0
 800bf2a:	d110      	bne.n	800bf4e <batteryReadState+0x3e>
		uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 800bf2c:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <batteryReadState+0x48>)
 800bf2e:	0018      	movs	r0, r3
 800bf30:	f7f7 ff20 	bl	8003d74 <HAL_ADC_GetValue>
 800bf34:	0003      	movs	r3, r0
 800bf36:	607b      	str	r3, [r7, #4]
		if(adcValue < LOW_BATTERY_LIMIT){
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a08      	ldr	r2, [pc, #32]	; (800bf5c <batteryReadState+0x4c>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d803      	bhi.n	800bf48 <batteryReadState+0x38>
			watch.flagLowBattery = 1;
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <batteryReadState+0x50>)
 800bf42:	2201      	movs	r2, #1
 800bf44:	711a      	strb	r2, [r3, #4]
		}else{
			watch.flagLowBattery = 0;
		}
	}

}
 800bf46:	e002      	b.n	800bf4e <batteryReadState+0x3e>
			watch.flagLowBattery = 0;
 800bf48:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <batteryReadState+0x50>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	711a      	strb	r2, [r3, #4]
}
 800bf4e:	46c0      	nop			; (mov r8, r8)
 800bf50:	46bd      	mov	sp, r7
 800bf52:	b002      	add	sp, #8
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	46c0      	nop			; (mov r8, r8)
 800bf58:	20000538 	.word	0x20000538
 800bf5c:	000008b5 	.word	0x000008b5
 800bf60:	20000508 	.word	0x20000508

0800bf64 <HAL_GPIO_EXTI_Falling_Callback>:

extern watchTypeDef watch;
extern RTCChronoTypeDef chrono;
extern bme280TypeDef atmospherical;

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800bf64:	b5b0      	push	{r4, r5, r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	0002      	movs	r2, r0
 800bf6c:	1dbb      	adds	r3, r7, #6
 800bf6e:	801a      	strh	r2, [r3, #0]

	uint8_t buttonRegister = buttonRead();
 800bf70:	250e      	movs	r5, #14
 800bf72:	197c      	adds	r4, r7, r5
 800bf74:	f000 f8d4 	bl	800c120 <buttonRead>
 800bf78:	0003      	movs	r3, r0
 800bf7a:	7023      	strb	r3, [r4, #0]

	if (watch.mode == WATCH_MODE_NORMAL) {
 800bf7c:	4b64      	ldr	r3, [pc, #400]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d141      	bne.n	800c008 <HAL_GPIO_EXTI_Falling_Callback+0xa4>
		if (buttonRegister == BUTTON_SET) {
 800bf84:	197b      	adds	r3, r7, r5
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b05      	cmp	r3, #5
 800bf8a:	d105      	bne.n	800bf98 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			watchSwitchMode(&watch, WATCH_MODE_SETTINGS);
 800bf8c:	4b60      	ldr	r3, [pc, #384]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800bf8e:	2101      	movs	r1, #1
 800bf90:	0018      	movs	r0, r3
 800bf92:	f002 fd2a 	bl	800e9ea <watchSwitchMode>
 800bf96:	e002      	b.n	800bf9e <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		} else{
			watch.counterDontSleepTimer = 0;
 800bf98:	4b5d      	ldr	r3, [pc, #372]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	709a      	strb	r2, [r3, #2]
		}

		if(buttonRegister == BUTTON_START){
 800bf9e:	230e      	movs	r3, #14
 800bfa0:	18fb      	adds	r3, r7, r3
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d11e      	bne.n	800bfe6 <HAL_GPIO_EXTI_Falling_Callback+0x82>

			if(chrono.chronoMode == RTC_CHRONO_MODE_INACTIVE){
 800bfa8:	4b5a      	ldr	r3, [pc, #360]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bfaa:	2224      	movs	r2, #36	; 0x24
 800bfac:	5c9b      	ldrb	r3, [r3, r2]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d104      	bne.n	800bfbc <HAL_GPIO_EXTI_Falling_Callback+0x58>
				rtcStartChrono(&chrono);
 800bfb2:	4b58      	ldr	r3, [pc, #352]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bfb4:	0018      	movs	r0, r3
 800bfb6:	f7ff fd35 	bl	800ba24 <rtcStartChrono>

		}

	}

}
 800bfba:	e0a5      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
			}else if(chrono.chronoMode == RTC_CHRONO_MODE_RUNNING){
 800bfbc:	4b55      	ldr	r3, [pc, #340]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bfbe:	2224      	movs	r2, #36	; 0x24
 800bfc0:	5c9b      	ldrb	r3, [r3, r2]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d104      	bne.n	800bfd0 <HAL_GPIO_EXTI_Falling_Callback+0x6c>
				rtcStopChrono(&chrono);
 800bfc6:	4b53      	ldr	r3, [pc, #332]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bfc8:	0018      	movs	r0, r3
 800bfca:	f7ff fd7f 	bl	800bacc <rtcStopChrono>
}
 800bfce:	e09b      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
			}else if(chrono.chronoMode == RTC_CHRONO_MODE_STOP){
 800bfd0:	4b50      	ldr	r3, [pc, #320]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bfd2:	2224      	movs	r2, #36	; 0x24
 800bfd4:	5c9b      	ldrb	r3, [r3, r2]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d000      	beq.n	800bfdc <HAL_GPIO_EXTI_Falling_Callback+0x78>
 800bfda:	e095      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcResumeChrono(&chrono);
 800bfdc:	4b4d      	ldr	r3, [pc, #308]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bfde:	0018      	movs	r0, r3
 800bfe0:	f7ff fe26 	bl	800bc30 <rtcResumeChrono>
}
 800bfe4:	e090      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
		}else if(buttonRegister == BUTTON_RESET){
 800bfe6:	230e      	movs	r3, #14
 800bfe8:	18fb      	adds	r3, r7, r3
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b06      	cmp	r3, #6
 800bfee:	d000      	beq.n	800bff2 <HAL_GPIO_EXTI_Falling_Callback+0x8e>
 800bff0:	e08a      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
			if(chrono.chronoMode == RTC_CHRONO_MODE_STOP){
 800bff2:	4b48      	ldr	r3, [pc, #288]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800bff4:	2224      	movs	r2, #36	; 0x24
 800bff6:	5c9b      	ldrb	r3, [r3, r2]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d000      	beq.n	800bffe <HAL_GPIO_EXTI_Falling_Callback+0x9a>
 800bffc:	e084      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcResetChrono(&chrono);
 800bffe:	4b45      	ldr	r3, [pc, #276]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c000:	0018      	movs	r0, r3
 800c002:	f7ff fe21 	bl	800bc48 <rtcResetChrono>
}
 800c006:	e07f      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
	else if (watch.mode == WATCH_MODE_SETTINGS) {
 800c008:	4b41      	ldr	r3, [pc, #260]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d000      	beq.n	800c012 <HAL_GPIO_EXTI_Falling_Callback+0xae>
 800c010:	e079      	b.n	800c106 <HAL_GPIO_EXTI_Falling_Callback+0x1a2>
		watch.counterSettingsMode = 0; // if any pressed in settings, refresh timer to avoid exit settings mode
 800c012:	4b3f      	ldr	r3, [pc, #252]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800c014:	2200      	movs	r2, #0
 800c016:	705a      	strb	r2, [r3, #1]
		if (buttonRegister == BUTTON_RESET)
 800c018:	230e      	movs	r3, #14
 800c01a:	18fb      	adds	r3, r7, r3
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b06      	cmp	r3, #6
 800c020:	d104      	bne.n	800c02c <HAL_GPIO_EXTI_Falling_Callback+0xc8>
			watchSwitchSettingsItem(&watch);
 800c022:	4b3b      	ldr	r3, [pc, #236]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800c024:	0018      	movs	r0, r3
 800c026:	f002 fcf2 	bl	800ea0e <watchSwitchSettingsItem>
}
 800c02a:	e06d      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
		else if (buttonRegister == BUTTON_START || buttonRegister == BUTTON_SET) {
 800c02c:	220e      	movs	r2, #14
 800c02e:	18bb      	adds	r3, r7, r2
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b03      	cmp	r3, #3
 800c034:	d003      	beq.n	800c03e <HAL_GPIO_EXTI_Falling_Callback+0xda>
 800c036:	18bb      	adds	r3, r7, r2
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	d163      	bne.n	800c106 <HAL_GPIO_EXTI_Falling_Callback+0x1a2>
			if (buttonRegister == BUTTON_START)
 800c03e:	230e      	movs	r3, #14
 800c040:	18fb      	adds	r3, r7, r3
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2b03      	cmp	r3, #3
 800c046:	d104      	bne.n	800c052 <HAL_GPIO_EXTI_Falling_Callback+0xee>
				upOrDown = RTC_CHANGE_DIR_UP;
 800c048:	230f      	movs	r3, #15
 800c04a:	18fb      	adds	r3, r7, r3
 800c04c:	2200      	movs	r2, #0
 800c04e:	701a      	strb	r2, [r3, #0]
 800c050:	e008      	b.n	800c064 <HAL_GPIO_EXTI_Falling_Callback+0x100>
			else if (buttonRegister == BUTTON_SET)
 800c052:	230e      	movs	r3, #14
 800c054:	18fb      	adds	r3, r7, r3
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b05      	cmp	r3, #5
 800c05a:	d103      	bne.n	800c064 <HAL_GPIO_EXTI_Falling_Callback+0x100>
				upOrDown = RTC_CHANGE_DIR_DOWN;
 800c05c:	230f      	movs	r3, #15
 800c05e:	18fb      	adds	r3, r7, r3
 800c060:	2201      	movs	r2, #1
 800c062:	701a      	strb	r2, [r3, #0]
			switch (watch.settingsItem) {
 800c064:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <HAL_GPIO_EXTI_Falling_Callback+0x1ac>)
 800c066:	78db      	ldrb	r3, [r3, #3]
 800c068:	2b08      	cmp	r3, #8
 800c06a:	d84d      	bhi.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
 800c06c:	009a      	lsls	r2, r3, #2
 800c06e:	4b2a      	ldr	r3, [pc, #168]	; (800c118 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>)
 800c070:	18d3      	adds	r3, r2, r3
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	469f      	mov	pc, r3
				rtcChangeValue(&chrono, RTC_CHANGE_HOUR, upOrDown);
 800c076:	230f      	movs	r3, #15
 800c078:	18fb      	adds	r3, r7, r3
 800c07a:	781a      	ldrb	r2, [r3, #0]
 800c07c:	4b25      	ldr	r3, [pc, #148]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c07e:	2100      	movs	r1, #0
 800c080:	0018      	movs	r0, r3
 800c082:	f7ff fe05 	bl	800bc90 <rtcChangeValue>
				break;
 800c086:	e03f      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcChangeValue(&chrono, RTC_CHANGE_MINUTE, upOrDown);
 800c088:	230f      	movs	r3, #15
 800c08a:	18fb      	adds	r3, r7, r3
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	4b21      	ldr	r3, [pc, #132]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c090:	2101      	movs	r1, #1
 800c092:	0018      	movs	r0, r3
 800c094:	f7ff fdfc 	bl	800bc90 <rtcChangeValue>
				break;
 800c098:	e036      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcChangeValue(&chrono, RTC_CHANGE_SECOND, upOrDown);
 800c09a:	230f      	movs	r3, #15
 800c09c:	18fb      	adds	r3, r7, r3
 800c09e:	781a      	ldrb	r2, [r3, #0]
 800c0a0:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c0a2:	2102      	movs	r1, #2
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f7ff fdf3 	bl	800bc90 <rtcChangeValue>
				break;
 800c0aa:	e02d      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcChangeValue(&chrono, RTC_CHANGE_DAY, upOrDown);
 800c0ac:	230f      	movs	r3, #15
 800c0ae:	18fb      	adds	r3, r7, r3
 800c0b0:	781a      	ldrb	r2, [r3, #0]
 800c0b2:	4b18      	ldr	r3, [pc, #96]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c0b4:	2103      	movs	r1, #3
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	f7ff fdea 	bl	800bc90 <rtcChangeValue>
				break;
 800c0bc:	e024      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcChangeValue(&chrono, RTC_CHANGE_MONTH, upOrDown);
 800c0be:	230f      	movs	r3, #15
 800c0c0:	18fb      	adds	r3, r7, r3
 800c0c2:	781a      	ldrb	r2, [r3, #0]
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c0c6:	2104      	movs	r1, #4
 800c0c8:	0018      	movs	r0, r3
 800c0ca:	f7ff fde1 	bl	800bc90 <rtcChangeValue>
				break;
 800c0ce:	e01b      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				rtcChangeValue(&chrono, RTC_CHANGE_YEAR, upOrDown);
 800c0d0:	230f      	movs	r3, #15
 800c0d2:	18fb      	adds	r3, r7, r3
 800c0d4:	781a      	ldrb	r2, [r3, #0]
 800c0d6:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>)
 800c0d8:	2105      	movs	r1, #5
 800c0da:	0018      	movs	r0, r3
 800c0dc:	f7ff fdd8 	bl	800bc90 <rtcChangeValue>
				break;
 800c0e0:	e012      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				bme280ChangeValue(&atmospherical, BME280_CHANGE_PREF, upOrDown);
 800c0e2:	230f      	movs	r3, #15
 800c0e4:	18fb      	adds	r3, r7, r3
 800c0e6:	781a      	ldrb	r2, [r3, #0]
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	f7fe fd01 	bl	800aaf4 <bme280ChangeValue>
				break;
 800c0f2:	e009      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
				bme280ChangeValue(&atmospherical, BME280_CHANGE_TOFFSET,
 800c0f4:	230f      	movs	r3, #15
 800c0f6:	18fb      	adds	r3, r7, r3
 800c0f8:	781a      	ldrb	r2, [r3, #0]
 800c0fa:	4b08      	ldr	r3, [pc, #32]	; (800c11c <HAL_GPIO_EXTI_Falling_Callback+0x1b8>)
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	0018      	movs	r0, r3
 800c100:	f7fe fcf8 	bl	800aaf4 <bme280ChangeValue>
				break;
 800c104:	e000      	b.n	800c108 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
		}
 800c106:	46c0      	nop			; (mov r8, r8)
}
 800c108:	46c0      	nop			; (mov r8, r8)
 800c10a:	46bd      	mov	sp, r7
 800c10c:	b004      	add	sp, #16
 800c10e:	bdb0      	pop	{r4, r5, r7, pc}
 800c110:	20000508 	.word	0x20000508
 800c114:	200000b8 	.word	0x200000b8
 800c118:	0801572c 	.word	0x0801572c
 800c11c:	20000368 	.word	0x20000368

0800c120 <buttonRead>:
/*
 * brief: returns button matrix states
 * parameter: none
 * retval: buttons register described in buttons.h
 */
uint8_t buttonRead(void) {
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0

	uint8_t buttonReg = 0; //stores configuration of pressed buttons
 800c126:	1dfb      	adds	r3, r7, #7
 800c128:	2200      	movs	r2, #0
 800c12a:	701a      	strb	r2, [r3, #0]

	buttonReg = buttonReg
			| (HAL_GPIO_ReadPin(BUTTON_START_GPIO_Port, BUTTON_START_Pin) << 2);
 800c12c:	23a0      	movs	r3, #160	; 0xa0
 800c12e:	05db      	lsls	r3, r3, #23
 800c130:	2104      	movs	r1, #4
 800c132:	0018      	movs	r0, r3
 800c134:	f7f8 fc7e 	bl	8004a34 <HAL_GPIO_ReadPin>
 800c138:	0003      	movs	r3, r0
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	b25a      	sxtb	r2, r3
 800c13e:	1dfb      	adds	r3, r7, #7
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	b25b      	sxtb	r3, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	b25a      	sxtb	r2, r3
	buttonReg = buttonReg
 800c148:	1dfb      	adds	r3, r7, #7
 800c14a:	701a      	strb	r2, [r3, #0]
	buttonReg = buttonReg
			| (HAL_GPIO_ReadPin(BUTTON_SET_GPIO_Port, BUTTON_SET_Pin) << 1);
 800c14c:	23a0      	movs	r3, #160	; 0xa0
 800c14e:	05db      	lsls	r3, r3, #23
 800c150:	2108      	movs	r1, #8
 800c152:	0018      	movs	r0, r3
 800c154:	f7f8 fc6e 	bl	8004a34 <HAL_GPIO_ReadPin>
 800c158:	0003      	movs	r3, r0
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	b25a      	sxtb	r2, r3
 800c15e:	1dfb      	adds	r3, r7, #7
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	b25b      	sxtb	r3, r3
 800c164:	4313      	orrs	r3, r2
 800c166:	b25a      	sxtb	r2, r3
	buttonReg = buttonReg
 800c168:	1dfb      	adds	r3, r7, #7
 800c16a:	701a      	strb	r2, [r3, #0]
	buttonReg = buttonReg
			| (HAL_GPIO_ReadPin(BUTTON_RESET_GPIO_Port, BUTTON_RESET_Pin));
 800c16c:	23a0      	movs	r3, #160	; 0xa0
 800c16e:	05db      	lsls	r3, r3, #23
 800c170:	2110      	movs	r1, #16
 800c172:	0018      	movs	r0, r3
 800c174:	f7f8 fc5e 	bl	8004a34 <HAL_GPIO_ReadPin>
 800c178:	0003      	movs	r3, r0
 800c17a:	0019      	movs	r1, r3
	buttonReg = buttonReg
 800c17c:	1dfb      	adds	r3, r7, #7
 800c17e:	1dfa      	adds	r2, r7, #7
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	430a      	orrs	r2, r1
 800c184:	701a      	strb	r2, [r3, #0]

	return buttonReg;
 800c186:	1dfb      	adds	r3, r7, #7
 800c188:	781b      	ldrb	r3, [r3, #0]

}
 800c18a:	0018      	movs	r0, r3
 800c18c:	46bd      	mov	sp, r7
 800c18e:	b002      	add	sp, #8
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <interfaceInit>:
 * brief: initialisation of watch interface
 * note: remember of set coordintaes, lenghts etc. outside
 * param: interface struct
 * retval: none
 */
void interfaceInit(interfaceTypeDef *interface) {
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af02      	add	r7, sp, #8
 800c19a:	6078      	str	r0, [r7, #4]

//			display init

	printf("EPD_1in54_V2_test Demo\r\n");
 800c19c:	4b68      	ldr	r3, [pc, #416]	; (800c340 <interfaceInit+0x1ac>)
 800c19e:	0018      	movs	r0, r3
 800c1a0:	f002 fdee 	bl	800ed80 <puts>
	DEV_Module_Init();
 800c1a4:	f7fb fe46 	bl	8007e34 <DEV_Module_Init>

	printf("e-Paper Init and Clear...\r\n");
 800c1a8:	4b66      	ldr	r3, [pc, #408]	; (800c344 <interfaceInit+0x1b0>)
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	f002 fde8 	bl	800ed80 <puts>
	EPD_1IN54_V2_Init();
 800c1b0:	f7fb ff12 	bl	8007fd8 <EPD_1IN54_V2_Init>
	EPD_1IN54_V2_Clear();
 800c1b4:	f7fb ff6e 	bl	8008094 <EPD_1IN54_V2_Clear>
	DEV_Delay_ms(500);
 800c1b8:	23fa      	movs	r3, #250	; 0xfa
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	0018      	movs	r0, r3
 800c1be:	f7f7 f9a1 	bl	8003504 <HAL_Delay>

	//Create a new image cache
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	uint16_t Imagesize = (
 800c1c2:	210e      	movs	r1, #14
 800c1c4:	187b      	adds	r3, r7, r1
 800c1c6:	4a60      	ldr	r2, [pc, #384]	; (800c348 <interfaceInit+0x1b4>)
 800c1c8:	801a      	strh	r2, [r3, #0]
			(EPD_1IN54_V2_WIDTH % 8 == 0) ?
					(EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1))
			* EPD_1IN54_V2_HEIGHT;
	if ((interface->framebuffer = (uint8_t*) malloc(Imagesize)) == NULL) {
 800c1ca:	187b      	adds	r3, r7, r1
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	0018      	movs	r0, r3
 800c1d0:	f002 fc86 	bl	800eae0 <malloc>
 800c1d4:	0003      	movs	r3, r0
 800c1d6:	0019      	movs	r1, r3
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	2392      	movs	r3, #146	; 0x92
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	50d1      	str	r1, [r2, r3]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	2392      	movs	r3, #146	; 0x92
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	58d3      	ldr	r3, [r2, r3]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <interfaceInit+0x60>
		printf("Failed to apply for black memory...\r\n");
 800c1ec:	4b57      	ldr	r3, [pc, #348]	; (800c34c <interfaceInit+0x1b8>)
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f002 fdc6 	bl	800ed80 <puts>
		// return -1;
	}
	printf("Paint_NewImage\r\n");
 800c1f4:	4b56      	ldr	r3, [pc, #344]	; (800c350 <interfaceInit+0x1bc>)
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	f002 fdc2 	bl	800ed80 <puts>
	Paint_NewImage(interface->framebuffer, EPD_1IN54_V2_WIDTH,
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	2392      	movs	r3, #146	; 0x92
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	58d0      	ldr	r0, [r2, r3]
	EPD_1IN54_V2_HEIGHT, 0, interface->colorForeground);
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	2391      	movs	r3, #145	; 0x91
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	5cd3      	ldrb	r3, [r2, r3]
	Paint_NewImage(interface->framebuffer, EPD_1IN54_V2_WIDTH,
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	2300      	movs	r3, #0
 800c212:	22c8      	movs	r2, #200	; 0xc8
 800c214:	21c8      	movs	r1, #200	; 0xc8
 800c216:	f7fc f8b5 	bl	8008384 <Paint_NewImage>

	interfaceUpdateModeSwitch(interface, INTERFACE_UPDATE_MODE_FULL);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2100      	movs	r1, #0
 800c21e:	0018      	movs	r0, r3
 800c220:	f000 f8f0 	bl	800c404 <interfaceUpdateModeSwitch>

	interface->coordinatesMain[X] = 100;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2264      	movs	r2, #100	; 0x64
 800c228:	701a      	strb	r2, [r3, #0]
	interface->coordinatesMain[Y] = 100;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2264      	movs	r2, #100	; 0x64
 800c22e:	705a      	strb	r2, [r3, #1]

	interface->coordinatesChronoMinutes[X] = 100;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2264      	movs	r2, #100	; 0x64
 800c234:	70da      	strb	r2, [r3, #3]
	interface->coordinatesChronoMinutes[Y] = 150;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2296      	movs	r2, #150	; 0x96
 800c23a:	711a      	strb	r2, [r3, #4]

	interface->coordinatesChronoDecimals[X] = 100;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2264      	movs	r2, #100	; 0x64
 800c240:	719a      	strb	r2, [r3, #6]
	interface->coordinatesChronoDecimals[Y] = 50;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2232      	movs	r2, #50	; 0x32
 800c246:	71da      	strb	r2, [r3, #7]

	interface->coordinatesTemperature[X] = 22;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2216      	movs	r2, #22
 800c24c:	725a      	strb	r2, [r3, #9]
	interface->coordinatesTemperature[Y] = 44;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	222c      	movs	r2, #44	; 0x2c
 800c252:	729a      	strb	r2, [r3, #10]

	interface->coordinatesHumidity[X] = 130;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2282      	movs	r2, #130	; 0x82
 800c258:	731a      	strb	r2, [r3, #12]
	interface->coordinatesHumidity[Y] = 75;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	224b      	movs	r2, #75	; 0x4b
 800c25e:	735a      	strb	r2, [r3, #13]

	interface->coordinatesPressure[X] = 100;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2264      	movs	r2, #100	; 0x64
 800c264:	73da      	strb	r2, [r3, #15]
	interface->coordinatesPressure[Y] = 100;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2264      	movs	r2, #100	; 0x64
 800c26a:	741a      	strb	r2, [r3, #16]

	interface->coordinatesCompass[X] = 55;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2237      	movs	r2, #55	; 0x37
 800c270:	749a      	strb	r2, [r3, #18]
	interface->coordinatesCompass[Y] = 100;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2264      	movs	r2, #100	; 0x64
 800c276:	74da      	strb	r2, [r3, #19]

	interface->coordinatesDate[X] = 149;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2295      	movs	r2, #149	; 0x95
 800c27c:	755a      	strb	r2, [r3, #21]
	interface->coordinatesDate[Y] = 93;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	225d      	movs	r2, #93	; 0x5d
 800c282:	759a      	strb	r2, [r3, #22]

	interface->coordinatesBatteryState[X] = 130;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2282      	movs	r2, #130	; 0x82
 800c288:	761a      	strb	r2, [r3, #24]
	interface->coordinatesBatteryState[Y] = 135;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2287      	movs	r2, #135	; 0x87
 800c28e:	765a      	strb	r2, [r3, #25]

	interface->coordinatesMoonPhase[X] = 150;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2296      	movs	r2, #150	; 0x96
 800c294:	76da      	strb	r2, [r3, #27]
	interface->coordinatesMoonPhase[Y] = 50;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2232      	movs	r2, #50	; 0x32
 800c29a:	771a      	strb	r2, [r3, #28]

	interface->radiusMain = 97;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2261      	movs	r2, #97	; 0x61
 800c2a0:	779a      	strb	r2, [r3, #30]
	interface->radiusSmall = 28;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	221c      	movs	r2, #28
 800c2a6:	77da      	strb	r2, [r3, #31]
	interface->radiusCompass = 25;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2220      	movs	r2, #32
 800c2ac:	2119      	movs	r1, #25
 800c2ae:	5499      	strb	r1, [r3, r2]
	interface->radiusMoonPhase = 10;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2221      	movs	r2, #33	; 0x21
 800c2b4:	210a      	movs	r1, #10
 800c2b6:	5499      	strb	r1, [r3, r2]

	interface->pointerLengthHours = 55;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2222      	movs	r2, #34	; 0x22
 800c2bc:	2137      	movs	r1, #55	; 0x37
 800c2be:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthMinutes = 80;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2223      	movs	r2, #35	; 0x23
 800c2c4:	2150      	movs	r1, #80	; 0x50
 800c2c6:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthChronoSeconds = 80;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2224      	movs	r2, #36	; 0x24
 800c2cc:	2150      	movs	r1, #80	; 0x50
 800c2ce:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthChronoMinutes = 20;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2225      	movs	r2, #37	; 0x25
 800c2d4:	2114      	movs	r1, #20
 800c2d6:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthChronoDecimals = 20;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2226      	movs	r2, #38	; 0x26
 800c2dc:	2114      	movs	r1, #20
 800c2de:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthBatteryState = 35;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2227      	movs	r2, #39	; 0x27
 800c2e4:	2123      	movs	r1, #35	; 0x23
 800c2e6:	5499      	strb	r1, [r3, r2]
	interface->pointerLengthPressure = 100;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2228      	movs	r2, #40	; 0x28
 800c2ec:	2164      	movs	r1, #100	; 0x64
 800c2ee:	5499      	strb	r1, [r3, r2]
	interface->pointerLenghtCompass = 18;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2229      	movs	r2, #41	; 0x29
 800c2f4:	2112      	movs	r1, #18
 800c2f6:	5499      	strb	r1, [r3, r2]
	interface->pointerShiftPressure = 85;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	222d      	movs	r2, #45	; 0x2d
 800c2fc:	2155      	movs	r1, #85	; 0x55
 800c2fe:	5499      	strb	r1, [r3, r2]

	interface->indexLengthChronoDecimals = 4;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	222a      	movs	r2, #42	; 0x2a
 800c304:	2104      	movs	r1, #4
 800c306:	5499      	strb	r1, [r3, r2]
	interface->indexLengthChronoMinutes = 2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	222b      	movs	r2, #43	; 0x2b
 800c30c:	2102      	movs	r1, #2
 800c30e:	5499      	strb	r1, [r3, r2]
	interface->indexLengthMain = 10;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	222c      	movs	r2, #44	; 0x2c
 800c314:	210a      	movs	r1, #10
 800c316:	5499      	strb	r1, [r3, r2]

	interface->shadowShift = 2;
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	2390      	movs	r3, #144	; 0x90
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	2102      	movs	r1, #2
 800c320:	54d1      	strb	r1, [r2, r3]
	interface->colorBackground = INTERFACE_COLOR_BLACK;
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	2322      	movs	r3, #34	; 0x22
 800c326:	33ff      	adds	r3, #255	; 0xff
 800c328:	2100      	movs	r1, #0
 800c32a:	54d1      	strb	r1, [r2, r3]
	interface->colorForeground = INTERFACE_COLOR_WHITE;
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	2391      	movs	r3, #145	; 0x91
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	21ff      	movs	r1, #255	; 0xff
 800c334:	54d1      	strb	r1, [r2, r3]
}
 800c336:	46c0      	nop			; (mov r8, r8)
 800c338:	46bd      	mov	sp, r7
 800c33a:	b004      	add	sp, #16
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	46c0      	nop			; (mov r8, r8)
 800c340:	080117f0 	.word	0x080117f0
 800c344:	08011808 	.word	0x08011808
 800c348:	00001388 	.word	0x00001388
 800c34c:	08011824 	.word	0x08011824
 800c350:	0801184c 	.word	0x0801184c

0800c354 <interfaceSettingsInit>:

void interfaceSettingsInit(interfaceSettingsTypeDef *settings) {
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
	settings->coordinatesTemperature[X] = 70;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2246      	movs	r2, #70	; 0x46
 800c360:	761a      	strb	r2, [r3, #24]
	settings->coordinatesTemperature[Y] = 5;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2205      	movs	r2, #5
 800c366:	765a      	strb	r2, [r3, #25]

	settings->coordinatesHumidity[X] = 40;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2228      	movs	r2, #40	; 0x28
 800c36c:	769a      	strb	r2, [r3, #26]
	settings->coordinatesHumidity[Y] = 20;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2214      	movs	r2, #20
 800c372:	76da      	strb	r2, [r3, #27]

	settings->coordinatesPressure[X] = 30;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	221e      	movs	r2, #30
 800c378:	771a      	strb	r2, [r3, #28]
	settings->coordinatesPressure[Y] = 35;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2223      	movs	r2, #35	; 0x23
 800c37e:	775a      	strb	r2, [r3, #29]

	settings->coordinatesAltitude[X] = 20;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2214      	movs	r2, #20
 800c384:	779a      	strb	r2, [r3, #30]
	settings->coordinatesAltitude[Y] = 50;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2232      	movs	r2, #50	; 0x32
 800c38a:	77da      	strb	r2, [r3, #31]

	settings->coordinatesHours[X] = 10;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	220a      	movs	r2, #10
 800c390:	701a      	strb	r2, [r3, #0]
	settings->coordinatesHours[Y] = 80;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2250      	movs	r2, #80	; 0x50
 800c396:	705a      	strb	r2, [r3, #1]

	settings->coordinatesMinutes[X] = 50;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2232      	movs	r2, #50	; 0x32
 800c39c:	70da      	strb	r2, [r3, #3]
	settings->coordinatesMinutes[Y] = 80;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2250      	movs	r2, #80	; 0x50
 800c3a2:	711a      	strb	r2, [r3, #4]

	settings->coordinatesSeconds[X] = 90;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	225a      	movs	r2, #90	; 0x5a
 800c3a8:	719a      	strb	r2, [r3, #6]
	settings->coordinatesSeconds[Y] = 80;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2250      	movs	r2, #80	; 0x50
 800c3ae:	71da      	strb	r2, [r3, #7]

	settings->coordinatesDays[X] = 10;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	725a      	strb	r2, [r3, #9]
	settings->coordinatesDays[Y] = 100;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2264      	movs	r2, #100	; 0x64
 800c3ba:	729a      	strb	r2, [r3, #10]

	settings->coordinatesMonths[X] = 50;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2232      	movs	r2, #50	; 0x32
 800c3c0:	731a      	strb	r2, [r3, #12]
	settings->coordinatesMonths[Y] = 100;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2264      	movs	r2, #100	; 0x64
 800c3c6:	735a      	strb	r2, [r3, #13]

	settings->coordinatesYears[X] = 90;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	225a      	movs	r2, #90	; 0x5a
 800c3cc:	73da      	strb	r2, [r3, #15]
	settings->coordinatesYears[Y] = 100;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2264      	movs	r2, #100	; 0x64
 800c3d2:	741a      	strb	r2, [r3, #16]

	settings->coordinatesPressureReference[X] = 20;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2214      	movs	r2, #20
 800c3d8:	749a      	strb	r2, [r3, #18]
	settings->coordinatesPressureReference[Y] = 125;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	227d      	movs	r2, #125	; 0x7d
 800c3de:	74da      	strb	r2, [r3, #19]

	settings->coordinatesTemperatureCompensation[X] = 30;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	221e      	movs	r2, #30
 800c3e4:	755a      	strb	r2, [r3, #21]
	settings->coordinatesTemperatureCompensation[Y] = 140;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	228c      	movs	r2, #140	; 0x8c
 800c3ea:	759a      	strb	r2, [r3, #22]

	settings->colorBackground = INTERFACE_COLOR_WHITE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	21ff      	movs	r1, #255	; 0xff
 800c3f2:	5499      	strb	r1, [r3, r2]
	settings->colorForeground = INTERFACE_COLOR_BLACK;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2221      	movs	r2, #33	; 0x21
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	5499      	strb	r1, [r3, r2]
}
 800c3fc:	46c0      	nop			; (mov r8, r8)
 800c3fe:	46bd      	mov	sp, r7
 800c400:	b002      	add	sp, #8
 800c402:	bd80      	pop	{r7, pc}

0800c404 <interfaceUpdateModeSwitch>:
 * brief: change update method
 * note: full or partial EPD refresh
 * param: interface struct
 * param: INTERFACE_UPDATE_MODE_FULL / INTERFACE_UPDATE_MODE_PARTIAL
 */
void interfaceUpdateModeSwitch(interfaceTypeDef *interface, uint8_t mode) {
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	000a      	movs	r2, r1
 800c40e:	1cfb      	adds	r3, r7, #3
 800c410:	701a      	strb	r2, [r3, #0]
	if (mode == INTERFACE_UPDATE_MODE_FULL) {
 800c412:	1cfb      	adds	r3, r7, #3
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10e      	bne.n	800c438 <interfaceUpdateModeSwitch+0x34>

		EPD_1IN54_V2_Init();
 800c41a:	f7fb fddd 	bl	8007fd8 <EPD_1IN54_V2_Init>
		Paint_SelectImage(interface->framebuffer);
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	2392      	movs	r3, #146	; 0x92
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	58d3      	ldr	r3, [r2, r3]
 800c426:	0018      	movs	r0, r3
 800c428:	f7fc f81a 	bl	8008460 <Paint_SelectImage>

		interface->updateMode = INTERFACE_UPDATE_MODE_FULL;
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	2394      	movs	r3, #148	; 0x94
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	2100      	movs	r1, #0
 800c434:	54d1      	strb	r1, [r2, r3]
		Paint_SelectImage(interface->framebuffer);

		interface->updateMode = INTERFACE_UPDATE_MODE_PARTIAL;
	}

}
 800c436:	e018      	b.n	800c46a <interfaceUpdateModeSwitch+0x66>
	} else if (mode == INTERFACE_UPDATE_MODE_PARTIAL) {
 800c438:	1cfb      	adds	r3, r7, #3
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d114      	bne.n	800c46a <interfaceUpdateModeSwitch+0x66>
		EPD_1IN54_V2_Init();
 800c440:	f7fb fdca 	bl	8007fd8 <EPD_1IN54_V2_Init>
		EPD_1IN54_V2_DisplayPartBaseImage(interface->framebuffer);
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	2392      	movs	r3, #146	; 0x92
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	58d3      	ldr	r3, [r2, r3]
 800c44c:	0018      	movs	r0, r3
 800c44e:	f7fb fea3 	bl	8008198 <EPD_1IN54_V2_DisplayPartBaseImage>
		Paint_SelectImage(interface->framebuffer);
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	2392      	movs	r3, #146	; 0x92
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	58d3      	ldr	r3, [r2, r3]
 800c45a:	0018      	movs	r0, r3
 800c45c:	f7fc f800 	bl	8008460 <Paint_SelectImage>
		interface->updateMode = INTERFACE_UPDATE_MODE_PARTIAL;
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	2394      	movs	r3, #148	; 0x94
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	2101      	movs	r1, #1
 800c468:	54d1      	strb	r1, [r2, r3]
}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	46bd      	mov	sp, r7
 800c46e:	b002      	add	sp, #8
 800c470:	bd80      	pop	{r7, pc}

0800c472 <interfaceBurn>:
/*
 * brief: burn framebuffer on matrix
 * param: interface struct
 * retval: none
 */
void interfaceBurn(interfaceTypeDef *interface) {
 800c472:	b580      	push	{r7, lr}
 800c474:	b082      	sub	sp, #8
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]

	if (interface->updateMode == INTERFACE_UPDATE_MODE_PARTIAL) {
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	2394      	movs	r3, #148	; 0x94
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	5cd3      	ldrb	r3, [r2, r3]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d107      	bne.n	800c496 <interfaceBurn+0x24>

		EPD_1IN54_V2_DisplayPart(interface->framebuffer);
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	2392      	movs	r3, #146	; 0x92
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	58d3      	ldr	r3, [r2, r3]
 800c48e:	0018      	movs	r0, r3
 800c490:	f7fb ff0c 	bl	80082ac <EPD_1IN54_V2_DisplayPart>

		EPD_1IN54_V2_Display(interface->framebuffer);

	}

}
 800c494:	e00c      	b.n	800c4b0 <interfaceBurn+0x3e>
	} else if (interface->updateMode == INTERFACE_UPDATE_MODE_FULL) {
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	2394      	movs	r3, #148	; 0x94
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	5cd3      	ldrb	r3, [r2, r3]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d106      	bne.n	800c4b0 <interfaceBurn+0x3e>
		EPD_1IN54_V2_Display(interface->framebuffer);
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	2392      	movs	r3, #146	; 0x92
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	58d3      	ldr	r3, [r2, r3]
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	f7fb fe25 	bl	80080fa <EPD_1IN54_V2_Display>
}
 800c4b0:	46c0      	nop			; (mov r8, r8)
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	b002      	add	sp, #8
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <interfaceClear>:
/*
 * brief: burn framebuffer on matrix
 * param: interface struct
 * retval: none
 */
void interfaceClear(interfaceTypeDef *interface) {
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
	Paint_Clear(interface->colorBackground);
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	2322      	movs	r3, #34	; 0x22
 800c4c4:	33ff      	adds	r3, #255	; 0xff
 800c4c6:	5cd3      	ldrb	r3, [r2, r3]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	0018      	movs	r0, r3
 800c4cc:	f7fc f97a 	bl	80087c4 <Paint_Clear>
}
 800c4d0:	46c0      	nop			; (mov r8, r8)
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	b002      	add	sp, #8
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <interfaceSettingsClear>:

void interfaceSettingsClear(interfaceSettingsTypeDef *settings) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
	Paint_Clear(settings->colorBackground);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	5c9b      	ldrb	r3, [r3, r2]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	0018      	movs	r0, r3
 800c4ea:	f7fc f96b 	bl	80087c4 <Paint_Clear>
}
 800c4ee:	46c0      	nop			; (mov r8, r8)
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	b002      	add	sp, #8
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <interfaceDraw>:

void interfaceDraw(interfaceTypeDef *interface, RTCChronoTypeDef *chrono,
		lis3mdlTypeDef *magnetometer, bme280TypeDef *atmospherical,
		watchTypeDef *watch) {
 800c4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fa:	46ce      	mov	lr, r9
 800c4fc:	4647      	mov	r7, r8
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b08f      	sub	sp, #60	; 0x3c
 800c502:	af04      	add	r7, sp, #16
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	607a      	str	r2, [r7, #4]
 800c50a:	603b      	str	r3, [r7, #0]

	//			LOGO
	Paint_DrawString_EN(82, 7, "libra", &Font12, interface->colorForeground,
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	2391      	movs	r3, #145	; 0x91
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	5cd3      	ldrb	r3, [r2, r3]
 800c514:	b29b      	uxth	r3, r3
			interface->colorBackground);
 800c516:	68f9      	ldr	r1, [r7, #12]
 800c518:	2222      	movs	r2, #34	; 0x22
 800c51a:	32ff      	adds	r2, #255	; 0xff
 800c51c:	5c8a      	ldrb	r2, [r1, r2]
	Paint_DrawString_EN(82, 7, "libra", &Font12, interface->colorForeground,
 800c51e:	b292      	uxth	r2, r2
 800c520:	48e4      	ldr	r0, [pc, #912]	; (800c8b4 <interfaceDraw+0x3bc>)
 800c522:	49e5      	ldr	r1, [pc, #916]	; (800c8b8 <interfaceDraw+0x3c0>)
 800c524:	9201      	str	r2, [sp, #4]
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	0003      	movs	r3, r0
 800c52a:	000a      	movs	r2, r1
 800c52c:	2107      	movs	r1, #7
 800c52e:	2052      	movs	r0, #82	; 0x52
 800c530:	f7fd f88a 	bl	8009648 <Paint_DrawString_EN>

	//			MOON PHASE BOARD
	if (interface->coordinatesMoonPhase[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	7f5b      	ldrb	r3, [r3, #29]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d000      	beq.n	800c53e <interfaceDraw+0x46>
 800c53c:	e11f      	b.n	800c77e <interfaceDraw+0x286>
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	7edb      	ldrb	r3, [r3, #27]
 800c542:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y], interface->radiusMoonPhase,
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	7f1b      	ldrb	r3, [r3, #28]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c548:	b299      	uxth	r1, r3
				interface->coordinatesMoonPhase[Y], interface->radiusMoonPhase,
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2221      	movs	r2, #33	; 0x21
 800c54e:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c550:	b29c      	uxth	r4, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	2391      	movs	r3, #145	; 0x91
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X],
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	2201      	movs	r2, #1
 800c55e:	9201      	str	r2, [sp, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	9200      	str	r2, [sp, #0]
 800c564:	0022      	movs	r2, r4
 800c566:	f7fc fd39 	bl	8008fdc <Paint_DrawCircle>

		//draw craters
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 2,
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	7edb      	ldrb	r3, [r3, #27]
 800c56e:	b29b      	uxth	r3, r3
 800c570:	3b02      	subs	r3, #2
 800c572:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 1, 3,
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	7f1b      	ldrb	r3, [r3, #28]
 800c578:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 2,
 800c57a:	3301      	adds	r3, #1
 800c57c:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	2322      	movs	r3, #34	; 0x22
 800c582:	33ff      	adds	r3, #255	; 0xff
 800c584:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 2,
 800c586:	b29b      	uxth	r3, r3
 800c588:	2200      	movs	r2, #0
 800c58a:	9201      	str	r2, [sp, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	9200      	str	r2, [sp, #0]
 800c590:	2203      	movs	r2, #3
 800c592:	f7fc fd23 	bl	8008fdc <Paint_DrawCircle>
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] + 2,
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	7edb      	ldrb	r3, [r3, #27]
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	3302      	adds	r3, #2
 800c59e:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] - 5, 1,
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	7f1b      	ldrb	r3, [r3, #28]
 800c5a4:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] + 2,
 800c5a6:	3b05      	subs	r3, #5
 800c5a8:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	2322      	movs	r3, #34	; 0x22
 800c5ae:	33ff      	adds	r3, #255	; 0xff
 800c5b0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] + 2,
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	9200      	str	r2, [sp, #0]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f7fc fd0d 	bl	8008fdc <Paint_DrawCircle>
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 9,
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	7edb      	ldrb	r3, [r3, #27]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	3b09      	subs	r3, #9
 800c5ca:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 3, 2,
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	7f1b      	ldrb	r3, [r3, #28]
 800c5d0:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 9,
 800c5d2:	3303      	adds	r3, #3
 800c5d4:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	2322      	movs	r3, #34	; 0x22
 800c5da:	33ff      	adds	r3, #255	; 0xff
 800c5dc:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesMoonPhase[X] - 9,
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	9201      	str	r2, [sp, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	9200      	str	r2, [sp, #0]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	f7fc fcf7 	bl	8008fdc <Paint_DrawCircle>

		if (chrono->actual.moonPhase < 50) {
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	2b31      	cmp	r3, #49	; 0x31
 800c5f4:	d836      	bhi.n	800c664 <interfaceDraw+0x16c>

			float moonPhaseShift = ((float) chrono->actual.moonPhase / 25)
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	f7f4 fdd0 	bl	80011a0 <__aeabi_ui2f>
 800c600:	1c03      	adds	r3, r0, #0
 800c602:	49ae      	ldr	r1, [pc, #696]	; (800c8bc <interfaceDraw+0x3c4>)
 800c604:	1c18      	adds	r0, r3, #0
 800c606:	f7f4 f977 	bl	80008f8 <__aeabi_fdiv>
 800c60a:	1c03      	adds	r3, r0, #0
 800c60c:	1c1c      	adds	r4, r3, #0
					* interface->radiusMoonPhase;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2221      	movs	r2, #33	; 0x21
 800c612:	5c9b      	ldrb	r3, [r3, r2]
 800c614:	0018      	movs	r0, r3
 800c616:	f7f4 fd7d 	bl	8001114 <__aeabi_i2f>
 800c61a:	1c03      	adds	r3, r0, #0
			float moonPhaseShift = ((float) chrono->actual.moonPhase / 25)
 800c61c:	1c19      	adds	r1, r3, #0
 800c61e:	1c20      	adds	r0, r4, #0
 800c620:	f7f4 fa76 	bl	8000b10 <__aeabi_fmul>
 800c624:	1c03      	adds	r3, r0, #0
 800c626:	617b      	str	r3, [r7, #20]
			Paint_DrawCircle(
					interface->coordinatesMoonPhase[X]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	7edb      	ldrb	r3, [r3, #27]
 800c62c:	b29c      	uxth	r4, r3
							- (uint32_t) moonPhaseShift,
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7f3 ff72 	bl	8000518 <__aeabi_f2uiz>
 800c634:	0003      	movs	r3, r0
			Paint_DrawCircle(
 800c636:	b29b      	uxth	r3, r3
 800c638:	1ae3      	subs	r3, r4, r3
 800c63a:	b298      	uxth	r0, r3
					interface->coordinatesMoonPhase[Y],
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	7f1b      	ldrb	r3, [r3, #28]
			Paint_DrawCircle(
 800c640:	b299      	uxth	r1, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2221      	movs	r2, #33	; 0x21
 800c646:	5c9b      	ldrb	r3, [r3, r2]
			Paint_DrawCircle(
 800c648:	b29c      	uxth	r4, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	2322      	movs	r3, #34	; 0x22
 800c64e:	33ff      	adds	r3, #255	; 0xff
 800c650:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawCircle(
 800c652:	b29b      	uxth	r3, r3
 800c654:	2201      	movs	r2, #1
 800c656:	9201      	str	r2, [sp, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	9200      	str	r2, [sp, #0]
 800c65c:	0022      	movs	r2, r4
 800c65e:	f7fc fcbd 	bl	8008fdc <Paint_DrawCircle>
 800c662:	e03c      	b.n	800c6de <interfaceDraw+0x1e6>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);

		} else if (chrono->actual.moonPhase > 50) {
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	2b32      	cmp	r3, #50	; 0x32
 800c66a:	d938      	bls.n	800c6de <interfaceDraw+0x1e6>
			uint32_t moonPhase = 100 - chrono->actual.moonPhase;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	2264      	movs	r2, #100	; 0x64
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	61fb      	str	r3, [r7, #28]

			float moonPhaseShift = ((float) moonPhase / 25)
 800c676:	69f8      	ldr	r0, [r7, #28]
 800c678:	f7f4 fd92 	bl	80011a0 <__aeabi_ui2f>
 800c67c:	1c03      	adds	r3, r0, #0
 800c67e:	498f      	ldr	r1, [pc, #572]	; (800c8bc <interfaceDraw+0x3c4>)
 800c680:	1c18      	adds	r0, r3, #0
 800c682:	f7f4 f939 	bl	80008f8 <__aeabi_fdiv>
 800c686:	1c03      	adds	r3, r0, #0
 800c688:	1c1c      	adds	r4, r3, #0
					* interface->radiusMoonPhase;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2221      	movs	r2, #33	; 0x21
 800c68e:	5c9b      	ldrb	r3, [r3, r2]
 800c690:	0018      	movs	r0, r3
 800c692:	f7f4 fd3f 	bl	8001114 <__aeabi_i2f>
 800c696:	1c03      	adds	r3, r0, #0
			float moonPhaseShift = ((float) moonPhase / 25)
 800c698:	1c19      	adds	r1, r3, #0
 800c69a:	1c20      	adds	r0, r4, #0
 800c69c:	f7f4 fa38 	bl	8000b10 <__aeabi_fmul>
 800c6a0:	1c03      	adds	r3, r0, #0
 800c6a2:	61bb      	str	r3, [r7, #24]
			Paint_DrawCircle(
					interface->coordinatesMoonPhase[X]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	7edb      	ldrb	r3, [r3, #27]
 800c6a8:	b29c      	uxth	r4, r3
							+ (uint32_t) moonPhaseShift,
 800c6aa:	69b8      	ldr	r0, [r7, #24]
 800c6ac:	f7f3 ff34 	bl	8000518 <__aeabi_f2uiz>
 800c6b0:	0003      	movs	r3, r0
			Paint_DrawCircle(
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	18e3      	adds	r3, r4, r3
 800c6b6:	b298      	uxth	r0, r3
					interface->coordinatesMoonPhase[Y],
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	7f1b      	ldrb	r3, [r3, #28]
			Paint_DrawCircle(
 800c6bc:	b299      	uxth	r1, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2221      	movs	r2, #33	; 0x21
 800c6c2:	5c9b      	ldrb	r3, [r3, r2]
			Paint_DrawCircle(
 800c6c4:	b29c      	uxth	r4, r3
					interface->radiusMoonPhase, interface->colorBackground,
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	2322      	movs	r3, #34	; 0x22
 800c6ca:	33ff      	adds	r3, #255	; 0xff
 800c6cc:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawCircle(
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	9201      	str	r2, [sp, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	9200      	str	r2, [sp, #0]
 800c6d8:	0022      	movs	r2, r4
 800c6da:	f7fc fc7f 	bl	8008fdc <Paint_DrawCircle>
					DOT_PIXEL_1X1, DRAW_FILL_FULL);

		}

		//			draw stars
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 15,
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	7edb      	ldrb	r3, [r3, #27]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	3b0f      	subs	r3, #15
 800c6e6:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] - 5,
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	7f1b      	ldrb	r3, [r3, #28]
 800c6ec:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 15,
 800c6ee:	3b05      	subs	r3, #5
 800c6f0:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	2391      	movs	r3, #145	; 0x91
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 15,
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	2301      	movs	r3, #1
 800c702:	f7fc f8ed 	bl	80088e0 <Paint_DrawPoint>
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 13,
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	7edb      	ldrb	r3, [r3, #27]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	330d      	adds	r3, #13
 800c70e:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 2,
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	7f1b      	ldrb	r3, [r3, #28]
 800c714:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 13,
 800c716:	3302      	adds	r3, #2
 800c718:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	2391      	movs	r3, #145	; 0x91
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 13,
 800c722:	b29a      	uxth	r2, r3
 800c724:	2301      	movs	r3, #1
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	2301      	movs	r3, #1
 800c72a:	f7fc f8d9 	bl	80088e0 <Paint_DrawPoint>
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 9,
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	7edb      	ldrb	r3, [r3, #27]
 800c732:	b29b      	uxth	r3, r3
 800c734:	3b09      	subs	r3, #9
 800c736:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] + 17,
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	7f1b      	ldrb	r3, [r3, #28]
 800c73c:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 9,
 800c73e:	3311      	adds	r3, #17
 800c740:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	2391      	movs	r3, #145	; 0x91
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] - 9,
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	2301      	movs	r3, #1
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	2301      	movs	r3, #1
 800c752:	f7fc f8c5 	bl	80088e0 <Paint_DrawPoint>
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 8,
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	7edb      	ldrb	r3, [r3, #27]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	3308      	adds	r3, #8
 800c75e:	b298      	uxth	r0, r3
				interface->coordinatesMoonPhase[Y] - 18,
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	7f1b      	ldrb	r3, [r3, #28]
 800c764:	b29b      	uxth	r3, r3
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 8,
 800c766:	3b12      	subs	r3, #18
 800c768:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	2391      	movs	r3, #145	; 0x91
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPoint(interface->coordinatesMoonPhase[X] + 8,
 800c772:	b29a      	uxth	r2, r3
 800c774:	2301      	movs	r3, #1
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	2302      	movs	r3, #2
 800c77a:	f7fc f8b1 	bl	80088e0 <Paint_DrawPoint>

	}

	//			TEMPERATURE
	if (interface->coordinatesTemperature[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	7adb      	ldrb	r3, [r3, #11]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d000      	beq.n	800c788 <interfaceDraw+0x290>
 800c786:	e0c0      	b.n	800c90a <interfaceDraw+0x412>

		//frame
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	7a5b      	ldrb	r3, [r3, #9]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b14      	subs	r3, #20
 800c790:	b298      	uxth	r0, r3
				interface->coordinatesTemperature[Y] - 4,
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	7a9b      	ldrb	r3, [r3, #10]
 800c796:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c798:	3b04      	subs	r3, #4
 800c79a:	b299      	uxth	r1, r3
				interface->coordinatesTemperature[X] + 50,
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	7a5b      	ldrb	r3, [r3, #9]
 800c7a0:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c7a2:	3332      	adds	r3, #50	; 0x32
 800c7a4:	b29c      	uxth	r4, r3
				interface->coordinatesTemperature[Y] + 18,
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	7a9b      	ldrb	r3, [r3, #10]
 800c7aa:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c7ac:	3312      	adds	r3, #18
 800c7ae:	b29d      	uxth	r5, r3
				interface->colorForeground, DOT_PIXEL_2X2, DRAW_FILL_FULL);
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	2391      	movs	r3, #145	; 0x91
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesTemperature[X] - 20,
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	9202      	str	r2, [sp, #8]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	9201      	str	r2, [sp, #4]
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	002b      	movs	r3, r5
 800c7c6:	0022      	movs	r2, r4
 800c7c8:	f7fc fb3c 	bl	8008e44 <Paint_DrawRectangle>

		//unit
		Paint_DrawCircle(interface->coordinatesTemperature[X] + 26,
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	7a5b      	ldrb	r3, [r3, #9]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	331a      	adds	r3, #26
 800c7d4:	b298      	uxth	r0, r3
				interface->coordinatesTemperature[Y] + 4, 2,
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	7a9b      	ldrb	r3, [r3, #10]
 800c7da:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesTemperature[X] + 26,
 800c7dc:	3304      	adds	r3, #4
 800c7de:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	2322      	movs	r3, #34	; 0x22
 800c7e4:	33ff      	adds	r3, #255	; 0xff
 800c7e6:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesTemperature[X] + 26,
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	9201      	str	r2, [sp, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	9200      	str	r2, [sp, #0]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	f7fc fbf2 	bl	8008fdc <Paint_DrawCircle>
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	7a5b      	ldrb	r3, [r3, #9]
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	331f      	adds	r3, #31
 800c800:	b298      	uxth	r0, r3
				interface->coordinatesTemperature[Y], "C", &Font16,
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	7a9b      	ldrb	r3, [r3, #10]
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c806:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	2322      	movs	r3, #34	; 0x22
 800c80c:	33ff      	adds	r3, #255	; 0xff
 800c80e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c810:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800c812:	68f9      	ldr	r1, [r7, #12]
 800c814:	2291      	movs	r2, #145	; 0x91
 800c816:	0052      	lsls	r2, r2, #1
 800c818:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesTemperature[X] + 31,
 800c81a:	b292      	uxth	r2, r2
 800c81c:	4d28      	ldr	r5, [pc, #160]	; (800c8c0 <interfaceDraw+0x3c8>)
 800c81e:	4929      	ldr	r1, [pc, #164]	; (800c8c4 <interfaceDraw+0x3cc>)
 800c820:	9201      	str	r2, [sp, #4]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	002b      	movs	r3, r5
 800c826:	000a      	movs	r2, r1
 800c828:	0021      	movs	r1, r4
 800c82a:	f7fc ff0d 	bl	8009648 <Paint_DrawString_EN>

		//value
		if (atmospherical->temperatureValue < 0) {
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	da48      	bge.n	800c8c8 <interfaceDraw+0x3d0>
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7a5b      	ldrb	r3, [r3, #9]
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	3b08      	subs	r3, #8
 800c83e:	b298      	uxth	r0, r3
					interface->coordinatesTemperature[Y], '-', &Font16,
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	7a9b      	ldrb	r3, [r3, #10]
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c844:	b29c      	uxth	r4, r3
					interface->colorBackground, interface->colorForeground);
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	2322      	movs	r3, #34	; 0x22
 800c84a:	33ff      	adds	r3, #255	; 0xff
 800c84c:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c84e:	b29b      	uxth	r3, r3
					interface->colorBackground, interface->colorForeground);
 800c850:	68f9      	ldr	r1, [r7, #12]
 800c852:	2291      	movs	r2, #145	; 0x91
 800c854:	0052      	lsls	r2, r2, #1
 800c856:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawChar(interface->coordinatesTemperature[X] - 8,
 800c858:	b292      	uxth	r2, r2
 800c85a:	4919      	ldr	r1, [pc, #100]	; (800c8c0 <interfaceDraw+0x3c8>)
 800c85c:	9201      	str	r2, [sp, #4]
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	000b      	movs	r3, r1
 800c862:	222d      	movs	r2, #45	; 0x2d
 800c864:	0021      	movs	r1, r4
 800c866:	f7fc fe0b 	bl	8009480 <Paint_DrawChar>
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	7a5b      	ldrb	r3, [r3, #9]
 800c86e:	b29c      	uxth	r4, r3
					interface->coordinatesTemperature[Y],
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	7a9b      	ldrb	r3, [r3, #10]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c874:	b29d      	uxth	r5, r3
					abs(atmospherical->temperatureValueCompensated / 100),
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	2164      	movs	r1, #100	; 0x64
 800c87c:	0018      	movs	r0, r3
 800c87e:	f7f3 fcd5 	bl	800022c <__divsi3>
 800c882:	0003      	movs	r3, r0
 800c884:	17da      	asrs	r2, r3, #31
 800c886:	1898      	adds	r0, r3, r2
 800c888:	4050      	eors	r0, r2
					&Font16, interface->colorBackground,
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	2322      	movs	r3, #34	; 0x22
 800c88e:	33ff      	adds	r3, #255	; 0xff
 800c890:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c892:	b29b      	uxth	r3, r3
					interface->colorForeground);
 800c894:	68f9      	ldr	r1, [r7, #12]
 800c896:	2291      	movs	r2, #145	; 0x91
 800c898:	0052      	lsls	r2, r2, #1
 800c89a:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c89c:	b292      	uxth	r2, r2
 800c89e:	4908      	ldr	r1, [pc, #32]	; (800c8c0 <interfaceDraw+0x3c8>)
 800c8a0:	9201      	str	r2, [sp, #4]
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	000b      	movs	r3, r1
 800c8a6:	0002      	movs	r2, r0
 800c8a8:	0029      	movs	r1, r5
 800c8aa:	0020      	movs	r0, r4
 800c8ac:	f7fc ff4a 	bl	8009744 <Paint_DrawNum>
 800c8b0:	e02b      	b.n	800c90a <interfaceDraw+0x412>
 800c8b2:	46c0      	nop			; (mov r8, r8)
 800c8b4:	20000008 	.word	0x20000008
 800c8b8:	0801185c 	.word	0x0801185c
 800c8bc:	41c80000 	.word	0x41c80000
 800c8c0:	20000010 	.word	0x20000010
 800c8c4:	08011864 	.word	0x08011864
		} else {
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	7a5b      	ldrb	r3, [r3, #9]
 800c8cc:	b29c      	uxth	r4, r3
					interface->coordinatesTemperature[Y],
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	7a9b      	ldrb	r3, [r3, #10]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c8d2:	b29d      	uxth	r5, r3
					atmospherical->temperatureValueCompensated / 100, &Font16,
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	69db      	ldr	r3, [r3, #28]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c8d8:	2164      	movs	r1, #100	; 0x64
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f7f3 fca6 	bl	800022c <__divsi3>
 800c8e0:	0003      	movs	r3, r0
 800c8e2:	0018      	movs	r0, r3
					interface->colorBackground, interface->colorForeground);
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	2322      	movs	r3, #34	; 0x22
 800c8e8:	33ff      	adds	r3, #255	; 0xff
 800c8ea:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c8ec:	b29b      	uxth	r3, r3
					interface->colorBackground, interface->colorForeground);
 800c8ee:	68f9      	ldr	r1, [r7, #12]
 800c8f0:	2291      	movs	r2, #145	; 0x91
 800c8f2:	0052      	lsls	r2, r2, #1
 800c8f4:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesTemperature[X],
 800c8f6:	b292      	uxth	r2, r2
 800c8f8:	4918      	ldr	r1, [pc, #96]	; (800c95c <interfaceDraw+0x464>)
 800c8fa:	9201      	str	r2, [sp, #4]
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	000b      	movs	r3, r1
 800c900:	0002      	movs	r2, r0
 800c902:	0029      	movs	r1, r5
 800c904:	0020      	movs	r0, r4
 800c906:	f7fc ff1d 	bl	8009744 <Paint_DrawNum>
		}
	}

	//			HUMIDITY
	if (interface->coordinatesHumidity[EN] == INTERFACE_ELEMENT_ENABLED) {
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	7b9b      	ldrb	r3, [r3, #14]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d000      	beq.n	800c914 <interfaceDraw+0x41c>
 800c912:	e0b1      	b.n	800ca78 <interfaceDraw+0x580>

		//frame
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	7b1b      	ldrb	r3, [r3, #12]
 800c918:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y],
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	7b5b      	ldrb	r3, [r3, #13]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c91e:	b299      	uxth	r1, r3
				interface->coordinatesHumidity[X] + 5,
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	7b1b      	ldrb	r3, [r3, #12]
 800c924:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c926:	3305      	adds	r3, #5
 800c928:	b29c      	uxth	r4, r3
				interface->coordinatesHumidity[Y] + 50,
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	7b5b      	ldrb	r3, [r3, #13]
 800c92e:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c930:	3332      	adds	r3, #50	; 0x32
 800c932:	b29d      	uxth	r5, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	2391      	movs	r3, #145	; 0x91
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	2200      	movs	r2, #0
 800c940:	9202      	str	r2, [sp, #8]
 800c942:	2201      	movs	r2, #1
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	002b      	movs	r3, r5
 800c94a:	0022      	movs	r2, r4
 800c94c:	f7fc fa7a 	bl	8008e44 <Paint_DrawRectangle>

		//indexes
		for (uint8_t i = 0; i <= 50; i = i + 5) {
 800c950:	2327      	movs	r3, #39	; 0x27
 800c952:	18fb      	adds	r3, r7, r3
 800c954:	2200      	movs	r2, #0
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	e02f      	b.n	800c9ba <interfaceDraw+0x4c2>
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	20000010 	.word	0x20000010
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	7b1b      	ldrb	r3, [r3, #12]
 800c964:	b298      	uxth	r0, r3
					interface->coordinatesHumidity[Y] + i,
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	7b5b      	ldrb	r3, [r3, #13]
 800c96a:	b29a      	uxth	r2, r3
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c96c:	2527      	movs	r5, #39	; 0x27
 800c96e:	197b      	adds	r3, r7, r5
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	18d3      	adds	r3, r2, r3
 800c976:	b299      	uxth	r1, r3
					interface->coordinatesHumidity[X] - 2,
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	7b1b      	ldrb	r3, [r3, #12]
 800c97c:	b29b      	uxth	r3, r3
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c97e:	3b02      	subs	r3, #2
 800c980:	b29c      	uxth	r4, r3
					interface->coordinatesHumidity[Y] + i,
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	7b5b      	ldrb	r3, [r3, #13]
 800c986:	b29a      	uxth	r2, r3
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c988:	002e      	movs	r6, r5
 800c98a:	197b      	adds	r3, r7, r5
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	18d3      	adds	r3, r2, r3
 800c992:	b29d      	uxth	r5, r3
					interface->colorForeground, DOT_PIXEL_1X1,
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	2391      	movs	r3, #145	; 0x91
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawLine(interface->coordinatesHumidity[X],
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	2200      	movs	r2, #0
 800c9a0:	9202      	str	r2, [sp, #8]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	9201      	str	r2, [sp, #4]
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	002b      	movs	r3, r5
 800c9aa:	0022      	movs	r2, r4
 800c9ac:	f7fc f882 	bl	8008ab4 <Paint_DrawLine>
		for (uint8_t i = 0; i <= 50; i = i + 5) {
 800c9b0:	19bb      	adds	r3, r7, r6
 800c9b2:	19ba      	adds	r2, r7, r6
 800c9b4:	7812      	ldrb	r2, [r2, #0]
 800c9b6:	3205      	adds	r2, #5
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	2327      	movs	r3, #39	; 0x27
 800c9bc:	18fb      	adds	r3, r7, r3
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b32      	cmp	r3, #50	; 0x32
 800c9c2:	d9cd      	bls.n	800c960 <interfaceDraw+0x468>
					LINE_STYLE_SOLID);
		}
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	7b1b      	ldrb	r3, [r3, #12]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	3306      	adds	r3, #6
 800c9cc:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y], "0%RH", &Font8,
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	7b5b      	ldrb	r3, [r3, #13]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c9d2:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	2391      	movs	r3, #145	; 0x91
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c9dc:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800c9de:	68f9      	ldr	r1, [r7, #12]
 800c9e0:	2222      	movs	r2, #34	; 0x22
 800c9e2:	32ff      	adds	r2, #255	; 0xff
 800c9e4:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c9e6:	b292      	uxth	r2, r2
 800c9e8:	4ddf      	ldr	r5, [pc, #892]	; (800cd68 <interfaceDraw+0x870>)
 800c9ea:	49e0      	ldr	r1, [pc, #896]	; (800cd6c <interfaceDraw+0x874>)
 800c9ec:	9201      	str	r2, [sp, #4]
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	002b      	movs	r3, r5
 800c9f2:	000a      	movs	r2, r1
 800c9f4:	0021      	movs	r1, r4
 800c9f6:	f7fc fe27 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	7b1b      	ldrb	r3, [r3, #12]
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	3306      	adds	r3, #6
 800ca02:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y] + 43, "100", &Font8,
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	7b5b      	ldrb	r3, [r3, #13]
 800ca08:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800ca0a:	332b      	adds	r3, #43	; 0x2b
 800ca0c:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	2391      	movs	r3, #145	; 0x91
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800ca16:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800ca18:	68f9      	ldr	r1, [r7, #12]
 800ca1a:	2222      	movs	r2, #34	; 0x22
 800ca1c:	32ff      	adds	r2, #255	; 0xff
 800ca1e:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesHumidity[X] + 6,
 800ca20:	b292      	uxth	r2, r2
 800ca22:	4dd1      	ldr	r5, [pc, #836]	; (800cd68 <interfaceDraw+0x870>)
 800ca24:	49d2      	ldr	r1, [pc, #840]	; (800cd70 <interfaceDraw+0x878>)
 800ca26:	9201      	str	r2, [sp, #4]
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	002b      	movs	r3, r5
 800ca2c:	000a      	movs	r2, r1
 800ca2e:	0021      	movs	r1, r4
 800ca30:	f7fc fe0a 	bl	8009648 <Paint_DrawString_EN>

		//value
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	7b1b      	ldrb	r3, [r3, #12]
 800ca38:	b298      	uxth	r0, r3
				interface->coordinatesHumidity[Y],
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	7b5b      	ldrb	r3, [r3, #13]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800ca3e:	b299      	uxth	r1, r3
				interface->coordinatesHumidity[X] + 5,
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	7b1b      	ldrb	r3, [r3, #12]
 800ca44:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800ca46:	3305      	adds	r3, #5
 800ca48:	b29c      	uxth	r4, r3
				interface->coordinatesHumidity[Y]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	7b5b      	ldrb	r3, [r3, #13]
 800ca4e:	b29a      	uxth	r2, r3
						+ (atmospherical->humidityValue / 2),
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	085b      	lsrs	r3, r3, #1
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	18d3      	adds	r3, r2, r3
 800ca5a:	b29d      	uxth	r5, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	2391      	movs	r3, #145	; 0x91
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesHumidity[X],
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	2201      	movs	r2, #1
 800ca68:	9202      	str	r2, [sp, #8]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	9201      	str	r2, [sp, #4]
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	002b      	movs	r3, r5
 800ca72:	0022      	movs	r2, r4
 800ca74:	f7fc f9e6 	bl	8008e44 <Paint_DrawRectangle>
	}

	//			COMPASS
	if (interface->coordinatesCompass[EN] == INTERFACE_ELEMENT_ENABLED) {
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	7d1b      	ldrb	r3, [r3, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d000      	beq.n	800ca82 <interfaceDraw+0x58a>
 800ca80:	e1fc      	b.n	800ce7c <interfaceDraw+0x984>

		//board
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7c9b      	ldrb	r3, [r3, #18]
 800ca86:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y], interface->radiusCompass,
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ca8c:	b299      	uxth	r1, r3
				interface->coordinatesCompass[Y], interface->radiusCompass,
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ca94:	b29c      	uxth	r4, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	2391      	movs	r3, #145	; 0x91
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	2200      	movs	r2, #0
 800caa2:	9201      	str	r2, [sp, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	9200      	str	r2, [sp, #0]
 800caa8:	0022      	movs	r2, r4
 800caaa:	f7fc fa97 	bl	8008fdc <Paint_DrawCircle>

		//altimeter unit
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	7c9b      	ldrb	r3, [r3, #18]
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	3b04      	subs	r3, #4
 800cab6:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] + 3, 'm', &Font12,
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	7cdb      	ldrb	r3, [r3, #19]
 800cabc:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800cabe:	3303      	adds	r3, #3
 800cac0:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	2391      	movs	r3, #145	; 0x91
 800cac6:	005b      	lsls	r3, r3, #1
 800cac8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800caca:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800cacc:	68f9      	ldr	r1, [r7, #12]
 800cace:	2222      	movs	r2, #34	; 0x22
 800cad0:	32ff      	adds	r2, #255	; 0xff
 800cad2:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 4,
 800cad4:	b292      	uxth	r2, r2
 800cad6:	49a7      	ldr	r1, [pc, #668]	; (800cd74 <interfaceDraw+0x87c>)
 800cad8:	9201      	str	r2, [sp, #4]
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	000b      	movs	r3, r1
 800cade:	226d      	movs	r2, #109	; 0x6d
 800cae0:	0021      	movs	r1, r4
 800cae2:	f7fc fccd 	bl	8009480 <Paint_DrawChar>

		//fields for indexes
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	7c9b      	ldrb	r3, [r3, #18]
 800caea:	b29b      	uxth	r3, r3
 800caec:	3b03      	subs	r3, #3
 800caee:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 30,
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	7cdb      	ldrb	r3, [r3, #19]
 800caf4:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800caf6:	3b1e      	subs	r3, #30
 800caf8:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] - 3 + 8,
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	7c9b      	ldrb	r3, [r3, #18]
 800cafe:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb00:	3305      	adds	r3, #5
 800cb02:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] - 30 + 12,
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	7cdb      	ldrb	r3, [r3, #19]
 800cb08:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb0a:	3b12      	subs	r3, #18
 800cb0c:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	2322      	movs	r3, #34	; 0x22
 800cb12:	33ff      	adds	r3, #255	; 0xff
 800cb14:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	2201      	movs	r2, #1
 800cb1a:	9202      	str	r2, [sp, #8]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	9201      	str	r2, [sp, #4]
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	002b      	movs	r3, r5
 800cb24:	0022      	movs	r2, r4
 800cb26:	f7fc f98d 	bl	8008e44 <Paint_DrawRectangle>
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	7c9b      	ldrb	r3, [r3, #18]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	3b03      	subs	r3, #3
 800cb32:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] + 19,
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	7cdb      	ldrb	r3, [r3, #19]
 800cb38:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb3a:	3313      	adds	r3, #19
 800cb3c:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] - 3 + 8,
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	7c9b      	ldrb	r3, [r3, #18]
 800cb42:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb44:	3305      	adds	r3, #5
 800cb46:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] + 19 + 12,
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	7cdb      	ldrb	r3, [r3, #19]
 800cb4c:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb4e:	331f      	adds	r3, #31
 800cb50:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	2322      	movs	r3, #34	; 0x22
 800cb56:	33ff      	adds	r3, #255	; 0xff
 800cb58:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 3,
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	9202      	str	r2, [sp, #8]
 800cb60:	2201      	movs	r2, #1
 800cb62:	9201      	str	r2, [sp, #4]
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	002b      	movs	r3, r5
 800cb68:	0022      	movs	r2, r4
 800cb6a:	f7fc f96b 	bl	8008e44 <Paint_DrawRectangle>
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	7c9b      	ldrb	r3, [r3, #18]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	3b1c      	subs	r3, #28
 800cb76:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5,
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	7cdb      	ldrb	r3, [r3, #19]
 800cb7c:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800cb7e:	3b05      	subs	r3, #5
 800cb80:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] - 28 + 8,
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	7c9b      	ldrb	r3, [r3, #18]
 800cb86:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800cb88:	3b14      	subs	r3, #20
 800cb8a:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] - 5 + 12,
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	7cdb      	ldrb	r3, [r3, #19]
 800cb90:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800cb92:	3307      	adds	r3, #7
 800cb94:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	2322      	movs	r3, #34	; 0x22
 800cb9a:	33ff      	adds	r3, #255	; 0xff
 800cb9c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] - 28,
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	2201      	movs	r2, #1
 800cba2:	9202      	str	r2, [sp, #8]
 800cba4:	2201      	movs	r2, #1
 800cba6:	9201      	str	r2, [sp, #4]
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	002b      	movs	r3, r5
 800cbac:	0022      	movs	r2, r4
 800cbae:	f7fc f949 	bl	8008e44 <Paint_DrawRectangle>
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	7c9b      	ldrb	r3, [r3, #18]
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	3314      	adds	r3, #20
 800cbba:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5,
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	7cdb      	ldrb	r3, [r3, #19]
 800cbc0:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800cbc2:	3b05      	subs	r3, #5
 800cbc4:	b299      	uxth	r1, r3
				interface->coordinatesCompass[X] + 20 + 8,
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	7c9b      	ldrb	r3, [r3, #18]
 800cbca:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800cbcc:	331c      	adds	r3, #28
 800cbce:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y] - 5 + 12,
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	7cdb      	ldrb	r3, [r3, #19]
 800cbd4:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800cbd6:	3307      	adds	r3, #7
 800cbd8:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	2322      	movs	r3, #34	; 0x22
 800cbde:	33ff      	adds	r3, #255	; 0xff
 800cbe0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesCompass[X] + 20,
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	9202      	str	r2, [sp, #8]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	9201      	str	r2, [sp, #4]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	002b      	movs	r3, r5
 800cbf0:	0022      	movs	r2, r4
 800cbf2:	f7fc f927 	bl	8008e44 <Paint_DrawRectangle>

		//indexes
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	7c9b      	ldrb	r3, [r3, #18]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	3b03      	subs	r3, #3
 800cbfe:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 30, 'N', &Font12,
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	7cdb      	ldrb	r3, [r3, #19]
 800cc04:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc06:	3b1e      	subs	r3, #30
 800cc08:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	2391      	movs	r3, #145	; 0x91
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc12:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800cc14:	68f9      	ldr	r1, [r7, #12]
 800cc16:	2222      	movs	r2, #34	; 0x22
 800cc18:	32ff      	adds	r2, #255	; 0xff
 800cc1a:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc1c:	b292      	uxth	r2, r2
 800cc1e:	4955      	ldr	r1, [pc, #340]	; (800cd74 <interfaceDraw+0x87c>)
 800cc20:	9201      	str	r2, [sp, #4]
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	000b      	movs	r3, r1
 800cc26:	224e      	movs	r2, #78	; 0x4e
 800cc28:	0021      	movs	r1, r4
 800cc2a:	f7fc fc29 	bl	8009480 <Paint_DrawChar>
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	7c9b      	ldrb	r3, [r3, #18]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3b03      	subs	r3, #3
 800cc36:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] + 19, 'S', &Font12,
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	7cdb      	ldrb	r3, [r3, #19]
 800cc3c:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc3e:	3313      	adds	r3, #19
 800cc40:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	2391      	movs	r3, #145	; 0x91
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc4a:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800cc4c:	68f9      	ldr	r1, [r7, #12]
 800cc4e:	2222      	movs	r2, #34	; 0x22
 800cc50:	32ff      	adds	r2, #255	; 0xff
 800cc52:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 3,
 800cc54:	b292      	uxth	r2, r2
 800cc56:	4947      	ldr	r1, [pc, #284]	; (800cd74 <interfaceDraw+0x87c>)
 800cc58:	9201      	str	r2, [sp, #4]
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	000b      	movs	r3, r1
 800cc5e:	2253      	movs	r2, #83	; 0x53
 800cc60:	0021      	movs	r1, r4
 800cc62:	f7fc fc0d 	bl	8009480 <Paint_DrawChar>
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	7c9b      	ldrb	r3, [r3, #18]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	3b1c      	subs	r3, #28
 800cc6e:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5, 'W', &Font12,
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	7cdb      	ldrb	r3, [r3, #19]
 800cc74:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800cc76:	3b05      	subs	r3, #5
 800cc78:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	2391      	movs	r3, #145	; 0x91
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800cc82:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800cc84:	68f9      	ldr	r1, [r7, #12]
 800cc86:	2222      	movs	r2, #34	; 0x22
 800cc88:	32ff      	adds	r2, #255	; 0xff
 800cc8a:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] - 28,
 800cc8c:	b292      	uxth	r2, r2
 800cc8e:	4939      	ldr	r1, [pc, #228]	; (800cd74 <interfaceDraw+0x87c>)
 800cc90:	9201      	str	r2, [sp, #4]
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	000b      	movs	r3, r1
 800cc96:	2257      	movs	r2, #87	; 0x57
 800cc98:	0021      	movs	r1, r4
 800cc9a:	f7fc fbf1 	bl	8009480 <Paint_DrawChar>
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	7c9b      	ldrb	r3, [r3, #18]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	3314      	adds	r3, #20
 800cca6:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y] - 5, 'E', &Font12,
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	7cdb      	ldrb	r3, [r3, #19]
 800ccac:	b29b      	uxth	r3, r3
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ccae:	3b05      	subs	r3, #5
 800ccb0:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	2391      	movs	r3, #145	; 0x91
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ccba:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800ccbc:	68f9      	ldr	r1, [r7, #12]
 800ccbe:	2222      	movs	r2, #34	; 0x22
 800ccc0:	32ff      	adds	r2, #255	; 0xff
 800ccc2:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawChar(interface->coordinatesCompass[X] + 20,
 800ccc4:	b292      	uxth	r2, r2
 800ccc6:	492b      	ldr	r1, [pc, #172]	; (800cd74 <interfaceDraw+0x87c>)
 800ccc8:	9201      	str	r2, [sp, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	000b      	movs	r3, r1
 800ccce:	2245      	movs	r2, #69	; 0x45
 800ccd0:	0021      	movs	r1, r4
 800ccd2:	f7fc fbd5 	bl	8009480 <Paint_DrawChar>

		//alti value
		if (atmospherical->altitudeValue < 0) {
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	da4c      	bge.n	800cd78 <interfaceDraw+0x880>
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	7c9b      	ldrb	r3, [r3, #18]
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	3b0c      	subs	r3, #12
 800cce6:	b298      	uxth	r0, r3
					interface->coordinatesCompass[Y] - 14, '-', &Font12,
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	7cdb      	ldrb	r3, [r3, #19]
 800ccec:	b29b      	uxth	r3, r3
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800ccee:	3b0e      	subs	r3, #14
 800ccf0:	b29c      	uxth	r4, r3
					interface->colorForeground, interface->colorBackground);
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	2391      	movs	r3, #145	; 0x91
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800ccfa:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	2222      	movs	r2, #34	; 0x22
 800cd00:	32ff      	adds	r2, #255	; 0xff
 800cd02:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawChar(interface->coordinatesCompass[X] - 12,
 800cd04:	b292      	uxth	r2, r2
 800cd06:	491b      	ldr	r1, [pc, #108]	; (800cd74 <interfaceDraw+0x87c>)
 800cd08:	9201      	str	r2, [sp, #4]
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	000b      	movs	r3, r1
 800cd0e:	222d      	movs	r2, #45	; 0x2d
 800cd10:	0021      	movs	r1, r4
 800cd12:	f7fc fbb5 	bl	8009480 <Paint_DrawChar>
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	7c9b      	ldrb	r3, [r3, #18]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	3b04      	subs	r3, #4
 800cd1e:	b29c      	uxth	r4, r3
					interface->coordinatesCompass[Y] - 14,
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	7cdb      	ldrb	r3, [r3, #19]
 800cd24:	b29b      	uxth	r3, r3
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cd26:	3b0e      	subs	r3, #14
 800cd28:	b29d      	uxth	r5, r3
					abs(atmospherical->altitudeValue / 100), &Font12,
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	2164      	movs	r1, #100	; 0x64
 800cd30:	0018      	movs	r0, r3
 800cd32:	f7f3 fa7b 	bl	800022c <__divsi3>
 800cd36:	0003      	movs	r3, r0
 800cd38:	17da      	asrs	r2, r3, #31
 800cd3a:	1898      	adds	r0, r3, r2
 800cd3c:	4050      	eors	r0, r2
					interface->colorForeground, interface->colorBackground);
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	2391      	movs	r3, #145	; 0x91
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cd46:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800cd48:	68f9      	ldr	r1, [r7, #12]
 800cd4a:	2222      	movs	r2, #34	; 0x22
 800cd4c:	32ff      	adds	r2, #255	; 0xff
 800cd4e:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12 + 8,
 800cd50:	b292      	uxth	r2, r2
 800cd52:	4908      	ldr	r1, [pc, #32]	; (800cd74 <interfaceDraw+0x87c>)
 800cd54:	9201      	str	r2, [sp, #4]
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	000b      	movs	r3, r1
 800cd5a:	0002      	movs	r2, r0
 800cd5c:	0029      	movs	r1, r5
 800cd5e:	0020      	movs	r0, r4
 800cd60:	f7fc fcf0 	bl	8009744 <Paint_DrawNum>
 800cd64:	e02d      	b.n	800cdc2 <interfaceDraw+0x8ca>
 800cd66:	46c0      	nop			; (mov r8, r8)
 800cd68:	20000028 	.word	0x20000028
 800cd6c:	08011868 	.word	0x08011868
 800cd70:	08011870 	.word	0x08011870
 800cd74:	20000008 	.word	0x20000008
		} else {
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	7c9b      	ldrb	r3, [r3, #18]
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	3b0c      	subs	r3, #12
 800cd80:	b29c      	uxth	r4, r3
					interface->coordinatesCompass[Y] - 14,
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	7cdb      	ldrb	r3, [r3, #19]
 800cd86:	b29b      	uxth	r3, r3
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cd88:	3b0e      	subs	r3, #14
 800cd8a:	b29d      	uxth	r5, r3
					atmospherical->altitudeValue / 100, &Font12,
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	691b      	ldr	r3, [r3, #16]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cd90:	2164      	movs	r1, #100	; 0x64
 800cd92:	0018      	movs	r0, r3
 800cd94:	f7f3 fa4a 	bl	800022c <__divsi3>
 800cd98:	0003      	movs	r3, r0
 800cd9a:	0018      	movs	r0, r3
					interface->colorForeground, interface->colorBackground);
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	2391      	movs	r3, #145	; 0x91
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cda4:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800cda6:	68f9      	ldr	r1, [r7, #12]
 800cda8:	2222      	movs	r2, #34	; 0x22
 800cdaa:	32ff      	adds	r2, #255	; 0xff
 800cdac:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawNum(interface->coordinatesCompass[X] - 12,
 800cdae:	b292      	uxth	r2, r2
 800cdb0:	4979      	ldr	r1, [pc, #484]	; (800cf98 <interfaceDraw+0xaa0>)
 800cdb2:	9201      	str	r2, [sp, #4]
 800cdb4:	9300      	str	r3, [sp, #0]
 800cdb6:	000b      	movs	r3, r1
 800cdb8:	0002      	movs	r2, r0
 800cdba:	0029      	movs	r1, r5
 800cdbc:	0020      	movs	r0, r4
 800cdbe:	f7fc fcc1 	bl	8009744 <Paint_DrawNum>
		}

		//compass pointers
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	7c9b      	ldrb	r3, [r3, #18]
 800cdc6:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y], magnetometer->compassAngleXY,
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cdcc:	b299      	uxth	r1, r3
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	239e      	movs	r3, #158	; 0x9e
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	58d4      	ldr	r4, [r2, r3]
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2229      	movs	r2, #41	; 0x29
 800cdda:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cddc:	b29d      	uxth	r5, r3
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	2391      	movs	r3, #145	; 0x91
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	2200      	movs	r2, #0
 800cdea:	9203      	str	r2, [sp, #12]
 800cdec:	2202      	movs	r2, #2
 800cdee:	9202      	str	r2, [sp, #8]
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	002b      	movs	r3, r5
 800cdf8:	1c22      	adds	r2, r4, #0
 800cdfa:	f7fb ff39 	bl	8008c70 <Paint_DrawPointer>
				DOT_PIXEL_2X2, LINE_STYLE_SOLID);
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	7c9b      	ldrb	r3, [r3, #18]
 800ce02:	b29c      	uxth	r4, r3
				interface->coordinatesCompass[Y],
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800ce08:	b29d      	uxth	r5, r3
				magnetometer->compassAngleXY + 3.14,
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	239e      	movs	r3, #158	; 0x9e
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	58d3      	ldr	r3, [r2, r3]
 800ce12:	1c18      	adds	r0, r3, #0
 800ce14:	f7f6 f818 	bl	8002e48 <__aeabi_f2d>
 800ce18:	4a60      	ldr	r2, [pc, #384]	; (800cf9c <interfaceDraw+0xaa4>)
 800ce1a:	4b61      	ldr	r3, [pc, #388]	; (800cfa0 <interfaceDraw+0xaa8>)
 800ce1c:	f7f4 f9fc 	bl	8001218 <__aeabi_dadd>
 800ce20:	0002      	movs	r2, r0
 800ce22:	000b      	movs	r3, r1
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800ce24:	0010      	movs	r0, r2
 800ce26:	0019      	movs	r1, r3
 800ce28:	f7f6 f856 	bl	8002ed8 <__aeabi_d2f>
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2229      	movs	r2, #41	; 0x29
 800ce30:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800ce32:	b299      	uxth	r1, r3
				interface->pointerLenghtCompass, 0, interface->colorForeground,
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	2391      	movs	r3, #145	; 0x91
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPointer(interface->coordinatesCompass[X],
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	2200      	movs	r2, #0
 800ce40:	9203      	str	r2, [sp, #12]
 800ce42:	2201      	movs	r2, #1
 800ce44:	9202      	str	r2, [sp, #8]
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	000b      	movs	r3, r1
 800ce4e:	1c02      	adds	r2, r0, #0
 800ce50:	0029      	movs	r1, r5
 800ce52:	0020      	movs	r0, r4
 800ce54:	f7fb ff0c 	bl	8008c70 <Paint_DrawPointer>
				DOT_PIXEL_1X1, LINE_STYLE_SOLID);

		//dot
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	7c9b      	ldrb	r3, [r3, #18]
 800ce5c:	b298      	uxth	r0, r3
				interface->coordinatesCompass[Y], 3, interface->colorForeground,
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	7cdb      	ldrb	r3, [r3, #19]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ce62:	b299      	uxth	r1, r3
				interface->coordinatesCompass[Y], 3, interface->colorForeground,
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	2391      	movs	r3, #145	; 0x91
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesCompass[X],
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	2201      	movs	r2, #1
 800ce70:	9201      	str	r2, [sp, #4]
 800ce72:	2202      	movs	r2, #2
 800ce74:	9200      	str	r2, [sp, #0]
 800ce76:	2203      	movs	r2, #3
 800ce78:	f7fc f8b0 	bl	8008fdc <Paint_DrawCircle>
				DOT_PIXEL_2X2, DRAW_FILL_FULL);

	}

	//			CHRONO DECIMALS
	if (interface->coordinatesChronoDecimals[EN] == INTERFACE_ELEMENT_ENABLED) {
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	7a1b      	ldrb	r3, [r3, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d000      	beq.n	800ce86 <interfaceDraw+0x98e>
 800ce84:	e259      	b.n	800d33a <interfaceDraw+0xe42>

		//outer circle
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	799b      	ldrb	r3, [r3, #6]
 800ce8a:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y],
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	79db      	ldrb	r3, [r3, #7]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800ce90:	b299      	uxth	r1, r3
				interface->radiusSmall + 2, interface->colorForeground,
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	7fdb      	ldrb	r3, [r3, #31]
 800ce96:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800ce98:	3302      	adds	r3, #2
 800ce9a:	b29c      	uxth	r4, r3
				interface->radiusSmall + 2, interface->colorForeground,
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	2391      	movs	r3, #145	; 0x91
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	2200      	movs	r2, #0
 800cea8:	9201      	str	r2, [sp, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	9200      	str	r2, [sp, #0]
 800ceae:	0022      	movs	r2, r4
 800ceb0:	f7fc f894 	bl	8008fdc <Paint_DrawCircle>
				DOT_PIXEL_1X1, DRAW_FILL_EMPTY);

		//inner circle
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	799b      	ldrb	r3, [r3, #6]
 800ceb8:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y], interface->radiusSmall,
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	79db      	ldrb	r3, [r3, #7]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cebe:	b299      	uxth	r1, r3
				interface->coordinatesChronoDecimals[Y], interface->radiusSmall,
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cec4:	b29c      	uxth	r4, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	2391      	movs	r3, #145	; 0x91
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cece:	b29b      	uxth	r3, r3
 800ced0:	2201      	movs	r2, #1
 800ced2:	9201      	str	r2, [sp, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	9200      	str	r2, [sp, #0]
 800ced8:	0022      	movs	r2, r4
 800ceda:	f7fc f87f 	bl	8008fdc <Paint_DrawCircle>

		//dot at center
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	799b      	ldrb	r3, [r3, #6]
 800cee2:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y], 2,
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	79db      	ldrb	r3, [r3, #7]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cee8:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	2322      	movs	r3, #34	; 0x22
 800ceee:	33ff      	adds	r3, #255	; 0xff
 800cef0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesChronoDecimals[X],
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	2201      	movs	r2, #1
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	2201      	movs	r2, #1
 800cefa:	9200      	str	r2, [sp, #0]
 800cefc:	2202      	movs	r2, #2
 800cefe:	f7fc f86d 	bl	8008fdc <Paint_DrawCircle>

		//index - count angles

		uint8_t numberOfIndexesChronoDecimals =
 800cf02:	2313      	movs	r3, #19
 800cf04:	18fb      	adds	r3, r7, r3
 800cf06:	220a      	movs	r2, #10
 800cf08:	701a      	strb	r2, [r3, #0]
				sizeof(interface->indexAngleChronoDecimals)
						/ sizeof(interface->indexAngleChronoDecimals[0]);

		for (uint8_t i = 0; i < numberOfIndexesChronoDecimals; i++) {
 800cf0a:	2326      	movs	r3, #38	; 0x26
 800cf0c:	18fb      	adds	r3, r7, r3
 800cf0e:	2200      	movs	r2, #0
 800cf10:	701a      	strb	r2, [r3, #0]
 800cf12:	e034      	b.n	800cf7e <interfaceDraw+0xa86>
			interface->indexAngleChronoDecimals[i] = 2 * 3.14
					/ numberOfIndexesChronoDecimals
 800cf14:	2313      	movs	r3, #19
 800cf16:	18fb      	adds	r3, r7, r3
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	f7f5 ff3e 	bl	8002d9c <__aeabi_i2d>
 800cf20:	0002      	movs	r2, r0
 800cf22:	000b      	movs	r3, r1
 800cf24:	481d      	ldr	r0, [pc, #116]	; (800cf9c <interfaceDraw+0xaa4>)
 800cf26:	491f      	ldr	r1, [pc, #124]	; (800cfa4 <interfaceDraw+0xaac>)
 800cf28:	f7f4 fce0 	bl	80018ec <__aeabi_ddiv>
 800cf2c:	0002      	movs	r2, r0
 800cf2e:	000b      	movs	r3, r1
 800cf30:	0014      	movs	r4, r2
 800cf32:	001d      	movs	r5, r3
					* (i - (numberOfIndexesChronoDecimals / 4));
 800cf34:	2626      	movs	r6, #38	; 0x26
 800cf36:	19bb      	adds	r3, r7, r6
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2213      	movs	r2, #19
 800cf3c:	18ba      	adds	r2, r7, r2
 800cf3e:	7812      	ldrb	r2, [r2, #0]
 800cf40:	0892      	lsrs	r2, r2, #2
 800cf42:	b2d2      	uxtb	r2, r2
 800cf44:	1a9b      	subs	r3, r3, r2
 800cf46:	0018      	movs	r0, r3
 800cf48:	f7f5 ff28 	bl	8002d9c <__aeabi_i2d>
 800cf4c:	0002      	movs	r2, r0
 800cf4e:	000b      	movs	r3, r1
 800cf50:	0020      	movs	r0, r4
 800cf52:	0029      	movs	r1, r5
 800cf54:	f7f5 f8d0 	bl	80020f8 <__aeabi_dmul>
 800cf58:	0002      	movs	r2, r0
 800cf5a:	000b      	movs	r3, r1
			interface->indexAngleChronoDecimals[i] = 2 * 3.14
 800cf5c:	19b9      	adds	r1, r7, r6
 800cf5e:	780c      	ldrb	r4, [r1, #0]
					* (i - (numberOfIndexesChronoDecimals / 4));
 800cf60:	0010      	movs	r0, r2
 800cf62:	0019      	movs	r1, r3
 800cf64:	f7f5 ffb8 	bl	8002ed8 <__aeabi_d2f>
 800cf68:	1c01      	adds	r1, r0, #0
			interface->indexAngleChronoDecimals[i] = 2 * 3.14
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	0022      	movs	r2, r4
 800cf6e:	3214      	adds	r2, #20
 800cf70:	0092      	lsls	r2, r2, #2
 800cf72:	50d1      	str	r1, [r2, r3]
		for (uint8_t i = 0; i < numberOfIndexesChronoDecimals; i++) {
 800cf74:	19bb      	adds	r3, r7, r6
 800cf76:	781a      	ldrb	r2, [r3, #0]
 800cf78:	19bb      	adds	r3, r7, r6
 800cf7a:	3201      	adds	r2, #1
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	2326      	movs	r3, #38	; 0x26
 800cf80:	18fa      	adds	r2, r7, r3
 800cf82:	2313      	movs	r3, #19
 800cf84:	18fb      	adds	r3, r7, r3
 800cf86:	7812      	ldrb	r2, [r2, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d3c2      	bcc.n	800cf14 <interfaceDraw+0xa1c>
		}

		//indexes- draw
		for (uint8_t i = 0; i < numberOfIndexesChronoDecimals; i++) {
 800cf8e:	2325      	movs	r3, #37	; 0x25
 800cf90:	18fb      	adds	r3, r7, r3
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
 800cf96:	e0f9      	b.n	800d18c <interfaceDraw+0xc94>
 800cf98:	20000008 	.word	0x20000008
 800cf9c:	51eb851f 	.word	0x51eb851f
 800cfa0:	40091eb8 	.word	0x40091eb8
 800cfa4:	40191eb8 	.word	0x40191eb8

			Paint_DrawLine(
					cos(interface->indexAngleChronoDecimals[i])
 800cfa8:	2325      	movs	r3, #37	; 0x25
 800cfaa:	18fb      	adds	r3, r7, r3
 800cfac:	781a      	ldrb	r2, [r3, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3214      	adds	r2, #20
 800cfb2:	0092      	lsls	r2, r2, #2
 800cfb4:	58d3      	ldr	r3, [r2, r3]
 800cfb6:	1c18      	adds	r0, r3, #0
 800cfb8:	f7f5 ff46 	bl	8002e48 <__aeabi_f2d>
 800cfbc:	0002      	movs	r2, r0
 800cfbe:	000b      	movs	r3, r1
 800cfc0:	0010      	movs	r0, r2
 800cfc2:	0019      	movs	r1, r3
 800cfc4:	f002 fdc2 	bl	800fb4c <cos>
 800cfc8:	0004      	movs	r4, r0
 800cfca:	000d      	movs	r5, r1
							* (interface->radiusSmall
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	7fdb      	ldrb	r3, [r3, #31]
 800cfd0:	0019      	movs	r1, r3
									- interface->indexLengthChronoDecimals)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	222a      	movs	r2, #42	; 0x2a
 800cfd6:	5c9b      	ldrb	r3, [r3, r2]
 800cfd8:	1acb      	subs	r3, r1, r3
							* (interface->radiusSmall
 800cfda:	0018      	movs	r0, r3
 800cfdc:	f7f5 fede 	bl	8002d9c <__aeabi_i2d>
 800cfe0:	0002      	movs	r2, r0
 800cfe2:	000b      	movs	r3, r1
 800cfe4:	0020      	movs	r0, r4
 800cfe6:	0029      	movs	r1, r5
 800cfe8:	f7f5 f886 	bl	80020f8 <__aeabi_dmul>
 800cfec:	0002      	movs	r2, r0
 800cfee:	000b      	movs	r3, r1
 800cff0:	0014      	movs	r4, r2
 800cff2:	001d      	movs	r5, r3
							+ interface->coordinatesChronoDecimals[X],
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	799b      	ldrb	r3, [r3, #6]
 800cff8:	0018      	movs	r0, r3
 800cffa:	f7f5 fecf 	bl	8002d9c <__aeabi_i2d>
 800cffe:	0002      	movs	r2, r0
 800d000:	000b      	movs	r3, r1
 800d002:	0020      	movs	r0, r4
 800d004:	0029      	movs	r1, r5
 800d006:	f7f4 f907 	bl	8001218 <__aeabi_dadd>
 800d00a:	0002      	movs	r2, r0
 800d00c:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d00e:	0010      	movs	r0, r2
 800d010:	0019      	movs	r1, r3
 800d012:	f7f3 fa99 	bl	8000548 <__aeabi_d2uiz>
 800d016:	0003      	movs	r3, r0
 800d018:	b29e      	uxth	r6, r3
					sin(interface->indexAngleChronoDecimals[i])
 800d01a:	2325      	movs	r3, #37	; 0x25
 800d01c:	18fb      	adds	r3, r7, r3
 800d01e:	781a      	ldrb	r2, [r3, #0]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	3214      	adds	r2, #20
 800d024:	0092      	lsls	r2, r2, #2
 800d026:	58d3      	ldr	r3, [r2, r3]
 800d028:	1c18      	adds	r0, r3, #0
 800d02a:	f7f5 ff0d 	bl	8002e48 <__aeabi_f2d>
 800d02e:	0002      	movs	r2, r0
 800d030:	000b      	movs	r3, r1
 800d032:	0010      	movs	r0, r2
 800d034:	0019      	movs	r1, r3
 800d036:	f002 fdcb 	bl	800fbd0 <sin>
 800d03a:	0004      	movs	r4, r0
 800d03c:	000d      	movs	r5, r1
							* (interface->radiusSmall
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	7fdb      	ldrb	r3, [r3, #31]
 800d042:	0019      	movs	r1, r3
									- interface->indexLengthChronoDecimals)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	222a      	movs	r2, #42	; 0x2a
 800d048:	5c9b      	ldrb	r3, [r3, r2]
 800d04a:	1acb      	subs	r3, r1, r3
							* (interface->radiusSmall
 800d04c:	0018      	movs	r0, r3
 800d04e:	f7f5 fea5 	bl	8002d9c <__aeabi_i2d>
 800d052:	0002      	movs	r2, r0
 800d054:	000b      	movs	r3, r1
 800d056:	0020      	movs	r0, r4
 800d058:	0029      	movs	r1, r5
 800d05a:	f7f5 f84d 	bl	80020f8 <__aeabi_dmul>
 800d05e:	0002      	movs	r2, r0
 800d060:	000b      	movs	r3, r1
 800d062:	0014      	movs	r4, r2
 800d064:	001d      	movs	r5, r3
							+ interface->coordinatesChronoDecimals[Y],
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	79db      	ldrb	r3, [r3, #7]
 800d06a:	0018      	movs	r0, r3
 800d06c:	f7f5 fe96 	bl	8002d9c <__aeabi_i2d>
 800d070:	0002      	movs	r2, r0
 800d072:	000b      	movs	r3, r1
 800d074:	0020      	movs	r0, r4
 800d076:	0029      	movs	r1, r5
 800d078:	f7f4 f8ce 	bl	8001218 <__aeabi_dadd>
 800d07c:	0002      	movs	r2, r0
 800d07e:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d080:	0010      	movs	r0, r2
 800d082:	0019      	movs	r1, r3
 800d084:	f7f3 fa60 	bl	8000548 <__aeabi_d2uiz>
 800d088:	0003      	movs	r3, r0
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	4690      	mov	r8, r2

					cos(interface->indexAngleChronoDecimals[i])
 800d08e:	2325      	movs	r3, #37	; 0x25
 800d090:	18fb      	adds	r3, r7, r3
 800d092:	781a      	ldrb	r2, [r3, #0]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3214      	adds	r2, #20
 800d098:	0092      	lsls	r2, r2, #2
 800d09a:	58d3      	ldr	r3, [r2, r3]
 800d09c:	1c18      	adds	r0, r3, #0
 800d09e:	f7f5 fed3 	bl	8002e48 <__aeabi_f2d>
 800d0a2:	0002      	movs	r2, r0
 800d0a4:	000b      	movs	r3, r1
 800d0a6:	0010      	movs	r0, r2
 800d0a8:	0019      	movs	r1, r3
 800d0aa:	f002 fd4f 	bl	800fb4c <cos>
 800d0ae:	0004      	movs	r4, r0
 800d0b0:	000d      	movs	r5, r1
							* (interface->radiusSmall)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	7fdb      	ldrb	r3, [r3, #31]
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	f7f5 fe70 	bl	8002d9c <__aeabi_i2d>
 800d0bc:	0002      	movs	r2, r0
 800d0be:	000b      	movs	r3, r1
 800d0c0:	0020      	movs	r0, r4
 800d0c2:	0029      	movs	r1, r5
 800d0c4:	f7f5 f818 	bl	80020f8 <__aeabi_dmul>
 800d0c8:	0002      	movs	r2, r0
 800d0ca:	000b      	movs	r3, r1
 800d0cc:	0014      	movs	r4, r2
 800d0ce:	001d      	movs	r5, r3
							+ interface->coordinatesChronoDecimals[X],
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	799b      	ldrb	r3, [r3, #6]
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f7f5 fe61 	bl	8002d9c <__aeabi_i2d>
 800d0da:	0002      	movs	r2, r0
 800d0dc:	000b      	movs	r3, r1
 800d0de:	0020      	movs	r0, r4
 800d0e0:	0029      	movs	r1, r5
 800d0e2:	f7f4 f899 	bl	8001218 <__aeabi_dadd>
 800d0e6:	0002      	movs	r2, r0
 800d0e8:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d0ea:	0010      	movs	r0, r2
 800d0ec:	0019      	movs	r1, r3
 800d0ee:	f7f3 fa2b 	bl	8000548 <__aeabi_d2uiz>
 800d0f2:	0003      	movs	r3, r0
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	4691      	mov	r9, r2
					sin(interface->indexAngleChronoDecimals[i])
 800d0f8:	2325      	movs	r3, #37	; 0x25
 800d0fa:	18fb      	adds	r3, r7, r3
 800d0fc:	781a      	ldrb	r2, [r3, #0]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3214      	adds	r2, #20
 800d102:	0092      	lsls	r2, r2, #2
 800d104:	58d3      	ldr	r3, [r2, r3]
 800d106:	1c18      	adds	r0, r3, #0
 800d108:	f7f5 fe9e 	bl	8002e48 <__aeabi_f2d>
 800d10c:	0002      	movs	r2, r0
 800d10e:	000b      	movs	r3, r1
 800d110:	0010      	movs	r0, r2
 800d112:	0019      	movs	r1, r3
 800d114:	f002 fd5c 	bl	800fbd0 <sin>
 800d118:	0004      	movs	r4, r0
 800d11a:	000d      	movs	r5, r1
							* (interface->radiusSmall)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	7fdb      	ldrb	r3, [r3, #31]
 800d120:	0018      	movs	r0, r3
 800d122:	f7f5 fe3b 	bl	8002d9c <__aeabi_i2d>
 800d126:	0002      	movs	r2, r0
 800d128:	000b      	movs	r3, r1
 800d12a:	0020      	movs	r0, r4
 800d12c:	0029      	movs	r1, r5
 800d12e:	f7f4 ffe3 	bl	80020f8 <__aeabi_dmul>
 800d132:	0002      	movs	r2, r0
 800d134:	000b      	movs	r3, r1
 800d136:	0014      	movs	r4, r2
 800d138:	001d      	movs	r5, r3
							+ interface->coordinatesChronoDecimals[Y],
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	79db      	ldrb	r3, [r3, #7]
 800d13e:	0018      	movs	r0, r3
 800d140:	f7f5 fe2c 	bl	8002d9c <__aeabi_i2d>
 800d144:	0002      	movs	r2, r0
 800d146:	000b      	movs	r3, r1
 800d148:	0020      	movs	r0, r4
 800d14a:	0029      	movs	r1, r5
 800d14c:	f7f4 f864 	bl	8001218 <__aeabi_dadd>
 800d150:	0002      	movs	r2, r0
 800d152:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d154:	0010      	movs	r0, r2
 800d156:	0019      	movs	r1, r3
 800d158:	f7f3 f9f6 	bl	8000548 <__aeabi_d2uiz>
 800d15c:	0003      	movs	r3, r0
 800d15e:	b299      	uxth	r1, r3
					interface->colorBackground, DOT_PIXEL_1X1,
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	2322      	movs	r3, #34	; 0x22
 800d164:	33ff      	adds	r3, #255	; 0xff
 800d166:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawLine(
 800d168:	b29b      	uxth	r3, r3
 800d16a:	2200      	movs	r2, #0
 800d16c:	9202      	str	r2, [sp, #8]
 800d16e:	2201      	movs	r2, #1
 800d170:	9201      	str	r2, [sp, #4]
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	000b      	movs	r3, r1
 800d176:	464a      	mov	r2, r9
 800d178:	4641      	mov	r1, r8
 800d17a:	0030      	movs	r0, r6
 800d17c:	f7fb fc9a 	bl	8008ab4 <Paint_DrawLine>
		for (uint8_t i = 0; i < numberOfIndexesChronoDecimals; i++) {
 800d180:	2125      	movs	r1, #37	; 0x25
 800d182:	187b      	adds	r3, r7, r1
 800d184:	781a      	ldrb	r2, [r3, #0]
 800d186:	187b      	adds	r3, r7, r1
 800d188:	3201      	adds	r2, #1
 800d18a:	701a      	strb	r2, [r3, #0]
 800d18c:	2325      	movs	r3, #37	; 0x25
 800d18e:	18fa      	adds	r2, r7, r3
 800d190:	2313      	movs	r3, #19
 800d192:	18fb      	adds	r3, r7, r3
 800d194:	7812      	ldrb	r2, [r2, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d200      	bcs.n	800d19e <interfaceDraw+0xca6>
 800d19c:	e704      	b.n	800cfa8 <interfaceDraw+0xab0>
					LINE_STYLE_SOLID);
		}

		//digits
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	799b      	ldrb	r3, [r3, #6]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] - 24, "0", &Font12,
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	79db      	ldrb	r3, [r3, #7]
 800d1ac:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800d1ae:	3b18      	subs	r3, #24
 800d1b0:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	2322      	movs	r3, #34	; 0x22
 800d1b6:	33ff      	adds	r3, #255	; 0xff
 800d1b8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800d1ba:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d1bc:	68f9      	ldr	r1, [r7, #12]
 800d1be:	2291      	movs	r2, #145	; 0x91
 800d1c0:	0052      	lsls	r2, r2, #1
 800d1c2:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 4,
 800d1c4:	b292      	uxth	r2, r2
 800d1c6:	4da4      	ldr	r5, [pc, #656]	; (800d458 <interfaceDraw+0xf60>)
 800d1c8:	49a4      	ldr	r1, [pc, #656]	; (800d45c <interfaceDraw+0xf64>)
 800d1ca:	9201      	str	r2, [sp, #4]
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	002b      	movs	r3, r5
 800d1d0:	000a      	movs	r2, r1
 800d1d2:	0021      	movs	r1, r4
 800d1d4:	f7fc fa38 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	799b      	ldrb	r3, [r3, #6]
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	330c      	adds	r3, #12
 800d1e0:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] - 12, "2", &Font12,
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	79db      	ldrb	r3, [r3, #7]
 800d1e6:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800d1e8:	3b0c      	subs	r3, #12
 800d1ea:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	2322      	movs	r3, #34	; 0x22
 800d1f0:	33ff      	adds	r3, #255	; 0xff
 800d1f2:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800d1f4:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d1f6:	68f9      	ldr	r1, [r7, #12]
 800d1f8:	2291      	movs	r2, #145	; 0x91
 800d1fa:	0052      	lsls	r2, r2, #1
 800d1fc:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 12,
 800d1fe:	b292      	uxth	r2, r2
 800d200:	4d95      	ldr	r5, [pc, #596]	; (800d458 <interfaceDraw+0xf60>)
 800d202:	4997      	ldr	r1, [pc, #604]	; (800d460 <interfaceDraw+0xf68>)
 800d204:	9201      	str	r2, [sp, #4]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	002b      	movs	r3, r5
 800d20a:	000a      	movs	r2, r1
 800d20c:	0021      	movs	r1, r4
 800d20e:	f7fc fa1b 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	799b      	ldrb	r3, [r3, #6]
 800d216:	b29b      	uxth	r3, r3
 800d218:	3306      	adds	r3, #6
 800d21a:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] + 6, "4", &Font12,
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	79db      	ldrb	r3, [r3, #7]
 800d220:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800d222:	3306      	adds	r3, #6
 800d224:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	2322      	movs	r3, #34	; 0x22
 800d22a:	33ff      	adds	r3, #255	; 0xff
 800d22c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800d22e:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d230:	68f9      	ldr	r1, [r7, #12]
 800d232:	2291      	movs	r2, #145	; 0x91
 800d234:	0052      	lsls	r2, r2, #1
 800d236:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] + 6,
 800d238:	b292      	uxth	r2, r2
 800d23a:	4d87      	ldr	r5, [pc, #540]	; (800d458 <interfaceDraw+0xf60>)
 800d23c:	4989      	ldr	r1, [pc, #548]	; (800d464 <interfaceDraw+0xf6c>)
 800d23e:	9201      	str	r2, [sp, #4]
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	002b      	movs	r3, r5
 800d244:	000a      	movs	r2, r1
 800d246:	0021      	movs	r1, r4
 800d248:	f7fc f9fe 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	799b      	ldrb	r3, [r3, #6]
 800d250:	b29b      	uxth	r3, r3
 800d252:	3b0e      	subs	r3, #14
 800d254:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] + 6, "6", &Font12,
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	79db      	ldrb	r3, [r3, #7]
 800d25a:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800d25c:	3306      	adds	r3, #6
 800d25e:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	2322      	movs	r3, #34	; 0x22
 800d264:	33ff      	adds	r3, #255	; 0xff
 800d266:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800d268:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	2291      	movs	r2, #145	; 0x91
 800d26e:	0052      	lsls	r2, r2, #1
 800d270:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 14,
 800d272:	b292      	uxth	r2, r2
 800d274:	4d78      	ldr	r5, [pc, #480]	; (800d458 <interfaceDraw+0xf60>)
 800d276:	497c      	ldr	r1, [pc, #496]	; (800d468 <interfaceDraw+0xf70>)
 800d278:	9201      	str	r2, [sp, #4]
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	002b      	movs	r3, r5
 800d27e:	000a      	movs	r2, r1
 800d280:	0021      	movs	r1, r4
 800d282:	f7fc f9e1 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	799b      	ldrb	r3, [r3, #6]
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	3b12      	subs	r3, #18
 800d28e:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y] - 12, "8", &Font12,
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	79db      	ldrb	r3, [r3, #7]
 800d294:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800d296:	3b0c      	subs	r3, #12
 800d298:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	2322      	movs	r3, #34	; 0x22
 800d29e:	33ff      	adds	r3, #255	; 0xff
 800d2a0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800d2a2:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d2a4:	68f9      	ldr	r1, [r7, #12]
 800d2a6:	2291      	movs	r2, #145	; 0x91
 800d2a8:	0052      	lsls	r2, r2, #1
 800d2aa:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoDecimals[X] - 18,
 800d2ac:	b292      	uxth	r2, r2
 800d2ae:	4d6a      	ldr	r5, [pc, #424]	; (800d458 <interfaceDraw+0xf60>)
 800d2b0:	496e      	ldr	r1, [pc, #440]	; (800d46c <interfaceDraw+0xf74>)
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	002b      	movs	r3, r5
 800d2b8:	000a      	movs	r2, r1
 800d2ba:	0021      	movs	r1, r4
 800d2bc:	f7fc f9c4 	bl	8009648 <Paint_DrawString_EN>

		//pointer
		interface->pointerAngleChronoDecimals = 2 * 3.14 / 10
				* ((chrono->chrono.hundredth / 10) - 2.5);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	7f9b      	ldrb	r3, [r3, #30]
 800d2c4:	b25b      	sxtb	r3, r3
 800d2c6:	210a      	movs	r1, #10
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f7f2 ffaf 	bl	800022c <__divsi3>
 800d2ce:	0003      	movs	r3, r0
 800d2d0:	b25b      	sxtb	r3, r3
 800d2d2:	0018      	movs	r0, r3
 800d2d4:	f7f5 fd62 	bl	8002d9c <__aeabi_i2d>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4b65      	ldr	r3, [pc, #404]	; (800d470 <interfaceDraw+0xf78>)
 800d2dc:	f7f5 f978 	bl	80025d0 <__aeabi_dsub>
 800d2e0:	0002      	movs	r2, r0
 800d2e2:	000b      	movs	r3, r1
 800d2e4:	0010      	movs	r0, r2
 800d2e6:	0019      	movs	r1, r3
 800d2e8:	4a62      	ldr	r2, [pc, #392]	; (800d474 <interfaceDraw+0xf7c>)
 800d2ea:	4b63      	ldr	r3, [pc, #396]	; (800d478 <interfaceDraw+0xf80>)
 800d2ec:	f7f4 ff04 	bl	80020f8 <__aeabi_dmul>
 800d2f0:	0002      	movs	r2, r0
 800d2f2:	000b      	movs	r3, r1
 800d2f4:	0010      	movs	r0, r2
 800d2f6:	0019      	movs	r1, r3
 800d2f8:	f7f5 fdee 	bl	8002ed8 <__aeabi_d2f>
 800d2fc:	1c02      	adds	r2, r0, #0
		interface->pointerAngleChronoDecimals = 2 * 3.14 / 10
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	639a      	str	r2, [r3, #56]	; 0x38

		Paint_DrawPointer(interface->coordinatesChronoDecimals[X],
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	799b      	ldrb	r3, [r3, #6]
 800d306:	b298      	uxth	r0, r3
				interface->coordinatesChronoDecimals[Y],
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	79db      	ldrb	r3, [r3, #7]
		Paint_DrawPointer(interface->coordinatesChronoDecimals[X],
 800d30c:	b299      	uxth	r1, r3
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6b9c      	ldr	r4, [r3, #56]	; 0x38
				interface->pointerAngleChronoDecimals,
				interface->pointerLengthChronoDecimals, 0,
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2226      	movs	r2, #38	; 0x26
 800d316:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesChronoDecimals[X],
 800d318:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	2322      	movs	r3, #34	; 0x22
 800d31e:	33ff      	adds	r3, #255	; 0xff
 800d320:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPointer(interface->coordinatesChronoDecimals[X],
 800d322:	b29b      	uxth	r3, r3
 800d324:	2200      	movs	r2, #0
 800d326:	9203      	str	r2, [sp, #12]
 800d328:	2201      	movs	r2, #1
 800d32a:	9202      	str	r2, [sp, #8]
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	2300      	movs	r3, #0
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	002b      	movs	r3, r5
 800d334:	1c22      	adds	r2, r4, #0
 800d336:	f7fb fc9b 	bl	8008c70 <Paint_DrawPointer>
	}

	//			CHRONO MINUTES

	if (interface->coordinatesChronoMinutes[EN] == INTERFACE_ELEMENT_ENABLED) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	795b      	ldrb	r3, [r3, #5]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d000      	beq.n	800d344 <interfaceDraw+0xe4c>
 800d342:	e360      	b.n	800da06 <interfaceDraw+0x150e>
		//outer circle
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	78db      	ldrb	r3, [r3, #3]
 800d348:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y],
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	791b      	ldrb	r3, [r3, #4]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d34e:	b299      	uxth	r1, r3
				interface->radiusSmall + 2, interface->colorForeground,
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	7fdb      	ldrb	r3, [r3, #31]
 800d354:	b29b      	uxth	r3, r3
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d356:	3302      	adds	r3, #2
 800d358:	b29c      	uxth	r4, r3
				interface->radiusSmall + 2, interface->colorForeground,
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	2391      	movs	r3, #145	; 0x91
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d362:	b29b      	uxth	r3, r3
 800d364:	2200      	movs	r2, #0
 800d366:	9201      	str	r2, [sp, #4]
 800d368:	2201      	movs	r2, #1
 800d36a:	9200      	str	r2, [sp, #0]
 800d36c:	0022      	movs	r2, r4
 800d36e:	f7fb fe35 	bl	8008fdc <Paint_DrawCircle>
				DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
		//inner circle
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	78db      	ldrb	r3, [r3, #3]
 800d376:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y], interface->radiusSmall,
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	791b      	ldrb	r3, [r3, #4]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d37c:	b299      	uxth	r1, r3
				interface->coordinatesChronoMinutes[Y], interface->radiusSmall,
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d382:	b29c      	uxth	r4, r3
				interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	2391      	movs	r3, #145	; 0x91
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	2201      	movs	r2, #1
 800d390:	9201      	str	r2, [sp, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	9200      	str	r2, [sp, #0]
 800d396:	0022      	movs	r2, r4
 800d398:	f7fb fe20 	bl	8008fdc <Paint_DrawCircle>

		//dot at center
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	78db      	ldrb	r3, [r3, #3]
 800d3a0:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y], 2,
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	791b      	ldrb	r3, [r3, #4]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d3a6:	b299      	uxth	r1, r3
				interface->colorBackground, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	2322      	movs	r3, #34	; 0x22
 800d3ac:	33ff      	adds	r3, #255	; 0xff
 800d3ae:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawCircle(interface->coordinatesChronoMinutes[X],
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	9201      	str	r2, [sp, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	9200      	str	r2, [sp, #0]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f7fb fe0e 	bl	8008fdc <Paint_DrawCircle>

		//indexes- count angles
		uint8_t numberOfIndexesChronoMinutes =
 800d3c0:	2312      	movs	r3, #18
 800d3c2:	18fb      	adds	r3, r7, r3
 800d3c4:	221e      	movs	r2, #30
 800d3c6:	701a      	strb	r2, [r3, #0]
				sizeof(interface->indexAngleChronoMinutes)
						/ sizeof(interface->indexAngleChronoMinutes[0]);

		for (uint8_t i = 0; i < numberOfIndexesChronoMinutes; i++) {
 800d3c8:	2324      	movs	r3, #36	; 0x24
 800d3ca:	18fb      	adds	r3, r7, r3
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	701a      	strb	r2, [r3, #0]
 800d3d0:	e034      	b.n	800d43c <interfaceDraw+0xf44>
			interface->indexAngleChronoMinutes[i] = 2 * 3.14
					/ numberOfIndexesChronoMinutes
 800d3d2:	2312      	movs	r3, #18
 800d3d4:	18fb      	adds	r3, r7, r3
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	0018      	movs	r0, r3
 800d3da:	f7f5 fcdf 	bl	8002d9c <__aeabi_i2d>
 800d3de:	0002      	movs	r2, r0
 800d3e0:	000b      	movs	r3, r1
 800d3e2:	4826      	ldr	r0, [pc, #152]	; (800d47c <interfaceDraw+0xf84>)
 800d3e4:	4926      	ldr	r1, [pc, #152]	; (800d480 <interfaceDraw+0xf88>)
 800d3e6:	f7f4 fa81 	bl	80018ec <__aeabi_ddiv>
 800d3ea:	0002      	movs	r2, r0
 800d3ec:	000b      	movs	r3, r1
 800d3ee:	0014      	movs	r4, r2
 800d3f0:	001d      	movs	r5, r3
					* (i - (numberOfIndexesChronoMinutes / 4));
 800d3f2:	2624      	movs	r6, #36	; 0x24
 800d3f4:	19bb      	adds	r3, r7, r6
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2212      	movs	r2, #18
 800d3fa:	18ba      	adds	r2, r7, r2
 800d3fc:	7812      	ldrb	r2, [r2, #0]
 800d3fe:	0892      	lsrs	r2, r2, #2
 800d400:	b2d2      	uxtb	r2, r2
 800d402:	1a9b      	subs	r3, r3, r2
 800d404:	0018      	movs	r0, r3
 800d406:	f7f5 fcc9 	bl	8002d9c <__aeabi_i2d>
 800d40a:	0002      	movs	r2, r0
 800d40c:	000b      	movs	r3, r1
 800d40e:	0020      	movs	r0, r4
 800d410:	0029      	movs	r1, r5
 800d412:	f7f4 fe71 	bl	80020f8 <__aeabi_dmul>
 800d416:	0002      	movs	r2, r0
 800d418:	000b      	movs	r3, r1
			interface->indexAngleChronoMinutes[i] = 2 * 3.14
 800d41a:	19b9      	adds	r1, r7, r6
 800d41c:	780c      	ldrb	r4, [r1, #0]
					* (i - (numberOfIndexesChronoMinutes / 4));
 800d41e:	0010      	movs	r0, r2
 800d420:	0019      	movs	r1, r3
 800d422:	f7f5 fd59 	bl	8002ed8 <__aeabi_d2f>
 800d426:	1c01      	adds	r1, r0, #0
			interface->indexAngleChronoMinutes[i] = 2 * 3.14
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	0022      	movs	r2, r4
 800d42c:	321e      	adds	r2, #30
 800d42e:	0092      	lsls	r2, r2, #2
 800d430:	50d1      	str	r1, [r2, r3]
		for (uint8_t i = 0; i < numberOfIndexesChronoMinutes; i++) {
 800d432:	19bb      	adds	r3, r7, r6
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	19bb      	adds	r3, r7, r6
 800d438:	3201      	adds	r2, #1
 800d43a:	701a      	strb	r2, [r3, #0]
 800d43c:	2324      	movs	r3, #36	; 0x24
 800d43e:	18fa      	adds	r2, r7, r3
 800d440:	2312      	movs	r3, #18
 800d442:	18fb      	adds	r3, r7, r3
 800d444:	7812      	ldrb	r2, [r2, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d3c2      	bcc.n	800d3d2 <interfaceDraw+0xeda>
		}

		//indexes- draw
		for (uint8_t i = 0; i < numberOfIndexesChronoMinutes; i++) {
 800d44c:	2323      	movs	r3, #35	; 0x23
 800d44e:	18fb      	adds	r3, r7, r3
 800d450:	2200      	movs	r2, #0
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	e201      	b.n	800d85a <interfaceDraw+0x1362>
 800d456:	46c0      	nop			; (mov r8, r8)
 800d458:	20000008 	.word	0x20000008
 800d45c:	08011874 	.word	0x08011874
 800d460:	08011878 	.word	0x08011878
 800d464:	0801187c 	.word	0x0801187c
 800d468:	08011880 	.word	0x08011880
 800d46c:	08011884 	.word	0x08011884
 800d470:	40040000 	.word	0x40040000
 800d474:	74bc6a7f 	.word	0x74bc6a7f
 800d478:	3fe41893 	.word	0x3fe41893
 800d47c:	51eb851f 	.word	0x51eb851f
 800d480:	40191eb8 	.word	0x40191eb8

			Paint_DrawLine(
					cos(interface->indexAngleChronoMinutes[i])
 800d484:	2323      	movs	r3, #35	; 0x23
 800d486:	18fb      	adds	r3, r7, r3
 800d488:	781a      	ldrb	r2, [r3, #0]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	321e      	adds	r2, #30
 800d48e:	0092      	lsls	r2, r2, #2
 800d490:	58d3      	ldr	r3, [r2, r3]
 800d492:	1c18      	adds	r0, r3, #0
 800d494:	f7f5 fcd8 	bl	8002e48 <__aeabi_f2d>
 800d498:	0002      	movs	r2, r0
 800d49a:	000b      	movs	r3, r1
 800d49c:	0010      	movs	r0, r2
 800d49e:	0019      	movs	r1, r3
 800d4a0:	f002 fb54 	bl	800fb4c <cos>
 800d4a4:	0004      	movs	r4, r0
 800d4a6:	000d      	movs	r5, r1
							* (interface->radiusSmall
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	7fdb      	ldrb	r3, [r3, #31]
 800d4ac:	0019      	movs	r1, r3
									- interface->indexLengthChronoMinutes)
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	222b      	movs	r2, #43	; 0x2b
 800d4b2:	5c9b      	ldrb	r3, [r3, r2]
 800d4b4:	1acb      	subs	r3, r1, r3
							* (interface->radiusSmall
 800d4b6:	0018      	movs	r0, r3
 800d4b8:	f7f5 fc70 	bl	8002d9c <__aeabi_i2d>
 800d4bc:	0002      	movs	r2, r0
 800d4be:	000b      	movs	r3, r1
 800d4c0:	0020      	movs	r0, r4
 800d4c2:	0029      	movs	r1, r5
 800d4c4:	f7f4 fe18 	bl	80020f8 <__aeabi_dmul>
 800d4c8:	0002      	movs	r2, r0
 800d4ca:	000b      	movs	r3, r1
 800d4cc:	0014      	movs	r4, r2
 800d4ce:	001d      	movs	r5, r3
							+ interface->coordinatesChronoMinutes[X],
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	78db      	ldrb	r3, [r3, #3]
 800d4d4:	0018      	movs	r0, r3
 800d4d6:	f7f5 fc61 	bl	8002d9c <__aeabi_i2d>
 800d4da:	0002      	movs	r2, r0
 800d4dc:	000b      	movs	r3, r1
 800d4de:	0020      	movs	r0, r4
 800d4e0:	0029      	movs	r1, r5
 800d4e2:	f7f3 fe99 	bl	8001218 <__aeabi_dadd>
 800d4e6:	0002      	movs	r2, r0
 800d4e8:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d4ea:	0010      	movs	r0, r2
 800d4ec:	0019      	movs	r1, r3
 800d4ee:	f7f3 f82b 	bl	8000548 <__aeabi_d2uiz>
 800d4f2:	0003      	movs	r3, r0
 800d4f4:	b29e      	uxth	r6, r3
					sin(interface->indexAngleChronoMinutes[i])
 800d4f6:	2323      	movs	r3, #35	; 0x23
 800d4f8:	18fb      	adds	r3, r7, r3
 800d4fa:	781a      	ldrb	r2, [r3, #0]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	321e      	adds	r2, #30
 800d500:	0092      	lsls	r2, r2, #2
 800d502:	58d3      	ldr	r3, [r2, r3]
 800d504:	1c18      	adds	r0, r3, #0
 800d506:	f7f5 fc9f 	bl	8002e48 <__aeabi_f2d>
 800d50a:	0002      	movs	r2, r0
 800d50c:	000b      	movs	r3, r1
 800d50e:	0010      	movs	r0, r2
 800d510:	0019      	movs	r1, r3
 800d512:	f002 fb5d 	bl	800fbd0 <sin>
 800d516:	0004      	movs	r4, r0
 800d518:	000d      	movs	r5, r1
							* (interface->radiusSmall
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	7fdb      	ldrb	r3, [r3, #31]
 800d51e:	0019      	movs	r1, r3
									- interface->indexLengthChronoMinutes)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	222b      	movs	r2, #43	; 0x2b
 800d524:	5c9b      	ldrb	r3, [r3, r2]
 800d526:	1acb      	subs	r3, r1, r3
							* (interface->radiusSmall
 800d528:	0018      	movs	r0, r3
 800d52a:	f7f5 fc37 	bl	8002d9c <__aeabi_i2d>
 800d52e:	0002      	movs	r2, r0
 800d530:	000b      	movs	r3, r1
 800d532:	0020      	movs	r0, r4
 800d534:	0029      	movs	r1, r5
 800d536:	f7f4 fddf 	bl	80020f8 <__aeabi_dmul>
 800d53a:	0002      	movs	r2, r0
 800d53c:	000b      	movs	r3, r1
 800d53e:	0014      	movs	r4, r2
 800d540:	001d      	movs	r5, r3
							+ interface->coordinatesChronoMinutes[Y],
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	791b      	ldrb	r3, [r3, #4]
 800d546:	0018      	movs	r0, r3
 800d548:	f7f5 fc28 	bl	8002d9c <__aeabi_i2d>
 800d54c:	0002      	movs	r2, r0
 800d54e:	000b      	movs	r3, r1
 800d550:	0020      	movs	r0, r4
 800d552:	0029      	movs	r1, r5
 800d554:	f7f3 fe60 	bl	8001218 <__aeabi_dadd>
 800d558:	0002      	movs	r2, r0
 800d55a:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d55c:	0010      	movs	r0, r2
 800d55e:	0019      	movs	r1, r3
 800d560:	f7f2 fff2 	bl	8000548 <__aeabi_d2uiz>
 800d564:	0003      	movs	r3, r0
 800d566:	b29a      	uxth	r2, r3
 800d568:	4690      	mov	r8, r2

					cos(interface->indexAngleChronoMinutes[i])
 800d56a:	2323      	movs	r3, #35	; 0x23
 800d56c:	18fb      	adds	r3, r7, r3
 800d56e:	781a      	ldrb	r2, [r3, #0]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	321e      	adds	r2, #30
 800d574:	0092      	lsls	r2, r2, #2
 800d576:	58d3      	ldr	r3, [r2, r3]
 800d578:	1c18      	adds	r0, r3, #0
 800d57a:	f7f5 fc65 	bl	8002e48 <__aeabi_f2d>
 800d57e:	0002      	movs	r2, r0
 800d580:	000b      	movs	r3, r1
 800d582:	0010      	movs	r0, r2
 800d584:	0019      	movs	r1, r3
 800d586:	f002 fae1 	bl	800fb4c <cos>
 800d58a:	0004      	movs	r4, r0
 800d58c:	000d      	movs	r5, r1
							* (interface->radiusSmall)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	7fdb      	ldrb	r3, [r3, #31]
 800d592:	0018      	movs	r0, r3
 800d594:	f7f5 fc02 	bl	8002d9c <__aeabi_i2d>
 800d598:	0002      	movs	r2, r0
 800d59a:	000b      	movs	r3, r1
 800d59c:	0020      	movs	r0, r4
 800d59e:	0029      	movs	r1, r5
 800d5a0:	f7f4 fdaa 	bl	80020f8 <__aeabi_dmul>
 800d5a4:	0002      	movs	r2, r0
 800d5a6:	000b      	movs	r3, r1
 800d5a8:	0014      	movs	r4, r2
 800d5aa:	001d      	movs	r5, r3
							+ interface->coordinatesChronoMinutes[X],
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	78db      	ldrb	r3, [r3, #3]
 800d5b0:	0018      	movs	r0, r3
 800d5b2:	f7f5 fbf3 	bl	8002d9c <__aeabi_i2d>
 800d5b6:	0002      	movs	r2, r0
 800d5b8:	000b      	movs	r3, r1
 800d5ba:	0020      	movs	r0, r4
 800d5bc:	0029      	movs	r1, r5
 800d5be:	f7f3 fe2b 	bl	8001218 <__aeabi_dadd>
 800d5c2:	0002      	movs	r2, r0
 800d5c4:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d5c6:	0010      	movs	r0, r2
 800d5c8:	0019      	movs	r1, r3
 800d5ca:	f7f2 ffbd 	bl	8000548 <__aeabi_d2uiz>
 800d5ce:	0003      	movs	r3, r0
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	4691      	mov	r9, r2
					sin(interface->indexAngleChronoMinutes[i])
 800d5d4:	2323      	movs	r3, #35	; 0x23
 800d5d6:	18fb      	adds	r3, r7, r3
 800d5d8:	781a      	ldrb	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	321e      	adds	r2, #30
 800d5de:	0092      	lsls	r2, r2, #2
 800d5e0:	58d3      	ldr	r3, [r2, r3]
 800d5e2:	1c18      	adds	r0, r3, #0
 800d5e4:	f7f5 fc30 	bl	8002e48 <__aeabi_f2d>
 800d5e8:	0002      	movs	r2, r0
 800d5ea:	000b      	movs	r3, r1
 800d5ec:	0010      	movs	r0, r2
 800d5ee:	0019      	movs	r1, r3
 800d5f0:	f002 faee 	bl	800fbd0 <sin>
 800d5f4:	0004      	movs	r4, r0
 800d5f6:	000d      	movs	r5, r1
							* (interface->radiusSmall)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	7fdb      	ldrb	r3, [r3, #31]
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f7f5 fbcd 	bl	8002d9c <__aeabi_i2d>
 800d602:	0002      	movs	r2, r0
 800d604:	000b      	movs	r3, r1
 800d606:	0020      	movs	r0, r4
 800d608:	0029      	movs	r1, r5
 800d60a:	f7f4 fd75 	bl	80020f8 <__aeabi_dmul>
 800d60e:	0002      	movs	r2, r0
 800d610:	000b      	movs	r3, r1
 800d612:	0014      	movs	r4, r2
 800d614:	001d      	movs	r5, r3
							+ interface->coordinatesChronoMinutes[Y],
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	791b      	ldrb	r3, [r3, #4]
 800d61a:	0018      	movs	r0, r3
 800d61c:	f7f5 fbbe 	bl	8002d9c <__aeabi_i2d>
 800d620:	0002      	movs	r2, r0
 800d622:	000b      	movs	r3, r1
 800d624:	0020      	movs	r0, r4
 800d626:	0029      	movs	r1, r5
 800d628:	f7f3 fdf6 	bl	8001218 <__aeabi_dadd>
 800d62c:	0002      	movs	r2, r0
 800d62e:	000b      	movs	r3, r1
			Paint_DrawLine(
 800d630:	0010      	movs	r0, r2
 800d632:	0019      	movs	r1, r3
 800d634:	f7f2 ff88 	bl	8000548 <__aeabi_d2uiz>
 800d638:	0003      	movs	r3, r0
 800d63a:	b299      	uxth	r1, r3
					interface->colorBackground, DOT_PIXEL_1X1,
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	2322      	movs	r3, #34	; 0x22
 800d640:	33ff      	adds	r3, #255	; 0xff
 800d642:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawLine(
 800d644:	b29b      	uxth	r3, r3
 800d646:	2200      	movs	r2, #0
 800d648:	9202      	str	r2, [sp, #8]
 800d64a:	2201      	movs	r2, #1
 800d64c:	9201      	str	r2, [sp, #4]
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	000b      	movs	r3, r1
 800d652:	464a      	mov	r2, r9
 800d654:	4641      	mov	r1, r8
 800d656:	0030      	movs	r0, r6
 800d658:	f7fb fa2c 	bl	8008ab4 <Paint_DrawLine>
					LINE_STYLE_SOLID);

			if (i % 5 == 0) {
 800d65c:	2423      	movs	r4, #35	; 0x23
 800d65e:	193b      	adds	r3, r7, r4
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2105      	movs	r1, #5
 800d664:	0018      	movs	r0, r3
 800d666:	f7f2 fddd 	bl	8000224 <__aeabi_uidivmod>
 800d66a:	000b      	movs	r3, r1
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d000      	beq.n	800d674 <interfaceDraw+0x117c>
 800d672:	e0ec      	b.n	800d84e <interfaceDraw+0x1356>
				Paint_DrawLine(
						cos(interface->indexAngleChronoMinutes[i])
 800d674:	193b      	adds	r3, r7, r4
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	321e      	adds	r2, #30
 800d67c:	0092      	lsls	r2, r2, #2
 800d67e:	58d3      	ldr	r3, [r2, r3]
 800d680:	1c18      	adds	r0, r3, #0
 800d682:	f7f5 fbe1 	bl	8002e48 <__aeabi_f2d>
 800d686:	0002      	movs	r2, r0
 800d688:	000b      	movs	r3, r1
 800d68a:	0010      	movs	r0, r2
 800d68c:	0019      	movs	r1, r3
 800d68e:	f002 fa5d 	bl	800fb4c <cos>
 800d692:	0004      	movs	r4, r0
 800d694:	000d      	movs	r5, r1
								* (interface->radiusSmall
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	7fdb      	ldrb	r3, [r3, #31]
 800d69a:	0019      	movs	r1, r3
										- (interface->indexLengthChronoMinutes
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	222b      	movs	r2, #43	; 0x2b
 800d6a0:	5c9b      	ldrb	r3, [r3, r2]
												+ 5))
 800d6a2:	3305      	adds	r3, #5
										- (interface->indexLengthChronoMinutes
 800d6a4:	1acb      	subs	r3, r1, r3
								* (interface->radiusSmall
 800d6a6:	0018      	movs	r0, r3
 800d6a8:	f7f5 fb78 	bl	8002d9c <__aeabi_i2d>
 800d6ac:	0002      	movs	r2, r0
 800d6ae:	000b      	movs	r3, r1
 800d6b0:	0020      	movs	r0, r4
 800d6b2:	0029      	movs	r1, r5
 800d6b4:	f7f4 fd20 	bl	80020f8 <__aeabi_dmul>
 800d6b8:	0002      	movs	r2, r0
 800d6ba:	000b      	movs	r3, r1
 800d6bc:	0014      	movs	r4, r2
 800d6be:	001d      	movs	r5, r3
								+ interface->coordinatesChronoMinutes[X],
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	78db      	ldrb	r3, [r3, #3]
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f7f5 fb69 	bl	8002d9c <__aeabi_i2d>
 800d6ca:	0002      	movs	r2, r0
 800d6cc:	000b      	movs	r3, r1
 800d6ce:	0020      	movs	r0, r4
 800d6d0:	0029      	movs	r1, r5
 800d6d2:	f7f3 fda1 	bl	8001218 <__aeabi_dadd>
 800d6d6:	0002      	movs	r2, r0
 800d6d8:	000b      	movs	r3, r1
				Paint_DrawLine(
 800d6da:	0010      	movs	r0, r2
 800d6dc:	0019      	movs	r1, r3
 800d6de:	f7f2 ff33 	bl	8000548 <__aeabi_d2uiz>
 800d6e2:	0003      	movs	r3, r0
 800d6e4:	b29e      	uxth	r6, r3
						sin(interface->indexAngleChronoMinutes[i])
 800d6e6:	2423      	movs	r4, #35	; 0x23
 800d6e8:	193b      	adds	r3, r7, r4
 800d6ea:	781a      	ldrb	r2, [r3, #0]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	321e      	adds	r2, #30
 800d6f0:	0092      	lsls	r2, r2, #2
 800d6f2:	58d3      	ldr	r3, [r2, r3]
 800d6f4:	1c18      	adds	r0, r3, #0
 800d6f6:	f7f5 fba7 	bl	8002e48 <__aeabi_f2d>
 800d6fa:	0002      	movs	r2, r0
 800d6fc:	000b      	movs	r3, r1
 800d6fe:	0010      	movs	r0, r2
 800d700:	0019      	movs	r1, r3
 800d702:	f002 fa65 	bl	800fbd0 <sin>
 800d706:	0004      	movs	r4, r0
 800d708:	000d      	movs	r5, r1
								* (interface->radiusSmall
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	7fdb      	ldrb	r3, [r3, #31]
 800d70e:	0019      	movs	r1, r3
										- (interface->indexLengthChronoMinutes
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	222b      	movs	r2, #43	; 0x2b
 800d714:	5c9b      	ldrb	r3, [r3, r2]
												+ 5))
 800d716:	3305      	adds	r3, #5
										- (interface->indexLengthChronoMinutes
 800d718:	1acb      	subs	r3, r1, r3
								* (interface->radiusSmall
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7f5 fb3e 	bl	8002d9c <__aeabi_i2d>
 800d720:	0002      	movs	r2, r0
 800d722:	000b      	movs	r3, r1
 800d724:	0020      	movs	r0, r4
 800d726:	0029      	movs	r1, r5
 800d728:	f7f4 fce6 	bl	80020f8 <__aeabi_dmul>
 800d72c:	0002      	movs	r2, r0
 800d72e:	000b      	movs	r3, r1
 800d730:	0014      	movs	r4, r2
 800d732:	001d      	movs	r5, r3
								+ interface->coordinatesChronoMinutes[Y],
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	791b      	ldrb	r3, [r3, #4]
 800d738:	0018      	movs	r0, r3
 800d73a:	f7f5 fb2f 	bl	8002d9c <__aeabi_i2d>
 800d73e:	0002      	movs	r2, r0
 800d740:	000b      	movs	r3, r1
 800d742:	0020      	movs	r0, r4
 800d744:	0029      	movs	r1, r5
 800d746:	f7f3 fd67 	bl	8001218 <__aeabi_dadd>
 800d74a:	0002      	movs	r2, r0
 800d74c:	000b      	movs	r3, r1
				Paint_DrawLine(
 800d74e:	0010      	movs	r0, r2
 800d750:	0019      	movs	r1, r3
 800d752:	f7f2 fef9 	bl	8000548 <__aeabi_d2uiz>
 800d756:	0003      	movs	r3, r0
 800d758:	b29b      	uxth	r3, r3
 800d75a:	4698      	mov	r8, r3

						cos(interface->indexAngleChronoMinutes[i])
 800d75c:	2423      	movs	r4, #35	; 0x23
 800d75e:	193b      	adds	r3, r7, r4
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	321e      	adds	r2, #30
 800d766:	0092      	lsls	r2, r2, #2
 800d768:	58d3      	ldr	r3, [r2, r3]
 800d76a:	1c18      	adds	r0, r3, #0
 800d76c:	f7f5 fb6c 	bl	8002e48 <__aeabi_f2d>
 800d770:	0002      	movs	r2, r0
 800d772:	000b      	movs	r3, r1
 800d774:	0010      	movs	r0, r2
 800d776:	0019      	movs	r1, r3
 800d778:	f002 f9e8 	bl	800fb4c <cos>
 800d77c:	0004      	movs	r4, r0
 800d77e:	000d      	movs	r5, r1
								* (interface->radiusSmall)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	7fdb      	ldrb	r3, [r3, #31]
 800d784:	0018      	movs	r0, r3
 800d786:	f7f5 fb09 	bl	8002d9c <__aeabi_i2d>
 800d78a:	0002      	movs	r2, r0
 800d78c:	000b      	movs	r3, r1
 800d78e:	0020      	movs	r0, r4
 800d790:	0029      	movs	r1, r5
 800d792:	f7f4 fcb1 	bl	80020f8 <__aeabi_dmul>
 800d796:	0002      	movs	r2, r0
 800d798:	000b      	movs	r3, r1
 800d79a:	0014      	movs	r4, r2
 800d79c:	001d      	movs	r5, r3
								+ interface->coordinatesChronoMinutes[X],
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	78db      	ldrb	r3, [r3, #3]
 800d7a2:	0018      	movs	r0, r3
 800d7a4:	f7f5 fafa 	bl	8002d9c <__aeabi_i2d>
 800d7a8:	0002      	movs	r2, r0
 800d7aa:	000b      	movs	r3, r1
 800d7ac:	0020      	movs	r0, r4
 800d7ae:	0029      	movs	r1, r5
 800d7b0:	f7f3 fd32 	bl	8001218 <__aeabi_dadd>
 800d7b4:	0002      	movs	r2, r0
 800d7b6:	000b      	movs	r3, r1
				Paint_DrawLine(
 800d7b8:	0010      	movs	r0, r2
 800d7ba:	0019      	movs	r1, r3
 800d7bc:	f7f2 fec4 	bl	8000548 <__aeabi_d2uiz>
 800d7c0:	0003      	movs	r3, r0
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	4699      	mov	r9, r3
						sin(interface->indexAngleChronoMinutes[i])
 800d7c6:	2423      	movs	r4, #35	; 0x23
 800d7c8:	193b      	adds	r3, r7, r4
 800d7ca:	781a      	ldrb	r2, [r3, #0]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	321e      	adds	r2, #30
 800d7d0:	0092      	lsls	r2, r2, #2
 800d7d2:	58d3      	ldr	r3, [r2, r3]
 800d7d4:	1c18      	adds	r0, r3, #0
 800d7d6:	f7f5 fb37 	bl	8002e48 <__aeabi_f2d>
 800d7da:	0002      	movs	r2, r0
 800d7dc:	000b      	movs	r3, r1
 800d7de:	0010      	movs	r0, r2
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	f002 f9f5 	bl	800fbd0 <sin>
 800d7e6:	0004      	movs	r4, r0
 800d7e8:	000d      	movs	r5, r1
								* (interface->radiusSmall)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	7fdb      	ldrb	r3, [r3, #31]
 800d7ee:	0018      	movs	r0, r3
 800d7f0:	f7f5 fad4 	bl	8002d9c <__aeabi_i2d>
 800d7f4:	0002      	movs	r2, r0
 800d7f6:	000b      	movs	r3, r1
 800d7f8:	0020      	movs	r0, r4
 800d7fa:	0029      	movs	r1, r5
 800d7fc:	f7f4 fc7c 	bl	80020f8 <__aeabi_dmul>
 800d800:	0002      	movs	r2, r0
 800d802:	000b      	movs	r3, r1
 800d804:	0014      	movs	r4, r2
 800d806:	001d      	movs	r5, r3
								+ interface->coordinatesChronoMinutes[Y],
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	791b      	ldrb	r3, [r3, #4]
 800d80c:	0018      	movs	r0, r3
 800d80e:	f7f5 fac5 	bl	8002d9c <__aeabi_i2d>
 800d812:	0002      	movs	r2, r0
 800d814:	000b      	movs	r3, r1
 800d816:	0020      	movs	r0, r4
 800d818:	0029      	movs	r1, r5
 800d81a:	f7f3 fcfd 	bl	8001218 <__aeabi_dadd>
 800d81e:	0002      	movs	r2, r0
 800d820:	000b      	movs	r3, r1
				Paint_DrawLine(
 800d822:	0010      	movs	r0, r2
 800d824:	0019      	movs	r1, r3
 800d826:	f7f2 fe8f 	bl	8000548 <__aeabi_d2uiz>
 800d82a:	0003      	movs	r3, r0
 800d82c:	b299      	uxth	r1, r3
						interface->colorBackground, DOT_PIXEL_1X1,
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	2322      	movs	r3, #34	; 0x22
 800d832:	33ff      	adds	r3, #255	; 0xff
 800d834:	5cd3      	ldrb	r3, [r2, r3]
				Paint_DrawLine(
 800d836:	b29b      	uxth	r3, r3
 800d838:	2200      	movs	r2, #0
 800d83a:	9202      	str	r2, [sp, #8]
 800d83c:	2201      	movs	r2, #1
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	000b      	movs	r3, r1
 800d844:	464a      	mov	r2, r9
 800d846:	4641      	mov	r1, r8
 800d848:	0030      	movs	r0, r6
 800d84a:	f7fb f933 	bl	8008ab4 <Paint_DrawLine>
		for (uint8_t i = 0; i < numberOfIndexesChronoMinutes; i++) {
 800d84e:	2123      	movs	r1, #35	; 0x23
 800d850:	187b      	adds	r3, r7, r1
 800d852:	781a      	ldrb	r2, [r3, #0]
 800d854:	187b      	adds	r3, r7, r1
 800d856:	3201      	adds	r2, #1
 800d858:	701a      	strb	r2, [r3, #0]
 800d85a:	2323      	movs	r3, #35	; 0x23
 800d85c:	18fa      	adds	r2, r7, r3
 800d85e:	2312      	movs	r3, #18
 800d860:	18fb      	adds	r3, r7, r3
 800d862:	7812      	ldrb	r2, [r2, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d200      	bcs.n	800d86c <interfaceDraw+0x1374>
 800d86a:	e60b      	b.n	800d484 <interfaceDraw+0xf8c>
						LINE_STYLE_SOLID);
			}
		}

		//digits
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	78db      	ldrb	r3, [r3, #3]
 800d870:	b29b      	uxth	r3, r3
 800d872:	3b08      	subs	r3, #8
 800d874:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y] - 20, "30", &Font12,
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	791b      	ldrb	r3, [r3, #4]
 800d87a:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800d87c:	3b14      	subs	r3, #20
 800d87e:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	2322      	movs	r3, #34	; 0x22
 800d884:	33ff      	adds	r3, #255	; 0xff
 800d886:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800d888:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d88a:	68f9      	ldr	r1, [r7, #12]
 800d88c:	2291      	movs	r2, #145	; 0x91
 800d88e:	0052      	lsls	r2, r2, #1
 800d890:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 8,
 800d892:	b292      	uxth	r2, r2
 800d894:	4df6      	ldr	r5, [pc, #984]	; (800dc70 <interfaceDraw+0x1778>)
 800d896:	49f7      	ldr	r1, [pc, #988]	; (800dc74 <interfaceDraw+0x177c>)
 800d898:	9201      	str	r2, [sp, #4]
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	002b      	movs	r3, r5
 800d89e:	000a      	movs	r2, r1
 800d8a0:	0021      	movs	r1, r4
 800d8a2:	f7fb fed1 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	78db      	ldrb	r3, [r3, #3]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y] + 2, "10", &Font12,
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	791b      	ldrb	r3, [r3, #4]
 800d8b4:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800d8b6:	3302      	adds	r3, #2
 800d8b8:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	2322      	movs	r3, #34	; 0x22
 800d8be:	33ff      	adds	r3, #255	; 0xff
 800d8c0:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800d8c2:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d8c4:	68f9      	ldr	r1, [r7, #12]
 800d8c6:	2291      	movs	r2, #145	; 0x91
 800d8c8:	0052      	lsls	r2, r2, #1
 800d8ca:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] + 2,
 800d8cc:	b292      	uxth	r2, r2
 800d8ce:	4de8      	ldr	r5, [pc, #928]	; (800dc70 <interfaceDraw+0x1778>)
 800d8d0:	49e9      	ldr	r1, [pc, #932]	; (800dc78 <interfaceDraw+0x1780>)
 800d8d2:	9201      	str	r2, [sp, #4]
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	002b      	movs	r3, r5
 800d8d8:	000a      	movs	r2, r1
 800d8da:	0021      	movs	r1, r4
 800d8dc:	f7fb feb4 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	78db      	ldrb	r3, [r3, #3]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	3b12      	subs	r3, #18
 800d8e8:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y] + 2, "20", &Font12,
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	791b      	ldrb	r3, [r3, #4]
 800d8ee:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800d8f0:	3302      	adds	r3, #2
 800d8f2:	b29c      	uxth	r4, r3
				interface->colorBackground, interface->colorForeground);
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	2322      	movs	r3, #34	; 0x22
 800d8f8:	33ff      	adds	r3, #255	; 0xff
 800d8fa:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800d8fc:	b29b      	uxth	r3, r3
				interface->colorBackground, interface->colorForeground);
 800d8fe:	68f9      	ldr	r1, [r7, #12]
 800d900:	2291      	movs	r2, #145	; 0x91
 800d902:	0052      	lsls	r2, r2, #1
 800d904:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesChronoMinutes[X] - 18,
 800d906:	b292      	uxth	r2, r2
 800d908:	4dd9      	ldr	r5, [pc, #868]	; (800dc70 <interfaceDraw+0x1778>)
 800d90a:	49dc      	ldr	r1, [pc, #880]	; (800dc7c <interfaceDraw+0x1784>)
 800d90c:	9201      	str	r2, [sp, #4]
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	002b      	movs	r3, r5
 800d912:	000a      	movs	r2, r1
 800d914:	0021      	movs	r1, r4
 800d916:	f7fb fe97 	bl	8009648 <Paint_DrawString_EN>

		//pointer
		interface->pointerAngleChronoMinutes = 2 * 3.14 / 30
				* (chrono->chrono.minute - 7.5);
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	7f1b      	ldrb	r3, [r3, #28]
 800d91e:	b25b      	sxtb	r3, r3
 800d920:	0018      	movs	r0, r3
 800d922:	f7f5 fa3b 	bl	8002d9c <__aeabi_i2d>
 800d926:	2200      	movs	r2, #0
 800d928:	4bd5      	ldr	r3, [pc, #852]	; (800dc80 <interfaceDraw+0x1788>)
 800d92a:	f7f4 fe51 	bl	80025d0 <__aeabi_dsub>
 800d92e:	0002      	movs	r2, r0
 800d930:	000b      	movs	r3, r1
 800d932:	0010      	movs	r0, r2
 800d934:	0019      	movs	r1, r3
 800d936:	4ad3      	ldr	r2, [pc, #844]	; (800dc84 <interfaceDraw+0x178c>)
 800d938:	4bd3      	ldr	r3, [pc, #844]	; (800dc88 <interfaceDraw+0x1790>)
 800d93a:	f7f4 fbdd 	bl	80020f8 <__aeabi_dmul>
 800d93e:	0002      	movs	r2, r0
 800d940:	000b      	movs	r3, r1
 800d942:	0010      	movs	r0, r2
 800d944:	0019      	movs	r1, r3
 800d946:	f7f5 fac7 	bl	8002ed8 <__aeabi_d2f>
 800d94a:	1c02      	adds	r2, r0, #0
		interface->pointerAngleChronoMinutes = 2 * 3.14 / 30
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	641a      	str	r2, [r3, #64]	; 0x40

		Paint_DrawPointer(interface->coordinatesChronoMinutes[X],
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	78db      	ldrb	r3, [r3, #3]
 800d954:	b298      	uxth	r0, r3
				interface->coordinatesChronoMinutes[Y],
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	791b      	ldrb	r3, [r3, #4]
		Paint_DrawPointer(interface->coordinatesChronoMinutes[X],
 800d95a:	b299      	uxth	r1, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
				interface->pointerAngleChronoMinutes,
				interface->pointerLengthChronoMinutes, 0,
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2225      	movs	r2, #37	; 0x25
 800d964:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesChronoMinutes[X],
 800d966:	b29d      	uxth	r5, r3
				interface->colorBackground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	2322      	movs	r3, #34	; 0x22
 800d96c:	33ff      	adds	r3, #255	; 0xff
 800d96e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawPointer(interface->coordinatesChronoMinutes[X],
 800d970:	b29b      	uxth	r3, r3
 800d972:	2200      	movs	r2, #0
 800d974:	9203      	str	r2, [sp, #12]
 800d976:	2201      	movs	r2, #1
 800d978:	9202      	str	r2, [sp, #8]
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	2300      	movs	r3, #0
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	002b      	movs	r3, r5
 800d982:	1c22      	adds	r2, r4, #0
 800d984:	f7fb f974 	bl	8008c70 <Paint_DrawPointer>

		//half hours dots
		for (uint8_t halfHours = (chrono->chrono.hour * 2)
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	7edb      	ldrb	r3, [r3, #27]
 800d98c:	b25b      	sxtb	r3, r3
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	18db      	adds	r3, r3, r3
 800d992:	b2dc      	uxtb	r4, r3
				+ (chrono->chrono.minute / 30); halfHours > 0; halfHours--) {
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	7f1b      	ldrb	r3, [r3, #28]
 800d998:	b25b      	sxtb	r3, r3
 800d99a:	211e      	movs	r1, #30
 800d99c:	0018      	movs	r0, r3
 800d99e:	f7f2 fc45 	bl	800022c <__divsi3>
 800d9a2:	0003      	movs	r3, r0
 800d9a4:	b25b      	sxtb	r3, r3
 800d9a6:	b2da      	uxtb	r2, r3
		for (uint8_t halfHours = (chrono->chrono.hour * 2)
 800d9a8:	2322      	movs	r3, #34	; 0x22
 800d9aa:	18fb      	adds	r3, r7, r3
 800d9ac:	18a2      	adds	r2, r4, r2
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e024      	b.n	800d9fc <interfaceDraw+0x1504>
			Paint_DrawPoint(
					interface->coordinatesChronoMinutes[X]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	78db      	ldrb	r3, [r3, #3]
 800d9b6:	b29a      	uxth	r2, r3
							- interface->pointerLengthChronoMinutes
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2125      	movs	r1, #37	; 0x25
 800d9bc:	5c5b      	ldrb	r3, [r3, r1]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	b29a      	uxth	r2, r3
			Paint_DrawPoint(
 800d9c4:	2422      	movs	r4, #34	; 0x22
 800d9c6:	193b      	adds	r3, r7, r4
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	18d3      	adds	r3, r2, r3
 800d9d2:	b298      	uxth	r0, r3
							+ (halfHours * 4),
					interface->coordinatesChronoMinutes[Y] - 5,
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	791b      	ldrb	r3, [r3, #4]
 800d9d8:	b29b      	uxth	r3, r3
			Paint_DrawPoint(
 800d9da:	3b05      	subs	r3, #5
 800d9dc:	b299      	uxth	r1, r3
					interface->colorBackground, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	2322      	movs	r3, #34	; 0x22
 800d9e2:	33ff      	adds	r3, #255	; 0xff
 800d9e4:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawPoint(
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	2302      	movs	r3, #2
 800d9ee:	f7fa ff77 	bl	80088e0 <Paint_DrawPoint>
				+ (chrono->chrono.minute / 30); halfHours > 0; halfHours--) {
 800d9f2:	193b      	adds	r3, r7, r4
 800d9f4:	781a      	ldrb	r2, [r3, #0]
 800d9f6:	193b      	adds	r3, r7, r4
 800d9f8:	3a01      	subs	r2, #1
 800d9fa:	701a      	strb	r2, [r3, #0]
		for (uint8_t halfHours = (chrono->chrono.hour * 2)
 800d9fc:	2322      	movs	r3, #34	; 0x22
 800d9fe:	18fb      	adds	r3, r7, r3
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1d5      	bne.n	800d9b2 <interfaceDraw+0x14ba>
		};

	}

	//			DATE
	if (interface->coordinatesDate[EN] == INTERFACE_ELEMENT_ENABLED) {
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	7ddb      	ldrb	r3, [r3, #23]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d13d      	bne.n	800da8a <interfaceDraw+0x1592>

		//window
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	7d5b      	ldrb	r3, [r3, #21]
 800da12:	b29b      	uxth	r3, r3
 800da14:	3b01      	subs	r3, #1
 800da16:	b298      	uxth	r0, r3
				interface->coordinatesDate[Y] - 3,
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	7d9b      	ldrb	r3, [r3, #22]
 800da1c:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800da1e:	3b03      	subs	r3, #3
 800da20:	b299      	uxth	r1, r3
				interface->coordinatesDate[X] + 24,
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	7d5b      	ldrb	r3, [r3, #21]
 800da26:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800da28:	3318      	adds	r3, #24
 800da2a:	b29c      	uxth	r4, r3
				interface->coordinatesDate[Y] + 18, interface->colorForeground,
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	7d9b      	ldrb	r3, [r3, #22]
 800da30:	b29b      	uxth	r3, r3
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800da32:	3312      	adds	r3, #18
 800da34:	b29d      	uxth	r5, r3
				interface->coordinatesDate[Y] + 18, interface->colorForeground,
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	2391      	movs	r3, #145	; 0x91
 800da3a:	005b      	lsls	r3, r3, #1
 800da3c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawRectangle(interface->coordinatesDate[X] - 1,
 800da3e:	b29b      	uxth	r3, r3
 800da40:	2200      	movs	r2, #0
 800da42:	9202      	str	r2, [sp, #8]
 800da44:	2202      	movs	r2, #2
 800da46:	9201      	str	r2, [sp, #4]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	002b      	movs	r3, r5
 800da4c:	0022      	movs	r2, r4
 800da4e:	f7fb f9f9 	bl	8008e44 <Paint_DrawRectangle>
				DOT_PIXEL_2X2, DRAW_FILL_EMPTY); // date window

		//value
		Paint_DrawNum(interface->coordinatesDate[X],
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	7d5b      	ldrb	r3, [r3, #21]
 800da56:	b298      	uxth	r0, r3
				interface->coordinatesDate[Y], chrono->actual.day, &Font16,
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawNum(interface->coordinatesDate[X],
 800da5c:	b29c      	uxth	r4, r3
				interface->coordinatesDate[Y], chrono->actual.day, &Font16,
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	789b      	ldrb	r3, [r3, #2]
 800da62:	b25b      	sxtb	r3, r3
		Paint_DrawNum(interface->coordinatesDate[X],
 800da64:	001d      	movs	r5, r3
				interface->colorForeground, interface->colorBackground); //date
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	2391      	movs	r3, #145	; 0x91
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesDate[X],
 800da6e:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground); //date
 800da70:	68f9      	ldr	r1, [r7, #12]
 800da72:	2222      	movs	r2, #34	; 0x22
 800da74:	32ff      	adds	r2, #255	; 0xff
 800da76:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesDate[X],
 800da78:	b292      	uxth	r2, r2
 800da7a:	4984      	ldr	r1, [pc, #528]	; (800dc8c <interfaceDraw+0x1794>)
 800da7c:	9201      	str	r2, [sp, #4]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	000b      	movs	r3, r1
 800da82:	002a      	movs	r2, r5
 800da84:	0021      	movs	r1, r4
 800da86:	f7fb fe5d 	bl	8009744 <Paint_DrawNum>

	}

	//			BAROMETER
	if (interface->coordinatesPressure[EN] == INTERFACE_ELEMENT_ENABLED) {
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	7c5b      	ldrb	r3, [r3, #17]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d000      	beq.n	800da94 <interfaceDraw+0x159c>
 800da92:	e0ae      	b.n	800dbf2 <interfaceDraw+0x16fa>

		//indexes
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	7bdb      	ldrb	r3, [r3, #15]
 800da98:	b29b      	uxth	r3, r3
 800da9a:	334d      	adds	r3, #77	; 0x4d
 800da9c:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 2, 975, &Font8,
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	7c1b      	ldrb	r3, [r3, #16]
 800daa2:	b29b      	uxth	r3, r3
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800daa4:	3302      	adds	r3, #2
 800daa6:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	2391      	movs	r3, #145	; 0x91
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800dab0:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800dab2:	68f9      	ldr	r1, [r7, #12]
 800dab4:	2222      	movs	r2, #34	; 0x22
 800dab6:	32ff      	adds	r2, #255	; 0xff
 800dab8:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesPressure[X] + 77,
 800daba:	b292      	uxth	r2, r2
 800dabc:	4974      	ldr	r1, [pc, #464]	; (800dc90 <interfaceDraw+0x1798>)
 800dabe:	4d75      	ldr	r5, [pc, #468]	; (800dc94 <interfaceDraw+0x179c>)
 800dac0:	9201      	str	r2, [sp, #4]
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	000b      	movs	r3, r1
 800dac6:	002a      	movs	r2, r5
 800dac8:	0021      	movs	r1, r4
 800daca:	f7fb fe3b 	bl	8009744 <Paint_DrawNum>
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	7bdb      	ldrb	r3, [r3, #15]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	334d      	adds	r3, #77	; 0x4d
 800dad6:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 11, "hPa", &Font8,
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	7c1b      	ldrb	r3, [r3, #16]
 800dadc:	b29b      	uxth	r3, r3
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800dade:	330b      	adds	r3, #11
 800dae0:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	2391      	movs	r3, #145	; 0x91
 800dae6:	005b      	lsls	r3, r3, #1
 800dae8:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800daea:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800daec:	68f9      	ldr	r1, [r7, #12]
 800daee:	2222      	movs	r2, #34	; 0x22
 800daf0:	32ff      	adds	r2, #255	; 0xff
 800daf2:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawString_EN(interface->coordinatesPressure[X] + 77,
 800daf4:	b292      	uxth	r2, r2
 800daf6:	4d66      	ldr	r5, [pc, #408]	; (800dc90 <interfaceDraw+0x1798>)
 800daf8:	4967      	ldr	r1, [pc, #412]	; (800dc98 <interfaceDraw+0x17a0>)
 800dafa:	9201      	str	r2, [sp, #4]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	002b      	movs	r3, r5
 800db00:	000a      	movs	r2, r1
 800db02:	0021      	movs	r1, r4
 800db04:	f7fb fda0 	bl	8009648 <Paint_DrawString_EN>
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	7bdb      	ldrb	r3, [r3, #15]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3302      	adds	r3, #2
 800db10:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 85, 1000, &Font8,
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	7c1b      	ldrb	r3, [r3, #16]
 800db16:	b29b      	uxth	r3, r3
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800db18:	3355      	adds	r3, #85	; 0x55
 800db1a:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	2391      	movs	r3, #145	; 0x91
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800db24:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800db26:	68f9      	ldr	r1, [r7, #12]
 800db28:	2222      	movs	r2, #34	; 0x22
 800db2a:	32ff      	adds	r2, #255	; 0xff
 800db2c:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesPressure[X] + 2,
 800db2e:	b292      	uxth	r2, r2
 800db30:	4d57      	ldr	r5, [pc, #348]	; (800dc90 <interfaceDraw+0x1798>)
 800db32:	21fa      	movs	r1, #250	; 0xfa
 800db34:	0089      	lsls	r1, r1, #2
 800db36:	9201      	str	r2, [sp, #4]
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	002b      	movs	r3, r5
 800db3c:	000a      	movs	r2, r1
 800db3e:	0021      	movs	r1, r4
 800db40:	f7fb fe00 	bl	8009744 <Paint_DrawNum>
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	7bdb      	ldrb	r3, [r3, #15]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	3b5f      	subs	r3, #95	; 0x5f
 800db4c:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y] + 2, 1025, &Font8,
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	7c1b      	ldrb	r3, [r3, #16]
 800db52:	b29b      	uxth	r3, r3
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800db54:	3302      	adds	r3, #2
 800db56:	b29c      	uxth	r4, r3
				interface->colorForeground, interface->colorBackground);
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	2391      	movs	r3, #145	; 0x91
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800db60:	b29b      	uxth	r3, r3
				interface->colorForeground, interface->colorBackground);
 800db62:	68f9      	ldr	r1, [r7, #12]
 800db64:	2222      	movs	r2, #34	; 0x22
 800db66:	32ff      	adds	r2, #255	; 0xff
 800db68:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawNum(interface->coordinatesPressure[X] - 95,
 800db6a:	b292      	uxth	r2, r2
 800db6c:	4948      	ldr	r1, [pc, #288]	; (800dc90 <interfaceDraw+0x1798>)
 800db6e:	4d4b      	ldr	r5, [pc, #300]	; (800dc9c <interfaceDraw+0x17a4>)
 800db70:	9201      	str	r2, [sp, #4]
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	000b      	movs	r3, r1
 800db76:	002a      	movs	r2, r5
 800db78:	0021      	movs	r1, r4
 800db7a:	f7fb fde3 	bl	8009744 <Paint_DrawNum>

		//pointer
		interface->pointerAnglePressure = 2 * 3.14 / 100
				* ((int32_t) atmospherical->pressureValue / 100 - 950 - 25);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	2164      	movs	r1, #100	; 0x64
 800db84:	0018      	movs	r0, r3
 800db86:	f7f2 fb51 	bl	800022c <__divsi3>
 800db8a:	0003      	movs	r3, r0
 800db8c:	4a44      	ldr	r2, [pc, #272]	; (800dca0 <interfaceDraw+0x17a8>)
 800db8e:	4694      	mov	ip, r2
 800db90:	4463      	add	r3, ip
 800db92:	0018      	movs	r0, r3
 800db94:	f7f5 f902 	bl	8002d9c <__aeabi_i2d>
 800db98:	4a42      	ldr	r2, [pc, #264]	; (800dca4 <interfaceDraw+0x17ac>)
 800db9a:	4b43      	ldr	r3, [pc, #268]	; (800dca8 <interfaceDraw+0x17b0>)
 800db9c:	f7f4 faac 	bl	80020f8 <__aeabi_dmul>
 800dba0:	0002      	movs	r2, r0
 800dba2:	000b      	movs	r3, r1
 800dba4:	0010      	movs	r0, r2
 800dba6:	0019      	movs	r1, r3
 800dba8:	f7f5 f996 	bl	8002ed8 <__aeabi_d2f>
 800dbac:	1c02      	adds	r2, r0, #0
		interface->pointerAnglePressure = 2 * 3.14 / 100
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	64da      	str	r2, [r3, #76]	; 0x4c

		Paint_DrawPointer(interface->coordinatesPressure[X],
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	7bdb      	ldrb	r3, [r3, #15]
 800dbb6:	b298      	uxth	r0, r3
				interface->coordinatesPressure[Y],
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	7c1b      	ldrb	r3, [r3, #16]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800dbbc:	b29c      	uxth	r4, r3
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
				interface->pointerAnglePressure,
				interface->pointerLengthPressure,
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2228      	movs	r2, #40	; 0x28
 800dbc6:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800dbc8:	b29e      	uxth	r6, r3
				interface->pointerShiftPressure, interface->colorForeground,
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	222d      	movs	r2, #45	; 0x2d
 800dbce:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800dbd0:	b29b      	uxth	r3, r3
				interface->pointerShiftPressure, interface->colorForeground,
 800dbd2:	68f9      	ldr	r1, [r7, #12]
 800dbd4:	2291      	movs	r2, #145	; 0x91
 800dbd6:	0052      	lsls	r2, r2, #1
 800dbd8:	5c8a      	ldrb	r2, [r1, r2]
		Paint_DrawPointer(interface->coordinatesPressure[X],
 800dbda:	b292      	uxth	r2, r2
 800dbdc:	2100      	movs	r1, #0
 800dbde:	9103      	str	r1, [sp, #12]
 800dbe0:	2103      	movs	r1, #3
 800dbe2:	9102      	str	r1, [sp, #8]
 800dbe4:	9201      	str	r2, [sp, #4]
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	0033      	movs	r3, r6
 800dbea:	1c2a      	adds	r2, r5, #0
 800dbec:	0021      	movs	r1, r4
 800dbee:	f7fb f83f 	bl	8008c70 <Paint_DrawPointer>
				DOT_PIXEL_3X3, LINE_STYLE_SOLID);
	}

	//			LOW BATTERY INDICATOR
	if (interface->coordinatesBatteryState[EN] == INTERFACE_ELEMENT_ENABLED) {
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	7e9b      	ldrb	r3, [r3, #26]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d11c      	bne.n	800dc34 <interfaceDraw+0x173c>

		if (watch->flagLowBattery) {
 800dbfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbfc:	791b      	ldrb	r3, [r3, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d018      	beq.n	800dc34 <interfaceDraw+0x173c>
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7e1b      	ldrb	r3, [r3, #24]
 800dc06:	b298      	uxth	r0, r3
					interface->coordinatesBatteryState[Y], "CHARGE", &Font12,
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	7e5b      	ldrb	r3, [r3, #25]
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800dc0c:	b29c      	uxth	r4, r3
					interface->colorForeground, interface->colorBackground);
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	2391      	movs	r3, #145	; 0x91
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	5cd3      	ldrb	r3, [r2, r3]
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800dc16:	b29b      	uxth	r3, r3
					interface->colorForeground, interface->colorBackground);
 800dc18:	68f9      	ldr	r1, [r7, #12]
 800dc1a:	2222      	movs	r2, #34	; 0x22
 800dc1c:	32ff      	adds	r2, #255	; 0xff
 800dc1e:	5c8a      	ldrb	r2, [r1, r2]
			Paint_DrawString_EN(interface->coordinatesBatteryState[X],
 800dc20:	b292      	uxth	r2, r2
 800dc22:	4d13      	ldr	r5, [pc, #76]	; (800dc70 <interfaceDraw+0x1778>)
 800dc24:	4921      	ldr	r1, [pc, #132]	; (800dcac <interfaceDraw+0x17b4>)
 800dc26:	9201      	str	r2, [sp, #4]
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	002b      	movs	r3, r5
 800dc2c:	000a      	movs	r2, r1
 800dc2e:	0021      	movs	r1, r4
 800dc30:	f7fb fd0a 	bl	8009648 <Paint_DrawString_EN>

	}

	//			MAIN BOARD
	//circle
	Paint_DrawCircle(interface->coordinatesMain[X],
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->radiusMain,
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800dc3e:	b299      	uxth	r1, r3
			interface->coordinatesMain[Y], interface->radiusMain,
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	7f9b      	ldrb	r3, [r3, #30]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800dc44:	b29c      	uxth	r4, r3
			interface->colorForeground, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	2391      	movs	r3, #145	; 0x91
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	2200      	movs	r2, #0
 800dc52:	9201      	str	r2, [sp, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	9200      	str	r2, [sp, #0]
 800dc58:	0022      	movs	r2, r4
 800dc5a:	f7fb f9bf 	bl	8008fdc <Paint_DrawCircle>

	//indexes - count angles

	uint8_t numberOfIndexesMain = sizeof(interface->indexAngleMain)
 800dc5e:	2311      	movs	r3, #17
 800dc60:	18fb      	adds	r3, r7, r3
 800dc62:	220c      	movs	r2, #12
 800dc64:	701a      	strb	r2, [r3, #0]
			/ sizeof(interface->indexAngleMain[0]);

	for (uint8_t i = 0; i < numberOfIndexesMain; i++) {
 800dc66:	2321      	movs	r3, #33	; 0x21
 800dc68:	18fb      	adds	r3, r7, r3
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	701a      	strb	r2, [r3, #0]
 800dc6e:	e054      	b.n	800dd1a <interfaceDraw+0x1822>
 800dc70:	20000008 	.word	0x20000008
 800dc74:	08011888 	.word	0x08011888
 800dc78:	0801188c 	.word	0x0801188c
 800dc7c:	08011890 	.word	0x08011890
 800dc80:	401e0000 	.word	0x401e0000
 800dc84:	46508dff 	.word	0x46508dff
 800dc88:	3fcacb6f 	.word	0x3fcacb6f
 800dc8c:	20000010 	.word	0x20000010
 800dc90:	20000028 	.word	0x20000028
 800dc94:	000003cf 	.word	0x000003cf
 800dc98:	08011894 	.word	0x08011894
 800dc9c:	00000401 	.word	0x00000401
 800dca0:	fffffc31 	.word	0xfffffc31
 800dca4:	2a305533 	.word	0x2a305533
 800dca8:	3fb013a9 	.word	0x3fb013a9
 800dcac:	08011898 	.word	0x08011898

		interface->indexAngleMain[i] = 2 * 3.14 / numberOfIndexesMain
 800dcb0:	2311      	movs	r3, #17
 800dcb2:	18fb      	adds	r3, r7, r3
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	0018      	movs	r0, r3
 800dcb8:	f7f5 f870 	bl	8002d9c <__aeabi_i2d>
 800dcbc:	0002      	movs	r2, r0
 800dcbe:	000b      	movs	r3, r1
 800dcc0:	481c      	ldr	r0, [pc, #112]	; (800dd34 <interfaceDraw+0x183c>)
 800dcc2:	491d      	ldr	r1, [pc, #116]	; (800dd38 <interfaceDraw+0x1840>)
 800dcc4:	f7f3 fe12 	bl	80018ec <__aeabi_ddiv>
 800dcc8:	0002      	movs	r2, r0
 800dcca:	000b      	movs	r3, r1
 800dccc:	0014      	movs	r4, r2
 800dcce:	001d      	movs	r5, r3
				* (i - (numberOfIndexesMain / 4));
 800dcd0:	2621      	movs	r6, #33	; 0x21
 800dcd2:	19bb      	adds	r3, r7, r6
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2211      	movs	r2, #17
 800dcd8:	18ba      	adds	r2, r7, r2
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	0892      	lsrs	r2, r2, #2
 800dcde:	b2d2      	uxtb	r2, r2
 800dce0:	1a9b      	subs	r3, r3, r2
 800dce2:	0018      	movs	r0, r3
 800dce4:	f7f5 f85a 	bl	8002d9c <__aeabi_i2d>
 800dce8:	0002      	movs	r2, r0
 800dcea:	000b      	movs	r3, r1
 800dcec:	0020      	movs	r0, r4
 800dcee:	0029      	movs	r1, r5
 800dcf0:	f7f4 fa02 	bl	80020f8 <__aeabi_dmul>
 800dcf4:	0002      	movs	r2, r0
 800dcf6:	000b      	movs	r3, r1
		interface->indexAngleMain[i] = 2 * 3.14 / numberOfIndexesMain
 800dcf8:	19b9      	adds	r1, r7, r6
 800dcfa:	780c      	ldrb	r4, [r1, #0]
				* (i - (numberOfIndexesMain / 4));
 800dcfc:	0010      	movs	r0, r2
 800dcfe:	0019      	movs	r1, r3
 800dd00:	f7f5 f8ea 	bl	8002ed8 <__aeabi_d2f>
 800dd04:	1c01      	adds	r1, r0, #0
		interface->indexAngleMain[i] = 2 * 3.14 / numberOfIndexesMain
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	0022      	movs	r2, r4
 800dd0a:	323c      	adds	r2, #60	; 0x3c
 800dd0c:	0092      	lsls	r2, r2, #2
 800dd0e:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < numberOfIndexesMain; i++) {
 800dd10:	19bb      	adds	r3, r7, r6
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	19bb      	adds	r3, r7, r6
 800dd16:	3201      	adds	r2, #1
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	2321      	movs	r3, #33	; 0x21
 800dd1c:	18fa      	adds	r2, r7, r3
 800dd1e:	2311      	movs	r3, #17
 800dd20:	18fb      	adds	r3, r7, r3
 800dd22:	7812      	ldrb	r2, [r2, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d3c2      	bcc.n	800dcb0 <interfaceDraw+0x17b8>
	};

	//indexes- draw
	for (uint8_t i = 1; i < numberOfIndexesMain; i++) {
 800dd2a:	2320      	movs	r3, #32
 800dd2c:	18fb      	adds	r3, r7, r3
 800dd2e:	2201      	movs	r2, #1
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	e0f5      	b.n	800df20 <interfaceDraw+0x1a28>
 800dd34:	51eb851f 	.word	0x51eb851f
 800dd38:	40191eb8 	.word	0x40191eb8

		Paint_DrawLine(
				cos(interface->indexAngleMain[i])
 800dd3c:	2320      	movs	r3, #32
 800dd3e:	18fb      	adds	r3, r7, r3
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	323c      	adds	r2, #60	; 0x3c
 800dd46:	0092      	lsls	r2, r2, #2
 800dd48:	58d3      	ldr	r3, [r2, r3]
 800dd4a:	1c18      	adds	r0, r3, #0
 800dd4c:	f7f5 f87c 	bl	8002e48 <__aeabi_f2d>
 800dd50:	0002      	movs	r2, r0
 800dd52:	000b      	movs	r3, r1
 800dd54:	0010      	movs	r0, r2
 800dd56:	0019      	movs	r1, r3
 800dd58:	f001 fef8 	bl	800fb4c <cos>
 800dd5c:	0004      	movs	r4, r0
 800dd5e:	000d      	movs	r5, r1
						* (interface->radiusMain - interface->indexLengthMain)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	7f9b      	ldrb	r3, [r3, #30]
 800dd64:	0019      	movs	r1, r3
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	222c      	movs	r2, #44	; 0x2c
 800dd6a:	5c9b      	ldrb	r3, [r3, r2]
 800dd6c:	1acb      	subs	r3, r1, r3
 800dd6e:	0018      	movs	r0, r3
 800dd70:	f7f5 f814 	bl	8002d9c <__aeabi_i2d>
 800dd74:	0002      	movs	r2, r0
 800dd76:	000b      	movs	r3, r1
 800dd78:	0020      	movs	r0, r4
 800dd7a:	0029      	movs	r1, r5
 800dd7c:	f7f4 f9bc 	bl	80020f8 <__aeabi_dmul>
 800dd80:	0002      	movs	r2, r0
 800dd82:	000b      	movs	r3, r1
 800dd84:	0014      	movs	r4, r2
 800dd86:	001d      	movs	r5, r3
						+ interface->coordinatesMain[X],
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	0018      	movs	r0, r3
 800dd8e:	f7f5 f805 	bl	8002d9c <__aeabi_i2d>
 800dd92:	0002      	movs	r2, r0
 800dd94:	000b      	movs	r3, r1
 800dd96:	0020      	movs	r0, r4
 800dd98:	0029      	movs	r1, r5
 800dd9a:	f7f3 fa3d 	bl	8001218 <__aeabi_dadd>
 800dd9e:	0002      	movs	r2, r0
 800dda0:	000b      	movs	r3, r1
		Paint_DrawLine(
 800dda2:	0010      	movs	r0, r2
 800dda4:	0019      	movs	r1, r3
 800dda6:	f7f2 fbcf 	bl	8000548 <__aeabi_d2uiz>
 800ddaa:	0003      	movs	r3, r0
 800ddac:	b29e      	uxth	r6, r3
				sin(interface->indexAngleMain[i])
 800ddae:	2320      	movs	r3, #32
 800ddb0:	18fb      	adds	r3, r7, r3
 800ddb2:	781a      	ldrb	r2, [r3, #0]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	323c      	adds	r2, #60	; 0x3c
 800ddb8:	0092      	lsls	r2, r2, #2
 800ddba:	58d3      	ldr	r3, [r2, r3]
 800ddbc:	1c18      	adds	r0, r3, #0
 800ddbe:	f7f5 f843 	bl	8002e48 <__aeabi_f2d>
 800ddc2:	0002      	movs	r2, r0
 800ddc4:	000b      	movs	r3, r1
 800ddc6:	0010      	movs	r0, r2
 800ddc8:	0019      	movs	r1, r3
 800ddca:	f001 ff01 	bl	800fbd0 <sin>
 800ddce:	0004      	movs	r4, r0
 800ddd0:	000d      	movs	r5, r1
						* (interface->radiusMain - interface->indexLengthMain)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	7f9b      	ldrb	r3, [r3, #30]
 800ddd6:	0019      	movs	r1, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	222c      	movs	r2, #44	; 0x2c
 800dddc:	5c9b      	ldrb	r3, [r3, r2]
 800ddde:	1acb      	subs	r3, r1, r3
 800dde0:	0018      	movs	r0, r3
 800dde2:	f7f4 ffdb 	bl	8002d9c <__aeabi_i2d>
 800dde6:	0002      	movs	r2, r0
 800dde8:	000b      	movs	r3, r1
 800ddea:	0020      	movs	r0, r4
 800ddec:	0029      	movs	r1, r5
 800ddee:	f7f4 f983 	bl	80020f8 <__aeabi_dmul>
 800ddf2:	0002      	movs	r2, r0
 800ddf4:	000b      	movs	r3, r1
 800ddf6:	0014      	movs	r4, r2
 800ddf8:	001d      	movs	r5, r3
						+ interface->coordinatesMain[Y],
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	0018      	movs	r0, r3
 800de00:	f7f4 ffcc 	bl	8002d9c <__aeabi_i2d>
 800de04:	0002      	movs	r2, r0
 800de06:	000b      	movs	r3, r1
 800de08:	0020      	movs	r0, r4
 800de0a:	0029      	movs	r1, r5
 800de0c:	f7f3 fa04 	bl	8001218 <__aeabi_dadd>
 800de10:	0002      	movs	r2, r0
 800de12:	000b      	movs	r3, r1
		Paint_DrawLine(
 800de14:	0010      	movs	r0, r2
 800de16:	0019      	movs	r1, r3
 800de18:	f7f2 fb96 	bl	8000548 <__aeabi_d2uiz>
 800de1c:	0003      	movs	r3, r0
 800de1e:	b29a      	uxth	r2, r3
 800de20:	4690      	mov	r8, r2

				cos(interface->indexAngleMain[i]) * (interface->radiusMain)
 800de22:	2320      	movs	r3, #32
 800de24:	18fb      	adds	r3, r7, r3
 800de26:	781a      	ldrb	r2, [r3, #0]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	323c      	adds	r2, #60	; 0x3c
 800de2c:	0092      	lsls	r2, r2, #2
 800de2e:	58d3      	ldr	r3, [r2, r3]
 800de30:	1c18      	adds	r0, r3, #0
 800de32:	f7f5 f809 	bl	8002e48 <__aeabi_f2d>
 800de36:	0002      	movs	r2, r0
 800de38:	000b      	movs	r3, r1
 800de3a:	0010      	movs	r0, r2
 800de3c:	0019      	movs	r1, r3
 800de3e:	f001 fe85 	bl	800fb4c <cos>
 800de42:	0004      	movs	r4, r0
 800de44:	000d      	movs	r5, r1
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	7f9b      	ldrb	r3, [r3, #30]
 800de4a:	0018      	movs	r0, r3
 800de4c:	f7f4 ffa6 	bl	8002d9c <__aeabi_i2d>
 800de50:	0002      	movs	r2, r0
 800de52:	000b      	movs	r3, r1
 800de54:	0020      	movs	r0, r4
 800de56:	0029      	movs	r1, r5
 800de58:	f7f4 f94e 	bl	80020f8 <__aeabi_dmul>
 800de5c:	0002      	movs	r2, r0
 800de5e:	000b      	movs	r3, r1
 800de60:	0014      	movs	r4, r2
 800de62:	001d      	movs	r5, r3
						+ interface->coordinatesMain[X],
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	0018      	movs	r0, r3
 800de6a:	f7f4 ff97 	bl	8002d9c <__aeabi_i2d>
 800de6e:	0002      	movs	r2, r0
 800de70:	000b      	movs	r3, r1
 800de72:	0020      	movs	r0, r4
 800de74:	0029      	movs	r1, r5
 800de76:	f7f3 f9cf 	bl	8001218 <__aeabi_dadd>
 800de7a:	0002      	movs	r2, r0
 800de7c:	000b      	movs	r3, r1
		Paint_DrawLine(
 800de7e:	0010      	movs	r0, r2
 800de80:	0019      	movs	r1, r3
 800de82:	f7f2 fb61 	bl	8000548 <__aeabi_d2uiz>
 800de86:	0003      	movs	r3, r0
 800de88:	b29a      	uxth	r2, r3
 800de8a:	4691      	mov	r9, r2
				sin(interface->indexAngleMain[i]) * (interface->radiusMain)
 800de8c:	2320      	movs	r3, #32
 800de8e:	18fb      	adds	r3, r7, r3
 800de90:	781a      	ldrb	r2, [r3, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	323c      	adds	r2, #60	; 0x3c
 800de96:	0092      	lsls	r2, r2, #2
 800de98:	58d3      	ldr	r3, [r2, r3]
 800de9a:	1c18      	adds	r0, r3, #0
 800de9c:	f7f4 ffd4 	bl	8002e48 <__aeabi_f2d>
 800dea0:	0002      	movs	r2, r0
 800dea2:	000b      	movs	r3, r1
 800dea4:	0010      	movs	r0, r2
 800dea6:	0019      	movs	r1, r3
 800dea8:	f001 fe92 	bl	800fbd0 <sin>
 800deac:	0004      	movs	r4, r0
 800deae:	000d      	movs	r5, r1
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	7f9b      	ldrb	r3, [r3, #30]
 800deb4:	0018      	movs	r0, r3
 800deb6:	f7f4 ff71 	bl	8002d9c <__aeabi_i2d>
 800deba:	0002      	movs	r2, r0
 800debc:	000b      	movs	r3, r1
 800debe:	0020      	movs	r0, r4
 800dec0:	0029      	movs	r1, r5
 800dec2:	f7f4 f919 	bl	80020f8 <__aeabi_dmul>
 800dec6:	0002      	movs	r2, r0
 800dec8:	000b      	movs	r3, r1
 800deca:	0014      	movs	r4, r2
 800decc:	001d      	movs	r5, r3
						+ interface->coordinatesMain[Y],
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	785b      	ldrb	r3, [r3, #1]
 800ded2:	0018      	movs	r0, r3
 800ded4:	f7f4 ff62 	bl	8002d9c <__aeabi_i2d>
 800ded8:	0002      	movs	r2, r0
 800deda:	000b      	movs	r3, r1
 800dedc:	0020      	movs	r0, r4
 800dede:	0029      	movs	r1, r5
 800dee0:	f7f3 f99a 	bl	8001218 <__aeabi_dadd>
 800dee4:	0002      	movs	r2, r0
 800dee6:	000b      	movs	r3, r1
		Paint_DrawLine(
 800dee8:	0010      	movs	r0, r2
 800deea:	0019      	movs	r1, r3
 800deec:	f7f2 fb2c 	bl	8000548 <__aeabi_d2uiz>
 800def0:	0003      	movs	r3, r0
 800def2:	b299      	uxth	r1, r3
				interface->colorForeground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	2391      	movs	r3, #145	; 0x91
 800def8:	005b      	lsls	r3, r3, #1
 800defa:	5cd3      	ldrb	r3, [r2, r3]
		Paint_DrawLine(
 800defc:	b29b      	uxth	r3, r3
 800defe:	2200      	movs	r2, #0
 800df00:	9202      	str	r2, [sp, #8]
 800df02:	2201      	movs	r2, #1
 800df04:	9201      	str	r2, [sp, #4]
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	000b      	movs	r3, r1
 800df0a:	464a      	mov	r2, r9
 800df0c:	4641      	mov	r1, r8
 800df0e:	0030      	movs	r0, r6
 800df10:	f7fa fdd0 	bl	8008ab4 <Paint_DrawLine>
	for (uint8_t i = 1; i < numberOfIndexesMain; i++) {
 800df14:	2120      	movs	r1, #32
 800df16:	187b      	adds	r3, r7, r1
 800df18:	781a      	ldrb	r2, [r3, #0]
 800df1a:	187b      	adds	r3, r7, r1
 800df1c:	3201      	adds	r2, #1
 800df1e:	701a      	strb	r2, [r3, #0]
 800df20:	2320      	movs	r3, #32
 800df22:	18fa      	adds	r2, r7, r3
 800df24:	2311      	movs	r3, #17
 800df26:	18fb      	adds	r3, r7, r3
 800df28:	7812      	ldrb	r2, [r2, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d200      	bcs.n	800df32 <interfaceDraw+0x1a3a>
 800df30:	e704      	b.n	800dd3c <interfaceDraw+0x1844>

	}

	//hour shadow
	interface->pointerAngleHours = 2 * 3.14 / 60
			* ((chrono->actual.hour * 5 + (chrono->actual.minute / 10)) - 15);
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	78db      	ldrb	r3, [r3, #3]
 800df36:	b25b      	sxtb	r3, r3
 800df38:	001a      	movs	r2, r3
 800df3a:	0013      	movs	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	189c      	adds	r4, r3, r2
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	791b      	ldrb	r3, [r3, #4]
 800df44:	b25b      	sxtb	r3, r3
 800df46:	210a      	movs	r1, #10
 800df48:	0018      	movs	r0, r3
 800df4a:	f7f2 f96f 	bl	800022c <__divsi3>
 800df4e:	0003      	movs	r3, r0
 800df50:	b25b      	sxtb	r3, r3
 800df52:	18e3      	adds	r3, r4, r3
 800df54:	3b0f      	subs	r3, #15
 800df56:	0018      	movs	r0, r3
 800df58:	f7f4 ff20 	bl	8002d9c <__aeabi_i2d>
 800df5c:	4a98      	ldr	r2, [pc, #608]	; (800e1c0 <interfaceDraw+0x1cc8>)
 800df5e:	4b99      	ldr	r3, [pc, #612]	; (800e1c4 <interfaceDraw+0x1ccc>)
 800df60:	f7f4 f8ca 	bl	80020f8 <__aeabi_dmul>
 800df64:	0002      	movs	r2, r0
 800df66:	000b      	movs	r3, r1
 800df68:	0010      	movs	r0, r2
 800df6a:	0019      	movs	r1, r3
 800df6c:	f7f4 ffb4 	bl	8002ed8 <__aeabi_d2f>
 800df70:	1c02      	adds	r2, r0, #0
	interface->pointerAngleHours = 2 * 3.14 / 60
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	631a      	str	r2, [r3, #48]	; 0x30

	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	68f9      	ldr	r1, [r7, #12]
 800df7e:	2390      	movs	r3, #144	; 0x90
 800df80:	005b      	lsls	r3, r3, #1
 800df82:	5ccb      	ldrb	r3, [r1, r3]
 800df84:	b29b      	uxth	r3, r3
 800df86:	18d3      	adds	r3, r2, r3
 800df88:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y] + interface->shadowShift,
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	785b      	ldrb	r3, [r3, #1]
 800df8e:	b29a      	uxth	r2, r3
 800df90:	68f9      	ldr	r1, [r7, #12]
 800df92:	2390      	movs	r3, #144	; 0x90
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	5ccb      	ldrb	r3, [r1, r3]
 800df98:	b29b      	uxth	r3, r3
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800df9a:	18d3      	adds	r3, r2, r3
 800df9c:	b299      	uxth	r1, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
			interface->pointerAngleHours, interface->pointerLengthHours, 0,
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2222      	movs	r2, #34	; 0x22
 800dfa6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800dfa8:	b29d      	uxth	r5, r3
			interface->colorBackground, DOT_PIXEL_3X3, LINE_STYLE_SOLID);
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	2322      	movs	r3, #34	; 0x22
 800dfae:	33ff      	adds	r3, #255	; 0xff
 800dfb0:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	9203      	str	r2, [sp, #12]
 800dfb8:	2203      	movs	r2, #3
 800dfba:	9202      	str	r2, [sp, #8]
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	002b      	movs	r3, r5
 800dfc4:	1c22      	adds	r2, r4, #0
 800dfc6:	f7fa fe53 	bl	8008c70 <Paint_DrawPointer>
	//hour pointer
	Paint_DrawPointer(interface->coordinatesMain[X],
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->pointerAngleHours,
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800dfd4:	b299      	uxth	r1, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
			interface->pointerLengthHours, 0, interface->colorForeground,
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2222      	movs	r2, #34	; 0x22
 800dfde:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800dfe0:	b29d      	uxth	r5, r3
			interface->pointerLengthHours, 0, interface->colorForeground,
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	2391      	movs	r3, #145	; 0x91
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	2200      	movs	r2, #0
 800dfee:	9203      	str	r2, [sp, #12]
 800dff0:	2203      	movs	r2, #3
 800dff2:	9202      	str	r2, [sp, #8]
 800dff4:	9301      	str	r3, [sp, #4]
 800dff6:	2300      	movs	r3, #0
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	002b      	movs	r3, r5
 800dffc:	1c22      	adds	r2, r4, #0
 800dffe:	f7fa fe37 	bl	8008c70 <Paint_DrawPointer>
			DOT_PIXEL_3X3, LINE_STYLE_SOLID);

	//minute shadow
	interface->pointerAngleMinutes = 2 * 3.14 / 60
			* (chrono->actual.minute - 15);
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	791b      	ldrb	r3, [r3, #4]
 800e006:	b25b      	sxtb	r3, r3
 800e008:	3b0f      	subs	r3, #15
 800e00a:	0018      	movs	r0, r3
 800e00c:	f7f4 fec6 	bl	8002d9c <__aeabi_i2d>
 800e010:	4a6b      	ldr	r2, [pc, #428]	; (800e1c0 <interfaceDraw+0x1cc8>)
 800e012:	4b6c      	ldr	r3, [pc, #432]	; (800e1c4 <interfaceDraw+0x1ccc>)
 800e014:	f7f4 f870 	bl	80020f8 <__aeabi_dmul>
 800e018:	0002      	movs	r2, r0
 800e01a:	000b      	movs	r3, r1
 800e01c:	0010      	movs	r0, r2
 800e01e:	0019      	movs	r1, r3
 800e020:	f7f4 ff5a 	bl	8002ed8 <__aeabi_d2f>
 800e024:	1c02      	adds	r2, r0, #0
	interface->pointerAngleMinutes = 2 * 3.14 / 60
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	635a      	str	r2, [r3, #52]	; 0x34
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	b29a      	uxth	r2, r3
 800e030:	68f9      	ldr	r1, [r7, #12]
 800e032:	2390      	movs	r3, #144	; 0x90
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	5ccb      	ldrb	r3, [r1, r3]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	18d3      	adds	r3, r2, r3
 800e03c:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y] + interface->shadowShift,
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	785b      	ldrb	r3, [r3, #1]
 800e042:	b29a      	uxth	r2, r3
 800e044:	68f9      	ldr	r1, [r7, #12]
 800e046:	2390      	movs	r3, #144	; 0x90
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	5ccb      	ldrb	r3, [r1, r3]
 800e04c:	b29b      	uxth	r3, r3
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e04e:	18d3      	adds	r3, r2, r3
 800e050:	b299      	uxth	r1, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6b5c      	ldr	r4, [r3, #52]	; 0x34
			interface->pointerAngleMinutes, interface->pointerLengthMinutes, 0,
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2223      	movs	r2, #35	; 0x23
 800e05a:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e05c:	b29d      	uxth	r5, r3
			interface->colorBackground, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	2322      	movs	r3, #34	; 0x22
 800e062:	33ff      	adds	r3, #255	; 0xff
 800e064:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e066:	b29b      	uxth	r3, r3
 800e068:	2200      	movs	r2, #0
 800e06a:	9203      	str	r2, [sp, #12]
 800e06c:	2202      	movs	r2, #2
 800e06e:	9202      	str	r2, [sp, #8]
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	2300      	movs	r3, #0
 800e074:	9300      	str	r3, [sp, #0]
 800e076:	002b      	movs	r3, r5
 800e078:	1c22      	adds	r2, r4, #0
 800e07a:	f7fa fdf9 	bl	8008c70 <Paint_DrawPointer>

	//minute pointer
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->pointerAngleMinutes,
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e088:	b299      	uxth	r1, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
			interface->pointerLengthMinutes, 0, interface->colorForeground,
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2223      	movs	r2, #35	; 0x23
 800e092:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e094:	b29d      	uxth	r5, r3
			interface->pointerLengthMinutes, 0, interface->colorForeground,
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	2391      	movs	r3, #145	; 0x91
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	9203      	str	r2, [sp, #12]
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	9202      	str	r2, [sp, #8]
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	002b      	movs	r3, r5
 800e0b0:	1c22      	adds	r2, r4, #0
 800e0b2:	f7fa fddd 	bl	8008c70 <Paint_DrawPointer>
			DOT_PIXEL_2X2, LINE_STYLE_SOLID);

	//chrono seconds pointer
	interface->pointerAngleChronoSeconds = 2 * 3.14 / 60
			* (chrono->chrono.second - 15);
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	7f5b      	ldrb	r3, [r3, #29]
 800e0ba:	b25b      	sxtb	r3, r3
 800e0bc:	3b0f      	subs	r3, #15
 800e0be:	0018      	movs	r0, r3
 800e0c0:	f7f4 fe6c 	bl	8002d9c <__aeabi_i2d>
 800e0c4:	4a3e      	ldr	r2, [pc, #248]	; (800e1c0 <interfaceDraw+0x1cc8>)
 800e0c6:	4b3f      	ldr	r3, [pc, #252]	; (800e1c4 <interfaceDraw+0x1ccc>)
 800e0c8:	f7f4 f816 	bl	80020f8 <__aeabi_dmul>
 800e0cc:	0002      	movs	r2, r0
 800e0ce:	000b      	movs	r3, r1
 800e0d0:	0010      	movs	r0, r2
 800e0d2:	0019      	movs	r1, r3
 800e0d4:	f7f4 ff00 	bl	8002ed8 <__aeabi_d2f>
 800e0d8:	1c02      	adds	r2, r0, #0
	interface->pointerAngleChronoSeconds = 2 * 3.14 / 60
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	63da      	str	r2, [r3, #60]	; 0x3c

	Paint_DrawPointer(interface->coordinatesMain[X],
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], interface->pointerAngleChronoSeconds,
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e0e8:	b299      	uxth	r1, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
			interface->pointerLengthChronoSeconds, 0,
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2224      	movs	r2, #36	; 0x24
 800e0f2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e0f4:	b29d      	uxth	r5, r3
			interface->colorBackground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	2322      	movs	r3, #34	; 0x22
 800e0fa:	33ff      	adds	r3, #255	; 0xff
 800e0fc:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X],
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	2200      	movs	r2, #0
 800e102:	9203      	str	r2, [sp, #12]
 800e104:	2201      	movs	r2, #1
 800e106:	9202      	str	r2, [sp, #8]
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	2300      	movs	r3, #0
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	002b      	movs	r3, r5
 800e110:	1c22      	adds	r2, r4, #0
 800e112:	f7fa fdad 	bl	8008c70 <Paint_DrawPointer>
	//chrono seconds shadow
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	68f9      	ldr	r1, [r7, #12]
 800e11e:	2390      	movs	r3, #144	; 0x90
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	5ccb      	ldrb	r3, [r1, r3]
 800e124:	b29b      	uxth	r3, r3
 800e126:	18d3      	adds	r3, r2, r3
 800e128:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y] + interface->shadowShift,
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	785b      	ldrb	r3, [r3, #1]
 800e12e:	b29a      	uxth	r2, r3
 800e130:	68f9      	ldr	r1, [r7, #12]
 800e132:	2390      	movs	r3, #144	; 0x90
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	5ccb      	ldrb	r3, [r1, r3]
 800e138:	b29b      	uxth	r3, r3
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e13a:	18d3      	adds	r3, r2, r3
 800e13c:	b299      	uxth	r1, r3
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
			interface->pointerAngleChronoSeconds,
			interface->pointerLengthChronoSeconds, 0,
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2224      	movs	r2, #36	; 0x24
 800e146:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e148:	b29d      	uxth	r5, r3
			interface->colorForeground, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	2391      	movs	r3, #145	; 0x91
 800e14e:	005b      	lsls	r3, r3, #1
 800e150:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawPointer(interface->coordinatesMain[X] + interface->shadowShift,
 800e152:	b29b      	uxth	r3, r3
 800e154:	2200      	movs	r2, #0
 800e156:	9203      	str	r2, [sp, #12]
 800e158:	2201      	movs	r2, #1
 800e15a:	9202      	str	r2, [sp, #8]
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	2300      	movs	r3, #0
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	002b      	movs	r3, r5
 800e164:	1c22      	adds	r2, r4, #0
 800e166:	f7fa fd83 	bl	8008c70 <Paint_DrawPointer>

	//dot
	Paint_DrawCircle(interface->coordinatesMain[X],
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], 8, interface->colorForeground,
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800e174:	b299      	uxth	r1, r3
			interface->coordinatesMain[Y], 8, interface->colorForeground,
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	2391      	movs	r3, #145	; 0x91
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800e17e:	b29b      	uxth	r3, r3
 800e180:	2201      	movs	r2, #1
 800e182:	9201      	str	r2, [sp, #4]
 800e184:	2202      	movs	r2, #2
 800e186:	9200      	str	r2, [sp, #0]
 800e188:	2208      	movs	r2, #8
 800e18a:	f7fa ff27 	bl	8008fdc <Paint_DrawCircle>
			DOT_PIXEL_2X2, DRAW_FILL_FULL);
	Paint_DrawCircle(interface->coordinatesMain[X],
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	b298      	uxth	r0, r3
			interface->coordinatesMain[Y], 2, interface->colorBackground,
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	785b      	ldrb	r3, [r3, #1]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800e198:	b299      	uxth	r1, r3
			interface->coordinatesMain[Y], 2, interface->colorBackground,
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	2322      	movs	r3, #34	; 0x22
 800e19e:	33ff      	adds	r3, #255	; 0xff
 800e1a0:	5cd3      	ldrb	r3, [r2, r3]
	Paint_DrawCircle(interface->coordinatesMain[X],
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	9201      	str	r2, [sp, #4]
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	9200      	str	r2, [sp, #0]
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	f7fa ff15 	bl	8008fdc <Paint_DrawCircle>
			DOT_PIXEL_2X2, DRAW_FILL_FULL);

}
 800e1b2:	46c0      	nop			; (mov r8, r8)
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	b00b      	add	sp, #44	; 0x2c
 800e1b8:	bcc0      	pop	{r6, r7}
 800e1ba:	46b9      	mov	r9, r7
 800e1bc:	46b0      	mov	r8, r6
 800e1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1c0:	46508dff 	.word	0x46508dff
 800e1c4:	3fbacb6f 	.word	0x3fbacb6f

0800e1c8 <interfaceSettingsDraw>:

void interfaceSettingsDraw(interfaceSettingsTypeDef *settings,
		RTCChronoTypeDef *chrono, lis3mdlTypeDef *magnetometer,
		bme280TypeDef *atmospherical, watchTypeDef *watch) {
 800e1c8:	b5b0      	push	{r4, r5, r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af04      	add	r7, sp, #16
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	603b      	str	r3, [r7, #0]

	//			temperature
	if (atmospherical->temperatureValue < 0) {
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	da38      	bge.n	800e250 <interfaceSettingsDraw+0x88>
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	7e1b      	ldrb	r3, [r3, #24]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	3b08      	subs	r3, #8
 800e1e6:	b298      	uxth	r0, r3
				settings->coordinatesTemperature[Y], '-', &Font16,
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	7e5b      	ldrb	r3, [r3, #25]
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800e1ec:	b299      	uxth	r1, r3
				settings->colorForeground, settings->colorBackground);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2221      	movs	r2, #33	; 0x21
 800e1f2:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800e1f4:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	2420      	movs	r4, #32
 800e1fa:	5d12      	ldrb	r2, [r2, r4]
		Paint_DrawChar(settings->coordinatesTemperature[X] - 8,
 800e1fc:	b292      	uxth	r2, r2
 800e1fe:	4c81      	ldr	r4, [pc, #516]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e200:	9201      	str	r2, [sp, #4]
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	0023      	movs	r3, r4
 800e206:	222d      	movs	r2, #45	; 0x2d
 800e208:	f7fb f93a 	bl	8009480 <Paint_DrawChar>
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	7e1b      	ldrb	r3, [r3, #24]
 800e210:	b29c      	uxth	r4, r3
				settings->coordinatesTemperature[Y],
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	7e5b      	ldrb	r3, [r3, #25]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e216:	b29d      	uxth	r5, r3
				abs(atmospherical->temperatureValueCompensated / 100), &Font16,
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	69db      	ldr	r3, [r3, #28]
 800e21c:	2164      	movs	r1, #100	; 0x64
 800e21e:	0018      	movs	r0, r3
 800e220:	f7f2 f804 	bl	800022c <__divsi3>
 800e224:	0003      	movs	r3, r0
 800e226:	17da      	asrs	r2, r3, #31
 800e228:	1899      	adds	r1, r3, r2
 800e22a:	4051      	eors	r1, r2
				settings->colorForeground, settings->colorBackground);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2221      	movs	r2, #33	; 0x21
 800e230:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e232:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	2020      	movs	r0, #32
 800e238:	5c12      	ldrb	r2, [r2, r0]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e23a:	b292      	uxth	r2, r2
 800e23c:	4871      	ldr	r0, [pc, #452]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e23e:	9201      	str	r2, [sp, #4]
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	0003      	movs	r3, r0
 800e244:	000a      	movs	r2, r1
 800e246:	0029      	movs	r1, r5
 800e248:	0020      	movs	r0, r4
 800e24a:	f7fb fa7b 	bl	8009744 <Paint_DrawNum>
 800e24e:	e01e      	b.n	800e28e <interfaceSettingsDraw+0xc6>
	} else {
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	7e1b      	ldrb	r3, [r3, #24]
 800e254:	b29c      	uxth	r4, r3
				settings->coordinatesTemperature[Y],
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	7e5b      	ldrb	r3, [r3, #25]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e25a:	b29d      	uxth	r5, r3
				atmospherical->temperatureValueCompensated / 100, &Font16,
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	69db      	ldr	r3, [r3, #28]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e260:	2164      	movs	r1, #100	; 0x64
 800e262:	0018      	movs	r0, r3
 800e264:	f7f1 ffe2 	bl	800022c <__divsi3>
 800e268:	0003      	movs	r3, r0
 800e26a:	0018      	movs	r0, r3
				settings->colorForeground, settings->colorBackground);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2221      	movs	r2, #33	; 0x21
 800e270:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e272:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	2120      	movs	r1, #32
 800e278:	5c52      	ldrb	r2, [r2, r1]
		Paint_DrawNum(settings->coordinatesTemperature[X],
 800e27a:	b292      	uxth	r2, r2
 800e27c:	4961      	ldr	r1, [pc, #388]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e27e:	9201      	str	r2, [sp, #4]
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	000b      	movs	r3, r1
 800e284:	0002      	movs	r2, r0
 800e286:	0029      	movs	r1, r5
 800e288:	0020      	movs	r0, r4
 800e28a:	f7fb fa5b 	bl	8009744 <Paint_DrawNum>
	}

	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	7e1b      	ldrb	r3, [r3, #24]
 800e292:	b29b      	uxth	r3, r3
 800e294:	3319      	adds	r3, #25
 800e296:	b298      	uxth	r0, r3
			settings->coordinatesTemperature[Y], 'C', &Font16,
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	7e5b      	ldrb	r3, [r3, #25]
	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800e29c:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2221      	movs	r2, #33	; 0x21
 800e2a2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800e2a4:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	2420      	movs	r4, #32
 800e2aa:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesTemperature[X] + 25,
 800e2ac:	b292      	uxth	r2, r2
 800e2ae:	4c55      	ldr	r4, [pc, #340]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e2b0:	9201      	str	r2, [sp, #4]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	0023      	movs	r3, r4
 800e2b6:	2243      	movs	r2, #67	; 0x43
 800e2b8:	f7fb f8e2 	bl	8009480 <Paint_DrawChar>

	//			humidity
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	7e9b      	ldrb	r3, [r3, #26]
 800e2c0:	b298      	uxth	r0, r3
			settings->coordinatesHumidity[Y], atmospherical->humidityValue,
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	7edb      	ldrb	r3, [r3, #27]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800e2c6:	b299      	uxth	r1, r3
			settings->coordinatesHumidity[Y], atmospherical->humidityValue,
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	68db      	ldr	r3, [r3, #12]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800e2cc:	001d      	movs	r5, r3
			&Font16, settings->colorForeground, settings->colorBackground);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2221      	movs	r2, #33	; 0x21
 800e2d2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800e2d4:	b29b      	uxth	r3, r3
			&Font16, settings->colorForeground, settings->colorBackground);
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	2420      	movs	r4, #32
 800e2da:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesHumidity[X],
 800e2dc:	b292      	uxth	r2, r2
 800e2de:	4c49      	ldr	r4, [pc, #292]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e2e0:	9201      	str	r2, [sp, #4]
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	0023      	movs	r3, r4
 800e2e6:	002a      	movs	r2, r5
 800e2e8:	f7fb fa2c 	bl	8009744 <Paint_DrawNum>
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	7e9b      	ldrb	r3, [r3, #26]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	3319      	adds	r3, #25
 800e2f4:	b298      	uxth	r0, r3
			settings->coordinatesHumidity[Y], '%', &Font16,
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	7edb      	ldrb	r3, [r3, #27]
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800e2fa:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2221      	movs	r2, #33	; 0x21
 800e300:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800e302:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	2420      	movs	r4, #32
 800e308:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesHumidity[X] + 25,
 800e30a:	b292      	uxth	r2, r2
 800e30c:	4c3d      	ldr	r4, [pc, #244]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e30e:	9201      	str	r2, [sp, #4]
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	0023      	movs	r3, r4
 800e314:	2225      	movs	r2, #37	; 0x25
 800e316:	f7fb f8b3 	bl	8009480 <Paint_DrawChar>

	//pressure
	Paint_DrawNum(settings->coordinatesPressure[X],
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	7f1b      	ldrb	r3, [r3, #28]
 800e31e:	b29c      	uxth	r4, r3
			settings->coordinatesPressure[Y],
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	7f5b      	ldrb	r3, [r3, #29]
	Paint_DrawNum(settings->coordinatesPressure[X],
 800e324:	b29d      	uxth	r5, r3
			atmospherical->pressureValue / 100, &Font16,
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	2164      	movs	r1, #100	; 0x64
 800e32c:	0018      	movs	r0, r3
 800e32e:	f7f1 fef3 	bl	8000118 <__udivsi3>
 800e332:	0003      	movs	r3, r0
	Paint_DrawNum(settings->coordinatesPressure[X],
 800e334:	0018      	movs	r0, r3
			settings->colorForeground, settings->colorBackground);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2221      	movs	r2, #33	; 0x21
 800e33a:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesPressure[X],
 800e33c:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	2120      	movs	r1, #32
 800e342:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawNum(settings->coordinatesPressure[X],
 800e344:	b292      	uxth	r2, r2
 800e346:	492f      	ldr	r1, [pc, #188]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e348:	9201      	str	r2, [sp, #4]
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	000b      	movs	r3, r1
 800e34e:	0002      	movs	r2, r0
 800e350:	0029      	movs	r1, r5
 800e352:	0020      	movs	r0, r4
 800e354:	f7fb f9f6 	bl	8009744 <Paint_DrawNum>

	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	7f1b      	ldrb	r3, [r3, #28]
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	3332      	adds	r3, #50	; 0x32
 800e360:	b298      	uxth	r0, r3
			settings->coordinatesPressure[Y], "hPa", &Font16,
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	7f5b      	ldrb	r3, [r3, #29]
	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800e366:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2221      	movs	r2, #33	; 0x21
 800e36c:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800e36e:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	2420      	movs	r4, #32
 800e374:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawString_EN(settings->coordinatesPressure[X] + 50,
 800e376:	b292      	uxth	r2, r2
 800e378:	4d22      	ldr	r5, [pc, #136]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e37a:	4c23      	ldr	r4, [pc, #140]	; (800e408 <interfaceSettingsDraw+0x240>)
 800e37c:	9201      	str	r2, [sp, #4]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	002b      	movs	r3, r5
 800e382:	0022      	movs	r2, r4
 800e384:	f7fb f960 	bl	8009648 <Paint_DrawString_EN>

	//altitude
	if (atmospherical->altitudeValue < 0) {
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	da3d      	bge.n	800e40c <interfaceSettingsDraw+0x244>
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	7f9b      	ldrb	r3, [r3, #30]
 800e394:	b29b      	uxth	r3, r3
 800e396:	3b08      	subs	r3, #8
 800e398:	b298      	uxth	r0, r3
				settings->coordinatesAltitude[Y], '-', &Font16,
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800e39e:	b299      	uxth	r1, r3
				settings->colorForeground, settings->colorBackground);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2221      	movs	r2, #33	; 0x21
 800e3a4:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800e3a6:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	2420      	movs	r4, #32
 800e3ac:	5d12      	ldrb	r2, [r2, r4]
		Paint_DrawChar(settings->coordinatesAltitude[X] - 8,
 800e3ae:	b292      	uxth	r2, r2
 800e3b0:	4c14      	ldr	r4, [pc, #80]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e3b2:	9201      	str	r2, [sp, #4]
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	0023      	movs	r3, r4
 800e3b8:	222d      	movs	r2, #45	; 0x2d
 800e3ba:	f7fb f861 	bl	8009480 <Paint_DrawChar>
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	7f9b      	ldrb	r3, [r3, #30]
 800e3c2:	b29c      	uxth	r4, r3
				settings->coordinatesAltitude[Y],
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e3c8:	b29d      	uxth	r5, r3
				abs(atmospherical->altitudeValue / 100), &Font16,
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	2164      	movs	r1, #100	; 0x64
 800e3d0:	0018      	movs	r0, r3
 800e3d2:	f7f1 ff2b 	bl	800022c <__divsi3>
 800e3d6:	0003      	movs	r3, r0
 800e3d8:	17da      	asrs	r2, r3, #31
 800e3da:	1899      	adds	r1, r3, r2
 800e3dc:	4051      	eors	r1, r2
				settings->colorForeground, settings->colorBackground);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2221      	movs	r2, #33	; 0x21
 800e3e2:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e3e4:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	2020      	movs	r0, #32
 800e3ea:	5c12      	ldrb	r2, [r2, r0]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e3ec:	b292      	uxth	r2, r2
 800e3ee:	4805      	ldr	r0, [pc, #20]	; (800e404 <interfaceSettingsDraw+0x23c>)
 800e3f0:	9201      	str	r2, [sp, #4]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	0003      	movs	r3, r0
 800e3f6:	000a      	movs	r2, r1
 800e3f8:	0029      	movs	r1, r5
 800e3fa:	0020      	movs	r0, r4
 800e3fc:	f7fb f9a2 	bl	8009744 <Paint_DrawNum>
 800e400:	e023      	b.n	800e44a <interfaceSettingsDraw+0x282>
 800e402:	46c0      	nop			; (mov r8, r8)
 800e404:	20000010 	.word	0x20000010
 800e408:	08011894 	.word	0x08011894
	} else {
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	7f9b      	ldrb	r3, [r3, #30]
 800e410:	b29c      	uxth	r4, r3
				settings->coordinatesAltitude[Y],
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	7fdb      	ldrb	r3, [r3, #31]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e416:	b29d      	uxth	r5, r3
				atmospherical->altitudeValue / 100, &Font16,
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	691b      	ldr	r3, [r3, #16]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e41c:	2164      	movs	r1, #100	; 0x64
 800e41e:	0018      	movs	r0, r3
 800e420:	f7f1 ff04 	bl	800022c <__divsi3>
 800e424:	0003      	movs	r3, r0
 800e426:	0018      	movs	r0, r3
				settings->colorForeground, settings->colorBackground);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2221      	movs	r2, #33	; 0x21
 800e42c:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e42e:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	2120      	movs	r1, #32
 800e434:	5c52      	ldrb	r2, [r2, r1]
		Paint_DrawNum(settings->coordinatesAltitude[X],
 800e436:	b292      	uxth	r2, r2
 800e438:	49d1      	ldr	r1, [pc, #836]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e43a:	9201      	str	r2, [sp, #4]
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	000b      	movs	r3, r1
 800e440:	0002      	movs	r2, r0
 800e442:	0029      	movs	r1, r5
 800e444:	0020      	movs	r0, r4
 800e446:	f7fb f97d 	bl	8009744 <Paint_DrawNum>
	}

	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	7f9b      	ldrb	r3, [r3, #30]
 800e44e:	b29b      	uxth	r3, r3
 800e450:	3332      	adds	r3, #50	; 0x32
 800e452:	b298      	uxth	r0, r3
			settings->coordinatesAltitude[Y], 'm', &Font16,
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	7fdb      	ldrb	r3, [r3, #31]
	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800e458:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2221      	movs	r2, #33	; 0x21
 800e45e:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800e460:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	2420      	movs	r4, #32
 800e466:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesAltitude[X] + 50,
 800e468:	b292      	uxth	r2, r2
 800e46a:	4cc5      	ldr	r4, [pc, #788]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e46c:	9201      	str	r2, [sp, #4]
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	0023      	movs	r3, r4
 800e472:	226d      	movs	r2, #109	; 0x6d
 800e474:	f7fb f804 	bl	8009480 <Paint_DrawChar>

	//hours
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	b298      	uxth	r0, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	785b      	ldrb	r3, [r3, #1]
 800e482:	b299      	uxth	r1, r3
			chrono->actual.hour, &Font20, settings->colorForeground,
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	78db      	ldrb	r3, [r3, #3]
 800e488:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800e48a:	001d      	movs	r5, r3
			chrono->actual.hour, &Font20, settings->colorForeground,
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2221      	movs	r2, #33	; 0x21
 800e490:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800e492:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	2420      	movs	r4, #32
 800e498:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesHours[X], settings->coordinatesHours[Y],
 800e49a:	b292      	uxth	r2, r2
 800e49c:	4cb9      	ldr	r4, [pc, #740]	; (800e784 <interfaceSettingsDraw+0x5bc>)
 800e49e:	9201      	str	r2, [sp, #4]
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	0023      	movs	r3, r4
 800e4a4:	002a      	movs	r2, r5
 800e4a6:	f7fb f94d 	bl	8009744 <Paint_DrawNum>

	//minutes
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	78db      	ldrb	r3, [r3, #3]
 800e4ae:	b298      	uxth	r0, r3
			settings->coordinatesMinutes[Y], chrono->actual.minute, &Font20,
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	791b      	ldrb	r3, [r3, #4]
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800e4b4:	b299      	uxth	r1, r3
			settings->coordinatesMinutes[Y], chrono->actual.minute, &Font20,
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	791b      	ldrb	r3, [r3, #4]
 800e4ba:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800e4bc:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2221      	movs	r2, #33	; 0x21
 800e4c2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800e4c4:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	2420      	movs	r4, #32
 800e4ca:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesMinutes[X],
 800e4cc:	b292      	uxth	r2, r2
 800e4ce:	4cad      	ldr	r4, [pc, #692]	; (800e784 <interfaceSettingsDraw+0x5bc>)
 800e4d0:	9201      	str	r2, [sp, #4]
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	0023      	movs	r3, r4
 800e4d6:	002a      	movs	r2, r5
 800e4d8:	f7fb f934 	bl	8009744 <Paint_DrawNum>
	//seconds
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	799b      	ldrb	r3, [r3, #6]
 800e4e0:	b298      	uxth	r0, r3
			settings->coordinatesSeconds[Y], chrono->actual.second, &Font20,
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	79db      	ldrb	r3, [r3, #7]
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800e4e6:	b299      	uxth	r1, r3
			settings->coordinatesSeconds[Y], chrono->actual.second, &Font20,
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	795b      	ldrb	r3, [r3, #5]
 800e4ec:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800e4ee:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2221      	movs	r2, #33	; 0x21
 800e4f4:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800e4f6:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	2420      	movs	r4, #32
 800e4fc:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesSeconds[X],
 800e4fe:	b292      	uxth	r2, r2
 800e500:	4ca0      	ldr	r4, [pc, #640]	; (800e784 <interfaceSettingsDraw+0x5bc>)
 800e502:	9201      	str	r2, [sp, #4]
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	0023      	movs	r3, r4
 800e508:	002a      	movs	r2, r5
 800e50a:	f7fb f91b 	bl	8009744 <Paint_DrawNum>

	//days
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	7a5b      	ldrb	r3, [r3, #9]
 800e512:	b298      	uxth	r0, r3
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	7a9b      	ldrb	r3, [r3, #10]
 800e518:	b299      	uxth	r1, r3
			chrono->actual.day, &Font20, settings->colorForeground,
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	789b      	ldrb	r3, [r3, #2]
 800e51e:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800e520:	001d      	movs	r5, r3
			chrono->actual.day, &Font20, settings->colorForeground,
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2221      	movs	r2, #33	; 0x21
 800e526:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800e528:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	2420      	movs	r4, #32
 800e52e:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesDays[X], settings->coordinatesDays[Y],
 800e530:	b292      	uxth	r2, r2
 800e532:	4c94      	ldr	r4, [pc, #592]	; (800e784 <interfaceSettingsDraw+0x5bc>)
 800e534:	9201      	str	r2, [sp, #4]
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	0023      	movs	r3, r4
 800e53a:	002a      	movs	r2, r5
 800e53c:	f7fb f902 	bl	8009744 <Paint_DrawNum>
	//months
	Paint_DrawNum(settings->coordinatesMonths[X],
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	7b1b      	ldrb	r3, [r3, #12]
 800e544:	b298      	uxth	r0, r3
			settings->coordinatesMonths[Y], chrono->actual.month, &Font20,
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	7b5b      	ldrb	r3, [r3, #13]
	Paint_DrawNum(settings->coordinatesMonths[X],
 800e54a:	b299      	uxth	r1, r3
			settings->coordinatesMonths[Y], chrono->actual.month, &Font20,
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	785b      	ldrb	r3, [r3, #1]
 800e550:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesMonths[X],
 800e552:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2221      	movs	r2, #33	; 0x21
 800e558:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesMonths[X],
 800e55a:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	2420      	movs	r4, #32
 800e560:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesMonths[X],
 800e562:	b292      	uxth	r2, r2
 800e564:	4c87      	ldr	r4, [pc, #540]	; (800e784 <interfaceSettingsDraw+0x5bc>)
 800e566:	9201      	str	r2, [sp, #4]
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	0023      	movs	r3, r4
 800e56c:	002a      	movs	r2, r5
 800e56e:	f7fb f8e9 	bl	8009744 <Paint_DrawNum>
	//years
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	7bdb      	ldrb	r3, [r3, #15]
 800e576:	b298      	uxth	r0, r3
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	7c1b      	ldrb	r3, [r3, #16]
 800e57c:	b299      	uxth	r1, r3
			chrono->actual.year, &Font20, settings->colorForeground,
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	b25b      	sxtb	r3, r3
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800e584:	001d      	movs	r5, r3
			chrono->actual.year, &Font20, settings->colorForeground,
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2221      	movs	r2, #33	; 0x21
 800e58a:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800e58c:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	2420      	movs	r4, #32
 800e592:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesYears[X], settings->coordinatesYears[Y],
 800e594:	b292      	uxth	r2, r2
 800e596:	4c7b      	ldr	r4, [pc, #492]	; (800e784 <interfaceSettingsDraw+0x5bc>)
 800e598:	9201      	str	r2, [sp, #4]
 800e59a:	9300      	str	r3, [sp, #0]
 800e59c:	0023      	movs	r3, r4
 800e59e:	002a      	movs	r2, r5
 800e5a0:	f7fb f8d0 	bl	8009744 <Paint_DrawNum>

	//Pressure ref
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	7c9b      	ldrb	r3, [r3, #18]
 800e5a8:	b298      	uxth	r0, r3
			settings->coordinatesPressureReference[Y],
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	7cdb      	ldrb	r3, [r3, #19]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800e5ae:	b299      	uxth	r1, r3
			atmospherical->pressureReference, &Font16,
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	695b      	ldr	r3, [r3, #20]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800e5b4:	001d      	movs	r5, r3
			settings->colorForeground, settings->colorBackground);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2221      	movs	r2, #33	; 0x21
 800e5ba:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800e5bc:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	2420      	movs	r4, #32
 800e5c2:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawNum(settings->coordinatesPressureReference[X],
 800e5c4:	b292      	uxth	r2, r2
 800e5c6:	4c6e      	ldr	r4, [pc, #440]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e5c8:	9201      	str	r2, [sp, #4]
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	0023      	movs	r3, r4
 800e5ce:	002a      	movs	r2, r5
 800e5d0:	f7fb f8b8 	bl	8009744 <Paint_DrawNum>
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	7c9b      	ldrb	r3, [r3, #18]
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	3332      	adds	r3, #50	; 0x32
 800e5dc:	b298      	uxth	r0, r3
			settings->coordinatesPressureReference[Y], "hPa", &Font16,
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	7cdb      	ldrb	r3, [r3, #19]
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800e5e2:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2221      	movs	r2, #33	; 0x21
 800e5e8:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800e5ea:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	2420      	movs	r4, #32
 800e5f0:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawString_EN(settings->coordinatesPressureReference[X] + 50,
 800e5f2:	b292      	uxth	r2, r2
 800e5f4:	4d62      	ldr	r5, [pc, #392]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e5f6:	4c64      	ldr	r4, [pc, #400]	; (800e788 <interfaceSettingsDraw+0x5c0>)
 800e5f8:	9201      	str	r2, [sp, #4]
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	002b      	movs	r3, r5
 800e5fe:	0022      	movs	r2, r4
 800e600:	f7fb f822 	bl	8009648 <Paint_DrawString_EN>

	//temperature compensation
	if (atmospherical->temperatureOffset < 0) {
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da31      	bge.n	800e670 <interfaceSettingsDraw+0x4a8>
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	7d5b      	ldrb	r3, [r3, #21]
 800e610:	b29b      	uxth	r3, r3
 800e612:	3b08      	subs	r3, #8
 800e614:	b298      	uxth	r0, r3
				settings->coordinatesTemperatureCompensation[Y], '-', &Font16,
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800e61a:	b299      	uxth	r1, r3
				settings->colorForeground, settings->colorBackground);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2221      	movs	r2, #33	; 0x21
 800e620:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800e622:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	2420      	movs	r4, #32
 800e628:	5d12      	ldrb	r2, [r2, r4]
		Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] - 8,
 800e62a:	b292      	uxth	r2, r2
 800e62c:	4c54      	ldr	r4, [pc, #336]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e62e:	9201      	str	r2, [sp, #4]
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	0023      	movs	r3, r4
 800e634:	222d      	movs	r2, #45	; 0x2d
 800e636:	f7fa ff23 	bl	8009480 <Paint_DrawChar>
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	7d5b      	ldrb	r3, [r3, #21]
 800e63e:	b298      	uxth	r0, r3
				settings->coordinatesTemperatureCompensation[Y],
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e644:	b299      	uxth	r1, r3
				abs(atmospherical->temperatureOffset), &Font16,
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	699b      	ldr	r3, [r3, #24]
 800e64a:	17da      	asrs	r2, r3, #31
 800e64c:	189c      	adds	r4, r3, r2
 800e64e:	4054      	eors	r4, r2
				settings->colorForeground, settings->colorBackground);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2221      	movs	r2, #33	; 0x21
 800e654:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e656:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	2520      	movs	r5, #32
 800e65c:	5d52      	ldrb	r2, [r2, r5]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e65e:	b292      	uxth	r2, r2
 800e660:	4d47      	ldr	r5, [pc, #284]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e662:	9201      	str	r2, [sp, #4]
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	002b      	movs	r3, r5
 800e668:	0022      	movs	r2, r4
 800e66a:	f7fb f86b 	bl	8009744 <Paint_DrawNum>
 800e66e:	e016      	b.n	800e69e <interfaceSettingsDraw+0x4d6>
	} else {
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	7d5b      	ldrb	r3, [r3, #21]
 800e674:	b298      	uxth	r0, r3
				settings->coordinatesTemperatureCompensation[Y],
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	7d9b      	ldrb	r3, [r3, #22]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e67a:	b299      	uxth	r1, r3
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	699c      	ldr	r4, [r3, #24]
				atmospherical->temperatureOffset, &Font16,
				settings->colorForeground, settings->colorBackground);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2221      	movs	r2, #33	; 0x21
 800e684:	5c9b      	ldrb	r3, [r3, r2]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e686:	b29b      	uxth	r3, r3
				settings->colorForeground, settings->colorBackground);
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	2520      	movs	r5, #32
 800e68c:	5d52      	ldrb	r2, [r2, r5]
		Paint_DrawNum(settings->coordinatesTemperatureCompensation[X],
 800e68e:	b292      	uxth	r2, r2
 800e690:	4d3b      	ldr	r5, [pc, #236]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e692:	9201      	str	r2, [sp, #4]
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	002b      	movs	r3, r5
 800e698:	0022      	movs	r2, r4
 800e69a:	f7fb f853 	bl	8009744 <Paint_DrawNum>
	}

	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	7d5b      	ldrb	r3, [r3, #21]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	3319      	adds	r3, #25
 800e6a6:	b298      	uxth	r0, r3
			settings->coordinatesTemperatureCompensation[Y], 'C', &Font16,
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	7d9b      	ldrb	r3, [r3, #22]
	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800e6ac:	b299      	uxth	r1, r3
			settings->colorForeground, settings->colorBackground);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2221      	movs	r2, #33	; 0x21
 800e6b2:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800e6b4:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	2420      	movs	r4, #32
 800e6ba:	5d12      	ldrb	r2, [r2, r4]
	Paint_DrawChar(settings->coordinatesTemperatureCompensation[X] + 25,
 800e6bc:	b292      	uxth	r2, r2
 800e6be:	4c30      	ldr	r4, [pc, #192]	; (800e780 <interfaceSettingsDraw+0x5b8>)
 800e6c0:	9201      	str	r2, [sp, #4]
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	0023      	movs	r3, r4
 800e6c6:	2243      	movs	r2, #67	; 0x43
 800e6c8:	f7fa feda 	bl	8009480 <Paint_DrawChar>

	//actual setting marker

	uint8_t markerPosition[2] = { 0, 0 };
 800e6cc:	2314      	movs	r3, #20
 800e6ce:	18fb      	adds	r3, r7, r3
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	801a      	strh	r2, [r3, #0]

	switch (watch->settingsItem) {
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	78db      	ldrb	r3, [r3, #3]
 800e6d8:	2b08      	cmp	r3, #8
 800e6da:	d86b      	bhi.n	800e7b4 <interfaceSettingsDraw+0x5ec>
 800e6dc:	009a      	lsls	r2, r3, #2
 800e6de:	4b2b      	ldr	r3, [pc, #172]	; (800e78c <interfaceSettingsDraw+0x5c4>)
 800e6e0:	18d3      	adds	r3, r2, r3
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	469f      	mov	pc, r3

	case WATCH_SETTINGS_ITEM_HOUR:
		memcpy(markerPosition, settings->coordinatesHours, 2);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2214      	movs	r2, #20
 800e6ea:	18ba      	adds	r2, r7, r2
 800e6ec:	0010      	movs	r0, r2
 800e6ee:	0019      	movs	r1, r3
 800e6f0:	2302      	movs	r3, #2
 800e6f2:	001a      	movs	r2, r3
 800e6f4:	f000 f9fe 	bl	800eaf4 <memcpy>
		break;
 800e6f8:	e05c      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_MINUTE:
		memcpy(markerPosition, settings->coordinatesMinutes, 2);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3303      	adds	r3, #3
 800e6fe:	2214      	movs	r2, #20
 800e700:	18ba      	adds	r2, r7, r2
 800e702:	0010      	movs	r0, r2
 800e704:	0019      	movs	r1, r3
 800e706:	2302      	movs	r3, #2
 800e708:	001a      	movs	r2, r3
 800e70a:	f000 f9f3 	bl	800eaf4 <memcpy>
		break;
 800e70e:	e051      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_SECOND:
		memcpy(markerPosition, settings->coordinatesSeconds, 2);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	3306      	adds	r3, #6
 800e714:	2214      	movs	r2, #20
 800e716:	18ba      	adds	r2, r7, r2
 800e718:	0010      	movs	r0, r2
 800e71a:	0019      	movs	r1, r3
 800e71c:	2302      	movs	r3, #2
 800e71e:	001a      	movs	r2, r3
 800e720:	f000 f9e8 	bl	800eaf4 <memcpy>
		break;
 800e724:	e046      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_DAY:
		memcpy(markerPosition, settings->coordinatesDays, 2);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3309      	adds	r3, #9
 800e72a:	2214      	movs	r2, #20
 800e72c:	18ba      	adds	r2, r7, r2
 800e72e:	0010      	movs	r0, r2
 800e730:	0019      	movs	r1, r3
 800e732:	2302      	movs	r3, #2
 800e734:	001a      	movs	r2, r3
 800e736:	f000 f9dd 	bl	800eaf4 <memcpy>
		break;
 800e73a:	e03b      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_MONTH:
		memcpy(markerPosition, settings->coordinatesMonths, 2);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	330c      	adds	r3, #12
 800e740:	2214      	movs	r2, #20
 800e742:	18ba      	adds	r2, r7, r2
 800e744:	0010      	movs	r0, r2
 800e746:	0019      	movs	r1, r3
 800e748:	2302      	movs	r3, #2
 800e74a:	001a      	movs	r2, r3
 800e74c:	f000 f9d2 	bl	800eaf4 <memcpy>
		break;
 800e750:	e030      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_YEAR:
		memcpy(markerPosition, settings->coordinatesYears, 2);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	330f      	adds	r3, #15
 800e756:	2214      	movs	r2, #20
 800e758:	18ba      	adds	r2, r7, r2
 800e75a:	0010      	movs	r0, r2
 800e75c:	0019      	movs	r1, r3
 800e75e:	2302      	movs	r3, #2
 800e760:	001a      	movs	r2, r3
 800e762:	f000 f9c7 	bl	800eaf4 <memcpy>
		break;
 800e766:	e025      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
	case WATCH_SETTINGS_ITEM_PREF:
		memcpy(markerPosition, settings->coordinatesPressureReference, 2);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3312      	adds	r3, #18
 800e76c:	2214      	movs	r2, #20
 800e76e:	18ba      	adds	r2, r7, r2
 800e770:	0010      	movs	r0, r2
 800e772:	0019      	movs	r1, r3
 800e774:	2302      	movs	r3, #2
 800e776:	001a      	movs	r2, r3
 800e778:	f000 f9bc 	bl	800eaf4 <memcpy>
		break;
 800e77c:	e01a      	b.n	800e7b4 <interfaceSettingsDraw+0x5ec>
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	20000010 	.word	0x20000010
 800e784:	20000018 	.word	0x20000018
 800e788:	08011894 	.word	0x08011894
 800e78c:	08015750 	.word	0x08015750
	case WATCH_SETTINGS_ITEM_TOFFSET:
		memcpy(markerPosition, settings->coordinatesTemperatureCompensation, 2);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3315      	adds	r3, #21
 800e794:	2414      	movs	r4, #20
 800e796:	193a      	adds	r2, r7, r4
 800e798:	0010      	movs	r0, r2
 800e79a:	0019      	movs	r1, r3
 800e79c:	2302      	movs	r3, #2
 800e79e:	001a      	movs	r2, r3
 800e7a0:	f000 f9a8 	bl	800eaf4 <memcpy>
		markerPosition[X] = markerPosition[X] - 7;
 800e7a4:	0021      	movs	r1, r4
 800e7a6:	187b      	adds	r3, r7, r1
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	3b07      	subs	r3, #7
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	187b      	adds	r3, r7, r1
 800e7b0:	701a      	strb	r2, [r3, #0]
		break;
 800e7b2:	46c0      	nop			; (mov r8, r8)

	}

	Paint_DrawPoint(markerPosition[X] - 2, markerPosition[Y] + 7,
 800e7b4:	2214      	movs	r2, #20
 800e7b6:	18bb      	adds	r3, r7, r2
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	3b02      	subs	r3, #2
 800e7be:	b298      	uxth	r0, r3
 800e7c0:	18bb      	adds	r3, r7, r2
 800e7c2:	785b      	ldrb	r3, [r3, #1]
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	3307      	adds	r3, #7
 800e7c8:	b299      	uxth	r1, r3
			settings->colorForeground, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2221      	movs	r2, #33	; 0x21
 800e7ce:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawPoint(markerPosition[X] - 2, markerPosition[Y] + 7,
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	f7fa f882 	bl	80088e0 <Paint_DrawPoint>
	Paint_DrawNum(100, 100, watch->settingsItem, &Font16,
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	78db      	ldrb	r3, [r3, #3]
 800e7e0:	0018      	movs	r0, r3
			settings->colorForeground, settings->colorBackground);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2221      	movs	r2, #33	; 0x21
 800e7e6:	5c9b      	ldrb	r3, [r3, r2]
	Paint_DrawNum(100, 100, watch->settingsItem, &Font16,
 800e7e8:	b29b      	uxth	r3, r3
			settings->colorForeground, settings->colorBackground);
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	2120      	movs	r1, #32
 800e7ee:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawNum(100, 100, watch->settingsItem, &Font16,
 800e7f0:	b292      	uxth	r2, r2
 800e7f2:	493f      	ldr	r1, [pc, #252]	; (800e8f0 <interfaceSettingsDraw+0x728>)
 800e7f4:	9201      	str	r2, [sp, #4]
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	000b      	movs	r3, r1
 800e7fa:	0002      	movs	r2, r0
 800e7fc:	2164      	movs	r1, #100	; 0x64
 800e7fe:	2064      	movs	r0, #100	; 0x64
 800e800:	f7fa ffa0 	bl	8009744 <Paint_DrawNum>

	//net
//	Paint_DrawLine(130, 0, 130, 200, settings->colorForeground, DOT_PIXEL_2X2, LINE_STYLE_SOLID);
	Paint_DrawRectangle(130, 0, 200, 200, settings->colorForeground,
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2221      	movs	r2, #33	; 0x21
 800e808:	5c9b      	ldrb	r3, [r3, r2]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	2201      	movs	r2, #1
 800e80e:	9202      	str	r2, [sp, #8]
 800e810:	2201      	movs	r2, #1
 800e812:	9201      	str	r2, [sp, #4]
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	23c8      	movs	r3, #200	; 0xc8
 800e818:	22c8      	movs	r2, #200	; 0xc8
 800e81a:	2100      	movs	r1, #0
 800e81c:	2082      	movs	r0, #130	; 0x82
 800e81e:	f7fa fb11 	bl	8008e44 <Paint_DrawRectangle>
			DOT_PIXEL_1X1, DRAW_FILL_FULL);
	Paint_DrawLine(0, 75, 200, 75, settings->colorForeground, DOT_PIXEL_3X3,
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2221      	movs	r2, #33	; 0x21
 800e826:	5c9b      	ldrb	r3, [r3, r2]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	2200      	movs	r2, #0
 800e82c:	9202      	str	r2, [sp, #8]
 800e82e:	2203      	movs	r2, #3
 800e830:	9201      	str	r2, [sp, #4]
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	234b      	movs	r3, #75	; 0x4b
 800e836:	22c8      	movs	r2, #200	; 0xc8
 800e838:	214b      	movs	r1, #75	; 0x4b
 800e83a:	2000      	movs	r0, #0
 800e83c:	f7fa f93a 	bl	8008ab4 <Paint_DrawLine>
			LINE_STYLE_SOLID);
	Paint_DrawLine(0, 120, 200, 120, settings->colorForeground, DOT_PIXEL_3X3,
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2221      	movs	r2, #33	; 0x21
 800e844:	5c9b      	ldrb	r3, [r3, r2]
 800e846:	b29b      	uxth	r3, r3
 800e848:	2200      	movs	r2, #0
 800e84a:	9202      	str	r2, [sp, #8]
 800e84c:	2203      	movs	r2, #3
 800e84e:	9201      	str	r2, [sp, #4]
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	2378      	movs	r3, #120	; 0x78
 800e854:	22c8      	movs	r2, #200	; 0xc8
 800e856:	2178      	movs	r1, #120	; 0x78
 800e858:	2000      	movs	r0, #0
 800e85a:	f7fa f92b 	bl	8008ab4 <Paint_DrawLine>
			LINE_STYLE_SOLID);

	//sensors labels
	Paint_DrawChar(160, 30, '+', &Font24, settings->colorBackground,
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2220      	movs	r2, #32
 800e862:	5c9b      	ldrb	r3, [r3, r2]
 800e864:	b29b      	uxth	r3, r3
			settings->colorForeground);
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	2121      	movs	r1, #33	; 0x21
 800e86a:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawChar(160, 30, '+', &Font24, settings->colorBackground,
 800e86c:	b292      	uxth	r2, r2
 800e86e:	4921      	ldr	r1, [pc, #132]	; (800e8f4 <interfaceSettingsDraw+0x72c>)
 800e870:	9201      	str	r2, [sp, #4]
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	000b      	movs	r3, r1
 800e876:	222b      	movs	r2, #43	; 0x2b
 800e878:	211e      	movs	r1, #30
 800e87a:	20a0      	movs	r0, #160	; 0xa0
 800e87c:	f7fa fe00 	bl	8009480 <Paint_DrawChar>
	Paint_DrawChar(180, 90, '-', &Font24, settings->colorBackground,
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2220      	movs	r2, #32
 800e884:	5c9b      	ldrb	r3, [r3, r2]
 800e886:	b29b      	uxth	r3, r3
			settings->colorForeground);
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	2121      	movs	r1, #33	; 0x21
 800e88c:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawChar(180, 90, '-', &Font24, settings->colorBackground,
 800e88e:	b292      	uxth	r2, r2
 800e890:	4918      	ldr	r1, [pc, #96]	; (800e8f4 <interfaceSettingsDraw+0x72c>)
 800e892:	9201      	str	r2, [sp, #4]
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	000b      	movs	r3, r1
 800e898:	222d      	movs	r2, #45	; 0x2d
 800e89a:	215a      	movs	r1, #90	; 0x5a
 800e89c:	20b4      	movs	r0, #180	; 0xb4
 800e89e:	f7fa fdef 	bl	8009480 <Paint_DrawChar>
	Paint_DrawChar(160, 150, '>', &Font24, settings->colorBackground,
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2220      	movs	r2, #32
 800e8a6:	5c9b      	ldrb	r3, [r3, r2]
 800e8a8:	b29b      	uxth	r3, r3
			settings->colorForeground);
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	2121      	movs	r1, #33	; 0x21
 800e8ae:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawChar(160, 150, '>', &Font24, settings->colorBackground,
 800e8b0:	b292      	uxth	r2, r2
 800e8b2:	4910      	ldr	r1, [pc, #64]	; (800e8f4 <interfaceSettingsDraw+0x72c>)
 800e8b4:	9201      	str	r2, [sp, #4]
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	000b      	movs	r3, r1
 800e8ba:	223e      	movs	r2, #62	; 0x3e
 800e8bc:	2196      	movs	r1, #150	; 0x96
 800e8be:	20a0      	movs	r0, #160	; 0xa0
 800e8c0:	f7fa fdde 	bl	8009480 <Paint_DrawChar>

	//logo
	Paint_DrawString_EN(60, 175, "libra", &Font16, settings->colorForeground,
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2221      	movs	r2, #33	; 0x21
 800e8c8:	5c9b      	ldrb	r3, [r3, r2]
 800e8ca:	b29b      	uxth	r3, r3
			settings->colorBackground);
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	2120      	movs	r1, #32
 800e8d0:	5c52      	ldrb	r2, [r2, r1]
	Paint_DrawString_EN(60, 175, "libra", &Font16, settings->colorForeground,
 800e8d2:	b292      	uxth	r2, r2
 800e8d4:	4806      	ldr	r0, [pc, #24]	; (800e8f0 <interfaceSettingsDraw+0x728>)
 800e8d6:	4908      	ldr	r1, [pc, #32]	; (800e8f8 <interfaceSettingsDraw+0x730>)
 800e8d8:	9201      	str	r2, [sp, #4]
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	0003      	movs	r3, r0
 800e8de:	000a      	movs	r2, r1
 800e8e0:	21af      	movs	r1, #175	; 0xaf
 800e8e2:	203c      	movs	r0, #60	; 0x3c
 800e8e4:	f7fa feb0 	bl	8009648 <Paint_DrawString_EN>

}
 800e8e8:	46c0      	nop			; (mov r8, r8)
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	b006      	add	sp, #24
 800e8ee:	bdb0      	pop	{r4, r5, r7, pc}
 800e8f0:	20000010 	.word	0x20000010
 800e8f4:	20000020 	.word	0x20000020
 800e8f8:	0801185c 	.word	0x0801185c

0800e8fc <goodNight>:
 *      Author: bartosz
 */

#include <tacho/sleep.h>

void goodNight(void) {
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	af00      	add	r7, sp, #0
	//enter sleep mode
	HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, 0);
 800e900:	4b0d      	ldr	r3, [pc, #52]	; (800e938 <goodNight+0x3c>)
 800e902:	2200      	movs	r2, #0
 800e904:	2140      	movs	r1, #64	; 0x40
 800e906:	0018      	movs	r0, r3
 800e908:	f7f6 f8b1 	bl	8004a6e <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 800e90c:	f7f4 fe1e 	bl	800354c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800e910:	2380      	movs	r3, #128	; 0x80
 800e912:	01db      	lsls	r3, r3, #7
 800e914:	2101      	movs	r1, #1
 800e916:	0018      	movs	r0, r3
 800e918:	f7f6 ff72 	bl	8005800 <HAL_PWR_EnterSTOPMode>

	//on wake up
	HAL_ResumeTick();
 800e91c:	f7f4 fe24 	bl	8003568 <HAL_ResumeTick>
	SystemClock_Config();
 800e920:	f7fb fb2a 	bl	8009f78 <SystemClock_Config>
	HAL_GPIO_WritePin(LED_WKUP_GPIO_Port, LED_WKUP_Pin, 1);
 800e924:	4b04      	ldr	r3, [pc, #16]	; (800e938 <goodNight+0x3c>)
 800e926:	2201      	movs	r2, #1
 800e928:	2140      	movs	r1, #64	; 0x40
 800e92a:	0018      	movs	r0, r3
 800e92c:	f7f6 f89f 	bl	8004a6e <HAL_GPIO_WritePin>
}
 800e930:	46c0      	nop			; (mov r8, r8)
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	46c0      	nop			; (mov r8, r8)
 800e938:	50000400 	.word	0x50000400

0800e93c <HAL_TIM_PeriodElapsedCallback>:

#include <tacho/watch.h>

extern watchTypeDef watch;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a17      	ldr	r2, [pc, #92]	; (800e9a8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d127      	bne.n	800e99e <HAL_TIM_PeriodElapsedCallback+0x62>

		//auto turn-off settings after 5 seconds
	if (watch.mode == WATCH_MODE_SETTINGS) {
 800e94e:	4b17      	ldr	r3, [pc, #92]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d112      	bne.n	800e97c <HAL_TIM_PeriodElapsedCallback+0x40>
		watch.counterSettingsMode++;
 800e956:	4b15      	ldr	r3, [pc, #84]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e958:	785b      	ldrb	r3, [r3, #1]
 800e95a:	3301      	adds	r3, #1
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e960:	705a      	strb	r2, [r3, #1]
		if(watch.counterSettingsMode > WATCH_TIME_SETTINGS_MODE) {
 800e962:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e964:	785b      	ldrb	r3, [r3, #1]
 800e966:	2b05      	cmp	r3, #5
 800e968:	d919      	bls.n	800e99e <HAL_TIM_PeriodElapsedCallback+0x62>
			watchSwitchMode(&watch, WATCH_MODE_NORMAL);
 800e96a:	4b10      	ldr	r3, [pc, #64]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e96c:	2100      	movs	r1, #0
 800e96e:	0018      	movs	r0, r3
 800e970:	f000 f83b 	bl	800e9ea <watchSwitchMode>
			watch.counterSettingsMode = 0;
 800e974:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e976:	2200      	movs	r2, #0
 800e978:	705a      	strb	r2, [r3, #1]
			watch.counterDontSleepTimer = WATCH_TIME_DONT_SLEEP;
		}
	}

}
}
 800e97a:	e010      	b.n	800e99e <HAL_TIM_PeriodElapsedCallback+0x62>
	} else if (watch.mode == WATCH_MODE_NORMAL){
 800e97c:	4b0b      	ldr	r3, [pc, #44]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d10c      	bne.n	800e99e <HAL_TIM_PeriodElapsedCallback+0x62>
		watch.counterDontSleepTimer++;
 800e984:	4b09      	ldr	r3, [pc, #36]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e986:	789b      	ldrb	r3, [r3, #2]
 800e988:	3301      	adds	r3, #1
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	4b07      	ldr	r3, [pc, #28]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e98e:	709a      	strb	r2, [r3, #2]
		if(watch.counterDontSleepTimer > WATCH_TIME_DONT_SLEEP){
 800e990:	4b06      	ldr	r3, [pc, #24]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e992:	789b      	ldrb	r3, [r3, #2]
 800e994:	2b3c      	cmp	r3, #60	; 0x3c
 800e996:	d902      	bls.n	800e99e <HAL_TIM_PeriodElapsedCallback+0x62>
			watch.counterDontSleepTimer = WATCH_TIME_DONT_SLEEP;
 800e998:	4b04      	ldr	r3, [pc, #16]	; (800e9ac <HAL_TIM_PeriodElapsedCallback+0x70>)
 800e99a:	223c      	movs	r2, #60	; 0x3c
 800e99c:	709a      	strb	r2, [r3, #2]
}
 800e99e:	46c0      	nop			; (mov r8, r8)
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	b002      	add	sp, #8
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	40000400 	.word	0x40000400
 800e9ac:	20000508 	.word	0x20000508

0800e9b0 <timersInit>:

void timersInit(void) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
HAL_TIM_Base_Start_IT(&htim3);
 800e9b4:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <timersInit+0x14>)
 800e9b6:	0018      	movs	r0, r3
 800e9b8:	f7f8 fe02 	bl	80075c0 <HAL_TIM_Base_Start_IT>
}
 800e9bc:	46c0      	nop			; (mov r8, r8)
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	46c0      	nop			; (mov r8, r8)
 800e9c4:	20000694 	.word	0x20000694

0800e9c8 <watchInit>:
 */


#include <tacho/watch.h>

void watchInit(watchTypeDef *watch){
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]

	watch->mode = WATCH_MODE_NORMAL;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	701a      	strb	r2, [r3, #0]
	watch->counterSettingsMode = 0;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	705a      	strb	r2, [r3, #1]
	watch->flagLowBattery = 1;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	711a      	strb	r2, [r3, #4]
}
 800e9e2:	46c0      	nop			; (mov r8, r8)
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	b002      	add	sp, #8
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <watchSwitchMode>:

void watchSwitchMode(watchTypeDef *watch, uint8_t mode){
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b082      	sub	sp, #8
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	000a      	movs	r2, r1
 800e9f4:	1cfb      	adds	r3, r7, #3
 800e9f6:	701a      	strb	r2, [r3, #0]
	watch->mode = mode;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	1cfa      	adds	r2, r7, #3
 800e9fc:	7812      	ldrb	r2, [r2, #0]
 800e9fe:	701a      	strb	r2, [r3, #0]
	watch->settingsItem = WATCH_SETTINGS_ITEM_PREF; //after enter settings, set blank1 as default position
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2207      	movs	r2, #7
 800ea04:	70da      	strb	r2, [r3, #3]
}
 800ea06:	46c0      	nop			; (mov r8, r8)
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	b002      	add	sp, #8
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <watchSwitchSettingsItem>:

void watchSwitchSettingsItem(watchTypeDef *watch){
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b082      	sub	sp, #8
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
	watch->settingsItem++;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	78db      	ldrb	r3, [r3, #3]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	b2da      	uxtb	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	70da      	strb	r2, [r3, #3]
	if(watch->settingsItem > WATCH_SETTINGS_ITEM_BLANK) watch->settingsItem = WATCH_SETTINGS_ITEM_HOUR;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	78db      	ldrb	r3, [r3, #3]
 800ea26:	2b09      	cmp	r3, #9
 800ea28:	d902      	bls.n	800ea30 <watchSwitchSettingsItem+0x22>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	70da      	strb	r2, [r3, #3]
}
 800ea30:	46c0      	nop			; (mov r8, r8)
 800ea32:	46bd      	mov	sp, r7
 800ea34:	b002      	add	sp, #8
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ea38:	480d      	ldr	r0, [pc, #52]	; (800ea70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ea3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ea3c:	f7fb fd72 	bl	800a524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ea40:	480c      	ldr	r0, [pc, #48]	; (800ea74 <LoopForever+0x6>)
  ldr r1, =_edata
 800ea42:	490d      	ldr	r1, [pc, #52]	; (800ea78 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ea44:	4a0d      	ldr	r2, [pc, #52]	; (800ea7c <LoopForever+0xe>)
  movs r3, #0
 800ea46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ea48:	e002      	b.n	800ea50 <LoopCopyDataInit>

0800ea4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ea4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ea4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ea4e:	3304      	adds	r3, #4

0800ea50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ea50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ea52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ea54:	d3f9      	bcc.n	800ea4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ea56:	4a0a      	ldr	r2, [pc, #40]	; (800ea80 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ea58:	4c0a      	ldr	r4, [pc, #40]	; (800ea84 <LoopForever+0x16>)
  movs r3, #0
 800ea5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ea5c:	e001      	b.n	800ea62 <LoopFillZerobss>

0800ea5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ea5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ea60:	3204      	adds	r2, #4

0800ea62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ea62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ea64:	d3fb      	bcc.n	800ea5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ea66:	f000 f817 	bl	800ea98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800ea6a:	f7fb f9e9 	bl	8009e40 <main>

0800ea6e <LoopForever>:

LoopForever:
  b LoopForever
 800ea6e:	e7fe      	b.n	800ea6e <LoopForever>
  ldr   r0, =_estack
 800ea70:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800ea74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ea78:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800ea7c:	08015a68 	.word	0x08015a68
  ldr r2, =_sbss
 800ea80:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800ea84:	200006f0 	.word	0x200006f0

0800ea88 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ea88:	e7fe      	b.n	800ea88 <ADC1_COMP_IRQHandler>
	...

0800ea8c <__errno>:
 800ea8c:	4b01      	ldr	r3, [pc, #4]	; (800ea94 <__errno+0x8>)
 800ea8e:	6818      	ldr	r0, [r3, #0]
 800ea90:	4770      	bx	lr
 800ea92:	46c0      	nop			; (mov r8, r8)
 800ea94:	20000034 	.word	0x20000034

0800ea98 <__libc_init_array>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	2600      	movs	r6, #0
 800ea9c:	4d0c      	ldr	r5, [pc, #48]	; (800ead0 <__libc_init_array+0x38>)
 800ea9e:	4c0d      	ldr	r4, [pc, #52]	; (800ead4 <__libc_init_array+0x3c>)
 800eaa0:	1b64      	subs	r4, r4, r5
 800eaa2:	10a4      	asrs	r4, r4, #2
 800eaa4:	42a6      	cmp	r6, r4
 800eaa6:	d109      	bne.n	800eabc <__libc_init_array+0x24>
 800eaa8:	2600      	movs	r6, #0
 800eaaa:	f002 fccb 	bl	8011444 <_init>
 800eaae:	4d0a      	ldr	r5, [pc, #40]	; (800ead8 <__libc_init_array+0x40>)
 800eab0:	4c0a      	ldr	r4, [pc, #40]	; (800eadc <__libc_init_array+0x44>)
 800eab2:	1b64      	subs	r4, r4, r5
 800eab4:	10a4      	asrs	r4, r4, #2
 800eab6:	42a6      	cmp	r6, r4
 800eab8:	d105      	bne.n	800eac6 <__libc_init_array+0x2e>
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	00b3      	lsls	r3, r6, #2
 800eabe:	58eb      	ldr	r3, [r5, r3]
 800eac0:	4798      	blx	r3
 800eac2:	3601      	adds	r6, #1
 800eac4:	e7ee      	b.n	800eaa4 <__libc_init_array+0xc>
 800eac6:	00b3      	lsls	r3, r6, #2
 800eac8:	58eb      	ldr	r3, [r5, r3]
 800eaca:	4798      	blx	r3
 800eacc:	3601      	adds	r6, #1
 800eace:	e7f2      	b.n	800eab6 <__libc_init_array+0x1e>
 800ead0:	08015a60 	.word	0x08015a60
 800ead4:	08015a60 	.word	0x08015a60
 800ead8:	08015a60 	.word	0x08015a60
 800eadc:	08015a64 	.word	0x08015a64

0800eae0 <malloc>:
 800eae0:	b510      	push	{r4, lr}
 800eae2:	4b03      	ldr	r3, [pc, #12]	; (800eaf0 <malloc+0x10>)
 800eae4:	0001      	movs	r1, r0
 800eae6:	6818      	ldr	r0, [r3, #0]
 800eae8:	f000 f860 	bl	800ebac <_malloc_r>
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	46c0      	nop			; (mov r8, r8)
 800eaf0:	20000034 	.word	0x20000034

0800eaf4 <memcpy>:
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	b510      	push	{r4, lr}
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d100      	bne.n	800eafe <memcpy+0xa>
 800eafc:	bd10      	pop	{r4, pc}
 800eafe:	5ccc      	ldrb	r4, [r1, r3]
 800eb00:	54c4      	strb	r4, [r0, r3]
 800eb02:	3301      	adds	r3, #1
 800eb04:	e7f8      	b.n	800eaf8 <memcpy+0x4>

0800eb06 <memset>:
 800eb06:	0003      	movs	r3, r0
 800eb08:	1882      	adds	r2, r0, r2
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d100      	bne.n	800eb10 <memset+0xa>
 800eb0e:	4770      	bx	lr
 800eb10:	7019      	strb	r1, [r3, #0]
 800eb12:	3301      	adds	r3, #1
 800eb14:	e7f9      	b.n	800eb0a <memset+0x4>
	...

0800eb18 <_free_r>:
 800eb18:	b570      	push	{r4, r5, r6, lr}
 800eb1a:	0005      	movs	r5, r0
 800eb1c:	2900      	cmp	r1, #0
 800eb1e:	d010      	beq.n	800eb42 <_free_r+0x2a>
 800eb20:	1f0c      	subs	r4, r1, #4
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	da00      	bge.n	800eb2a <_free_r+0x12>
 800eb28:	18e4      	adds	r4, r4, r3
 800eb2a:	0028      	movs	r0, r5
 800eb2c:	f000 fc50 	bl	800f3d0 <__malloc_lock>
 800eb30:	4a1d      	ldr	r2, [pc, #116]	; (800eba8 <_free_r+0x90>)
 800eb32:	6813      	ldr	r3, [r2, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d105      	bne.n	800eb44 <_free_r+0x2c>
 800eb38:	6063      	str	r3, [r4, #4]
 800eb3a:	6014      	str	r4, [r2, #0]
 800eb3c:	0028      	movs	r0, r5
 800eb3e:	f000 fc4f 	bl	800f3e0 <__malloc_unlock>
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	d908      	bls.n	800eb5a <_free_r+0x42>
 800eb48:	6821      	ldr	r1, [r4, #0]
 800eb4a:	1860      	adds	r0, r4, r1
 800eb4c:	4283      	cmp	r3, r0
 800eb4e:	d1f3      	bne.n	800eb38 <_free_r+0x20>
 800eb50:	6818      	ldr	r0, [r3, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	1841      	adds	r1, r0, r1
 800eb56:	6021      	str	r1, [r4, #0]
 800eb58:	e7ee      	b.n	800eb38 <_free_r+0x20>
 800eb5a:	001a      	movs	r2, r3
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d001      	beq.n	800eb66 <_free_r+0x4e>
 800eb62:	42a3      	cmp	r3, r4
 800eb64:	d9f9      	bls.n	800eb5a <_free_r+0x42>
 800eb66:	6811      	ldr	r1, [r2, #0]
 800eb68:	1850      	adds	r0, r2, r1
 800eb6a:	42a0      	cmp	r0, r4
 800eb6c:	d10b      	bne.n	800eb86 <_free_r+0x6e>
 800eb6e:	6820      	ldr	r0, [r4, #0]
 800eb70:	1809      	adds	r1, r1, r0
 800eb72:	1850      	adds	r0, r2, r1
 800eb74:	6011      	str	r1, [r2, #0]
 800eb76:	4283      	cmp	r3, r0
 800eb78:	d1e0      	bne.n	800eb3c <_free_r+0x24>
 800eb7a:	6818      	ldr	r0, [r3, #0]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	1841      	adds	r1, r0, r1
 800eb80:	6011      	str	r1, [r2, #0]
 800eb82:	6053      	str	r3, [r2, #4]
 800eb84:	e7da      	b.n	800eb3c <_free_r+0x24>
 800eb86:	42a0      	cmp	r0, r4
 800eb88:	d902      	bls.n	800eb90 <_free_r+0x78>
 800eb8a:	230c      	movs	r3, #12
 800eb8c:	602b      	str	r3, [r5, #0]
 800eb8e:	e7d5      	b.n	800eb3c <_free_r+0x24>
 800eb90:	6821      	ldr	r1, [r4, #0]
 800eb92:	1860      	adds	r0, r4, r1
 800eb94:	4283      	cmp	r3, r0
 800eb96:	d103      	bne.n	800eba0 <_free_r+0x88>
 800eb98:	6818      	ldr	r0, [r3, #0]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	1841      	adds	r1, r0, r1
 800eb9e:	6021      	str	r1, [r4, #0]
 800eba0:	6063      	str	r3, [r4, #4]
 800eba2:	6054      	str	r4, [r2, #4]
 800eba4:	e7ca      	b.n	800eb3c <_free_r+0x24>
 800eba6:	46c0      	nop			; (mov r8, r8)
 800eba8:	20000514 	.word	0x20000514

0800ebac <_malloc_r>:
 800ebac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebae:	2303      	movs	r3, #3
 800ebb0:	1ccd      	adds	r5, r1, #3
 800ebb2:	439d      	bics	r5, r3
 800ebb4:	3508      	adds	r5, #8
 800ebb6:	0006      	movs	r6, r0
 800ebb8:	2d0c      	cmp	r5, #12
 800ebba:	d21f      	bcs.n	800ebfc <_malloc_r+0x50>
 800ebbc:	250c      	movs	r5, #12
 800ebbe:	42a9      	cmp	r1, r5
 800ebc0:	d81e      	bhi.n	800ec00 <_malloc_r+0x54>
 800ebc2:	0030      	movs	r0, r6
 800ebc4:	f000 fc04 	bl	800f3d0 <__malloc_lock>
 800ebc8:	4925      	ldr	r1, [pc, #148]	; (800ec60 <_malloc_r+0xb4>)
 800ebca:	680a      	ldr	r2, [r1, #0]
 800ebcc:	0014      	movs	r4, r2
 800ebce:	2c00      	cmp	r4, #0
 800ebd0:	d11a      	bne.n	800ec08 <_malloc_r+0x5c>
 800ebd2:	4f24      	ldr	r7, [pc, #144]	; (800ec64 <_malloc_r+0xb8>)
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d104      	bne.n	800ebe4 <_malloc_r+0x38>
 800ebda:	0021      	movs	r1, r4
 800ebdc:	0030      	movs	r0, r6
 800ebde:	f000 f8d9 	bl	800ed94 <_sbrk_r>
 800ebe2:	6038      	str	r0, [r7, #0]
 800ebe4:	0029      	movs	r1, r5
 800ebe6:	0030      	movs	r0, r6
 800ebe8:	f000 f8d4 	bl	800ed94 <_sbrk_r>
 800ebec:	1c43      	adds	r3, r0, #1
 800ebee:	d12b      	bne.n	800ec48 <_malloc_r+0x9c>
 800ebf0:	230c      	movs	r3, #12
 800ebf2:	0030      	movs	r0, r6
 800ebf4:	6033      	str	r3, [r6, #0]
 800ebf6:	f000 fbf3 	bl	800f3e0 <__malloc_unlock>
 800ebfa:	e003      	b.n	800ec04 <_malloc_r+0x58>
 800ebfc:	2d00      	cmp	r5, #0
 800ebfe:	dade      	bge.n	800ebbe <_malloc_r+0x12>
 800ec00:	230c      	movs	r3, #12
 800ec02:	6033      	str	r3, [r6, #0]
 800ec04:	2000      	movs	r0, #0
 800ec06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	1b5b      	subs	r3, r3, r5
 800ec0c:	d419      	bmi.n	800ec42 <_malloc_r+0x96>
 800ec0e:	2b0b      	cmp	r3, #11
 800ec10:	d903      	bls.n	800ec1a <_malloc_r+0x6e>
 800ec12:	6023      	str	r3, [r4, #0]
 800ec14:	18e4      	adds	r4, r4, r3
 800ec16:	6025      	str	r5, [r4, #0]
 800ec18:	e003      	b.n	800ec22 <_malloc_r+0x76>
 800ec1a:	6863      	ldr	r3, [r4, #4]
 800ec1c:	42a2      	cmp	r2, r4
 800ec1e:	d10e      	bne.n	800ec3e <_malloc_r+0x92>
 800ec20:	600b      	str	r3, [r1, #0]
 800ec22:	0030      	movs	r0, r6
 800ec24:	f000 fbdc 	bl	800f3e0 <__malloc_unlock>
 800ec28:	0020      	movs	r0, r4
 800ec2a:	2207      	movs	r2, #7
 800ec2c:	300b      	adds	r0, #11
 800ec2e:	1d23      	adds	r3, r4, #4
 800ec30:	4390      	bics	r0, r2
 800ec32:	1ac2      	subs	r2, r0, r3
 800ec34:	4298      	cmp	r0, r3
 800ec36:	d0e6      	beq.n	800ec06 <_malloc_r+0x5a>
 800ec38:	1a1b      	subs	r3, r3, r0
 800ec3a:	50a3      	str	r3, [r4, r2]
 800ec3c:	e7e3      	b.n	800ec06 <_malloc_r+0x5a>
 800ec3e:	6053      	str	r3, [r2, #4]
 800ec40:	e7ef      	b.n	800ec22 <_malloc_r+0x76>
 800ec42:	0022      	movs	r2, r4
 800ec44:	6864      	ldr	r4, [r4, #4]
 800ec46:	e7c2      	b.n	800ebce <_malloc_r+0x22>
 800ec48:	2303      	movs	r3, #3
 800ec4a:	1cc4      	adds	r4, r0, #3
 800ec4c:	439c      	bics	r4, r3
 800ec4e:	42a0      	cmp	r0, r4
 800ec50:	d0e1      	beq.n	800ec16 <_malloc_r+0x6a>
 800ec52:	1a21      	subs	r1, r4, r0
 800ec54:	0030      	movs	r0, r6
 800ec56:	f000 f89d 	bl	800ed94 <_sbrk_r>
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	d1db      	bne.n	800ec16 <_malloc_r+0x6a>
 800ec5e:	e7c7      	b.n	800ebf0 <_malloc_r+0x44>
 800ec60:	20000514 	.word	0x20000514
 800ec64:	20000518 	.word	0x20000518

0800ec68 <iprintf>:
 800ec68:	b40f      	push	{r0, r1, r2, r3}
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <iprintf+0x30>)
 800ec6c:	b513      	push	{r0, r1, r4, lr}
 800ec6e:	681c      	ldr	r4, [r3, #0]
 800ec70:	2c00      	cmp	r4, #0
 800ec72:	d005      	beq.n	800ec80 <iprintf+0x18>
 800ec74:	69a3      	ldr	r3, [r4, #24]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d102      	bne.n	800ec80 <iprintf+0x18>
 800ec7a:	0020      	movs	r0, r4
 800ec7c:	f000 fa98 	bl	800f1b0 <__sinit>
 800ec80:	ab05      	add	r3, sp, #20
 800ec82:	0020      	movs	r0, r4
 800ec84:	9a04      	ldr	r2, [sp, #16]
 800ec86:	68a1      	ldr	r1, [r4, #8]
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	f000 fbd9 	bl	800f440 <_vfiprintf_r>
 800ec8e:	bc16      	pop	{r1, r2, r4}
 800ec90:	bc08      	pop	{r3}
 800ec92:	b004      	add	sp, #16
 800ec94:	4718      	bx	r3
 800ec96:	46c0      	nop			; (mov r8, r8)
 800ec98:	20000034 	.word	0x20000034

0800ec9c <_puts_r>:
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	0005      	movs	r5, r0
 800eca0:	000e      	movs	r6, r1
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d004      	beq.n	800ecb0 <_puts_r+0x14>
 800eca6:	6983      	ldr	r3, [r0, #24]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <_puts_r+0x14>
 800ecac:	f000 fa80 	bl	800f1b0 <__sinit>
 800ecb0:	69ab      	ldr	r3, [r5, #24]
 800ecb2:	68ac      	ldr	r4, [r5, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <_puts_r+0x22>
 800ecb8:	0028      	movs	r0, r5
 800ecba:	f000 fa79 	bl	800f1b0 <__sinit>
 800ecbe:	4b2d      	ldr	r3, [pc, #180]	; (800ed74 <_puts_r+0xd8>)
 800ecc0:	429c      	cmp	r4, r3
 800ecc2:	d122      	bne.n	800ed0a <_puts_r+0x6e>
 800ecc4:	686c      	ldr	r4, [r5, #4]
 800ecc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecc8:	07db      	lsls	r3, r3, #31
 800ecca:	d405      	bmi.n	800ecd8 <_puts_r+0x3c>
 800eccc:	89a3      	ldrh	r3, [r4, #12]
 800ecce:	059b      	lsls	r3, r3, #22
 800ecd0:	d402      	bmi.n	800ecd8 <_puts_r+0x3c>
 800ecd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd4:	f000 fb0d 	bl	800f2f2 <__retarget_lock_acquire_recursive>
 800ecd8:	89a3      	ldrh	r3, [r4, #12]
 800ecda:	071b      	lsls	r3, r3, #28
 800ecdc:	d502      	bpl.n	800ece4 <_puts_r+0x48>
 800ecde:	6923      	ldr	r3, [r4, #16]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d129      	bne.n	800ed38 <_puts_r+0x9c>
 800ece4:	0021      	movs	r1, r4
 800ece6:	0028      	movs	r0, r5
 800ece8:	f000 f8bc 	bl	800ee64 <__swsetup_r>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d023      	beq.n	800ed38 <_puts_r+0x9c>
 800ecf0:	2501      	movs	r5, #1
 800ecf2:	426d      	negs	r5, r5
 800ecf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecf6:	07db      	lsls	r3, r3, #31
 800ecf8:	d405      	bmi.n	800ed06 <_puts_r+0x6a>
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	059b      	lsls	r3, r3, #22
 800ecfe:	d402      	bmi.n	800ed06 <_puts_r+0x6a>
 800ed00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed02:	f000 faf7 	bl	800f2f4 <__retarget_lock_release_recursive>
 800ed06:	0028      	movs	r0, r5
 800ed08:	bd70      	pop	{r4, r5, r6, pc}
 800ed0a:	4b1b      	ldr	r3, [pc, #108]	; (800ed78 <_puts_r+0xdc>)
 800ed0c:	429c      	cmp	r4, r3
 800ed0e:	d101      	bne.n	800ed14 <_puts_r+0x78>
 800ed10:	68ac      	ldr	r4, [r5, #8]
 800ed12:	e7d8      	b.n	800ecc6 <_puts_r+0x2a>
 800ed14:	4b19      	ldr	r3, [pc, #100]	; (800ed7c <_puts_r+0xe0>)
 800ed16:	429c      	cmp	r4, r3
 800ed18:	d1d5      	bne.n	800ecc6 <_puts_r+0x2a>
 800ed1a:	68ec      	ldr	r4, [r5, #12]
 800ed1c:	e7d3      	b.n	800ecc6 <_puts_r+0x2a>
 800ed1e:	3601      	adds	r6, #1
 800ed20:	60a3      	str	r3, [r4, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	da04      	bge.n	800ed30 <_puts_r+0x94>
 800ed26:	69a2      	ldr	r2, [r4, #24]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	dc16      	bgt.n	800ed5a <_puts_r+0xbe>
 800ed2c:	290a      	cmp	r1, #10
 800ed2e:	d014      	beq.n	800ed5a <_puts_r+0xbe>
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	6022      	str	r2, [r4, #0]
 800ed36:	7019      	strb	r1, [r3, #0]
 800ed38:	68a3      	ldr	r3, [r4, #8]
 800ed3a:	7831      	ldrb	r1, [r6, #0]
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	2900      	cmp	r1, #0
 800ed40:	d1ed      	bne.n	800ed1e <_puts_r+0x82>
 800ed42:	60a3      	str	r3, [r4, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	da0f      	bge.n	800ed68 <_puts_r+0xcc>
 800ed48:	0028      	movs	r0, r5
 800ed4a:	0022      	movs	r2, r4
 800ed4c:	310a      	adds	r1, #10
 800ed4e:	f000 f833 	bl	800edb8 <__swbuf_r>
 800ed52:	250a      	movs	r5, #10
 800ed54:	1c43      	adds	r3, r0, #1
 800ed56:	d1cd      	bne.n	800ecf4 <_puts_r+0x58>
 800ed58:	e7ca      	b.n	800ecf0 <_puts_r+0x54>
 800ed5a:	0022      	movs	r2, r4
 800ed5c:	0028      	movs	r0, r5
 800ed5e:	f000 f82b 	bl	800edb8 <__swbuf_r>
 800ed62:	1c43      	adds	r3, r0, #1
 800ed64:	d1e8      	bne.n	800ed38 <_puts_r+0x9c>
 800ed66:	e7c3      	b.n	800ecf0 <_puts_r+0x54>
 800ed68:	250a      	movs	r5, #10
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	6022      	str	r2, [r4, #0]
 800ed70:	701d      	strb	r5, [r3, #0]
 800ed72:	e7bf      	b.n	800ecf4 <_puts_r+0x58>
 800ed74:	08015798 	.word	0x08015798
 800ed78:	080157b8 	.word	0x080157b8
 800ed7c:	08015778 	.word	0x08015778

0800ed80 <puts>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	4b03      	ldr	r3, [pc, #12]	; (800ed90 <puts+0x10>)
 800ed84:	0001      	movs	r1, r0
 800ed86:	6818      	ldr	r0, [r3, #0]
 800ed88:	f7ff ff88 	bl	800ec9c <_puts_r>
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	46c0      	nop			; (mov r8, r8)
 800ed90:	20000034 	.word	0x20000034

0800ed94 <_sbrk_r>:
 800ed94:	2300      	movs	r3, #0
 800ed96:	b570      	push	{r4, r5, r6, lr}
 800ed98:	4d06      	ldr	r5, [pc, #24]	; (800edb4 <_sbrk_r+0x20>)
 800ed9a:	0004      	movs	r4, r0
 800ed9c:	0008      	movs	r0, r1
 800ed9e:	602b      	str	r3, [r5, #0]
 800eda0:	f7fb fb8a 	bl	800a4b8 <_sbrk>
 800eda4:	1c43      	adds	r3, r0, #1
 800eda6:	d103      	bne.n	800edb0 <_sbrk_r+0x1c>
 800eda8:	682b      	ldr	r3, [r5, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d000      	beq.n	800edb0 <_sbrk_r+0x1c>
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	bd70      	pop	{r4, r5, r6, pc}
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	200006ec 	.word	0x200006ec

0800edb8 <__swbuf_r>:
 800edb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edba:	0005      	movs	r5, r0
 800edbc:	000e      	movs	r6, r1
 800edbe:	0014      	movs	r4, r2
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d004      	beq.n	800edce <__swbuf_r+0x16>
 800edc4:	6983      	ldr	r3, [r0, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <__swbuf_r+0x16>
 800edca:	f000 f9f1 	bl	800f1b0 <__sinit>
 800edce:	4b22      	ldr	r3, [pc, #136]	; (800ee58 <__swbuf_r+0xa0>)
 800edd0:	429c      	cmp	r4, r3
 800edd2:	d12e      	bne.n	800ee32 <__swbuf_r+0x7a>
 800edd4:	686c      	ldr	r4, [r5, #4]
 800edd6:	69a3      	ldr	r3, [r4, #24]
 800edd8:	60a3      	str	r3, [r4, #8]
 800edda:	89a3      	ldrh	r3, [r4, #12]
 800eddc:	071b      	lsls	r3, r3, #28
 800edde:	d532      	bpl.n	800ee46 <__swbuf_r+0x8e>
 800ede0:	6923      	ldr	r3, [r4, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d02f      	beq.n	800ee46 <__swbuf_r+0x8e>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	6922      	ldr	r2, [r4, #16]
 800edea:	b2f7      	uxtb	r7, r6
 800edec:	1a98      	subs	r0, r3, r2
 800edee:	6963      	ldr	r3, [r4, #20]
 800edf0:	b2f6      	uxtb	r6, r6
 800edf2:	4283      	cmp	r3, r0
 800edf4:	dc05      	bgt.n	800ee02 <__swbuf_r+0x4a>
 800edf6:	0021      	movs	r1, r4
 800edf8:	0028      	movs	r0, r5
 800edfa:	f000 f937 	bl	800f06c <_fflush_r>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d127      	bne.n	800ee52 <__swbuf_r+0x9a>
 800ee02:	68a3      	ldr	r3, [r4, #8]
 800ee04:	3001      	adds	r0, #1
 800ee06:	3b01      	subs	r3, #1
 800ee08:	60a3      	str	r3, [r4, #8]
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	6022      	str	r2, [r4, #0]
 800ee10:	701f      	strb	r7, [r3, #0]
 800ee12:	6963      	ldr	r3, [r4, #20]
 800ee14:	4283      	cmp	r3, r0
 800ee16:	d004      	beq.n	800ee22 <__swbuf_r+0x6a>
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	07db      	lsls	r3, r3, #31
 800ee1c:	d507      	bpl.n	800ee2e <__swbuf_r+0x76>
 800ee1e:	2e0a      	cmp	r6, #10
 800ee20:	d105      	bne.n	800ee2e <__swbuf_r+0x76>
 800ee22:	0021      	movs	r1, r4
 800ee24:	0028      	movs	r0, r5
 800ee26:	f000 f921 	bl	800f06c <_fflush_r>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d111      	bne.n	800ee52 <__swbuf_r+0x9a>
 800ee2e:	0030      	movs	r0, r6
 800ee30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee32:	4b0a      	ldr	r3, [pc, #40]	; (800ee5c <__swbuf_r+0xa4>)
 800ee34:	429c      	cmp	r4, r3
 800ee36:	d101      	bne.n	800ee3c <__swbuf_r+0x84>
 800ee38:	68ac      	ldr	r4, [r5, #8]
 800ee3a:	e7cc      	b.n	800edd6 <__swbuf_r+0x1e>
 800ee3c:	4b08      	ldr	r3, [pc, #32]	; (800ee60 <__swbuf_r+0xa8>)
 800ee3e:	429c      	cmp	r4, r3
 800ee40:	d1c9      	bne.n	800edd6 <__swbuf_r+0x1e>
 800ee42:	68ec      	ldr	r4, [r5, #12]
 800ee44:	e7c7      	b.n	800edd6 <__swbuf_r+0x1e>
 800ee46:	0021      	movs	r1, r4
 800ee48:	0028      	movs	r0, r5
 800ee4a:	f000 f80b 	bl	800ee64 <__swsetup_r>
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d0c9      	beq.n	800ede6 <__swbuf_r+0x2e>
 800ee52:	2601      	movs	r6, #1
 800ee54:	4276      	negs	r6, r6
 800ee56:	e7ea      	b.n	800ee2e <__swbuf_r+0x76>
 800ee58:	08015798 	.word	0x08015798
 800ee5c:	080157b8 	.word	0x080157b8
 800ee60:	08015778 	.word	0x08015778

0800ee64 <__swsetup_r>:
 800ee64:	4b37      	ldr	r3, [pc, #220]	; (800ef44 <__swsetup_r+0xe0>)
 800ee66:	b570      	push	{r4, r5, r6, lr}
 800ee68:	681d      	ldr	r5, [r3, #0]
 800ee6a:	0006      	movs	r6, r0
 800ee6c:	000c      	movs	r4, r1
 800ee6e:	2d00      	cmp	r5, #0
 800ee70:	d005      	beq.n	800ee7e <__swsetup_r+0x1a>
 800ee72:	69ab      	ldr	r3, [r5, #24]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d102      	bne.n	800ee7e <__swsetup_r+0x1a>
 800ee78:	0028      	movs	r0, r5
 800ee7a:	f000 f999 	bl	800f1b0 <__sinit>
 800ee7e:	4b32      	ldr	r3, [pc, #200]	; (800ef48 <__swsetup_r+0xe4>)
 800ee80:	429c      	cmp	r4, r3
 800ee82:	d10f      	bne.n	800eea4 <__swsetup_r+0x40>
 800ee84:	686c      	ldr	r4, [r5, #4]
 800ee86:	230c      	movs	r3, #12
 800ee88:	5ee2      	ldrsh	r2, [r4, r3]
 800ee8a:	b293      	uxth	r3, r2
 800ee8c:	0711      	lsls	r1, r2, #28
 800ee8e:	d42d      	bmi.n	800eeec <__swsetup_r+0x88>
 800ee90:	06d9      	lsls	r1, r3, #27
 800ee92:	d411      	bmi.n	800eeb8 <__swsetup_r+0x54>
 800ee94:	2309      	movs	r3, #9
 800ee96:	2001      	movs	r0, #1
 800ee98:	6033      	str	r3, [r6, #0]
 800ee9a:	3337      	adds	r3, #55	; 0x37
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	81a3      	strh	r3, [r4, #12]
 800eea0:	4240      	negs	r0, r0
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	4b29      	ldr	r3, [pc, #164]	; (800ef4c <__swsetup_r+0xe8>)
 800eea6:	429c      	cmp	r4, r3
 800eea8:	d101      	bne.n	800eeae <__swsetup_r+0x4a>
 800eeaa:	68ac      	ldr	r4, [r5, #8]
 800eeac:	e7eb      	b.n	800ee86 <__swsetup_r+0x22>
 800eeae:	4b28      	ldr	r3, [pc, #160]	; (800ef50 <__swsetup_r+0xec>)
 800eeb0:	429c      	cmp	r4, r3
 800eeb2:	d1e8      	bne.n	800ee86 <__swsetup_r+0x22>
 800eeb4:	68ec      	ldr	r4, [r5, #12]
 800eeb6:	e7e6      	b.n	800ee86 <__swsetup_r+0x22>
 800eeb8:	075b      	lsls	r3, r3, #29
 800eeba:	d513      	bpl.n	800eee4 <__swsetup_r+0x80>
 800eebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eebe:	2900      	cmp	r1, #0
 800eec0:	d008      	beq.n	800eed4 <__swsetup_r+0x70>
 800eec2:	0023      	movs	r3, r4
 800eec4:	3344      	adds	r3, #68	; 0x44
 800eec6:	4299      	cmp	r1, r3
 800eec8:	d002      	beq.n	800eed0 <__swsetup_r+0x6c>
 800eeca:	0030      	movs	r0, r6
 800eecc:	f7ff fe24 	bl	800eb18 <_free_r>
 800eed0:	2300      	movs	r3, #0
 800eed2:	6363      	str	r3, [r4, #52]	; 0x34
 800eed4:	2224      	movs	r2, #36	; 0x24
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	4393      	bics	r3, r2
 800eeda:	81a3      	strh	r3, [r4, #12]
 800eedc:	2300      	movs	r3, #0
 800eede:	6063      	str	r3, [r4, #4]
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	6023      	str	r3, [r4, #0]
 800eee4:	2308      	movs	r3, #8
 800eee6:	89a2      	ldrh	r2, [r4, #12]
 800eee8:	4313      	orrs	r3, r2
 800eeea:	81a3      	strh	r3, [r4, #12]
 800eeec:	6923      	ldr	r3, [r4, #16]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d10b      	bne.n	800ef0a <__swsetup_r+0xa6>
 800eef2:	21a0      	movs	r1, #160	; 0xa0
 800eef4:	2280      	movs	r2, #128	; 0x80
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	0089      	lsls	r1, r1, #2
 800eefa:	0092      	lsls	r2, r2, #2
 800eefc:	400b      	ands	r3, r1
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d003      	beq.n	800ef0a <__swsetup_r+0xa6>
 800ef02:	0021      	movs	r1, r4
 800ef04:	0030      	movs	r0, r6
 800ef06:	f000 fa1f 	bl	800f348 <__smakebuf_r>
 800ef0a:	220c      	movs	r2, #12
 800ef0c:	5ea3      	ldrsh	r3, [r4, r2]
 800ef0e:	2001      	movs	r0, #1
 800ef10:	001a      	movs	r2, r3
 800ef12:	b299      	uxth	r1, r3
 800ef14:	4002      	ands	r2, r0
 800ef16:	4203      	tst	r3, r0
 800ef18:	d00f      	beq.n	800ef3a <__swsetup_r+0xd6>
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	60a2      	str	r2, [r4, #8]
 800ef1e:	6962      	ldr	r2, [r4, #20]
 800ef20:	4252      	negs	r2, r2
 800ef22:	61a2      	str	r2, [r4, #24]
 800ef24:	2000      	movs	r0, #0
 800ef26:	6922      	ldr	r2, [r4, #16]
 800ef28:	4282      	cmp	r2, r0
 800ef2a:	d1ba      	bne.n	800eea2 <__swsetup_r+0x3e>
 800ef2c:	060a      	lsls	r2, r1, #24
 800ef2e:	d5b8      	bpl.n	800eea2 <__swsetup_r+0x3e>
 800ef30:	2240      	movs	r2, #64	; 0x40
 800ef32:	4313      	orrs	r3, r2
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	3801      	subs	r0, #1
 800ef38:	e7b3      	b.n	800eea2 <__swsetup_r+0x3e>
 800ef3a:	0788      	lsls	r0, r1, #30
 800ef3c:	d400      	bmi.n	800ef40 <__swsetup_r+0xdc>
 800ef3e:	6962      	ldr	r2, [r4, #20]
 800ef40:	60a2      	str	r2, [r4, #8]
 800ef42:	e7ef      	b.n	800ef24 <__swsetup_r+0xc0>
 800ef44:	20000034 	.word	0x20000034
 800ef48:	08015798 	.word	0x08015798
 800ef4c:	080157b8 	.word	0x080157b8
 800ef50:	08015778 	.word	0x08015778

0800ef54 <__sflush_r>:
 800ef54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef56:	898b      	ldrh	r3, [r1, #12]
 800ef58:	0005      	movs	r5, r0
 800ef5a:	000c      	movs	r4, r1
 800ef5c:	071a      	lsls	r2, r3, #28
 800ef5e:	d45f      	bmi.n	800f020 <__sflush_r+0xcc>
 800ef60:	684a      	ldr	r2, [r1, #4]
 800ef62:	2a00      	cmp	r2, #0
 800ef64:	dc04      	bgt.n	800ef70 <__sflush_r+0x1c>
 800ef66:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ef68:	2a00      	cmp	r2, #0
 800ef6a:	dc01      	bgt.n	800ef70 <__sflush_r+0x1c>
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ef72:	2f00      	cmp	r7, #0
 800ef74:	d0fa      	beq.n	800ef6c <__sflush_r+0x18>
 800ef76:	2200      	movs	r2, #0
 800ef78:	2180      	movs	r1, #128	; 0x80
 800ef7a:	682e      	ldr	r6, [r5, #0]
 800ef7c:	602a      	str	r2, [r5, #0]
 800ef7e:	001a      	movs	r2, r3
 800ef80:	0149      	lsls	r1, r1, #5
 800ef82:	400a      	ands	r2, r1
 800ef84:	420b      	tst	r3, r1
 800ef86:	d034      	beq.n	800eff2 <__sflush_r+0x9e>
 800ef88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef8a:	89a3      	ldrh	r3, [r4, #12]
 800ef8c:	075b      	lsls	r3, r3, #29
 800ef8e:	d506      	bpl.n	800ef9e <__sflush_r+0x4a>
 800ef90:	6863      	ldr	r3, [r4, #4]
 800ef92:	1ac0      	subs	r0, r0, r3
 800ef94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <__sflush_r+0x4a>
 800ef9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef9c:	1ac0      	subs	r0, r0, r3
 800ef9e:	0002      	movs	r2, r0
 800efa0:	6a21      	ldr	r1, [r4, #32]
 800efa2:	2300      	movs	r3, #0
 800efa4:	0028      	movs	r0, r5
 800efa6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800efa8:	47b8      	blx	r7
 800efaa:	89a1      	ldrh	r1, [r4, #12]
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	d106      	bne.n	800efbe <__sflush_r+0x6a>
 800efb0:	682b      	ldr	r3, [r5, #0]
 800efb2:	2b1d      	cmp	r3, #29
 800efb4:	d831      	bhi.n	800f01a <__sflush_r+0xc6>
 800efb6:	4a2c      	ldr	r2, [pc, #176]	; (800f068 <__sflush_r+0x114>)
 800efb8:	40da      	lsrs	r2, r3
 800efba:	07d3      	lsls	r3, r2, #31
 800efbc:	d52d      	bpl.n	800f01a <__sflush_r+0xc6>
 800efbe:	2300      	movs	r3, #0
 800efc0:	6063      	str	r3, [r4, #4]
 800efc2:	6923      	ldr	r3, [r4, #16]
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	04cb      	lsls	r3, r1, #19
 800efc8:	d505      	bpl.n	800efd6 <__sflush_r+0x82>
 800efca:	1c43      	adds	r3, r0, #1
 800efcc:	d102      	bne.n	800efd4 <__sflush_r+0x80>
 800efce:	682b      	ldr	r3, [r5, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d100      	bne.n	800efd6 <__sflush_r+0x82>
 800efd4:	6560      	str	r0, [r4, #84]	; 0x54
 800efd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efd8:	602e      	str	r6, [r5, #0]
 800efda:	2900      	cmp	r1, #0
 800efdc:	d0c6      	beq.n	800ef6c <__sflush_r+0x18>
 800efde:	0023      	movs	r3, r4
 800efe0:	3344      	adds	r3, #68	; 0x44
 800efe2:	4299      	cmp	r1, r3
 800efe4:	d002      	beq.n	800efec <__sflush_r+0x98>
 800efe6:	0028      	movs	r0, r5
 800efe8:	f7ff fd96 	bl	800eb18 <_free_r>
 800efec:	2000      	movs	r0, #0
 800efee:	6360      	str	r0, [r4, #52]	; 0x34
 800eff0:	e7bd      	b.n	800ef6e <__sflush_r+0x1a>
 800eff2:	2301      	movs	r3, #1
 800eff4:	0028      	movs	r0, r5
 800eff6:	6a21      	ldr	r1, [r4, #32]
 800eff8:	47b8      	blx	r7
 800effa:	1c43      	adds	r3, r0, #1
 800effc:	d1c5      	bne.n	800ef8a <__sflush_r+0x36>
 800effe:	682b      	ldr	r3, [r5, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0c2      	beq.n	800ef8a <__sflush_r+0x36>
 800f004:	2b1d      	cmp	r3, #29
 800f006:	d001      	beq.n	800f00c <__sflush_r+0xb8>
 800f008:	2b16      	cmp	r3, #22
 800f00a:	d101      	bne.n	800f010 <__sflush_r+0xbc>
 800f00c:	602e      	str	r6, [r5, #0]
 800f00e:	e7ad      	b.n	800ef6c <__sflush_r+0x18>
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	89a2      	ldrh	r2, [r4, #12]
 800f014:	4313      	orrs	r3, r2
 800f016:	81a3      	strh	r3, [r4, #12]
 800f018:	e7a9      	b.n	800ef6e <__sflush_r+0x1a>
 800f01a:	2340      	movs	r3, #64	; 0x40
 800f01c:	430b      	orrs	r3, r1
 800f01e:	e7fa      	b.n	800f016 <__sflush_r+0xc2>
 800f020:	690f      	ldr	r7, [r1, #16]
 800f022:	2f00      	cmp	r7, #0
 800f024:	d0a2      	beq.n	800ef6c <__sflush_r+0x18>
 800f026:	680a      	ldr	r2, [r1, #0]
 800f028:	600f      	str	r7, [r1, #0]
 800f02a:	1bd2      	subs	r2, r2, r7
 800f02c:	9201      	str	r2, [sp, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	079b      	lsls	r3, r3, #30
 800f032:	d100      	bne.n	800f036 <__sflush_r+0xe2>
 800f034:	694a      	ldr	r2, [r1, #20]
 800f036:	60a2      	str	r2, [r4, #8]
 800f038:	9b01      	ldr	r3, [sp, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	dc00      	bgt.n	800f040 <__sflush_r+0xec>
 800f03e:	e795      	b.n	800ef6c <__sflush_r+0x18>
 800f040:	003a      	movs	r2, r7
 800f042:	0028      	movs	r0, r5
 800f044:	9b01      	ldr	r3, [sp, #4]
 800f046:	6a21      	ldr	r1, [r4, #32]
 800f048:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f04a:	47b0      	blx	r6
 800f04c:	2800      	cmp	r0, #0
 800f04e:	dc06      	bgt.n	800f05e <__sflush_r+0x10a>
 800f050:	2340      	movs	r3, #64	; 0x40
 800f052:	2001      	movs	r0, #1
 800f054:	89a2      	ldrh	r2, [r4, #12]
 800f056:	4240      	negs	r0, r0
 800f058:	4313      	orrs	r3, r2
 800f05a:	81a3      	strh	r3, [r4, #12]
 800f05c:	e787      	b.n	800ef6e <__sflush_r+0x1a>
 800f05e:	9b01      	ldr	r3, [sp, #4]
 800f060:	183f      	adds	r7, r7, r0
 800f062:	1a1b      	subs	r3, r3, r0
 800f064:	9301      	str	r3, [sp, #4]
 800f066:	e7e7      	b.n	800f038 <__sflush_r+0xe4>
 800f068:	20400001 	.word	0x20400001

0800f06c <_fflush_r>:
 800f06c:	690b      	ldr	r3, [r1, #16]
 800f06e:	b570      	push	{r4, r5, r6, lr}
 800f070:	0005      	movs	r5, r0
 800f072:	000c      	movs	r4, r1
 800f074:	2b00      	cmp	r3, #0
 800f076:	d102      	bne.n	800f07e <_fflush_r+0x12>
 800f078:	2500      	movs	r5, #0
 800f07a:	0028      	movs	r0, r5
 800f07c:	bd70      	pop	{r4, r5, r6, pc}
 800f07e:	2800      	cmp	r0, #0
 800f080:	d004      	beq.n	800f08c <_fflush_r+0x20>
 800f082:	6983      	ldr	r3, [r0, #24]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d101      	bne.n	800f08c <_fflush_r+0x20>
 800f088:	f000 f892 	bl	800f1b0 <__sinit>
 800f08c:	4b14      	ldr	r3, [pc, #80]	; (800f0e0 <_fflush_r+0x74>)
 800f08e:	429c      	cmp	r4, r3
 800f090:	d11b      	bne.n	800f0ca <_fflush_r+0x5e>
 800f092:	686c      	ldr	r4, [r5, #4]
 800f094:	220c      	movs	r2, #12
 800f096:	5ea3      	ldrsh	r3, [r4, r2]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d0ed      	beq.n	800f078 <_fflush_r+0xc>
 800f09c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f09e:	07d2      	lsls	r2, r2, #31
 800f0a0:	d404      	bmi.n	800f0ac <_fflush_r+0x40>
 800f0a2:	059b      	lsls	r3, r3, #22
 800f0a4:	d402      	bmi.n	800f0ac <_fflush_r+0x40>
 800f0a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0a8:	f000 f923 	bl	800f2f2 <__retarget_lock_acquire_recursive>
 800f0ac:	0028      	movs	r0, r5
 800f0ae:	0021      	movs	r1, r4
 800f0b0:	f7ff ff50 	bl	800ef54 <__sflush_r>
 800f0b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0b6:	0005      	movs	r5, r0
 800f0b8:	07db      	lsls	r3, r3, #31
 800f0ba:	d4de      	bmi.n	800f07a <_fflush_r+0xe>
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	059b      	lsls	r3, r3, #22
 800f0c0:	d4db      	bmi.n	800f07a <_fflush_r+0xe>
 800f0c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0c4:	f000 f916 	bl	800f2f4 <__retarget_lock_release_recursive>
 800f0c8:	e7d7      	b.n	800f07a <_fflush_r+0xe>
 800f0ca:	4b06      	ldr	r3, [pc, #24]	; (800f0e4 <_fflush_r+0x78>)
 800f0cc:	429c      	cmp	r4, r3
 800f0ce:	d101      	bne.n	800f0d4 <_fflush_r+0x68>
 800f0d0:	68ac      	ldr	r4, [r5, #8]
 800f0d2:	e7df      	b.n	800f094 <_fflush_r+0x28>
 800f0d4:	4b04      	ldr	r3, [pc, #16]	; (800f0e8 <_fflush_r+0x7c>)
 800f0d6:	429c      	cmp	r4, r3
 800f0d8:	d1dc      	bne.n	800f094 <_fflush_r+0x28>
 800f0da:	68ec      	ldr	r4, [r5, #12]
 800f0dc:	e7da      	b.n	800f094 <_fflush_r+0x28>
 800f0de:	46c0      	nop			; (mov r8, r8)
 800f0e0:	08015798 	.word	0x08015798
 800f0e4:	080157b8 	.word	0x080157b8
 800f0e8:	08015778 	.word	0x08015778

0800f0ec <std>:
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	b510      	push	{r4, lr}
 800f0f0:	0004      	movs	r4, r0
 800f0f2:	6003      	str	r3, [r0, #0]
 800f0f4:	6043      	str	r3, [r0, #4]
 800f0f6:	6083      	str	r3, [r0, #8]
 800f0f8:	8181      	strh	r1, [r0, #12]
 800f0fa:	6643      	str	r3, [r0, #100]	; 0x64
 800f0fc:	0019      	movs	r1, r3
 800f0fe:	81c2      	strh	r2, [r0, #14]
 800f100:	6103      	str	r3, [r0, #16]
 800f102:	6143      	str	r3, [r0, #20]
 800f104:	6183      	str	r3, [r0, #24]
 800f106:	2208      	movs	r2, #8
 800f108:	305c      	adds	r0, #92	; 0x5c
 800f10a:	f7ff fcfc 	bl	800eb06 <memset>
 800f10e:	4b05      	ldr	r3, [pc, #20]	; (800f124 <std+0x38>)
 800f110:	6263      	str	r3, [r4, #36]	; 0x24
 800f112:	4b05      	ldr	r3, [pc, #20]	; (800f128 <std+0x3c>)
 800f114:	6224      	str	r4, [r4, #32]
 800f116:	62a3      	str	r3, [r4, #40]	; 0x28
 800f118:	4b04      	ldr	r3, [pc, #16]	; (800f12c <std+0x40>)
 800f11a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f11c:	4b04      	ldr	r3, [pc, #16]	; (800f130 <std+0x44>)
 800f11e:	6323      	str	r3, [r4, #48]	; 0x30
 800f120:	bd10      	pop	{r4, pc}
 800f122:	46c0      	nop			; (mov r8, r8)
 800f124:	0800f9b9 	.word	0x0800f9b9
 800f128:	0800f9e1 	.word	0x0800f9e1
 800f12c:	0800fa19 	.word	0x0800fa19
 800f130:	0800fa45 	.word	0x0800fa45

0800f134 <_cleanup_r>:
 800f134:	b510      	push	{r4, lr}
 800f136:	4902      	ldr	r1, [pc, #8]	; (800f140 <_cleanup_r+0xc>)
 800f138:	f000 f8ba 	bl	800f2b0 <_fwalk_reent>
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	46c0      	nop			; (mov r8, r8)
 800f140:	0800f06d 	.word	0x0800f06d

0800f144 <__sfmoreglue>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	2568      	movs	r5, #104	; 0x68
 800f148:	1e4a      	subs	r2, r1, #1
 800f14a:	4355      	muls	r5, r2
 800f14c:	000e      	movs	r6, r1
 800f14e:	0029      	movs	r1, r5
 800f150:	3174      	adds	r1, #116	; 0x74
 800f152:	f7ff fd2b 	bl	800ebac <_malloc_r>
 800f156:	1e04      	subs	r4, r0, #0
 800f158:	d008      	beq.n	800f16c <__sfmoreglue+0x28>
 800f15a:	2100      	movs	r1, #0
 800f15c:	002a      	movs	r2, r5
 800f15e:	6001      	str	r1, [r0, #0]
 800f160:	6046      	str	r6, [r0, #4]
 800f162:	300c      	adds	r0, #12
 800f164:	60a0      	str	r0, [r4, #8]
 800f166:	3268      	adds	r2, #104	; 0x68
 800f168:	f7ff fccd 	bl	800eb06 <memset>
 800f16c:	0020      	movs	r0, r4
 800f16e:	bd70      	pop	{r4, r5, r6, pc}

0800f170 <__sfp_lock_acquire>:
 800f170:	b510      	push	{r4, lr}
 800f172:	4802      	ldr	r0, [pc, #8]	; (800f17c <__sfp_lock_acquire+0xc>)
 800f174:	f000 f8bd 	bl	800f2f2 <__retarget_lock_acquire_recursive>
 800f178:	bd10      	pop	{r4, pc}
 800f17a:	46c0      	nop			; (mov r8, r8)
 800f17c:	200006e8 	.word	0x200006e8

0800f180 <__sfp_lock_release>:
 800f180:	b510      	push	{r4, lr}
 800f182:	4802      	ldr	r0, [pc, #8]	; (800f18c <__sfp_lock_release+0xc>)
 800f184:	f000 f8b6 	bl	800f2f4 <__retarget_lock_release_recursive>
 800f188:	bd10      	pop	{r4, pc}
 800f18a:	46c0      	nop			; (mov r8, r8)
 800f18c:	200006e8 	.word	0x200006e8

0800f190 <__sinit_lock_acquire>:
 800f190:	b510      	push	{r4, lr}
 800f192:	4802      	ldr	r0, [pc, #8]	; (800f19c <__sinit_lock_acquire+0xc>)
 800f194:	f000 f8ad 	bl	800f2f2 <__retarget_lock_acquire_recursive>
 800f198:	bd10      	pop	{r4, pc}
 800f19a:	46c0      	nop			; (mov r8, r8)
 800f19c:	200006e3 	.word	0x200006e3

0800f1a0 <__sinit_lock_release>:
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	4802      	ldr	r0, [pc, #8]	; (800f1ac <__sinit_lock_release+0xc>)
 800f1a4:	f000 f8a6 	bl	800f2f4 <__retarget_lock_release_recursive>
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	46c0      	nop			; (mov r8, r8)
 800f1ac:	200006e3 	.word	0x200006e3

0800f1b0 <__sinit>:
 800f1b0:	b513      	push	{r0, r1, r4, lr}
 800f1b2:	0004      	movs	r4, r0
 800f1b4:	f7ff ffec 	bl	800f190 <__sinit_lock_acquire>
 800f1b8:	69a3      	ldr	r3, [r4, #24]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <__sinit+0x14>
 800f1be:	f7ff ffef 	bl	800f1a0 <__sinit_lock_release>
 800f1c2:	bd13      	pop	{r0, r1, r4, pc}
 800f1c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800f1c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f1c8:	6523      	str	r3, [r4, #80]	; 0x50
 800f1ca:	4b13      	ldr	r3, [pc, #76]	; (800f218 <__sinit+0x68>)
 800f1cc:	4a13      	ldr	r2, [pc, #76]	; (800f21c <__sinit+0x6c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1d2:	9301      	str	r3, [sp, #4]
 800f1d4:	42a3      	cmp	r3, r4
 800f1d6:	d101      	bne.n	800f1dc <__sinit+0x2c>
 800f1d8:	2301      	movs	r3, #1
 800f1da:	61a3      	str	r3, [r4, #24]
 800f1dc:	0020      	movs	r0, r4
 800f1de:	f000 f81f 	bl	800f220 <__sfp>
 800f1e2:	6060      	str	r0, [r4, #4]
 800f1e4:	0020      	movs	r0, r4
 800f1e6:	f000 f81b 	bl	800f220 <__sfp>
 800f1ea:	60a0      	str	r0, [r4, #8]
 800f1ec:	0020      	movs	r0, r4
 800f1ee:	f000 f817 	bl	800f220 <__sfp>
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2104      	movs	r1, #4
 800f1f6:	60e0      	str	r0, [r4, #12]
 800f1f8:	6860      	ldr	r0, [r4, #4]
 800f1fa:	f7ff ff77 	bl	800f0ec <std>
 800f1fe:	2201      	movs	r2, #1
 800f200:	2109      	movs	r1, #9
 800f202:	68a0      	ldr	r0, [r4, #8]
 800f204:	f7ff ff72 	bl	800f0ec <std>
 800f208:	2202      	movs	r2, #2
 800f20a:	2112      	movs	r1, #18
 800f20c:	68e0      	ldr	r0, [r4, #12]
 800f20e:	f7ff ff6d 	bl	800f0ec <std>
 800f212:	2301      	movs	r3, #1
 800f214:	61a3      	str	r3, [r4, #24]
 800f216:	e7d2      	b.n	800f1be <__sinit+0xe>
 800f218:	08015774 	.word	0x08015774
 800f21c:	0800f135 	.word	0x0800f135

0800f220 <__sfp>:
 800f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f222:	0007      	movs	r7, r0
 800f224:	f7ff ffa4 	bl	800f170 <__sfp_lock_acquire>
 800f228:	4b1f      	ldr	r3, [pc, #124]	; (800f2a8 <__sfp+0x88>)
 800f22a:	681e      	ldr	r6, [r3, #0]
 800f22c:	69b3      	ldr	r3, [r6, #24]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d102      	bne.n	800f238 <__sfp+0x18>
 800f232:	0030      	movs	r0, r6
 800f234:	f7ff ffbc 	bl	800f1b0 <__sinit>
 800f238:	3648      	adds	r6, #72	; 0x48
 800f23a:	68b4      	ldr	r4, [r6, #8]
 800f23c:	6873      	ldr	r3, [r6, #4]
 800f23e:	3b01      	subs	r3, #1
 800f240:	d504      	bpl.n	800f24c <__sfp+0x2c>
 800f242:	6833      	ldr	r3, [r6, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d022      	beq.n	800f28e <__sfp+0x6e>
 800f248:	6836      	ldr	r6, [r6, #0]
 800f24a:	e7f6      	b.n	800f23a <__sfp+0x1a>
 800f24c:	220c      	movs	r2, #12
 800f24e:	5ea5      	ldrsh	r5, [r4, r2]
 800f250:	2d00      	cmp	r5, #0
 800f252:	d11a      	bne.n	800f28a <__sfp+0x6a>
 800f254:	0020      	movs	r0, r4
 800f256:	4b15      	ldr	r3, [pc, #84]	; (800f2ac <__sfp+0x8c>)
 800f258:	3058      	adds	r0, #88	; 0x58
 800f25a:	60e3      	str	r3, [r4, #12]
 800f25c:	6665      	str	r5, [r4, #100]	; 0x64
 800f25e:	f000 f847 	bl	800f2f0 <__retarget_lock_init_recursive>
 800f262:	f7ff ff8d 	bl	800f180 <__sfp_lock_release>
 800f266:	0020      	movs	r0, r4
 800f268:	2208      	movs	r2, #8
 800f26a:	0029      	movs	r1, r5
 800f26c:	6025      	str	r5, [r4, #0]
 800f26e:	60a5      	str	r5, [r4, #8]
 800f270:	6065      	str	r5, [r4, #4]
 800f272:	6125      	str	r5, [r4, #16]
 800f274:	6165      	str	r5, [r4, #20]
 800f276:	61a5      	str	r5, [r4, #24]
 800f278:	305c      	adds	r0, #92	; 0x5c
 800f27a:	f7ff fc44 	bl	800eb06 <memset>
 800f27e:	6365      	str	r5, [r4, #52]	; 0x34
 800f280:	63a5      	str	r5, [r4, #56]	; 0x38
 800f282:	64a5      	str	r5, [r4, #72]	; 0x48
 800f284:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f286:	0020      	movs	r0, r4
 800f288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28a:	3468      	adds	r4, #104	; 0x68
 800f28c:	e7d7      	b.n	800f23e <__sfp+0x1e>
 800f28e:	2104      	movs	r1, #4
 800f290:	0038      	movs	r0, r7
 800f292:	f7ff ff57 	bl	800f144 <__sfmoreglue>
 800f296:	1e04      	subs	r4, r0, #0
 800f298:	6030      	str	r0, [r6, #0]
 800f29a:	d1d5      	bne.n	800f248 <__sfp+0x28>
 800f29c:	f7ff ff70 	bl	800f180 <__sfp_lock_release>
 800f2a0:	230c      	movs	r3, #12
 800f2a2:	603b      	str	r3, [r7, #0]
 800f2a4:	e7ef      	b.n	800f286 <__sfp+0x66>
 800f2a6:	46c0      	nop			; (mov r8, r8)
 800f2a8:	08015774 	.word	0x08015774
 800f2ac:	ffff0001 	.word	0xffff0001

0800f2b0 <_fwalk_reent>:
 800f2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2b2:	0004      	movs	r4, r0
 800f2b4:	0006      	movs	r6, r0
 800f2b6:	2700      	movs	r7, #0
 800f2b8:	9101      	str	r1, [sp, #4]
 800f2ba:	3448      	adds	r4, #72	; 0x48
 800f2bc:	6863      	ldr	r3, [r4, #4]
 800f2be:	68a5      	ldr	r5, [r4, #8]
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	9b00      	ldr	r3, [sp, #0]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	d504      	bpl.n	800f2d4 <_fwalk_reent+0x24>
 800f2ca:	6824      	ldr	r4, [r4, #0]
 800f2cc:	2c00      	cmp	r4, #0
 800f2ce:	d1f5      	bne.n	800f2bc <_fwalk_reent+0xc>
 800f2d0:	0038      	movs	r0, r7
 800f2d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f2d4:	89ab      	ldrh	r3, [r5, #12]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d908      	bls.n	800f2ec <_fwalk_reent+0x3c>
 800f2da:	220e      	movs	r2, #14
 800f2dc:	5eab      	ldrsh	r3, [r5, r2]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	d004      	beq.n	800f2ec <_fwalk_reent+0x3c>
 800f2e2:	0029      	movs	r1, r5
 800f2e4:	0030      	movs	r0, r6
 800f2e6:	9b01      	ldr	r3, [sp, #4]
 800f2e8:	4798      	blx	r3
 800f2ea:	4307      	orrs	r7, r0
 800f2ec:	3568      	adds	r5, #104	; 0x68
 800f2ee:	e7e8      	b.n	800f2c2 <_fwalk_reent+0x12>

0800f2f0 <__retarget_lock_init_recursive>:
 800f2f0:	4770      	bx	lr

0800f2f2 <__retarget_lock_acquire_recursive>:
 800f2f2:	4770      	bx	lr

0800f2f4 <__retarget_lock_release_recursive>:
 800f2f4:	4770      	bx	lr
	...

0800f2f8 <__swhatbuf_r>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	000e      	movs	r6, r1
 800f2fc:	001d      	movs	r5, r3
 800f2fe:	230e      	movs	r3, #14
 800f300:	5ec9      	ldrsh	r1, [r1, r3]
 800f302:	0014      	movs	r4, r2
 800f304:	b096      	sub	sp, #88	; 0x58
 800f306:	2900      	cmp	r1, #0
 800f308:	da07      	bge.n	800f31a <__swhatbuf_r+0x22>
 800f30a:	2300      	movs	r3, #0
 800f30c:	602b      	str	r3, [r5, #0]
 800f30e:	89b3      	ldrh	r3, [r6, #12]
 800f310:	061b      	lsls	r3, r3, #24
 800f312:	d411      	bmi.n	800f338 <__swhatbuf_r+0x40>
 800f314:	2380      	movs	r3, #128	; 0x80
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	e00f      	b.n	800f33a <__swhatbuf_r+0x42>
 800f31a:	466a      	mov	r2, sp
 800f31c:	f000 fbbe 	bl	800fa9c <_fstat_r>
 800f320:	2800      	cmp	r0, #0
 800f322:	dbf2      	blt.n	800f30a <__swhatbuf_r+0x12>
 800f324:	23f0      	movs	r3, #240	; 0xf0
 800f326:	9901      	ldr	r1, [sp, #4]
 800f328:	021b      	lsls	r3, r3, #8
 800f32a:	4019      	ands	r1, r3
 800f32c:	4b05      	ldr	r3, [pc, #20]	; (800f344 <__swhatbuf_r+0x4c>)
 800f32e:	18c9      	adds	r1, r1, r3
 800f330:	424b      	negs	r3, r1
 800f332:	4159      	adcs	r1, r3
 800f334:	6029      	str	r1, [r5, #0]
 800f336:	e7ed      	b.n	800f314 <__swhatbuf_r+0x1c>
 800f338:	2340      	movs	r3, #64	; 0x40
 800f33a:	2000      	movs	r0, #0
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	b016      	add	sp, #88	; 0x58
 800f340:	bd70      	pop	{r4, r5, r6, pc}
 800f342:	46c0      	nop			; (mov r8, r8)
 800f344:	ffffe000 	.word	0xffffe000

0800f348 <__smakebuf_r>:
 800f348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f34a:	2602      	movs	r6, #2
 800f34c:	898b      	ldrh	r3, [r1, #12]
 800f34e:	0005      	movs	r5, r0
 800f350:	000c      	movs	r4, r1
 800f352:	4233      	tst	r3, r6
 800f354:	d006      	beq.n	800f364 <__smakebuf_r+0x1c>
 800f356:	0023      	movs	r3, r4
 800f358:	3347      	adds	r3, #71	; 0x47
 800f35a:	6023      	str	r3, [r4, #0]
 800f35c:	6123      	str	r3, [r4, #16]
 800f35e:	2301      	movs	r3, #1
 800f360:	6163      	str	r3, [r4, #20]
 800f362:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f364:	466a      	mov	r2, sp
 800f366:	ab01      	add	r3, sp, #4
 800f368:	f7ff ffc6 	bl	800f2f8 <__swhatbuf_r>
 800f36c:	9900      	ldr	r1, [sp, #0]
 800f36e:	0007      	movs	r7, r0
 800f370:	0028      	movs	r0, r5
 800f372:	f7ff fc1b 	bl	800ebac <_malloc_r>
 800f376:	2800      	cmp	r0, #0
 800f378:	d108      	bne.n	800f38c <__smakebuf_r+0x44>
 800f37a:	220c      	movs	r2, #12
 800f37c:	5ea3      	ldrsh	r3, [r4, r2]
 800f37e:	059a      	lsls	r2, r3, #22
 800f380:	d4ef      	bmi.n	800f362 <__smakebuf_r+0x1a>
 800f382:	2203      	movs	r2, #3
 800f384:	4393      	bics	r3, r2
 800f386:	431e      	orrs	r6, r3
 800f388:	81a6      	strh	r6, [r4, #12]
 800f38a:	e7e4      	b.n	800f356 <__smakebuf_r+0xe>
 800f38c:	4b0f      	ldr	r3, [pc, #60]	; (800f3cc <__smakebuf_r+0x84>)
 800f38e:	62ab      	str	r3, [r5, #40]	; 0x28
 800f390:	2380      	movs	r3, #128	; 0x80
 800f392:	89a2      	ldrh	r2, [r4, #12]
 800f394:	6020      	str	r0, [r4, #0]
 800f396:	4313      	orrs	r3, r2
 800f398:	81a3      	strh	r3, [r4, #12]
 800f39a:	9b00      	ldr	r3, [sp, #0]
 800f39c:	6120      	str	r0, [r4, #16]
 800f39e:	6163      	str	r3, [r4, #20]
 800f3a0:	9b01      	ldr	r3, [sp, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00d      	beq.n	800f3c2 <__smakebuf_r+0x7a>
 800f3a6:	0028      	movs	r0, r5
 800f3a8:	230e      	movs	r3, #14
 800f3aa:	5ee1      	ldrsh	r1, [r4, r3]
 800f3ac:	f000 fb88 	bl	800fac0 <_isatty_r>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d006      	beq.n	800f3c2 <__smakebuf_r+0x7a>
 800f3b4:	2203      	movs	r2, #3
 800f3b6:	89a3      	ldrh	r3, [r4, #12]
 800f3b8:	4393      	bics	r3, r2
 800f3ba:	001a      	movs	r2, r3
 800f3bc:	2301      	movs	r3, #1
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	81a3      	strh	r3, [r4, #12]
 800f3c2:	89a0      	ldrh	r0, [r4, #12]
 800f3c4:	4307      	orrs	r7, r0
 800f3c6:	81a7      	strh	r7, [r4, #12]
 800f3c8:	e7cb      	b.n	800f362 <__smakebuf_r+0x1a>
 800f3ca:	46c0      	nop			; (mov r8, r8)
 800f3cc:	0800f135 	.word	0x0800f135

0800f3d0 <__malloc_lock>:
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	4802      	ldr	r0, [pc, #8]	; (800f3dc <__malloc_lock+0xc>)
 800f3d4:	f7ff ff8d 	bl	800f2f2 <__retarget_lock_acquire_recursive>
 800f3d8:	bd10      	pop	{r4, pc}
 800f3da:	46c0      	nop			; (mov r8, r8)
 800f3dc:	200006e4 	.word	0x200006e4

0800f3e0 <__malloc_unlock>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	4802      	ldr	r0, [pc, #8]	; (800f3ec <__malloc_unlock+0xc>)
 800f3e4:	f7ff ff86 	bl	800f2f4 <__retarget_lock_release_recursive>
 800f3e8:	bd10      	pop	{r4, pc}
 800f3ea:	46c0      	nop			; (mov r8, r8)
 800f3ec:	200006e4 	.word	0x200006e4

0800f3f0 <__sfputc_r>:
 800f3f0:	6893      	ldr	r3, [r2, #8]
 800f3f2:	b510      	push	{r4, lr}
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	6093      	str	r3, [r2, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da04      	bge.n	800f406 <__sfputc_r+0x16>
 800f3fc:	6994      	ldr	r4, [r2, #24]
 800f3fe:	42a3      	cmp	r3, r4
 800f400:	db07      	blt.n	800f412 <__sfputc_r+0x22>
 800f402:	290a      	cmp	r1, #10
 800f404:	d005      	beq.n	800f412 <__sfputc_r+0x22>
 800f406:	6813      	ldr	r3, [r2, #0]
 800f408:	1c58      	adds	r0, r3, #1
 800f40a:	6010      	str	r0, [r2, #0]
 800f40c:	7019      	strb	r1, [r3, #0]
 800f40e:	0008      	movs	r0, r1
 800f410:	bd10      	pop	{r4, pc}
 800f412:	f7ff fcd1 	bl	800edb8 <__swbuf_r>
 800f416:	0001      	movs	r1, r0
 800f418:	e7f9      	b.n	800f40e <__sfputc_r+0x1e>

0800f41a <__sfputs_r>:
 800f41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41c:	0006      	movs	r6, r0
 800f41e:	000f      	movs	r7, r1
 800f420:	0014      	movs	r4, r2
 800f422:	18d5      	adds	r5, r2, r3
 800f424:	42ac      	cmp	r4, r5
 800f426:	d101      	bne.n	800f42c <__sfputs_r+0x12>
 800f428:	2000      	movs	r0, #0
 800f42a:	e007      	b.n	800f43c <__sfputs_r+0x22>
 800f42c:	7821      	ldrb	r1, [r4, #0]
 800f42e:	003a      	movs	r2, r7
 800f430:	0030      	movs	r0, r6
 800f432:	f7ff ffdd 	bl	800f3f0 <__sfputc_r>
 800f436:	3401      	adds	r4, #1
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d1f3      	bne.n	800f424 <__sfputs_r+0xa>
 800f43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f440 <_vfiprintf_r>:
 800f440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f442:	b0a1      	sub	sp, #132	; 0x84
 800f444:	0006      	movs	r6, r0
 800f446:	000c      	movs	r4, r1
 800f448:	001f      	movs	r7, r3
 800f44a:	9203      	str	r2, [sp, #12]
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d004      	beq.n	800f45a <_vfiprintf_r+0x1a>
 800f450:	6983      	ldr	r3, [r0, #24]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d101      	bne.n	800f45a <_vfiprintf_r+0x1a>
 800f456:	f7ff feab 	bl	800f1b0 <__sinit>
 800f45a:	4b8e      	ldr	r3, [pc, #568]	; (800f694 <_vfiprintf_r+0x254>)
 800f45c:	429c      	cmp	r4, r3
 800f45e:	d11c      	bne.n	800f49a <_vfiprintf_r+0x5a>
 800f460:	6874      	ldr	r4, [r6, #4]
 800f462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f464:	07db      	lsls	r3, r3, #31
 800f466:	d405      	bmi.n	800f474 <_vfiprintf_r+0x34>
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	059b      	lsls	r3, r3, #22
 800f46c:	d402      	bmi.n	800f474 <_vfiprintf_r+0x34>
 800f46e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f470:	f7ff ff3f 	bl	800f2f2 <__retarget_lock_acquire_recursive>
 800f474:	89a3      	ldrh	r3, [r4, #12]
 800f476:	071b      	lsls	r3, r3, #28
 800f478:	d502      	bpl.n	800f480 <_vfiprintf_r+0x40>
 800f47a:	6923      	ldr	r3, [r4, #16]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d11d      	bne.n	800f4bc <_vfiprintf_r+0x7c>
 800f480:	0021      	movs	r1, r4
 800f482:	0030      	movs	r0, r6
 800f484:	f7ff fcee 	bl	800ee64 <__swsetup_r>
 800f488:	2800      	cmp	r0, #0
 800f48a:	d017      	beq.n	800f4bc <_vfiprintf_r+0x7c>
 800f48c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f48e:	07db      	lsls	r3, r3, #31
 800f490:	d50d      	bpl.n	800f4ae <_vfiprintf_r+0x6e>
 800f492:	2001      	movs	r0, #1
 800f494:	4240      	negs	r0, r0
 800f496:	b021      	add	sp, #132	; 0x84
 800f498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f49a:	4b7f      	ldr	r3, [pc, #508]	; (800f698 <_vfiprintf_r+0x258>)
 800f49c:	429c      	cmp	r4, r3
 800f49e:	d101      	bne.n	800f4a4 <_vfiprintf_r+0x64>
 800f4a0:	68b4      	ldr	r4, [r6, #8]
 800f4a2:	e7de      	b.n	800f462 <_vfiprintf_r+0x22>
 800f4a4:	4b7d      	ldr	r3, [pc, #500]	; (800f69c <_vfiprintf_r+0x25c>)
 800f4a6:	429c      	cmp	r4, r3
 800f4a8:	d1db      	bne.n	800f462 <_vfiprintf_r+0x22>
 800f4aa:	68f4      	ldr	r4, [r6, #12]
 800f4ac:	e7d9      	b.n	800f462 <_vfiprintf_r+0x22>
 800f4ae:	89a3      	ldrh	r3, [r4, #12]
 800f4b0:	059b      	lsls	r3, r3, #22
 800f4b2:	d4ee      	bmi.n	800f492 <_vfiprintf_r+0x52>
 800f4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4b6:	f7ff ff1d 	bl	800f2f4 <__retarget_lock_release_recursive>
 800f4ba:	e7ea      	b.n	800f492 <_vfiprintf_r+0x52>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	ad08      	add	r5, sp, #32
 800f4c0:	616b      	str	r3, [r5, #20]
 800f4c2:	3320      	adds	r3, #32
 800f4c4:	766b      	strb	r3, [r5, #25]
 800f4c6:	3310      	adds	r3, #16
 800f4c8:	76ab      	strb	r3, [r5, #26]
 800f4ca:	9707      	str	r7, [sp, #28]
 800f4cc:	9f03      	ldr	r7, [sp, #12]
 800f4ce:	783b      	ldrb	r3, [r7, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <_vfiprintf_r+0x98>
 800f4d4:	2b25      	cmp	r3, #37	; 0x25
 800f4d6:	d14e      	bne.n	800f576 <_vfiprintf_r+0x136>
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	1afb      	subs	r3, r7, r3
 800f4dc:	9305      	str	r3, [sp, #20]
 800f4de:	9b03      	ldr	r3, [sp, #12]
 800f4e0:	429f      	cmp	r7, r3
 800f4e2:	d00d      	beq.n	800f500 <_vfiprintf_r+0xc0>
 800f4e4:	9b05      	ldr	r3, [sp, #20]
 800f4e6:	0021      	movs	r1, r4
 800f4e8:	0030      	movs	r0, r6
 800f4ea:	9a03      	ldr	r2, [sp, #12]
 800f4ec:	f7ff ff95 	bl	800f41a <__sfputs_r>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d100      	bne.n	800f4f6 <_vfiprintf_r+0xb6>
 800f4f4:	e0b5      	b.n	800f662 <_vfiprintf_r+0x222>
 800f4f6:	696a      	ldr	r2, [r5, #20]
 800f4f8:	9b05      	ldr	r3, [sp, #20]
 800f4fa:	4694      	mov	ip, r2
 800f4fc:	4463      	add	r3, ip
 800f4fe:	616b      	str	r3, [r5, #20]
 800f500:	783b      	ldrb	r3, [r7, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d100      	bne.n	800f508 <_vfiprintf_r+0xc8>
 800f506:	e0ac      	b.n	800f662 <_vfiprintf_r+0x222>
 800f508:	2201      	movs	r2, #1
 800f50a:	1c7b      	adds	r3, r7, #1
 800f50c:	9303      	str	r3, [sp, #12]
 800f50e:	2300      	movs	r3, #0
 800f510:	4252      	negs	r2, r2
 800f512:	606a      	str	r2, [r5, #4]
 800f514:	a904      	add	r1, sp, #16
 800f516:	3254      	adds	r2, #84	; 0x54
 800f518:	1852      	adds	r2, r2, r1
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	60eb      	str	r3, [r5, #12]
 800f51e:	60ab      	str	r3, [r5, #8]
 800f520:	7013      	strb	r3, [r2, #0]
 800f522:	65ab      	str	r3, [r5, #88]	; 0x58
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	2205      	movs	r2, #5
 800f528:	7819      	ldrb	r1, [r3, #0]
 800f52a:	485d      	ldr	r0, [pc, #372]	; (800f6a0 <_vfiprintf_r+0x260>)
 800f52c:	f000 faee 	bl	800fb0c <memchr>
 800f530:	9b03      	ldr	r3, [sp, #12]
 800f532:	1c5f      	adds	r7, r3, #1
 800f534:	2800      	cmp	r0, #0
 800f536:	d120      	bne.n	800f57a <_vfiprintf_r+0x13a>
 800f538:	682a      	ldr	r2, [r5, #0]
 800f53a:	06d3      	lsls	r3, r2, #27
 800f53c:	d504      	bpl.n	800f548 <_vfiprintf_r+0x108>
 800f53e:	2353      	movs	r3, #83	; 0x53
 800f540:	a904      	add	r1, sp, #16
 800f542:	185b      	adds	r3, r3, r1
 800f544:	2120      	movs	r1, #32
 800f546:	7019      	strb	r1, [r3, #0]
 800f548:	0713      	lsls	r3, r2, #28
 800f54a:	d504      	bpl.n	800f556 <_vfiprintf_r+0x116>
 800f54c:	2353      	movs	r3, #83	; 0x53
 800f54e:	a904      	add	r1, sp, #16
 800f550:	185b      	adds	r3, r3, r1
 800f552:	212b      	movs	r1, #43	; 0x2b
 800f554:	7019      	strb	r1, [r3, #0]
 800f556:	9b03      	ldr	r3, [sp, #12]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b2a      	cmp	r3, #42	; 0x2a
 800f55c:	d016      	beq.n	800f58c <_vfiprintf_r+0x14c>
 800f55e:	2100      	movs	r1, #0
 800f560:	68eb      	ldr	r3, [r5, #12]
 800f562:	9f03      	ldr	r7, [sp, #12]
 800f564:	783a      	ldrb	r2, [r7, #0]
 800f566:	1c78      	adds	r0, r7, #1
 800f568:	3a30      	subs	r2, #48	; 0x30
 800f56a:	4684      	mov	ip, r0
 800f56c:	2a09      	cmp	r2, #9
 800f56e:	d94f      	bls.n	800f610 <_vfiprintf_r+0x1d0>
 800f570:	2900      	cmp	r1, #0
 800f572:	d111      	bne.n	800f598 <_vfiprintf_r+0x158>
 800f574:	e017      	b.n	800f5a6 <_vfiprintf_r+0x166>
 800f576:	3701      	adds	r7, #1
 800f578:	e7a9      	b.n	800f4ce <_vfiprintf_r+0x8e>
 800f57a:	4b49      	ldr	r3, [pc, #292]	; (800f6a0 <_vfiprintf_r+0x260>)
 800f57c:	682a      	ldr	r2, [r5, #0]
 800f57e:	1ac0      	subs	r0, r0, r3
 800f580:	2301      	movs	r3, #1
 800f582:	4083      	lsls	r3, r0
 800f584:	4313      	orrs	r3, r2
 800f586:	602b      	str	r3, [r5, #0]
 800f588:	9703      	str	r7, [sp, #12]
 800f58a:	e7cb      	b.n	800f524 <_vfiprintf_r+0xe4>
 800f58c:	9b07      	ldr	r3, [sp, #28]
 800f58e:	1d19      	adds	r1, r3, #4
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	9107      	str	r1, [sp, #28]
 800f594:	2b00      	cmp	r3, #0
 800f596:	db01      	blt.n	800f59c <_vfiprintf_r+0x15c>
 800f598:	930b      	str	r3, [sp, #44]	; 0x2c
 800f59a:	e004      	b.n	800f5a6 <_vfiprintf_r+0x166>
 800f59c:	425b      	negs	r3, r3
 800f59e:	60eb      	str	r3, [r5, #12]
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	602b      	str	r3, [r5, #0]
 800f5a6:	783b      	ldrb	r3, [r7, #0]
 800f5a8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5aa:	d10a      	bne.n	800f5c2 <_vfiprintf_r+0x182>
 800f5ac:	787b      	ldrb	r3, [r7, #1]
 800f5ae:	2b2a      	cmp	r3, #42	; 0x2a
 800f5b0:	d137      	bne.n	800f622 <_vfiprintf_r+0x1e2>
 800f5b2:	9b07      	ldr	r3, [sp, #28]
 800f5b4:	3702      	adds	r7, #2
 800f5b6:	1d1a      	adds	r2, r3, #4
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	9207      	str	r2, [sp, #28]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	db2d      	blt.n	800f61c <_vfiprintf_r+0x1dc>
 800f5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c2:	2203      	movs	r2, #3
 800f5c4:	7839      	ldrb	r1, [r7, #0]
 800f5c6:	4837      	ldr	r0, [pc, #220]	; (800f6a4 <_vfiprintf_r+0x264>)
 800f5c8:	f000 faa0 	bl	800fb0c <memchr>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d007      	beq.n	800f5e0 <_vfiprintf_r+0x1a0>
 800f5d0:	4b34      	ldr	r3, [pc, #208]	; (800f6a4 <_vfiprintf_r+0x264>)
 800f5d2:	682a      	ldr	r2, [r5, #0]
 800f5d4:	1ac0      	subs	r0, r0, r3
 800f5d6:	2340      	movs	r3, #64	; 0x40
 800f5d8:	4083      	lsls	r3, r0
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	3701      	adds	r7, #1
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	7839      	ldrb	r1, [r7, #0]
 800f5e2:	1c7b      	adds	r3, r7, #1
 800f5e4:	2206      	movs	r2, #6
 800f5e6:	4830      	ldr	r0, [pc, #192]	; (800f6a8 <_vfiprintf_r+0x268>)
 800f5e8:	9303      	str	r3, [sp, #12]
 800f5ea:	7629      	strb	r1, [r5, #24]
 800f5ec:	f000 fa8e 	bl	800fb0c <memchr>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d045      	beq.n	800f680 <_vfiprintf_r+0x240>
 800f5f4:	4b2d      	ldr	r3, [pc, #180]	; (800f6ac <_vfiprintf_r+0x26c>)
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d127      	bne.n	800f64a <_vfiprintf_r+0x20a>
 800f5fa:	2207      	movs	r2, #7
 800f5fc:	9b07      	ldr	r3, [sp, #28]
 800f5fe:	3307      	adds	r3, #7
 800f600:	4393      	bics	r3, r2
 800f602:	3308      	adds	r3, #8
 800f604:	9307      	str	r3, [sp, #28]
 800f606:	696b      	ldr	r3, [r5, #20]
 800f608:	9a04      	ldr	r2, [sp, #16]
 800f60a:	189b      	adds	r3, r3, r2
 800f60c:	616b      	str	r3, [r5, #20]
 800f60e:	e75d      	b.n	800f4cc <_vfiprintf_r+0x8c>
 800f610:	210a      	movs	r1, #10
 800f612:	434b      	muls	r3, r1
 800f614:	4667      	mov	r7, ip
 800f616:	189b      	adds	r3, r3, r2
 800f618:	3909      	subs	r1, #9
 800f61a:	e7a3      	b.n	800f564 <_vfiprintf_r+0x124>
 800f61c:	2301      	movs	r3, #1
 800f61e:	425b      	negs	r3, r3
 800f620:	e7ce      	b.n	800f5c0 <_vfiprintf_r+0x180>
 800f622:	2300      	movs	r3, #0
 800f624:	001a      	movs	r2, r3
 800f626:	3701      	adds	r7, #1
 800f628:	606b      	str	r3, [r5, #4]
 800f62a:	7839      	ldrb	r1, [r7, #0]
 800f62c:	1c78      	adds	r0, r7, #1
 800f62e:	3930      	subs	r1, #48	; 0x30
 800f630:	4684      	mov	ip, r0
 800f632:	2909      	cmp	r1, #9
 800f634:	d903      	bls.n	800f63e <_vfiprintf_r+0x1fe>
 800f636:	2b00      	cmp	r3, #0
 800f638:	d0c3      	beq.n	800f5c2 <_vfiprintf_r+0x182>
 800f63a:	9209      	str	r2, [sp, #36]	; 0x24
 800f63c:	e7c1      	b.n	800f5c2 <_vfiprintf_r+0x182>
 800f63e:	230a      	movs	r3, #10
 800f640:	435a      	muls	r2, r3
 800f642:	4667      	mov	r7, ip
 800f644:	1852      	adds	r2, r2, r1
 800f646:	3b09      	subs	r3, #9
 800f648:	e7ef      	b.n	800f62a <_vfiprintf_r+0x1ea>
 800f64a:	ab07      	add	r3, sp, #28
 800f64c:	9300      	str	r3, [sp, #0]
 800f64e:	0022      	movs	r2, r4
 800f650:	0029      	movs	r1, r5
 800f652:	0030      	movs	r0, r6
 800f654:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <_vfiprintf_r+0x270>)
 800f656:	e000      	b.n	800f65a <_vfiprintf_r+0x21a>
 800f658:	bf00      	nop
 800f65a:	9004      	str	r0, [sp, #16]
 800f65c:	9b04      	ldr	r3, [sp, #16]
 800f65e:	3301      	adds	r3, #1
 800f660:	d1d1      	bne.n	800f606 <_vfiprintf_r+0x1c6>
 800f662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f664:	07db      	lsls	r3, r3, #31
 800f666:	d405      	bmi.n	800f674 <_vfiprintf_r+0x234>
 800f668:	89a3      	ldrh	r3, [r4, #12]
 800f66a:	059b      	lsls	r3, r3, #22
 800f66c:	d402      	bmi.n	800f674 <_vfiprintf_r+0x234>
 800f66e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f670:	f7ff fe40 	bl	800f2f4 <__retarget_lock_release_recursive>
 800f674:	89a3      	ldrh	r3, [r4, #12]
 800f676:	065b      	lsls	r3, r3, #25
 800f678:	d500      	bpl.n	800f67c <_vfiprintf_r+0x23c>
 800f67a:	e70a      	b.n	800f492 <_vfiprintf_r+0x52>
 800f67c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f67e:	e70a      	b.n	800f496 <_vfiprintf_r+0x56>
 800f680:	ab07      	add	r3, sp, #28
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	0022      	movs	r2, r4
 800f686:	0029      	movs	r1, r5
 800f688:	0030      	movs	r0, r6
 800f68a:	4b09      	ldr	r3, [pc, #36]	; (800f6b0 <_vfiprintf_r+0x270>)
 800f68c:	f000 f882 	bl	800f794 <_printf_i>
 800f690:	e7e3      	b.n	800f65a <_vfiprintf_r+0x21a>
 800f692:	46c0      	nop			; (mov r8, r8)
 800f694:	08015798 	.word	0x08015798
 800f698:	080157b8 	.word	0x080157b8
 800f69c:	08015778 	.word	0x08015778
 800f6a0:	080157d8 	.word	0x080157d8
 800f6a4:	080157de 	.word	0x080157de
 800f6a8:	080157e2 	.word	0x080157e2
 800f6ac:	00000000 	.word	0x00000000
 800f6b0:	0800f41b 	.word	0x0800f41b

0800f6b4 <_printf_common>:
 800f6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6b6:	0015      	movs	r5, r2
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	688a      	ldr	r2, [r1, #8]
 800f6bc:	690b      	ldr	r3, [r1, #16]
 800f6be:	000c      	movs	r4, r1
 800f6c0:	9000      	str	r0, [sp, #0]
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	da00      	bge.n	800f6c8 <_printf_common+0x14>
 800f6c6:	0013      	movs	r3, r2
 800f6c8:	0022      	movs	r2, r4
 800f6ca:	602b      	str	r3, [r5, #0]
 800f6cc:	3243      	adds	r2, #67	; 0x43
 800f6ce:	7812      	ldrb	r2, [r2, #0]
 800f6d0:	2a00      	cmp	r2, #0
 800f6d2:	d001      	beq.n	800f6d8 <_printf_common+0x24>
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	602b      	str	r3, [r5, #0]
 800f6d8:	6823      	ldr	r3, [r4, #0]
 800f6da:	069b      	lsls	r3, r3, #26
 800f6dc:	d502      	bpl.n	800f6e4 <_printf_common+0x30>
 800f6de:	682b      	ldr	r3, [r5, #0]
 800f6e0:	3302      	adds	r3, #2
 800f6e2:	602b      	str	r3, [r5, #0]
 800f6e4:	6822      	ldr	r2, [r4, #0]
 800f6e6:	2306      	movs	r3, #6
 800f6e8:	0017      	movs	r7, r2
 800f6ea:	401f      	ands	r7, r3
 800f6ec:	421a      	tst	r2, r3
 800f6ee:	d027      	beq.n	800f740 <_printf_common+0x8c>
 800f6f0:	0023      	movs	r3, r4
 800f6f2:	3343      	adds	r3, #67	; 0x43
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	1e5a      	subs	r2, r3, #1
 800f6f8:	4193      	sbcs	r3, r2
 800f6fa:	6822      	ldr	r2, [r4, #0]
 800f6fc:	0692      	lsls	r2, r2, #26
 800f6fe:	d430      	bmi.n	800f762 <_printf_common+0xae>
 800f700:	0022      	movs	r2, r4
 800f702:	9901      	ldr	r1, [sp, #4]
 800f704:	9800      	ldr	r0, [sp, #0]
 800f706:	9e08      	ldr	r6, [sp, #32]
 800f708:	3243      	adds	r2, #67	; 0x43
 800f70a:	47b0      	blx	r6
 800f70c:	1c43      	adds	r3, r0, #1
 800f70e:	d025      	beq.n	800f75c <_printf_common+0xa8>
 800f710:	2306      	movs	r3, #6
 800f712:	6820      	ldr	r0, [r4, #0]
 800f714:	682a      	ldr	r2, [r5, #0]
 800f716:	68e1      	ldr	r1, [r4, #12]
 800f718:	2500      	movs	r5, #0
 800f71a:	4003      	ands	r3, r0
 800f71c:	2b04      	cmp	r3, #4
 800f71e:	d103      	bne.n	800f728 <_printf_common+0x74>
 800f720:	1a8d      	subs	r5, r1, r2
 800f722:	43eb      	mvns	r3, r5
 800f724:	17db      	asrs	r3, r3, #31
 800f726:	401d      	ands	r5, r3
 800f728:	68a3      	ldr	r3, [r4, #8]
 800f72a:	6922      	ldr	r2, [r4, #16]
 800f72c:	4293      	cmp	r3, r2
 800f72e:	dd01      	ble.n	800f734 <_printf_common+0x80>
 800f730:	1a9b      	subs	r3, r3, r2
 800f732:	18ed      	adds	r5, r5, r3
 800f734:	2700      	movs	r7, #0
 800f736:	42bd      	cmp	r5, r7
 800f738:	d120      	bne.n	800f77c <_printf_common+0xc8>
 800f73a:	2000      	movs	r0, #0
 800f73c:	e010      	b.n	800f760 <_printf_common+0xac>
 800f73e:	3701      	adds	r7, #1
 800f740:	68e3      	ldr	r3, [r4, #12]
 800f742:	682a      	ldr	r2, [r5, #0]
 800f744:	1a9b      	subs	r3, r3, r2
 800f746:	42bb      	cmp	r3, r7
 800f748:	ddd2      	ble.n	800f6f0 <_printf_common+0x3c>
 800f74a:	0022      	movs	r2, r4
 800f74c:	2301      	movs	r3, #1
 800f74e:	9901      	ldr	r1, [sp, #4]
 800f750:	9800      	ldr	r0, [sp, #0]
 800f752:	9e08      	ldr	r6, [sp, #32]
 800f754:	3219      	adds	r2, #25
 800f756:	47b0      	blx	r6
 800f758:	1c43      	adds	r3, r0, #1
 800f75a:	d1f0      	bne.n	800f73e <_printf_common+0x8a>
 800f75c:	2001      	movs	r0, #1
 800f75e:	4240      	negs	r0, r0
 800f760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f762:	2030      	movs	r0, #48	; 0x30
 800f764:	18e1      	adds	r1, r4, r3
 800f766:	3143      	adds	r1, #67	; 0x43
 800f768:	7008      	strb	r0, [r1, #0]
 800f76a:	0021      	movs	r1, r4
 800f76c:	1c5a      	adds	r2, r3, #1
 800f76e:	3145      	adds	r1, #69	; 0x45
 800f770:	7809      	ldrb	r1, [r1, #0]
 800f772:	18a2      	adds	r2, r4, r2
 800f774:	3243      	adds	r2, #67	; 0x43
 800f776:	3302      	adds	r3, #2
 800f778:	7011      	strb	r1, [r2, #0]
 800f77a:	e7c1      	b.n	800f700 <_printf_common+0x4c>
 800f77c:	0022      	movs	r2, r4
 800f77e:	2301      	movs	r3, #1
 800f780:	9901      	ldr	r1, [sp, #4]
 800f782:	9800      	ldr	r0, [sp, #0]
 800f784:	9e08      	ldr	r6, [sp, #32]
 800f786:	321a      	adds	r2, #26
 800f788:	47b0      	blx	r6
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	d0e6      	beq.n	800f75c <_printf_common+0xa8>
 800f78e:	3701      	adds	r7, #1
 800f790:	e7d1      	b.n	800f736 <_printf_common+0x82>
	...

0800f794 <_printf_i>:
 800f794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f796:	b08b      	sub	sp, #44	; 0x2c
 800f798:	9206      	str	r2, [sp, #24]
 800f79a:	000a      	movs	r2, r1
 800f79c:	3243      	adds	r2, #67	; 0x43
 800f79e:	9307      	str	r3, [sp, #28]
 800f7a0:	9005      	str	r0, [sp, #20]
 800f7a2:	9204      	str	r2, [sp, #16]
 800f7a4:	7e0a      	ldrb	r2, [r1, #24]
 800f7a6:	000c      	movs	r4, r1
 800f7a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7aa:	2a78      	cmp	r2, #120	; 0x78
 800f7ac:	d806      	bhi.n	800f7bc <_printf_i+0x28>
 800f7ae:	2a62      	cmp	r2, #98	; 0x62
 800f7b0:	d808      	bhi.n	800f7c4 <_printf_i+0x30>
 800f7b2:	2a00      	cmp	r2, #0
 800f7b4:	d100      	bne.n	800f7b8 <_printf_i+0x24>
 800f7b6:	e0c0      	b.n	800f93a <_printf_i+0x1a6>
 800f7b8:	2a58      	cmp	r2, #88	; 0x58
 800f7ba:	d052      	beq.n	800f862 <_printf_i+0xce>
 800f7bc:	0026      	movs	r6, r4
 800f7be:	3642      	adds	r6, #66	; 0x42
 800f7c0:	7032      	strb	r2, [r6, #0]
 800f7c2:	e022      	b.n	800f80a <_printf_i+0x76>
 800f7c4:	0010      	movs	r0, r2
 800f7c6:	3863      	subs	r0, #99	; 0x63
 800f7c8:	2815      	cmp	r0, #21
 800f7ca:	d8f7      	bhi.n	800f7bc <_printf_i+0x28>
 800f7cc:	f7f0 fc9a 	bl	8000104 <__gnu_thumb1_case_shi>
 800f7d0:	001f0016 	.word	0x001f0016
 800f7d4:	fff6fff6 	.word	0xfff6fff6
 800f7d8:	fff6fff6 	.word	0xfff6fff6
 800f7dc:	fff6001f 	.word	0xfff6001f
 800f7e0:	fff6fff6 	.word	0xfff6fff6
 800f7e4:	00a8fff6 	.word	0x00a8fff6
 800f7e8:	009a0036 	.word	0x009a0036
 800f7ec:	fff6fff6 	.word	0xfff6fff6
 800f7f0:	fff600b9 	.word	0xfff600b9
 800f7f4:	fff60036 	.word	0xfff60036
 800f7f8:	009efff6 	.word	0x009efff6
 800f7fc:	0026      	movs	r6, r4
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	3642      	adds	r6, #66	; 0x42
 800f802:	1d11      	adds	r1, r2, #4
 800f804:	6019      	str	r1, [r3, #0]
 800f806:	6813      	ldr	r3, [r2, #0]
 800f808:	7033      	strb	r3, [r6, #0]
 800f80a:	2301      	movs	r3, #1
 800f80c:	e0a7      	b.n	800f95e <_printf_i+0x1ca>
 800f80e:	6808      	ldr	r0, [r1, #0]
 800f810:	6819      	ldr	r1, [r3, #0]
 800f812:	1d0a      	adds	r2, r1, #4
 800f814:	0605      	lsls	r5, r0, #24
 800f816:	d50b      	bpl.n	800f830 <_printf_i+0x9c>
 800f818:	680d      	ldr	r5, [r1, #0]
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	da03      	bge.n	800f828 <_printf_i+0x94>
 800f820:	232d      	movs	r3, #45	; 0x2d
 800f822:	9a04      	ldr	r2, [sp, #16]
 800f824:	426d      	negs	r5, r5
 800f826:	7013      	strb	r3, [r2, #0]
 800f828:	4b61      	ldr	r3, [pc, #388]	; (800f9b0 <_printf_i+0x21c>)
 800f82a:	270a      	movs	r7, #10
 800f82c:	9303      	str	r3, [sp, #12]
 800f82e:	e032      	b.n	800f896 <_printf_i+0x102>
 800f830:	680d      	ldr	r5, [r1, #0]
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	0641      	lsls	r1, r0, #25
 800f836:	d5f1      	bpl.n	800f81c <_printf_i+0x88>
 800f838:	b22d      	sxth	r5, r5
 800f83a:	e7ef      	b.n	800f81c <_printf_i+0x88>
 800f83c:	680d      	ldr	r5, [r1, #0]
 800f83e:	6819      	ldr	r1, [r3, #0]
 800f840:	1d08      	adds	r0, r1, #4
 800f842:	6018      	str	r0, [r3, #0]
 800f844:	062e      	lsls	r6, r5, #24
 800f846:	d501      	bpl.n	800f84c <_printf_i+0xb8>
 800f848:	680d      	ldr	r5, [r1, #0]
 800f84a:	e003      	b.n	800f854 <_printf_i+0xc0>
 800f84c:	066d      	lsls	r5, r5, #25
 800f84e:	d5fb      	bpl.n	800f848 <_printf_i+0xb4>
 800f850:	680d      	ldr	r5, [r1, #0]
 800f852:	b2ad      	uxth	r5, r5
 800f854:	4b56      	ldr	r3, [pc, #344]	; (800f9b0 <_printf_i+0x21c>)
 800f856:	270a      	movs	r7, #10
 800f858:	9303      	str	r3, [sp, #12]
 800f85a:	2a6f      	cmp	r2, #111	; 0x6f
 800f85c:	d117      	bne.n	800f88e <_printf_i+0xfa>
 800f85e:	2708      	movs	r7, #8
 800f860:	e015      	b.n	800f88e <_printf_i+0xfa>
 800f862:	3145      	adds	r1, #69	; 0x45
 800f864:	700a      	strb	r2, [r1, #0]
 800f866:	4a52      	ldr	r2, [pc, #328]	; (800f9b0 <_printf_i+0x21c>)
 800f868:	9203      	str	r2, [sp, #12]
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	6821      	ldr	r1, [r4, #0]
 800f86e:	ca20      	ldmia	r2!, {r5}
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	0608      	lsls	r0, r1, #24
 800f874:	d550      	bpl.n	800f918 <_printf_i+0x184>
 800f876:	07cb      	lsls	r3, r1, #31
 800f878:	d502      	bpl.n	800f880 <_printf_i+0xec>
 800f87a:	2320      	movs	r3, #32
 800f87c:	4319      	orrs	r1, r3
 800f87e:	6021      	str	r1, [r4, #0]
 800f880:	2710      	movs	r7, #16
 800f882:	2d00      	cmp	r5, #0
 800f884:	d103      	bne.n	800f88e <_printf_i+0xfa>
 800f886:	2320      	movs	r3, #32
 800f888:	6822      	ldr	r2, [r4, #0]
 800f88a:	439a      	bics	r2, r3
 800f88c:	6022      	str	r2, [r4, #0]
 800f88e:	0023      	movs	r3, r4
 800f890:	2200      	movs	r2, #0
 800f892:	3343      	adds	r3, #67	; 0x43
 800f894:	701a      	strb	r2, [r3, #0]
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	60a3      	str	r3, [r4, #8]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	db03      	blt.n	800f8a6 <_printf_i+0x112>
 800f89e:	2204      	movs	r2, #4
 800f8a0:	6821      	ldr	r1, [r4, #0]
 800f8a2:	4391      	bics	r1, r2
 800f8a4:	6021      	str	r1, [r4, #0]
 800f8a6:	2d00      	cmp	r5, #0
 800f8a8:	d102      	bne.n	800f8b0 <_printf_i+0x11c>
 800f8aa:	9e04      	ldr	r6, [sp, #16]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00c      	beq.n	800f8ca <_printf_i+0x136>
 800f8b0:	9e04      	ldr	r6, [sp, #16]
 800f8b2:	0028      	movs	r0, r5
 800f8b4:	0039      	movs	r1, r7
 800f8b6:	f7f0 fcb5 	bl	8000224 <__aeabi_uidivmod>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	3e01      	subs	r6, #1
 800f8be:	5c5b      	ldrb	r3, [r3, r1]
 800f8c0:	7033      	strb	r3, [r6, #0]
 800f8c2:	002b      	movs	r3, r5
 800f8c4:	0005      	movs	r5, r0
 800f8c6:	429f      	cmp	r7, r3
 800f8c8:	d9f3      	bls.n	800f8b2 <_printf_i+0x11e>
 800f8ca:	2f08      	cmp	r7, #8
 800f8cc:	d109      	bne.n	800f8e2 <_printf_i+0x14e>
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	07db      	lsls	r3, r3, #31
 800f8d2:	d506      	bpl.n	800f8e2 <_printf_i+0x14e>
 800f8d4:	6863      	ldr	r3, [r4, #4]
 800f8d6:	6922      	ldr	r2, [r4, #16]
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	dc02      	bgt.n	800f8e2 <_printf_i+0x14e>
 800f8dc:	2330      	movs	r3, #48	; 0x30
 800f8de:	3e01      	subs	r6, #1
 800f8e0:	7033      	strb	r3, [r6, #0]
 800f8e2:	9b04      	ldr	r3, [sp, #16]
 800f8e4:	1b9b      	subs	r3, r3, r6
 800f8e6:	6123      	str	r3, [r4, #16]
 800f8e8:	9b07      	ldr	r3, [sp, #28]
 800f8ea:	0021      	movs	r1, r4
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	9805      	ldr	r0, [sp, #20]
 800f8f0:	9b06      	ldr	r3, [sp, #24]
 800f8f2:	aa09      	add	r2, sp, #36	; 0x24
 800f8f4:	f7ff fede 	bl	800f6b4 <_printf_common>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	d135      	bne.n	800f968 <_printf_i+0x1d4>
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	4240      	negs	r0, r0
 800f900:	b00b      	add	sp, #44	; 0x2c
 800f902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f904:	2220      	movs	r2, #32
 800f906:	6809      	ldr	r1, [r1, #0]
 800f908:	430a      	orrs	r2, r1
 800f90a:	6022      	str	r2, [r4, #0]
 800f90c:	0022      	movs	r2, r4
 800f90e:	2178      	movs	r1, #120	; 0x78
 800f910:	3245      	adds	r2, #69	; 0x45
 800f912:	7011      	strb	r1, [r2, #0]
 800f914:	4a27      	ldr	r2, [pc, #156]	; (800f9b4 <_printf_i+0x220>)
 800f916:	e7a7      	b.n	800f868 <_printf_i+0xd4>
 800f918:	0648      	lsls	r0, r1, #25
 800f91a:	d5ac      	bpl.n	800f876 <_printf_i+0xe2>
 800f91c:	b2ad      	uxth	r5, r5
 800f91e:	e7aa      	b.n	800f876 <_printf_i+0xe2>
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	680d      	ldr	r5, [r1, #0]
 800f924:	1d10      	adds	r0, r2, #4
 800f926:	6949      	ldr	r1, [r1, #20]
 800f928:	6018      	str	r0, [r3, #0]
 800f92a:	6813      	ldr	r3, [r2, #0]
 800f92c:	062e      	lsls	r6, r5, #24
 800f92e:	d501      	bpl.n	800f934 <_printf_i+0x1a0>
 800f930:	6019      	str	r1, [r3, #0]
 800f932:	e002      	b.n	800f93a <_printf_i+0x1a6>
 800f934:	066d      	lsls	r5, r5, #25
 800f936:	d5fb      	bpl.n	800f930 <_printf_i+0x19c>
 800f938:	8019      	strh	r1, [r3, #0]
 800f93a:	2300      	movs	r3, #0
 800f93c:	9e04      	ldr	r6, [sp, #16]
 800f93e:	6123      	str	r3, [r4, #16]
 800f940:	e7d2      	b.n	800f8e8 <_printf_i+0x154>
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	1d11      	adds	r1, r2, #4
 800f946:	6019      	str	r1, [r3, #0]
 800f948:	6816      	ldr	r6, [r2, #0]
 800f94a:	2100      	movs	r1, #0
 800f94c:	0030      	movs	r0, r6
 800f94e:	6862      	ldr	r2, [r4, #4]
 800f950:	f000 f8dc 	bl	800fb0c <memchr>
 800f954:	2800      	cmp	r0, #0
 800f956:	d001      	beq.n	800f95c <_printf_i+0x1c8>
 800f958:	1b80      	subs	r0, r0, r6
 800f95a:	6060      	str	r0, [r4, #4]
 800f95c:	6863      	ldr	r3, [r4, #4]
 800f95e:	6123      	str	r3, [r4, #16]
 800f960:	2300      	movs	r3, #0
 800f962:	9a04      	ldr	r2, [sp, #16]
 800f964:	7013      	strb	r3, [r2, #0]
 800f966:	e7bf      	b.n	800f8e8 <_printf_i+0x154>
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	0032      	movs	r2, r6
 800f96c:	9906      	ldr	r1, [sp, #24]
 800f96e:	9805      	ldr	r0, [sp, #20]
 800f970:	9d07      	ldr	r5, [sp, #28]
 800f972:	47a8      	blx	r5
 800f974:	1c43      	adds	r3, r0, #1
 800f976:	d0c1      	beq.n	800f8fc <_printf_i+0x168>
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	079b      	lsls	r3, r3, #30
 800f97c:	d415      	bmi.n	800f9aa <_printf_i+0x216>
 800f97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f980:	68e0      	ldr	r0, [r4, #12]
 800f982:	4298      	cmp	r0, r3
 800f984:	dabc      	bge.n	800f900 <_printf_i+0x16c>
 800f986:	0018      	movs	r0, r3
 800f988:	e7ba      	b.n	800f900 <_printf_i+0x16c>
 800f98a:	0022      	movs	r2, r4
 800f98c:	2301      	movs	r3, #1
 800f98e:	9906      	ldr	r1, [sp, #24]
 800f990:	9805      	ldr	r0, [sp, #20]
 800f992:	9e07      	ldr	r6, [sp, #28]
 800f994:	3219      	adds	r2, #25
 800f996:	47b0      	blx	r6
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d0af      	beq.n	800f8fc <_printf_i+0x168>
 800f99c:	3501      	adds	r5, #1
 800f99e:	68e3      	ldr	r3, [r4, #12]
 800f9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9a2:	1a9b      	subs	r3, r3, r2
 800f9a4:	42ab      	cmp	r3, r5
 800f9a6:	dcf0      	bgt.n	800f98a <_printf_i+0x1f6>
 800f9a8:	e7e9      	b.n	800f97e <_printf_i+0x1ea>
 800f9aa:	2500      	movs	r5, #0
 800f9ac:	e7f7      	b.n	800f99e <_printf_i+0x20a>
 800f9ae:	46c0      	nop			; (mov r8, r8)
 800f9b0:	080157e9 	.word	0x080157e9
 800f9b4:	080157fa 	.word	0x080157fa

0800f9b8 <__sread>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	000c      	movs	r4, r1
 800f9bc:	250e      	movs	r5, #14
 800f9be:	5f49      	ldrsh	r1, [r1, r5]
 800f9c0:	f000 f8b0 	bl	800fb24 <_read_r>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	db03      	blt.n	800f9d0 <__sread+0x18>
 800f9c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f9ca:	181b      	adds	r3, r3, r0
 800f9cc:	6563      	str	r3, [r4, #84]	; 0x54
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}
 800f9d0:	89a3      	ldrh	r3, [r4, #12]
 800f9d2:	4a02      	ldr	r2, [pc, #8]	; (800f9dc <__sread+0x24>)
 800f9d4:	4013      	ands	r3, r2
 800f9d6:	81a3      	strh	r3, [r4, #12]
 800f9d8:	e7f9      	b.n	800f9ce <__sread+0x16>
 800f9da:	46c0      	nop			; (mov r8, r8)
 800f9dc:	ffffefff 	.word	0xffffefff

0800f9e0 <__swrite>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	001f      	movs	r7, r3
 800f9e4:	898b      	ldrh	r3, [r1, #12]
 800f9e6:	0005      	movs	r5, r0
 800f9e8:	000c      	movs	r4, r1
 800f9ea:	0016      	movs	r6, r2
 800f9ec:	05db      	lsls	r3, r3, #23
 800f9ee:	d505      	bpl.n	800f9fc <__swrite+0x1c>
 800f9f0:	230e      	movs	r3, #14
 800f9f2:	5ec9      	ldrsh	r1, [r1, r3]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	f000 f874 	bl	800fae4 <_lseek_r>
 800f9fc:	89a3      	ldrh	r3, [r4, #12]
 800f9fe:	4a05      	ldr	r2, [pc, #20]	; (800fa14 <__swrite+0x34>)
 800fa00:	0028      	movs	r0, r5
 800fa02:	4013      	ands	r3, r2
 800fa04:	81a3      	strh	r3, [r4, #12]
 800fa06:	0032      	movs	r2, r6
 800fa08:	230e      	movs	r3, #14
 800fa0a:	5ee1      	ldrsh	r1, [r4, r3]
 800fa0c:	003b      	movs	r3, r7
 800fa0e:	f000 f81f 	bl	800fa50 <_write_r>
 800fa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa14:	ffffefff 	.word	0xffffefff

0800fa18 <__sseek>:
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	000c      	movs	r4, r1
 800fa1c:	250e      	movs	r5, #14
 800fa1e:	5f49      	ldrsh	r1, [r1, r5]
 800fa20:	f000 f860 	bl	800fae4 <_lseek_r>
 800fa24:	89a3      	ldrh	r3, [r4, #12]
 800fa26:	1c42      	adds	r2, r0, #1
 800fa28:	d103      	bne.n	800fa32 <__sseek+0x1a>
 800fa2a:	4a05      	ldr	r2, [pc, #20]	; (800fa40 <__sseek+0x28>)
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	81a3      	strh	r3, [r4, #12]
 800fa30:	bd70      	pop	{r4, r5, r6, pc}
 800fa32:	2280      	movs	r2, #128	; 0x80
 800fa34:	0152      	lsls	r2, r2, #5
 800fa36:	4313      	orrs	r3, r2
 800fa38:	81a3      	strh	r3, [r4, #12]
 800fa3a:	6560      	str	r0, [r4, #84]	; 0x54
 800fa3c:	e7f8      	b.n	800fa30 <__sseek+0x18>
 800fa3e:	46c0      	nop			; (mov r8, r8)
 800fa40:	ffffefff 	.word	0xffffefff

0800fa44 <__sclose>:
 800fa44:	b510      	push	{r4, lr}
 800fa46:	230e      	movs	r3, #14
 800fa48:	5ec9      	ldrsh	r1, [r1, r3]
 800fa4a:	f000 f815 	bl	800fa78 <_close_r>
 800fa4e:	bd10      	pop	{r4, pc}

0800fa50 <_write_r>:
 800fa50:	b570      	push	{r4, r5, r6, lr}
 800fa52:	0004      	movs	r4, r0
 800fa54:	0008      	movs	r0, r1
 800fa56:	0011      	movs	r1, r2
 800fa58:	001a      	movs	r2, r3
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	4d05      	ldr	r5, [pc, #20]	; (800fa74 <_write_r+0x24>)
 800fa5e:	602b      	str	r3, [r5, #0]
 800fa60:	f7fa fce1 	bl	800a426 <_write>
 800fa64:	1c43      	adds	r3, r0, #1
 800fa66:	d103      	bne.n	800fa70 <_write_r+0x20>
 800fa68:	682b      	ldr	r3, [r5, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d000      	beq.n	800fa70 <_write_r+0x20>
 800fa6e:	6023      	str	r3, [r4, #0]
 800fa70:	bd70      	pop	{r4, r5, r6, pc}
 800fa72:	46c0      	nop			; (mov r8, r8)
 800fa74:	200006ec 	.word	0x200006ec

0800fa78 <_close_r>:
 800fa78:	2300      	movs	r3, #0
 800fa7a:	b570      	push	{r4, r5, r6, lr}
 800fa7c:	4d06      	ldr	r5, [pc, #24]	; (800fa98 <_close_r+0x20>)
 800fa7e:	0004      	movs	r4, r0
 800fa80:	0008      	movs	r0, r1
 800fa82:	602b      	str	r3, [r5, #0]
 800fa84:	f7fa fceb 	bl	800a45e <_close>
 800fa88:	1c43      	adds	r3, r0, #1
 800fa8a:	d103      	bne.n	800fa94 <_close_r+0x1c>
 800fa8c:	682b      	ldr	r3, [r5, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d000      	beq.n	800fa94 <_close_r+0x1c>
 800fa92:	6023      	str	r3, [r4, #0]
 800fa94:	bd70      	pop	{r4, r5, r6, pc}
 800fa96:	46c0      	nop			; (mov r8, r8)
 800fa98:	200006ec 	.word	0x200006ec

0800fa9c <_fstat_r>:
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	b570      	push	{r4, r5, r6, lr}
 800faa0:	4d06      	ldr	r5, [pc, #24]	; (800fabc <_fstat_r+0x20>)
 800faa2:	0004      	movs	r4, r0
 800faa4:	0008      	movs	r0, r1
 800faa6:	0011      	movs	r1, r2
 800faa8:	602b      	str	r3, [r5, #0]
 800faaa:	f7fa fce2 	bl	800a472 <_fstat>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d103      	bne.n	800faba <_fstat_r+0x1e>
 800fab2:	682b      	ldr	r3, [r5, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d000      	beq.n	800faba <_fstat_r+0x1e>
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	200006ec 	.word	0x200006ec

0800fac0 <_isatty_r>:
 800fac0:	2300      	movs	r3, #0
 800fac2:	b570      	push	{r4, r5, r6, lr}
 800fac4:	4d06      	ldr	r5, [pc, #24]	; (800fae0 <_isatty_r+0x20>)
 800fac6:	0004      	movs	r4, r0
 800fac8:	0008      	movs	r0, r1
 800faca:	602b      	str	r3, [r5, #0]
 800facc:	f7fa fcdf 	bl	800a48e <_isatty>
 800fad0:	1c43      	adds	r3, r0, #1
 800fad2:	d103      	bne.n	800fadc <_isatty_r+0x1c>
 800fad4:	682b      	ldr	r3, [r5, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d000      	beq.n	800fadc <_isatty_r+0x1c>
 800fada:	6023      	str	r3, [r4, #0]
 800fadc:	bd70      	pop	{r4, r5, r6, pc}
 800fade:	46c0      	nop			; (mov r8, r8)
 800fae0:	200006ec 	.word	0x200006ec

0800fae4 <_lseek_r>:
 800fae4:	b570      	push	{r4, r5, r6, lr}
 800fae6:	0004      	movs	r4, r0
 800fae8:	0008      	movs	r0, r1
 800faea:	0011      	movs	r1, r2
 800faec:	001a      	movs	r2, r3
 800faee:	2300      	movs	r3, #0
 800faf0:	4d05      	ldr	r5, [pc, #20]	; (800fb08 <_lseek_r+0x24>)
 800faf2:	602b      	str	r3, [r5, #0]
 800faf4:	f7fa fcd4 	bl	800a4a0 <_lseek>
 800faf8:	1c43      	adds	r3, r0, #1
 800fafa:	d103      	bne.n	800fb04 <_lseek_r+0x20>
 800fafc:	682b      	ldr	r3, [r5, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d000      	beq.n	800fb04 <_lseek_r+0x20>
 800fb02:	6023      	str	r3, [r4, #0]
 800fb04:	bd70      	pop	{r4, r5, r6, pc}
 800fb06:	46c0      	nop			; (mov r8, r8)
 800fb08:	200006ec 	.word	0x200006ec

0800fb0c <memchr>:
 800fb0c:	b2c9      	uxtb	r1, r1
 800fb0e:	1882      	adds	r2, r0, r2
 800fb10:	4290      	cmp	r0, r2
 800fb12:	d101      	bne.n	800fb18 <memchr+0xc>
 800fb14:	2000      	movs	r0, #0
 800fb16:	4770      	bx	lr
 800fb18:	7803      	ldrb	r3, [r0, #0]
 800fb1a:	428b      	cmp	r3, r1
 800fb1c:	d0fb      	beq.n	800fb16 <memchr+0xa>
 800fb1e:	3001      	adds	r0, #1
 800fb20:	e7f6      	b.n	800fb10 <memchr+0x4>
	...

0800fb24 <_read_r>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	0004      	movs	r4, r0
 800fb28:	0008      	movs	r0, r1
 800fb2a:	0011      	movs	r1, r2
 800fb2c:	001a      	movs	r2, r3
 800fb2e:	2300      	movs	r3, #0
 800fb30:	4d05      	ldr	r5, [pc, #20]	; (800fb48 <_read_r+0x24>)
 800fb32:	602b      	str	r3, [r5, #0]
 800fb34:	f7fa fc5a 	bl	800a3ec <_read>
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	d103      	bne.n	800fb44 <_read_r+0x20>
 800fb3c:	682b      	ldr	r3, [r5, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d000      	beq.n	800fb44 <_read_r+0x20>
 800fb42:	6023      	str	r3, [r4, #0]
 800fb44:	bd70      	pop	{r4, r5, r6, pc}
 800fb46:	46c0      	nop			; (mov r8, r8)
 800fb48:	200006ec 	.word	0x200006ec

0800fb4c <cos>:
 800fb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb4e:	4a1e      	ldr	r2, [pc, #120]	; (800fbc8 <cos+0x7c>)
 800fb50:	004b      	lsls	r3, r1, #1
 800fb52:	b087      	sub	sp, #28
 800fb54:	085b      	lsrs	r3, r3, #1
 800fb56:	4293      	cmp	r3, r2
 800fb58:	dc04      	bgt.n	800fb64 <cos+0x18>
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f000 fd07 	bl	8010570 <__kernel_cos>
 800fb62:	e006      	b.n	800fb72 <cos+0x26>
 800fb64:	4a19      	ldr	r2, [pc, #100]	; (800fbcc <cos+0x80>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	dd05      	ble.n	800fb76 <cos+0x2a>
 800fb6a:	0002      	movs	r2, r0
 800fb6c:	000b      	movs	r3, r1
 800fb6e:	f7f2 fd2f 	bl	80025d0 <__aeabi_dsub>
 800fb72:	b007      	add	sp, #28
 800fb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb76:	aa02      	add	r2, sp, #8
 800fb78:	f000 fb0e 	bl	8010198 <__ieee754_rem_pio2>
 800fb7c:	9c04      	ldr	r4, [sp, #16]
 800fb7e:	9d05      	ldr	r5, [sp, #20]
 800fb80:	2303      	movs	r3, #3
 800fb82:	4003      	ands	r3, r0
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d008      	beq.n	800fb9a <cos+0x4e>
 800fb88:	9802      	ldr	r0, [sp, #8]
 800fb8a:	9903      	ldr	r1, [sp, #12]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d00f      	beq.n	800fbb0 <cos+0x64>
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d112      	bne.n	800fbba <cos+0x6e>
 800fb94:	0022      	movs	r2, r4
 800fb96:	002b      	movs	r3, r5
 800fb98:	e7e1      	b.n	800fb5e <cos+0x12>
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	0022      	movs	r2, r4
 800fb9e:	9802      	ldr	r0, [sp, #8]
 800fba0:	9903      	ldr	r1, [sp, #12]
 800fba2:	002b      	movs	r3, r5
 800fba4:	f001 f91a 	bl	8010ddc <__kernel_sin>
 800fba8:	2380      	movs	r3, #128	; 0x80
 800fbaa:	061b      	lsls	r3, r3, #24
 800fbac:	18c9      	adds	r1, r1, r3
 800fbae:	e7e0      	b.n	800fb72 <cos+0x26>
 800fbb0:	0022      	movs	r2, r4
 800fbb2:	002b      	movs	r3, r5
 800fbb4:	f000 fcdc 	bl	8010570 <__kernel_cos>
 800fbb8:	e7f6      	b.n	800fba8 <cos+0x5c>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	0022      	movs	r2, r4
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	002b      	movs	r3, r5
 800fbc2:	f001 f90b 	bl	8010ddc <__kernel_sin>
 800fbc6:	e7d4      	b.n	800fb72 <cos+0x26>
 800fbc8:	3fe921fb 	.word	0x3fe921fb
 800fbcc:	7fefffff 	.word	0x7fefffff

0800fbd0 <sin>:
 800fbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbd2:	4a20      	ldr	r2, [pc, #128]	; (800fc54 <sin+0x84>)
 800fbd4:	004b      	lsls	r3, r1, #1
 800fbd6:	b087      	sub	sp, #28
 800fbd8:	085b      	lsrs	r3, r3, #1
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	dc06      	bgt.n	800fbec <sin+0x1c>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	f001 f8f9 	bl	8010ddc <__kernel_sin>
 800fbea:	e006      	b.n	800fbfa <sin+0x2a>
 800fbec:	4a1a      	ldr	r2, [pc, #104]	; (800fc58 <sin+0x88>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	dd05      	ble.n	800fbfe <sin+0x2e>
 800fbf2:	0002      	movs	r2, r0
 800fbf4:	000b      	movs	r3, r1
 800fbf6:	f7f2 fceb 	bl	80025d0 <__aeabi_dsub>
 800fbfa:	b007      	add	sp, #28
 800fbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfe:	aa02      	add	r2, sp, #8
 800fc00:	f000 faca 	bl	8010198 <__ieee754_rem_pio2>
 800fc04:	9c04      	ldr	r4, [sp, #16]
 800fc06:	9d05      	ldr	r5, [sp, #20]
 800fc08:	2303      	movs	r3, #3
 800fc0a:	4003      	ands	r3, r0
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d00a      	beq.n	800fc26 <sin+0x56>
 800fc10:	9802      	ldr	r0, [sp, #8]
 800fc12:	9903      	ldr	r1, [sp, #12]
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d00d      	beq.n	800fc34 <sin+0x64>
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d115      	bne.n	800fc48 <sin+0x78>
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	9300      	str	r3, [sp, #0]
 800fc20:	0022      	movs	r2, r4
 800fc22:	002b      	movs	r3, r5
 800fc24:	e7df      	b.n	800fbe6 <sin+0x16>
 800fc26:	0022      	movs	r2, r4
 800fc28:	9802      	ldr	r0, [sp, #8]
 800fc2a:	9903      	ldr	r1, [sp, #12]
 800fc2c:	002b      	movs	r3, r5
 800fc2e:	f000 fc9f 	bl	8010570 <__kernel_cos>
 800fc32:	e7e2      	b.n	800fbfa <sin+0x2a>
 800fc34:	2301      	movs	r3, #1
 800fc36:	0022      	movs	r2, r4
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	002b      	movs	r3, r5
 800fc3c:	f001 f8ce 	bl	8010ddc <__kernel_sin>
 800fc40:	2380      	movs	r3, #128	; 0x80
 800fc42:	061b      	lsls	r3, r3, #24
 800fc44:	18c9      	adds	r1, r1, r3
 800fc46:	e7d8      	b.n	800fbfa <sin+0x2a>
 800fc48:	0022      	movs	r2, r4
 800fc4a:	002b      	movs	r3, r5
 800fc4c:	f000 fc90 	bl	8010570 <__kernel_cos>
 800fc50:	e7f6      	b.n	800fc40 <sin+0x70>
 800fc52:	46c0      	nop			; (mov r8, r8)
 800fc54:	3fe921fb 	.word	0x3fe921fb
 800fc58:	7fefffff 	.word	0x7fefffff

0800fc5c <atan2>:
 800fc5c:	b510      	push	{r4, lr}
 800fc5e:	f000 f83f 	bl	800fce0 <__ieee754_atan2>
 800fc62:	bd10      	pop	{r4, pc}

0800fc64 <log>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	0004      	movs	r4, r0
 800fc68:	000d      	movs	r5, r1
 800fc6a:	f000 f8e5 	bl	800fe38 <__ieee754_log>
 800fc6e:	4b19      	ldr	r3, [pc, #100]	; (800fcd4 <log+0x70>)
 800fc70:	0006      	movs	r6, r0
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	000f      	movs	r7, r1
 800fc76:	b25b      	sxtb	r3, r3
 800fc78:	3301      	adds	r3, #1
 800fc7a:	d01d      	beq.n	800fcb8 <log+0x54>
 800fc7c:	0022      	movs	r2, r4
 800fc7e:	002b      	movs	r3, r5
 800fc80:	0020      	movs	r0, r4
 800fc82:	0029      	movs	r1, r5
 800fc84:	f7f3 f836 	bl	8002cf4 <__aeabi_dcmpun>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	d115      	bne.n	800fcb8 <log+0x54>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2300      	movs	r3, #0
 800fc90:	0020      	movs	r0, r4
 800fc92:	0029      	movs	r1, r5
 800fc94:	f7f0 fbe0 	bl	8000458 <__aeabi_dcmpgt>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d10d      	bne.n	800fcb8 <log+0x54>
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	2300      	movs	r3, #0
 800fca0:	0020      	movs	r0, r4
 800fca2:	0029      	movs	r1, r5
 800fca4:	f7f0 fbbe 	bl	8000424 <__aeabi_dcmpeq>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d008      	beq.n	800fcbe <log+0x5a>
 800fcac:	f7fe feee 	bl	800ea8c <__errno>
 800fcb0:	2322      	movs	r3, #34	; 0x22
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	4f08      	ldr	r7, [pc, #32]	; (800fcd8 <log+0x74>)
 800fcb6:	6003      	str	r3, [r0, #0]
 800fcb8:	0030      	movs	r0, r6
 800fcba:	0039      	movs	r1, r7
 800fcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcbe:	f7fe fee5 	bl	800ea8c <__errno>
 800fcc2:	2321      	movs	r3, #33	; 0x21
 800fcc4:	6003      	str	r3, [r0, #0]
 800fcc6:	4805      	ldr	r0, [pc, #20]	; (800fcdc <log+0x78>)
 800fcc8:	f001 fb42 	bl	8011350 <nan>
 800fccc:	0006      	movs	r6, r0
 800fcce:	000f      	movs	r7, r1
 800fcd0:	e7f2      	b.n	800fcb8 <log+0x54>
 800fcd2:	46c0      	nop			; (mov r8, r8)
 800fcd4:	20000098 	.word	0x20000098
 800fcd8:	fff00000 	.word	0xfff00000
 800fcdc:	080157dd 	.word	0x080157dd

0800fce0 <__ieee754_atan2>:
 800fce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fce2:	0016      	movs	r6, r2
 800fce4:	001d      	movs	r5, r3
 800fce6:	005a      	lsls	r2, r3, #1
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	4273      	negs	r3, r6
 800fcec:	4333      	orrs	r3, r6
 800fcee:	4f46      	ldr	r7, [pc, #280]	; (800fe08 <__ieee754_atan2+0x128>)
 800fcf0:	0852      	lsrs	r2, r2, #1
 800fcf2:	0fdb      	lsrs	r3, r3, #31
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	42bb      	cmp	r3, r7
 800fcf8:	d809      	bhi.n	800fd0e <__ieee754_atan2+0x2e>
 800fcfa:	4244      	negs	r4, r0
 800fcfc:	004b      	lsls	r3, r1, #1
 800fcfe:	4304      	orrs	r4, r0
 800fd00:	085b      	lsrs	r3, r3, #1
 800fd02:	0fe4      	lsrs	r4, r4, #31
 800fd04:	9100      	str	r1, [sp, #0]
 800fd06:	9001      	str	r0, [sp, #4]
 800fd08:	431c      	orrs	r4, r3
 800fd0a:	42bc      	cmp	r4, r7
 800fd0c:	d905      	bls.n	800fd1a <__ieee754_atan2+0x3a>
 800fd0e:	0032      	movs	r2, r6
 800fd10:	002b      	movs	r3, r5
 800fd12:	f7f1 fa81 	bl	8001218 <__aeabi_dadd>
 800fd16:	b003      	add	sp, #12
 800fd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd1a:	4c3c      	ldr	r4, [pc, #240]	; (800fe0c <__ieee754_atan2+0x12c>)
 800fd1c:	192c      	adds	r4, r5, r4
 800fd1e:	4334      	orrs	r4, r6
 800fd20:	d102      	bne.n	800fd28 <__ieee754_atan2+0x48>
 800fd22:	f001 f907 	bl	8010f34 <atan>
 800fd26:	e7f6      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fd28:	17ac      	asrs	r4, r5, #30
 800fd2a:	46a4      	mov	ip, r4
 800fd2c:	2402      	movs	r4, #2
 800fd2e:	4667      	mov	r7, ip
 800fd30:	403c      	ands	r4, r7
 800fd32:	9f00      	ldr	r7, [sp, #0]
 800fd34:	0fff      	lsrs	r7, r7, #31
 800fd36:	433c      	orrs	r4, r7
 800fd38:	9f01      	ldr	r7, [sp, #4]
 800fd3a:	431f      	orrs	r7, r3
 800fd3c:	d106      	bne.n	800fd4c <__ieee754_atan2+0x6c>
 800fd3e:	2c02      	cmp	r4, #2
 800fd40:	d056      	beq.n	800fdf0 <__ieee754_atan2+0x110>
 800fd42:	2c03      	cmp	r4, #3
 800fd44:	d1e7      	bne.n	800fd16 <__ieee754_atan2+0x36>
 800fd46:	4832      	ldr	r0, [pc, #200]	; (800fe10 <__ieee754_atan2+0x130>)
 800fd48:	4932      	ldr	r1, [pc, #200]	; (800fe14 <__ieee754_atan2+0x134>)
 800fd4a:	e7e4      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fd4c:	0017      	movs	r7, r2
 800fd4e:	4337      	orrs	r7, r6
 800fd50:	d105      	bne.n	800fd5e <__ieee754_atan2+0x7e>
 800fd52:	9b00      	ldr	r3, [sp, #0]
 800fd54:	482e      	ldr	r0, [pc, #184]	; (800fe10 <__ieee754_atan2+0x130>)
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	da53      	bge.n	800fe02 <__ieee754_atan2+0x122>
 800fd5a:	492f      	ldr	r1, [pc, #188]	; (800fe18 <__ieee754_atan2+0x138>)
 800fd5c:	e7db      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fd5e:	4f2a      	ldr	r7, [pc, #168]	; (800fe08 <__ieee754_atan2+0x128>)
 800fd60:	42ba      	cmp	r2, r7
 800fd62:	d10f      	bne.n	800fd84 <__ieee754_atan2+0xa4>
 800fd64:	3c01      	subs	r4, #1
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d107      	bne.n	800fd7a <__ieee754_atan2+0x9a>
 800fd6a:	2c02      	cmp	r4, #2
 800fd6c:	d843      	bhi.n	800fdf6 <__ieee754_atan2+0x116>
 800fd6e:	4b2b      	ldr	r3, [pc, #172]	; (800fe1c <__ieee754_atan2+0x13c>)
 800fd70:	00e4      	lsls	r4, r4, #3
 800fd72:	191c      	adds	r4, r3, r4
 800fd74:	6820      	ldr	r0, [r4, #0]
 800fd76:	6861      	ldr	r1, [r4, #4]
 800fd78:	e7cd      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fd7a:	2c02      	cmp	r4, #2
 800fd7c:	d83e      	bhi.n	800fdfc <__ieee754_atan2+0x11c>
 800fd7e:	4b28      	ldr	r3, [pc, #160]	; (800fe20 <__ieee754_atan2+0x140>)
 800fd80:	00e4      	lsls	r4, r4, #3
 800fd82:	e7f6      	b.n	800fd72 <__ieee754_atan2+0x92>
 800fd84:	4f20      	ldr	r7, [pc, #128]	; (800fe08 <__ieee754_atan2+0x128>)
 800fd86:	42bb      	cmp	r3, r7
 800fd88:	d0e3      	beq.n	800fd52 <__ieee754_atan2+0x72>
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	151b      	asrs	r3, r3, #20
 800fd8e:	2b3c      	cmp	r3, #60	; 0x3c
 800fd90:	dc18      	bgt.n	800fdc4 <__ieee754_atan2+0xe4>
 800fd92:	2d00      	cmp	r5, #0
 800fd94:	da01      	bge.n	800fd9a <__ieee754_atan2+0xba>
 800fd96:	333c      	adds	r3, #60	; 0x3c
 800fd98:	db17      	blt.n	800fdca <__ieee754_atan2+0xea>
 800fd9a:	0032      	movs	r2, r6
 800fd9c:	002b      	movs	r3, r5
 800fd9e:	f7f1 fda5 	bl	80018ec <__aeabi_ddiv>
 800fda2:	f001 fa47 	bl	8011234 <fabs>
 800fda6:	f001 f8c5 	bl	8010f34 <atan>
 800fdaa:	2c01      	cmp	r4, #1
 800fdac:	d010      	beq.n	800fdd0 <__ieee754_atan2+0xf0>
 800fdae:	2c02      	cmp	r4, #2
 800fdb0:	d013      	beq.n	800fdda <__ieee754_atan2+0xfa>
 800fdb2:	2c00      	cmp	r4, #0
 800fdb4:	d0af      	beq.n	800fd16 <__ieee754_atan2+0x36>
 800fdb6:	4a1b      	ldr	r2, [pc, #108]	; (800fe24 <__ieee754_atan2+0x144>)
 800fdb8:	4b1b      	ldr	r3, [pc, #108]	; (800fe28 <__ieee754_atan2+0x148>)
 800fdba:	f7f2 fc09 	bl	80025d0 <__aeabi_dsub>
 800fdbe:	4a14      	ldr	r2, [pc, #80]	; (800fe10 <__ieee754_atan2+0x130>)
 800fdc0:	4b1a      	ldr	r3, [pc, #104]	; (800fe2c <__ieee754_atan2+0x14c>)
 800fdc2:	e012      	b.n	800fdea <__ieee754_atan2+0x10a>
 800fdc4:	4812      	ldr	r0, [pc, #72]	; (800fe10 <__ieee754_atan2+0x130>)
 800fdc6:	491a      	ldr	r1, [pc, #104]	; (800fe30 <__ieee754_atan2+0x150>)
 800fdc8:	e7ef      	b.n	800fdaa <__ieee754_atan2+0xca>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	2100      	movs	r1, #0
 800fdce:	e7ec      	b.n	800fdaa <__ieee754_atan2+0xca>
 800fdd0:	2480      	movs	r4, #128	; 0x80
 800fdd2:	0624      	lsls	r4, r4, #24
 800fdd4:	190b      	adds	r3, r1, r4
 800fdd6:	0019      	movs	r1, r3
 800fdd8:	e79d      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fdda:	4a12      	ldr	r2, [pc, #72]	; (800fe24 <__ieee754_atan2+0x144>)
 800fddc:	4b12      	ldr	r3, [pc, #72]	; (800fe28 <__ieee754_atan2+0x148>)
 800fdde:	f7f2 fbf7 	bl	80025d0 <__aeabi_dsub>
 800fde2:	0002      	movs	r2, r0
 800fde4:	000b      	movs	r3, r1
 800fde6:	480a      	ldr	r0, [pc, #40]	; (800fe10 <__ieee754_atan2+0x130>)
 800fde8:	4910      	ldr	r1, [pc, #64]	; (800fe2c <__ieee754_atan2+0x14c>)
 800fdea:	f7f2 fbf1 	bl	80025d0 <__aeabi_dsub>
 800fdee:	e792      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fdf0:	4807      	ldr	r0, [pc, #28]	; (800fe10 <__ieee754_atan2+0x130>)
 800fdf2:	490e      	ldr	r1, [pc, #56]	; (800fe2c <__ieee754_atan2+0x14c>)
 800fdf4:	e78f      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fdf6:	4806      	ldr	r0, [pc, #24]	; (800fe10 <__ieee754_atan2+0x130>)
 800fdf8:	490e      	ldr	r1, [pc, #56]	; (800fe34 <__ieee754_atan2+0x154>)
 800fdfa:	e78c      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	2100      	movs	r1, #0
 800fe00:	e789      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fe02:	490b      	ldr	r1, [pc, #44]	; (800fe30 <__ieee754_atan2+0x150>)
 800fe04:	e787      	b.n	800fd16 <__ieee754_atan2+0x36>
 800fe06:	46c0      	nop			; (mov r8, r8)
 800fe08:	7ff00000 	.word	0x7ff00000
 800fe0c:	c0100000 	.word	0xc0100000
 800fe10:	54442d18 	.word	0x54442d18
 800fe14:	c00921fb 	.word	0xc00921fb
 800fe18:	bff921fb 	.word	0xbff921fb
 800fe1c:	08015810 	.word	0x08015810
 800fe20:	08015828 	.word	0x08015828
 800fe24:	33145c07 	.word	0x33145c07
 800fe28:	3ca1a626 	.word	0x3ca1a626
 800fe2c:	400921fb 	.word	0x400921fb
 800fe30:	3ff921fb 	.word	0x3ff921fb
 800fe34:	3fe921fb 	.word	0x3fe921fb

0800fe38 <__ieee754_log>:
 800fe38:	2280      	movs	r2, #128	; 0x80
 800fe3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe3c:	000b      	movs	r3, r1
 800fe3e:	b08d      	sub	sp, #52	; 0x34
 800fe40:	0352      	lsls	r2, r2, #13
 800fe42:	4291      	cmp	r1, r2
 800fe44:	da22      	bge.n	800fe8c <__ieee754_log+0x54>
 800fe46:	004a      	lsls	r2, r1, #1
 800fe48:	0852      	lsrs	r2, r2, #1
 800fe4a:	4302      	orrs	r2, r0
 800fe4c:	d107      	bne.n	800fe5e <__ieee754_log+0x26>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2300      	movs	r3, #0
 800fe52:	2000      	movs	r0, #0
 800fe54:	49b3      	ldr	r1, [pc, #716]	; (8010124 <__ieee754_log+0x2ec>)
 800fe56:	f7f1 fd49 	bl	80018ec <__aeabi_ddiv>
 800fe5a:	b00d      	add	sp, #52	; 0x34
 800fe5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe5e:	2900      	cmp	r1, #0
 800fe60:	da05      	bge.n	800fe6e <__ieee754_log+0x36>
 800fe62:	0002      	movs	r2, r0
 800fe64:	f7f2 fbb4 	bl	80025d0 <__aeabi_dsub>
 800fe68:	2200      	movs	r2, #0
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e7f3      	b.n	800fe56 <__ieee754_log+0x1e>
 800fe6e:	4bae      	ldr	r3, [pc, #696]	; (8010128 <__ieee754_log+0x2f0>)
 800fe70:	2200      	movs	r2, #0
 800fe72:	f7f2 f941 	bl	80020f8 <__aeabi_dmul>
 800fe76:	2436      	movs	r4, #54	; 0x36
 800fe78:	000b      	movs	r3, r1
 800fe7a:	4264      	negs	r4, r4
 800fe7c:	4aab      	ldr	r2, [pc, #684]	; (801012c <__ieee754_log+0x2f4>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	dd06      	ble.n	800fe90 <__ieee754_log+0x58>
 800fe82:	0002      	movs	r2, r0
 800fe84:	000b      	movs	r3, r1
 800fe86:	f7f1 f9c7 	bl	8001218 <__aeabi_dadd>
 800fe8a:	e7e6      	b.n	800fe5a <__ieee754_log+0x22>
 800fe8c:	2400      	movs	r4, #0
 800fe8e:	e7f5      	b.n	800fe7c <__ieee754_log+0x44>
 800fe90:	4da7      	ldr	r5, [pc, #668]	; (8010130 <__ieee754_log+0x2f8>)
 800fe92:	151a      	asrs	r2, r3, #20
 800fe94:	1952      	adds	r2, r2, r5
 800fe96:	1912      	adds	r2, r2, r4
 800fe98:	031b      	lsls	r3, r3, #12
 800fe9a:	4ca6      	ldr	r4, [pc, #664]	; (8010134 <__ieee754_log+0x2fc>)
 800fe9c:	0b1b      	lsrs	r3, r3, #12
 800fe9e:	9302      	str	r3, [sp, #8]
 800fea0:	191c      	adds	r4, r3, r4
 800fea2:	2380      	movs	r3, #128	; 0x80
 800fea4:	035b      	lsls	r3, r3, #13
 800fea6:	4023      	ands	r3, r4
 800fea8:	4ca3      	ldr	r4, [pc, #652]	; (8010138 <__ieee754_log+0x300>)
 800feaa:	9d02      	ldr	r5, [sp, #8]
 800feac:	405c      	eors	r4, r3
 800feae:	151b      	asrs	r3, r3, #20
 800feb0:	189b      	adds	r3, r3, r2
 800feb2:	4325      	orrs	r5, r4
 800feb4:	2200      	movs	r2, #0
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	0029      	movs	r1, r5
 800feba:	4b9f      	ldr	r3, [pc, #636]	; (8010138 <__ieee754_log+0x300>)
 800febc:	f7f2 fb88 	bl	80025d0 <__aeabi_dsub>
 800fec0:	9b02      	ldr	r3, [sp, #8]
 800fec2:	0006      	movs	r6, r0
 800fec4:	3302      	adds	r3, #2
 800fec6:	031b      	lsls	r3, r3, #12
 800fec8:	000f      	movs	r7, r1
 800feca:	2200      	movs	r2, #0
 800fecc:	0b1b      	lsrs	r3, r3, #12
 800fece:	2b02      	cmp	r3, #2
 800fed0:	dc64      	bgt.n	800ff9c <__ieee754_log+0x164>
 800fed2:	2300      	movs	r3, #0
 800fed4:	f7f0 faa6 	bl	8000424 <__aeabi_dcmpeq>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d019      	beq.n	800ff10 <__ieee754_log+0xd8>
 800fedc:	9b00      	ldr	r3, [sp, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d100      	bne.n	800fee4 <__ieee754_log+0xac>
 800fee2:	e11c      	b.n	801011e <__ieee754_log+0x2e6>
 800fee4:	0018      	movs	r0, r3
 800fee6:	f7f2 ff59 	bl	8002d9c <__aeabi_i2d>
 800feea:	4a94      	ldr	r2, [pc, #592]	; (801013c <__ieee754_log+0x304>)
 800feec:	4b94      	ldr	r3, [pc, #592]	; (8010140 <__ieee754_log+0x308>)
 800feee:	0004      	movs	r4, r0
 800fef0:	000d      	movs	r5, r1
 800fef2:	f7f2 f901 	bl	80020f8 <__aeabi_dmul>
 800fef6:	4a93      	ldr	r2, [pc, #588]	; (8010144 <__ieee754_log+0x30c>)
 800fef8:	0006      	movs	r6, r0
 800fefa:	000f      	movs	r7, r1
 800fefc:	4b92      	ldr	r3, [pc, #584]	; (8010148 <__ieee754_log+0x310>)
 800fefe:	0020      	movs	r0, r4
 800ff00:	0029      	movs	r1, r5
 800ff02:	f7f2 f8f9 	bl	80020f8 <__aeabi_dmul>
 800ff06:	0002      	movs	r2, r0
 800ff08:	000b      	movs	r3, r1
 800ff0a:	0030      	movs	r0, r6
 800ff0c:	0039      	movs	r1, r7
 800ff0e:	e7ba      	b.n	800fe86 <__ieee754_log+0x4e>
 800ff10:	4a8e      	ldr	r2, [pc, #568]	; (801014c <__ieee754_log+0x314>)
 800ff12:	4b8f      	ldr	r3, [pc, #572]	; (8010150 <__ieee754_log+0x318>)
 800ff14:	0030      	movs	r0, r6
 800ff16:	0039      	movs	r1, r7
 800ff18:	f7f2 f8ee 	bl	80020f8 <__aeabi_dmul>
 800ff1c:	0002      	movs	r2, r0
 800ff1e:	000b      	movs	r3, r1
 800ff20:	2000      	movs	r0, #0
 800ff22:	498c      	ldr	r1, [pc, #560]	; (8010154 <__ieee754_log+0x31c>)
 800ff24:	f7f2 fb54 	bl	80025d0 <__aeabi_dsub>
 800ff28:	0032      	movs	r2, r6
 800ff2a:	0004      	movs	r4, r0
 800ff2c:	000d      	movs	r5, r1
 800ff2e:	003b      	movs	r3, r7
 800ff30:	0030      	movs	r0, r6
 800ff32:	0039      	movs	r1, r7
 800ff34:	f7f2 f8e0 	bl	80020f8 <__aeabi_dmul>
 800ff38:	000b      	movs	r3, r1
 800ff3a:	0002      	movs	r2, r0
 800ff3c:	0029      	movs	r1, r5
 800ff3e:	0020      	movs	r0, r4
 800ff40:	f7f2 f8da 	bl	80020f8 <__aeabi_dmul>
 800ff44:	9b00      	ldr	r3, [sp, #0]
 800ff46:	9002      	str	r0, [sp, #8]
 800ff48:	9103      	str	r1, [sp, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d106      	bne.n	800ff5c <__ieee754_log+0x124>
 800ff4e:	0002      	movs	r2, r0
 800ff50:	000b      	movs	r3, r1
 800ff52:	0030      	movs	r0, r6
 800ff54:	0039      	movs	r1, r7
 800ff56:	f7f2 fb3b 	bl	80025d0 <__aeabi_dsub>
 800ff5a:	e77e      	b.n	800fe5a <__ieee754_log+0x22>
 800ff5c:	9800      	ldr	r0, [sp, #0]
 800ff5e:	f7f2 ff1d 	bl	8002d9c <__aeabi_i2d>
 800ff62:	4a76      	ldr	r2, [pc, #472]	; (801013c <__ieee754_log+0x304>)
 800ff64:	4b76      	ldr	r3, [pc, #472]	; (8010140 <__ieee754_log+0x308>)
 800ff66:	0004      	movs	r4, r0
 800ff68:	000d      	movs	r5, r1
 800ff6a:	f7f2 f8c5 	bl	80020f8 <__aeabi_dmul>
 800ff6e:	4a75      	ldr	r2, [pc, #468]	; (8010144 <__ieee754_log+0x30c>)
 800ff70:	9000      	str	r0, [sp, #0]
 800ff72:	9101      	str	r1, [sp, #4]
 800ff74:	4b74      	ldr	r3, [pc, #464]	; (8010148 <__ieee754_log+0x310>)
 800ff76:	0020      	movs	r0, r4
 800ff78:	0029      	movs	r1, r5
 800ff7a:	f7f2 f8bd 	bl	80020f8 <__aeabi_dmul>
 800ff7e:	0002      	movs	r2, r0
 800ff80:	000b      	movs	r3, r1
 800ff82:	9802      	ldr	r0, [sp, #8]
 800ff84:	9903      	ldr	r1, [sp, #12]
 800ff86:	f7f2 fb23 	bl	80025d0 <__aeabi_dsub>
 800ff8a:	0032      	movs	r2, r6
 800ff8c:	003b      	movs	r3, r7
 800ff8e:	f7f2 fb1f 	bl	80025d0 <__aeabi_dsub>
 800ff92:	0002      	movs	r2, r0
 800ff94:	000b      	movs	r3, r1
 800ff96:	9800      	ldr	r0, [sp, #0]
 800ff98:	9901      	ldr	r1, [sp, #4]
 800ff9a:	e7dc      	b.n	800ff56 <__ieee754_log+0x11e>
 800ff9c:	2380      	movs	r3, #128	; 0x80
 800ff9e:	05db      	lsls	r3, r3, #23
 800ffa0:	f7f1 f93a 	bl	8001218 <__aeabi_dadd>
 800ffa4:	0002      	movs	r2, r0
 800ffa6:	000b      	movs	r3, r1
 800ffa8:	0030      	movs	r0, r6
 800ffaa:	0039      	movs	r1, r7
 800ffac:	f7f1 fc9e 	bl	80018ec <__aeabi_ddiv>
 800ffb0:	9004      	str	r0, [sp, #16]
 800ffb2:	9105      	str	r1, [sp, #20]
 800ffb4:	9800      	ldr	r0, [sp, #0]
 800ffb6:	f7f2 fef1 	bl	8002d9c <__aeabi_i2d>
 800ffba:	9a04      	ldr	r2, [sp, #16]
 800ffbc:	9b05      	ldr	r3, [sp, #20]
 800ffbe:	9006      	str	r0, [sp, #24]
 800ffc0:	9107      	str	r1, [sp, #28]
 800ffc2:	0010      	movs	r0, r2
 800ffc4:	0019      	movs	r1, r3
 800ffc6:	f7f2 f897 	bl	80020f8 <__aeabi_dmul>
 800ffca:	4a63      	ldr	r2, [pc, #396]	; (8010158 <__ieee754_log+0x320>)
 800ffcc:	9b02      	ldr	r3, [sp, #8]
 800ffce:	4694      	mov	ip, r2
 800ffd0:	4463      	add	r3, ip
 800ffd2:	0002      	movs	r2, r0
 800ffd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffd6:	000b      	movs	r3, r1
 800ffd8:	9008      	str	r0, [sp, #32]
 800ffda:	9109      	str	r1, [sp, #36]	; 0x24
 800ffdc:	f7f2 f88c 	bl	80020f8 <__aeabi_dmul>
 800ffe0:	0004      	movs	r4, r0
 800ffe2:	000d      	movs	r5, r1
 800ffe4:	4a5d      	ldr	r2, [pc, #372]	; (801015c <__ieee754_log+0x324>)
 800ffe6:	4b5e      	ldr	r3, [pc, #376]	; (8010160 <__ieee754_log+0x328>)
 800ffe8:	f7f2 f886 	bl	80020f8 <__aeabi_dmul>
 800ffec:	4a5d      	ldr	r2, [pc, #372]	; (8010164 <__ieee754_log+0x32c>)
 800ffee:	4b5e      	ldr	r3, [pc, #376]	; (8010168 <__ieee754_log+0x330>)
 800fff0:	f7f1 f912 	bl	8001218 <__aeabi_dadd>
 800fff4:	0022      	movs	r2, r4
 800fff6:	002b      	movs	r3, r5
 800fff8:	f7f2 f87e 	bl	80020f8 <__aeabi_dmul>
 800fffc:	4a5b      	ldr	r2, [pc, #364]	; (801016c <__ieee754_log+0x334>)
 800fffe:	4b5c      	ldr	r3, [pc, #368]	; (8010170 <__ieee754_log+0x338>)
 8010000:	f7f1 f90a 	bl	8001218 <__aeabi_dadd>
 8010004:	0022      	movs	r2, r4
 8010006:	002b      	movs	r3, r5
 8010008:	f7f2 f876 	bl	80020f8 <__aeabi_dmul>
 801000c:	4a59      	ldr	r2, [pc, #356]	; (8010174 <__ieee754_log+0x33c>)
 801000e:	4b5a      	ldr	r3, [pc, #360]	; (8010178 <__ieee754_log+0x340>)
 8010010:	f7f1 f902 	bl	8001218 <__aeabi_dadd>
 8010014:	9a08      	ldr	r2, [sp, #32]
 8010016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010018:	f7f2 f86e 	bl	80020f8 <__aeabi_dmul>
 801001c:	4a57      	ldr	r2, [pc, #348]	; (801017c <__ieee754_log+0x344>)
 801001e:	9008      	str	r0, [sp, #32]
 8010020:	9109      	str	r1, [sp, #36]	; 0x24
 8010022:	4b57      	ldr	r3, [pc, #348]	; (8010180 <__ieee754_log+0x348>)
 8010024:	0020      	movs	r0, r4
 8010026:	0029      	movs	r1, r5
 8010028:	f7f2 f866 	bl	80020f8 <__aeabi_dmul>
 801002c:	4a55      	ldr	r2, [pc, #340]	; (8010184 <__ieee754_log+0x34c>)
 801002e:	4b56      	ldr	r3, [pc, #344]	; (8010188 <__ieee754_log+0x350>)
 8010030:	f7f1 f8f2 	bl	8001218 <__aeabi_dadd>
 8010034:	0022      	movs	r2, r4
 8010036:	002b      	movs	r3, r5
 8010038:	f7f2 f85e 	bl	80020f8 <__aeabi_dmul>
 801003c:	4a53      	ldr	r2, [pc, #332]	; (801018c <__ieee754_log+0x354>)
 801003e:	4b54      	ldr	r3, [pc, #336]	; (8010190 <__ieee754_log+0x358>)
 8010040:	f7f1 f8ea 	bl	8001218 <__aeabi_dadd>
 8010044:	0022      	movs	r2, r4
 8010046:	002b      	movs	r3, r5
 8010048:	f7f2 f856 	bl	80020f8 <__aeabi_dmul>
 801004c:	0002      	movs	r2, r0
 801004e:	000b      	movs	r3, r1
 8010050:	9808      	ldr	r0, [sp, #32]
 8010052:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010054:	f7f1 f8e0 	bl	8001218 <__aeabi_dadd>
 8010058:	9a02      	ldr	r2, [sp, #8]
 801005a:	4b4e      	ldr	r3, [pc, #312]	; (8010194 <__ieee754_log+0x35c>)
 801005c:	0004      	movs	r4, r0
 801005e:	1a9b      	subs	r3, r3, r2
 8010060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010062:	000d      	movs	r5, r1
 8010064:	4313      	orrs	r3, r2
 8010066:	2b00      	cmp	r3, #0
 8010068:	dd34      	ble.n	80100d4 <__ieee754_log+0x29c>
 801006a:	2200      	movs	r2, #0
 801006c:	4b39      	ldr	r3, [pc, #228]	; (8010154 <__ieee754_log+0x31c>)
 801006e:	0030      	movs	r0, r6
 8010070:	0039      	movs	r1, r7
 8010072:	f7f2 f841 	bl	80020f8 <__aeabi_dmul>
 8010076:	0032      	movs	r2, r6
 8010078:	003b      	movs	r3, r7
 801007a:	f7f2 f83d 	bl	80020f8 <__aeabi_dmul>
 801007e:	0002      	movs	r2, r0
 8010080:	000b      	movs	r3, r1
 8010082:	9002      	str	r0, [sp, #8]
 8010084:	9103      	str	r1, [sp, #12]
 8010086:	0020      	movs	r0, r4
 8010088:	0029      	movs	r1, r5
 801008a:	f7f1 f8c5 	bl	8001218 <__aeabi_dadd>
 801008e:	9a04      	ldr	r2, [sp, #16]
 8010090:	9b05      	ldr	r3, [sp, #20]
 8010092:	f7f2 f831 	bl	80020f8 <__aeabi_dmul>
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	0004      	movs	r4, r0
 801009a:	000d      	movs	r5, r1
 801009c:	2b00      	cmp	r3, #0
 801009e:	d106      	bne.n	80100ae <__ieee754_log+0x276>
 80100a0:	0002      	movs	r2, r0
 80100a2:	000b      	movs	r3, r1
 80100a4:	9802      	ldr	r0, [sp, #8]
 80100a6:	9903      	ldr	r1, [sp, #12]
 80100a8:	f7f2 fa92 	bl	80025d0 <__aeabi_dsub>
 80100ac:	e74f      	b.n	800ff4e <__ieee754_log+0x116>
 80100ae:	4a23      	ldr	r2, [pc, #140]	; (801013c <__ieee754_log+0x304>)
 80100b0:	4b23      	ldr	r3, [pc, #140]	; (8010140 <__ieee754_log+0x308>)
 80100b2:	9806      	ldr	r0, [sp, #24]
 80100b4:	9907      	ldr	r1, [sp, #28]
 80100b6:	f7f2 f81f 	bl	80020f8 <__aeabi_dmul>
 80100ba:	4a22      	ldr	r2, [pc, #136]	; (8010144 <__ieee754_log+0x30c>)
 80100bc:	9000      	str	r0, [sp, #0]
 80100be:	9101      	str	r1, [sp, #4]
 80100c0:	9806      	ldr	r0, [sp, #24]
 80100c2:	9907      	ldr	r1, [sp, #28]
 80100c4:	4b20      	ldr	r3, [pc, #128]	; (8010148 <__ieee754_log+0x310>)
 80100c6:	f7f2 f817 	bl	80020f8 <__aeabi_dmul>
 80100ca:	0022      	movs	r2, r4
 80100cc:	002b      	movs	r3, r5
 80100ce:	f7f1 f8a3 	bl	8001218 <__aeabi_dadd>
 80100d2:	e754      	b.n	800ff7e <__ieee754_log+0x146>
 80100d4:	0002      	movs	r2, r0
 80100d6:	000b      	movs	r3, r1
 80100d8:	0030      	movs	r0, r6
 80100da:	0039      	movs	r1, r7
 80100dc:	f7f2 fa78 	bl	80025d0 <__aeabi_dsub>
 80100e0:	9a04      	ldr	r2, [sp, #16]
 80100e2:	9b05      	ldr	r3, [sp, #20]
 80100e4:	f7f2 f808 	bl	80020f8 <__aeabi_dmul>
 80100e8:	9b00      	ldr	r3, [sp, #0]
 80100ea:	0004      	movs	r4, r0
 80100ec:	000d      	movs	r5, r1
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d102      	bne.n	80100f8 <__ieee754_log+0x2c0>
 80100f2:	0002      	movs	r2, r0
 80100f4:	000b      	movs	r3, r1
 80100f6:	e72c      	b.n	800ff52 <__ieee754_log+0x11a>
 80100f8:	4a10      	ldr	r2, [pc, #64]	; (801013c <__ieee754_log+0x304>)
 80100fa:	4b11      	ldr	r3, [pc, #68]	; (8010140 <__ieee754_log+0x308>)
 80100fc:	9806      	ldr	r0, [sp, #24]
 80100fe:	9907      	ldr	r1, [sp, #28]
 8010100:	f7f1 fffa 	bl	80020f8 <__aeabi_dmul>
 8010104:	4a0f      	ldr	r2, [pc, #60]	; (8010144 <__ieee754_log+0x30c>)
 8010106:	9000      	str	r0, [sp, #0]
 8010108:	9101      	str	r1, [sp, #4]
 801010a:	9806      	ldr	r0, [sp, #24]
 801010c:	9907      	ldr	r1, [sp, #28]
 801010e:	4b0e      	ldr	r3, [pc, #56]	; (8010148 <__ieee754_log+0x310>)
 8010110:	f7f1 fff2 	bl	80020f8 <__aeabi_dmul>
 8010114:	0002      	movs	r2, r0
 8010116:	000b      	movs	r3, r1
 8010118:	0020      	movs	r0, r4
 801011a:	0029      	movs	r1, r5
 801011c:	e733      	b.n	800ff86 <__ieee754_log+0x14e>
 801011e:	2000      	movs	r0, #0
 8010120:	2100      	movs	r1, #0
 8010122:	e69a      	b.n	800fe5a <__ieee754_log+0x22>
 8010124:	c3500000 	.word	0xc3500000
 8010128:	43500000 	.word	0x43500000
 801012c:	7fefffff 	.word	0x7fefffff
 8010130:	fffffc01 	.word	0xfffffc01
 8010134:	00095f64 	.word	0x00095f64
 8010138:	3ff00000 	.word	0x3ff00000
 801013c:	fee00000 	.word	0xfee00000
 8010140:	3fe62e42 	.word	0x3fe62e42
 8010144:	35793c76 	.word	0x35793c76
 8010148:	3dea39ef 	.word	0x3dea39ef
 801014c:	55555555 	.word	0x55555555
 8010150:	3fd55555 	.word	0x3fd55555
 8010154:	3fe00000 	.word	0x3fe00000
 8010158:	fff9eb86 	.word	0xfff9eb86
 801015c:	df3e5244 	.word	0xdf3e5244
 8010160:	3fc2f112 	.word	0x3fc2f112
 8010164:	96cb03de 	.word	0x96cb03de
 8010168:	3fc74664 	.word	0x3fc74664
 801016c:	94229359 	.word	0x94229359
 8010170:	3fd24924 	.word	0x3fd24924
 8010174:	55555593 	.word	0x55555593
 8010178:	3fe55555 	.word	0x3fe55555
 801017c:	d078c69f 	.word	0xd078c69f
 8010180:	3fc39a09 	.word	0x3fc39a09
 8010184:	1d8e78af 	.word	0x1d8e78af
 8010188:	3fcc71c5 	.word	0x3fcc71c5
 801018c:	9997fa04 	.word	0x9997fa04
 8010190:	3fd99999 	.word	0x3fd99999
 8010194:	0006b851 	.word	0x0006b851

08010198 <__ieee754_rem_pio2>:
 8010198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801019a:	004b      	lsls	r3, r1, #1
 801019c:	b091      	sub	sp, #68	; 0x44
 801019e:	085b      	lsrs	r3, r3, #1
 80101a0:	9302      	str	r3, [sp, #8]
 80101a2:	0017      	movs	r7, r2
 80101a4:	4bb6      	ldr	r3, [pc, #728]	; (8010480 <__ieee754_rem_pio2+0x2e8>)
 80101a6:	9a02      	ldr	r2, [sp, #8]
 80101a8:	0004      	movs	r4, r0
 80101aa:	000d      	movs	r5, r1
 80101ac:	9109      	str	r1, [sp, #36]	; 0x24
 80101ae:	429a      	cmp	r2, r3
 80101b0:	dc09      	bgt.n	80101c6 <__ieee754_rem_pio2+0x2e>
 80101b2:	0002      	movs	r2, r0
 80101b4:	000b      	movs	r3, r1
 80101b6:	603a      	str	r2, [r7, #0]
 80101b8:	607b      	str	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	2300      	movs	r3, #0
 80101be:	60ba      	str	r2, [r7, #8]
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	2600      	movs	r6, #0
 80101c4:	e025      	b.n	8010212 <__ieee754_rem_pio2+0x7a>
 80101c6:	4baf      	ldr	r3, [pc, #700]	; (8010484 <__ieee754_rem_pio2+0x2ec>)
 80101c8:	9a02      	ldr	r2, [sp, #8]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	dd00      	ble.n	80101d0 <__ieee754_rem_pio2+0x38>
 80101ce:	e06e      	b.n	80102ae <__ieee754_rem_pio2+0x116>
 80101d0:	4ead      	ldr	r6, [pc, #692]	; (8010488 <__ieee754_rem_pio2+0x2f0>)
 80101d2:	4aae      	ldr	r2, [pc, #696]	; (801048c <__ieee754_rem_pio2+0x2f4>)
 80101d4:	2d00      	cmp	r5, #0
 80101d6:	dd35      	ble.n	8010244 <__ieee754_rem_pio2+0xac>
 80101d8:	0020      	movs	r0, r4
 80101da:	0029      	movs	r1, r5
 80101dc:	4baa      	ldr	r3, [pc, #680]	; (8010488 <__ieee754_rem_pio2+0x2f0>)
 80101de:	f7f2 f9f7 	bl	80025d0 <__aeabi_dsub>
 80101e2:	9b02      	ldr	r3, [sp, #8]
 80101e4:	0004      	movs	r4, r0
 80101e6:	000d      	movs	r5, r1
 80101e8:	42b3      	cmp	r3, r6
 80101ea:	d015      	beq.n	8010218 <__ieee754_rem_pio2+0x80>
 80101ec:	4aa8      	ldr	r2, [pc, #672]	; (8010490 <__ieee754_rem_pio2+0x2f8>)
 80101ee:	4ba9      	ldr	r3, [pc, #676]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 80101f0:	f7f2 f9ee 	bl	80025d0 <__aeabi_dsub>
 80101f4:	0002      	movs	r2, r0
 80101f6:	000b      	movs	r3, r1
 80101f8:	0020      	movs	r0, r4
 80101fa:	603a      	str	r2, [r7, #0]
 80101fc:	607b      	str	r3, [r7, #4]
 80101fe:	0029      	movs	r1, r5
 8010200:	f7f2 f9e6 	bl	80025d0 <__aeabi_dsub>
 8010204:	4aa2      	ldr	r2, [pc, #648]	; (8010490 <__ieee754_rem_pio2+0x2f8>)
 8010206:	4ba3      	ldr	r3, [pc, #652]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 8010208:	f7f2 f9e2 	bl	80025d0 <__aeabi_dsub>
 801020c:	2601      	movs	r6, #1
 801020e:	60b8      	str	r0, [r7, #8]
 8010210:	60f9      	str	r1, [r7, #12]
 8010212:	0030      	movs	r0, r6
 8010214:	b011      	add	sp, #68	; 0x44
 8010216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010218:	22d3      	movs	r2, #211	; 0xd3
 801021a:	4b9e      	ldr	r3, [pc, #632]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 801021c:	0552      	lsls	r2, r2, #21
 801021e:	f7f2 f9d7 	bl	80025d0 <__aeabi_dsub>
 8010222:	4a9d      	ldr	r2, [pc, #628]	; (8010498 <__ieee754_rem_pio2+0x300>)
 8010224:	4b9d      	ldr	r3, [pc, #628]	; (801049c <__ieee754_rem_pio2+0x304>)
 8010226:	0004      	movs	r4, r0
 8010228:	000d      	movs	r5, r1
 801022a:	f7f2 f9d1 	bl	80025d0 <__aeabi_dsub>
 801022e:	0002      	movs	r2, r0
 8010230:	000b      	movs	r3, r1
 8010232:	0020      	movs	r0, r4
 8010234:	603a      	str	r2, [r7, #0]
 8010236:	607b      	str	r3, [r7, #4]
 8010238:	0029      	movs	r1, r5
 801023a:	f7f2 f9c9 	bl	80025d0 <__aeabi_dsub>
 801023e:	4a96      	ldr	r2, [pc, #600]	; (8010498 <__ieee754_rem_pio2+0x300>)
 8010240:	4b96      	ldr	r3, [pc, #600]	; (801049c <__ieee754_rem_pio2+0x304>)
 8010242:	e7e1      	b.n	8010208 <__ieee754_rem_pio2+0x70>
 8010244:	0020      	movs	r0, r4
 8010246:	0029      	movs	r1, r5
 8010248:	4b8f      	ldr	r3, [pc, #572]	; (8010488 <__ieee754_rem_pio2+0x2f0>)
 801024a:	f7f0 ffe5 	bl	8001218 <__aeabi_dadd>
 801024e:	9b02      	ldr	r3, [sp, #8]
 8010250:	0004      	movs	r4, r0
 8010252:	000d      	movs	r5, r1
 8010254:	42b3      	cmp	r3, r6
 8010256:	d014      	beq.n	8010282 <__ieee754_rem_pio2+0xea>
 8010258:	4a8d      	ldr	r2, [pc, #564]	; (8010490 <__ieee754_rem_pio2+0x2f8>)
 801025a:	4b8e      	ldr	r3, [pc, #568]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 801025c:	f7f0 ffdc 	bl	8001218 <__aeabi_dadd>
 8010260:	0002      	movs	r2, r0
 8010262:	000b      	movs	r3, r1
 8010264:	0020      	movs	r0, r4
 8010266:	603a      	str	r2, [r7, #0]
 8010268:	607b      	str	r3, [r7, #4]
 801026a:	0029      	movs	r1, r5
 801026c:	f7f2 f9b0 	bl	80025d0 <__aeabi_dsub>
 8010270:	4a87      	ldr	r2, [pc, #540]	; (8010490 <__ieee754_rem_pio2+0x2f8>)
 8010272:	4b88      	ldr	r3, [pc, #544]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 8010274:	f7f0 ffd0 	bl	8001218 <__aeabi_dadd>
 8010278:	2601      	movs	r6, #1
 801027a:	60b8      	str	r0, [r7, #8]
 801027c:	60f9      	str	r1, [r7, #12]
 801027e:	4276      	negs	r6, r6
 8010280:	e7c7      	b.n	8010212 <__ieee754_rem_pio2+0x7a>
 8010282:	22d3      	movs	r2, #211	; 0xd3
 8010284:	4b83      	ldr	r3, [pc, #524]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 8010286:	0552      	lsls	r2, r2, #21
 8010288:	f7f0 ffc6 	bl	8001218 <__aeabi_dadd>
 801028c:	4a82      	ldr	r2, [pc, #520]	; (8010498 <__ieee754_rem_pio2+0x300>)
 801028e:	4b83      	ldr	r3, [pc, #524]	; (801049c <__ieee754_rem_pio2+0x304>)
 8010290:	0004      	movs	r4, r0
 8010292:	000d      	movs	r5, r1
 8010294:	f7f0 ffc0 	bl	8001218 <__aeabi_dadd>
 8010298:	0002      	movs	r2, r0
 801029a:	000b      	movs	r3, r1
 801029c:	0020      	movs	r0, r4
 801029e:	603a      	str	r2, [r7, #0]
 80102a0:	607b      	str	r3, [r7, #4]
 80102a2:	0029      	movs	r1, r5
 80102a4:	f7f2 f994 	bl	80025d0 <__aeabi_dsub>
 80102a8:	4a7b      	ldr	r2, [pc, #492]	; (8010498 <__ieee754_rem_pio2+0x300>)
 80102aa:	4b7c      	ldr	r3, [pc, #496]	; (801049c <__ieee754_rem_pio2+0x304>)
 80102ac:	e7e2      	b.n	8010274 <__ieee754_rem_pio2+0xdc>
 80102ae:	4b7c      	ldr	r3, [pc, #496]	; (80104a0 <__ieee754_rem_pio2+0x308>)
 80102b0:	9a02      	ldr	r2, [sp, #8]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	dd00      	ble.n	80102b8 <__ieee754_rem_pio2+0x120>
 80102b6:	e0d3      	b.n	8010460 <__ieee754_rem_pio2+0x2c8>
 80102b8:	0020      	movs	r0, r4
 80102ba:	0029      	movs	r1, r5
 80102bc:	f000 ffba 	bl	8011234 <fabs>
 80102c0:	4a78      	ldr	r2, [pc, #480]	; (80104a4 <__ieee754_rem_pio2+0x30c>)
 80102c2:	4b79      	ldr	r3, [pc, #484]	; (80104a8 <__ieee754_rem_pio2+0x310>)
 80102c4:	0004      	movs	r4, r0
 80102c6:	000d      	movs	r5, r1
 80102c8:	f7f1 ff16 	bl	80020f8 <__aeabi_dmul>
 80102cc:	2200      	movs	r2, #0
 80102ce:	4b77      	ldr	r3, [pc, #476]	; (80104ac <__ieee754_rem_pio2+0x314>)
 80102d0:	f7f0 ffa2 	bl	8001218 <__aeabi_dadd>
 80102d4:	f7f2 fd2c 	bl	8002d30 <__aeabi_d2iz>
 80102d8:	0006      	movs	r6, r0
 80102da:	f7f2 fd5f 	bl	8002d9c <__aeabi_i2d>
 80102de:	4a6b      	ldr	r2, [pc, #428]	; (801048c <__ieee754_rem_pio2+0x2f4>)
 80102e0:	4b69      	ldr	r3, [pc, #420]	; (8010488 <__ieee754_rem_pio2+0x2f0>)
 80102e2:	9006      	str	r0, [sp, #24]
 80102e4:	9107      	str	r1, [sp, #28]
 80102e6:	f7f1 ff07 	bl	80020f8 <__aeabi_dmul>
 80102ea:	0002      	movs	r2, r0
 80102ec:	000b      	movs	r3, r1
 80102ee:	0020      	movs	r0, r4
 80102f0:	0029      	movs	r1, r5
 80102f2:	f7f2 f96d 	bl	80025d0 <__aeabi_dsub>
 80102f6:	4a66      	ldr	r2, [pc, #408]	; (8010490 <__ieee754_rem_pio2+0x2f8>)
 80102f8:	9004      	str	r0, [sp, #16]
 80102fa:	9105      	str	r1, [sp, #20]
 80102fc:	9806      	ldr	r0, [sp, #24]
 80102fe:	9907      	ldr	r1, [sp, #28]
 8010300:	4b64      	ldr	r3, [pc, #400]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 8010302:	f7f1 fef9 	bl	80020f8 <__aeabi_dmul>
 8010306:	0004      	movs	r4, r0
 8010308:	000d      	movs	r5, r1
 801030a:	2e1f      	cmp	r6, #31
 801030c:	dc0f      	bgt.n	801032e <__ieee754_rem_pio2+0x196>
 801030e:	4a68      	ldr	r2, [pc, #416]	; (80104b0 <__ieee754_rem_pio2+0x318>)
 8010310:	1e73      	subs	r3, r6, #1
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	589b      	ldr	r3, [r3, r2]
 8010316:	9a02      	ldr	r2, [sp, #8]
 8010318:	4293      	cmp	r3, r2
 801031a:	d008      	beq.n	801032e <__ieee754_rem_pio2+0x196>
 801031c:	9804      	ldr	r0, [sp, #16]
 801031e:	9905      	ldr	r1, [sp, #20]
 8010320:	0022      	movs	r2, r4
 8010322:	002b      	movs	r3, r5
 8010324:	f7f2 f954 	bl	80025d0 <__aeabi_dsub>
 8010328:	6038      	str	r0, [r7, #0]
 801032a:	6079      	str	r1, [r7, #4]
 801032c:	e012      	b.n	8010354 <__ieee754_rem_pio2+0x1bc>
 801032e:	0022      	movs	r2, r4
 8010330:	9804      	ldr	r0, [sp, #16]
 8010332:	9905      	ldr	r1, [sp, #20]
 8010334:	002b      	movs	r3, r5
 8010336:	f7f2 f94b 	bl	80025d0 <__aeabi_dsub>
 801033a:	9b02      	ldr	r3, [sp, #8]
 801033c:	151b      	asrs	r3, r3, #20
 801033e:	9308      	str	r3, [sp, #32]
 8010340:	9a08      	ldr	r2, [sp, #32]
 8010342:	004b      	lsls	r3, r1, #1
 8010344:	0d5b      	lsrs	r3, r3, #21
 8010346:	1ad3      	subs	r3, r2, r3
 8010348:	2b10      	cmp	r3, #16
 801034a:	dc21      	bgt.n	8010390 <__ieee754_rem_pio2+0x1f8>
 801034c:	0002      	movs	r2, r0
 801034e:	000b      	movs	r3, r1
 8010350:	603a      	str	r2, [r7, #0]
 8010352:	607b      	str	r3, [r7, #4]
 8010354:	9804      	ldr	r0, [sp, #16]
 8010356:	9905      	ldr	r1, [sp, #20]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	683a      	ldr	r2, [r7, #0]
 801035c:	9302      	str	r3, [sp, #8]
 801035e:	9b02      	ldr	r3, [sp, #8]
 8010360:	f7f2 f936 	bl	80025d0 <__aeabi_dsub>
 8010364:	0022      	movs	r2, r4
 8010366:	002b      	movs	r3, r5
 8010368:	f7f2 f932 	bl	80025d0 <__aeabi_dsub>
 801036c:	000b      	movs	r3, r1
 801036e:	0002      	movs	r2, r0
 8010370:	60ba      	str	r2, [r7, #8]
 8010372:	60fb      	str	r3, [r7, #12]
 8010374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010376:	2b00      	cmp	r3, #0
 8010378:	db00      	blt.n	801037c <__ieee754_rem_pio2+0x1e4>
 801037a:	e74a      	b.n	8010212 <__ieee754_rem_pio2+0x7a>
 801037c:	2280      	movs	r2, #128	; 0x80
 801037e:	0612      	lsls	r2, r2, #24
 8010380:	4694      	mov	ip, r2
 8010382:	9b02      	ldr	r3, [sp, #8]
 8010384:	1889      	adds	r1, r1, r2
 8010386:	4463      	add	r3, ip
 8010388:	607b      	str	r3, [r7, #4]
 801038a:	60b8      	str	r0, [r7, #8]
 801038c:	60f9      	str	r1, [r7, #12]
 801038e:	e776      	b.n	801027e <__ieee754_rem_pio2+0xe6>
 8010390:	22d3      	movs	r2, #211	; 0xd3
 8010392:	9806      	ldr	r0, [sp, #24]
 8010394:	9907      	ldr	r1, [sp, #28]
 8010396:	4b3f      	ldr	r3, [pc, #252]	; (8010494 <__ieee754_rem_pio2+0x2fc>)
 8010398:	0552      	lsls	r2, r2, #21
 801039a:	f7f1 fead 	bl	80020f8 <__aeabi_dmul>
 801039e:	0004      	movs	r4, r0
 80103a0:	000d      	movs	r5, r1
 80103a2:	0002      	movs	r2, r0
 80103a4:	000b      	movs	r3, r1
 80103a6:	9804      	ldr	r0, [sp, #16]
 80103a8:	9905      	ldr	r1, [sp, #20]
 80103aa:	f7f2 f911 	bl	80025d0 <__aeabi_dsub>
 80103ae:	0002      	movs	r2, r0
 80103b0:	000b      	movs	r3, r1
 80103b2:	9002      	str	r0, [sp, #8]
 80103b4:	9103      	str	r1, [sp, #12]
 80103b6:	9804      	ldr	r0, [sp, #16]
 80103b8:	9905      	ldr	r1, [sp, #20]
 80103ba:	f7f2 f909 	bl	80025d0 <__aeabi_dsub>
 80103be:	0022      	movs	r2, r4
 80103c0:	002b      	movs	r3, r5
 80103c2:	f7f2 f905 	bl	80025d0 <__aeabi_dsub>
 80103c6:	0004      	movs	r4, r0
 80103c8:	000d      	movs	r5, r1
 80103ca:	9806      	ldr	r0, [sp, #24]
 80103cc:	9907      	ldr	r1, [sp, #28]
 80103ce:	4a32      	ldr	r2, [pc, #200]	; (8010498 <__ieee754_rem_pio2+0x300>)
 80103d0:	4b32      	ldr	r3, [pc, #200]	; (801049c <__ieee754_rem_pio2+0x304>)
 80103d2:	f7f1 fe91 	bl	80020f8 <__aeabi_dmul>
 80103d6:	0022      	movs	r2, r4
 80103d8:	002b      	movs	r3, r5
 80103da:	f7f2 f8f9 	bl	80025d0 <__aeabi_dsub>
 80103de:	0002      	movs	r2, r0
 80103e0:	000b      	movs	r3, r1
 80103e2:	0004      	movs	r4, r0
 80103e4:	000d      	movs	r5, r1
 80103e6:	9802      	ldr	r0, [sp, #8]
 80103e8:	9903      	ldr	r1, [sp, #12]
 80103ea:	f7f2 f8f1 	bl	80025d0 <__aeabi_dsub>
 80103ee:	9a08      	ldr	r2, [sp, #32]
 80103f0:	004b      	lsls	r3, r1, #1
 80103f2:	0d5b      	lsrs	r3, r3, #21
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	2b31      	cmp	r3, #49	; 0x31
 80103f8:	dc08      	bgt.n	801040c <__ieee754_rem_pio2+0x274>
 80103fa:	0002      	movs	r2, r0
 80103fc:	000b      	movs	r3, r1
 80103fe:	603a      	str	r2, [r7, #0]
 8010400:	607b      	str	r3, [r7, #4]
 8010402:	9a02      	ldr	r2, [sp, #8]
 8010404:	9b03      	ldr	r3, [sp, #12]
 8010406:	9204      	str	r2, [sp, #16]
 8010408:	9305      	str	r3, [sp, #20]
 801040a:	e7a3      	b.n	8010354 <__ieee754_rem_pio2+0x1bc>
 801040c:	22b8      	movs	r2, #184	; 0xb8
 801040e:	9806      	ldr	r0, [sp, #24]
 8010410:	9907      	ldr	r1, [sp, #28]
 8010412:	4b22      	ldr	r3, [pc, #136]	; (801049c <__ieee754_rem_pio2+0x304>)
 8010414:	0592      	lsls	r2, r2, #22
 8010416:	f7f1 fe6f 	bl	80020f8 <__aeabi_dmul>
 801041a:	0004      	movs	r4, r0
 801041c:	000d      	movs	r5, r1
 801041e:	0002      	movs	r2, r0
 8010420:	000b      	movs	r3, r1
 8010422:	9802      	ldr	r0, [sp, #8]
 8010424:	9903      	ldr	r1, [sp, #12]
 8010426:	f7f2 f8d3 	bl	80025d0 <__aeabi_dsub>
 801042a:	0002      	movs	r2, r0
 801042c:	000b      	movs	r3, r1
 801042e:	9004      	str	r0, [sp, #16]
 8010430:	9105      	str	r1, [sp, #20]
 8010432:	9802      	ldr	r0, [sp, #8]
 8010434:	9903      	ldr	r1, [sp, #12]
 8010436:	f7f2 f8cb 	bl	80025d0 <__aeabi_dsub>
 801043a:	0022      	movs	r2, r4
 801043c:	002b      	movs	r3, r5
 801043e:	f7f2 f8c7 	bl	80025d0 <__aeabi_dsub>
 8010442:	0004      	movs	r4, r0
 8010444:	000d      	movs	r5, r1
 8010446:	9806      	ldr	r0, [sp, #24]
 8010448:	9907      	ldr	r1, [sp, #28]
 801044a:	4a1a      	ldr	r2, [pc, #104]	; (80104b4 <__ieee754_rem_pio2+0x31c>)
 801044c:	4b1a      	ldr	r3, [pc, #104]	; (80104b8 <__ieee754_rem_pio2+0x320>)
 801044e:	f7f1 fe53 	bl	80020f8 <__aeabi_dmul>
 8010452:	0022      	movs	r2, r4
 8010454:	002b      	movs	r3, r5
 8010456:	f7f2 f8bb 	bl	80025d0 <__aeabi_dsub>
 801045a:	0004      	movs	r4, r0
 801045c:	000d      	movs	r5, r1
 801045e:	e75d      	b.n	801031c <__ieee754_rem_pio2+0x184>
 8010460:	4b16      	ldr	r3, [pc, #88]	; (80104bc <__ieee754_rem_pio2+0x324>)
 8010462:	9a02      	ldr	r2, [sp, #8]
 8010464:	429a      	cmp	r2, r3
 8010466:	dd2b      	ble.n	80104c0 <__ieee754_rem_pio2+0x328>
 8010468:	0022      	movs	r2, r4
 801046a:	002b      	movs	r3, r5
 801046c:	0020      	movs	r0, r4
 801046e:	0029      	movs	r1, r5
 8010470:	f7f2 f8ae 	bl	80025d0 <__aeabi_dsub>
 8010474:	60b8      	str	r0, [r7, #8]
 8010476:	60f9      	str	r1, [r7, #12]
 8010478:	6038      	str	r0, [r7, #0]
 801047a:	6079      	str	r1, [r7, #4]
 801047c:	e6a1      	b.n	80101c2 <__ieee754_rem_pio2+0x2a>
 801047e:	46c0      	nop			; (mov r8, r8)
 8010480:	3fe921fb 	.word	0x3fe921fb
 8010484:	4002d97b 	.word	0x4002d97b
 8010488:	3ff921fb 	.word	0x3ff921fb
 801048c:	54400000 	.word	0x54400000
 8010490:	1a626331 	.word	0x1a626331
 8010494:	3dd0b461 	.word	0x3dd0b461
 8010498:	2e037073 	.word	0x2e037073
 801049c:	3ba3198a 	.word	0x3ba3198a
 80104a0:	413921fb 	.word	0x413921fb
 80104a4:	6dc9c883 	.word	0x6dc9c883
 80104a8:	3fe45f30 	.word	0x3fe45f30
 80104ac:	3fe00000 	.word	0x3fe00000
 80104b0:	08015840 	.word	0x08015840
 80104b4:	252049c1 	.word	0x252049c1
 80104b8:	397b839a 	.word	0x397b839a
 80104bc:	7fefffff 	.word	0x7fefffff
 80104c0:	9a02      	ldr	r2, [sp, #8]
 80104c2:	0020      	movs	r0, r4
 80104c4:	1516      	asrs	r6, r2, #20
 80104c6:	4a27      	ldr	r2, [pc, #156]	; (8010564 <__ieee754_rem_pio2+0x3cc>)
 80104c8:	18b6      	adds	r6, r6, r2
 80104ca:	9a02      	ldr	r2, [sp, #8]
 80104cc:	0533      	lsls	r3, r6, #20
 80104ce:	1ad5      	subs	r5, r2, r3
 80104d0:	0029      	movs	r1, r5
 80104d2:	f7f2 fc2d 	bl	8002d30 <__aeabi_d2iz>
 80104d6:	f7f2 fc61 	bl	8002d9c <__aeabi_i2d>
 80104da:	0002      	movs	r2, r0
 80104dc:	000b      	movs	r3, r1
 80104de:	0020      	movs	r0, r4
 80104e0:	0029      	movs	r1, r5
 80104e2:	920a      	str	r2, [sp, #40]	; 0x28
 80104e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80104e6:	f7f2 f873 	bl	80025d0 <__aeabi_dsub>
 80104ea:	2200      	movs	r2, #0
 80104ec:	4b1e      	ldr	r3, [pc, #120]	; (8010568 <__ieee754_rem_pio2+0x3d0>)
 80104ee:	f7f1 fe03 	bl	80020f8 <__aeabi_dmul>
 80104f2:	000d      	movs	r5, r1
 80104f4:	0004      	movs	r4, r0
 80104f6:	f7f2 fc1b 	bl	8002d30 <__aeabi_d2iz>
 80104fa:	f7f2 fc4f 	bl	8002d9c <__aeabi_i2d>
 80104fe:	0002      	movs	r2, r0
 8010500:	000b      	movs	r3, r1
 8010502:	0020      	movs	r0, r4
 8010504:	0029      	movs	r1, r5
 8010506:	920c      	str	r2, [sp, #48]	; 0x30
 8010508:	930d      	str	r3, [sp, #52]	; 0x34
 801050a:	f7f2 f861 	bl	80025d0 <__aeabi_dsub>
 801050e:	2200      	movs	r2, #0
 8010510:	4b15      	ldr	r3, [pc, #84]	; (8010568 <__ieee754_rem_pio2+0x3d0>)
 8010512:	f7f1 fdf1 	bl	80020f8 <__aeabi_dmul>
 8010516:	2503      	movs	r5, #3
 8010518:	900e      	str	r0, [sp, #56]	; 0x38
 801051a:	910f      	str	r1, [sp, #60]	; 0x3c
 801051c:	ac0a      	add	r4, sp, #40	; 0x28
 801051e:	2200      	movs	r2, #0
 8010520:	6920      	ldr	r0, [r4, #16]
 8010522:	6961      	ldr	r1, [r4, #20]
 8010524:	2300      	movs	r3, #0
 8010526:	9502      	str	r5, [sp, #8]
 8010528:	3c08      	subs	r4, #8
 801052a:	3d01      	subs	r5, #1
 801052c:	f7ef ff7a 	bl	8000424 <__aeabi_dcmpeq>
 8010530:	2800      	cmp	r0, #0
 8010532:	d1f4      	bne.n	801051e <__ieee754_rem_pio2+0x386>
 8010534:	4b0d      	ldr	r3, [pc, #52]	; (801056c <__ieee754_rem_pio2+0x3d4>)
 8010536:	0032      	movs	r2, r6
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	2302      	movs	r3, #2
 801053c:	0039      	movs	r1, r7
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	a80a      	add	r0, sp, #40	; 0x28
 8010542:	9b02      	ldr	r3, [sp, #8]
 8010544:	f000 f8d4 	bl	80106f0 <__kernel_rem_pio2>
 8010548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801054a:	0006      	movs	r6, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	db00      	blt.n	8010552 <__ieee754_rem_pio2+0x3ba>
 8010550:	e65f      	b.n	8010212 <__ieee754_rem_pio2+0x7a>
 8010552:	2280      	movs	r2, #128	; 0x80
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	0612      	lsls	r2, r2, #24
 8010558:	189b      	adds	r3, r3, r2
 801055a:	607b      	str	r3, [r7, #4]
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	189b      	adds	r3, r3, r2
 8010560:	60fb      	str	r3, [r7, #12]
 8010562:	e68c      	b.n	801027e <__ieee754_rem_pio2+0xe6>
 8010564:	fffffbea 	.word	0xfffffbea
 8010568:	41700000 	.word	0x41700000
 801056c:	080158c0 	.word	0x080158c0

08010570 <__kernel_cos>:
 8010570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010572:	b087      	sub	sp, #28
 8010574:	9204      	str	r2, [sp, #16]
 8010576:	9305      	str	r3, [sp, #20]
 8010578:	004b      	lsls	r3, r1, #1
 801057a:	085b      	lsrs	r3, r3, #1
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	23f9      	movs	r3, #249	; 0xf9
 8010580:	9a00      	ldr	r2, [sp, #0]
 8010582:	0007      	movs	r7, r0
 8010584:	000e      	movs	r6, r1
 8010586:	059b      	lsls	r3, r3, #22
 8010588:	429a      	cmp	r2, r3
 801058a:	da04      	bge.n	8010596 <__kernel_cos+0x26>
 801058c:	f7f2 fbd0 	bl	8002d30 <__aeabi_d2iz>
 8010590:	2800      	cmp	r0, #0
 8010592:	d100      	bne.n	8010596 <__kernel_cos+0x26>
 8010594:	e084      	b.n	80106a0 <__kernel_cos+0x130>
 8010596:	003a      	movs	r2, r7
 8010598:	0033      	movs	r3, r6
 801059a:	0038      	movs	r0, r7
 801059c:	0031      	movs	r1, r6
 801059e:	f7f1 fdab 	bl	80020f8 <__aeabi_dmul>
 80105a2:	2200      	movs	r2, #0
 80105a4:	4b40      	ldr	r3, [pc, #256]	; (80106a8 <__kernel_cos+0x138>)
 80105a6:	0004      	movs	r4, r0
 80105a8:	000d      	movs	r5, r1
 80105aa:	f7f1 fda5 	bl	80020f8 <__aeabi_dmul>
 80105ae:	4a3f      	ldr	r2, [pc, #252]	; (80106ac <__kernel_cos+0x13c>)
 80105b0:	9002      	str	r0, [sp, #8]
 80105b2:	9103      	str	r1, [sp, #12]
 80105b4:	4b3e      	ldr	r3, [pc, #248]	; (80106b0 <__kernel_cos+0x140>)
 80105b6:	0020      	movs	r0, r4
 80105b8:	0029      	movs	r1, r5
 80105ba:	f7f1 fd9d 	bl	80020f8 <__aeabi_dmul>
 80105be:	4a3d      	ldr	r2, [pc, #244]	; (80106b4 <__kernel_cos+0x144>)
 80105c0:	4b3d      	ldr	r3, [pc, #244]	; (80106b8 <__kernel_cos+0x148>)
 80105c2:	f7f0 fe29 	bl	8001218 <__aeabi_dadd>
 80105c6:	0022      	movs	r2, r4
 80105c8:	002b      	movs	r3, r5
 80105ca:	f7f1 fd95 	bl	80020f8 <__aeabi_dmul>
 80105ce:	4a3b      	ldr	r2, [pc, #236]	; (80106bc <__kernel_cos+0x14c>)
 80105d0:	4b3b      	ldr	r3, [pc, #236]	; (80106c0 <__kernel_cos+0x150>)
 80105d2:	f7f1 fffd 	bl	80025d0 <__aeabi_dsub>
 80105d6:	0022      	movs	r2, r4
 80105d8:	002b      	movs	r3, r5
 80105da:	f7f1 fd8d 	bl	80020f8 <__aeabi_dmul>
 80105de:	4a39      	ldr	r2, [pc, #228]	; (80106c4 <__kernel_cos+0x154>)
 80105e0:	4b39      	ldr	r3, [pc, #228]	; (80106c8 <__kernel_cos+0x158>)
 80105e2:	f7f0 fe19 	bl	8001218 <__aeabi_dadd>
 80105e6:	0022      	movs	r2, r4
 80105e8:	002b      	movs	r3, r5
 80105ea:	f7f1 fd85 	bl	80020f8 <__aeabi_dmul>
 80105ee:	4a37      	ldr	r2, [pc, #220]	; (80106cc <__kernel_cos+0x15c>)
 80105f0:	4b37      	ldr	r3, [pc, #220]	; (80106d0 <__kernel_cos+0x160>)
 80105f2:	f7f1 ffed 	bl	80025d0 <__aeabi_dsub>
 80105f6:	0022      	movs	r2, r4
 80105f8:	002b      	movs	r3, r5
 80105fa:	f7f1 fd7d 	bl	80020f8 <__aeabi_dmul>
 80105fe:	4a35      	ldr	r2, [pc, #212]	; (80106d4 <__kernel_cos+0x164>)
 8010600:	4b35      	ldr	r3, [pc, #212]	; (80106d8 <__kernel_cos+0x168>)
 8010602:	f7f0 fe09 	bl	8001218 <__aeabi_dadd>
 8010606:	0022      	movs	r2, r4
 8010608:	002b      	movs	r3, r5
 801060a:	f7f1 fd75 	bl	80020f8 <__aeabi_dmul>
 801060e:	0022      	movs	r2, r4
 8010610:	002b      	movs	r3, r5
 8010612:	f7f1 fd71 	bl	80020f8 <__aeabi_dmul>
 8010616:	9a04      	ldr	r2, [sp, #16]
 8010618:	9b05      	ldr	r3, [sp, #20]
 801061a:	0004      	movs	r4, r0
 801061c:	000d      	movs	r5, r1
 801061e:	0038      	movs	r0, r7
 8010620:	0031      	movs	r1, r6
 8010622:	f7f1 fd69 	bl	80020f8 <__aeabi_dmul>
 8010626:	0002      	movs	r2, r0
 8010628:	000b      	movs	r3, r1
 801062a:	0020      	movs	r0, r4
 801062c:	0029      	movs	r1, r5
 801062e:	f7f1 ffcf 	bl	80025d0 <__aeabi_dsub>
 8010632:	4b2a      	ldr	r3, [pc, #168]	; (80106dc <__kernel_cos+0x16c>)
 8010634:	9a00      	ldr	r2, [sp, #0]
 8010636:	0004      	movs	r4, r0
 8010638:	000d      	movs	r5, r1
 801063a:	429a      	cmp	r2, r3
 801063c:	dc0d      	bgt.n	801065a <__kernel_cos+0xea>
 801063e:	0002      	movs	r2, r0
 8010640:	000b      	movs	r3, r1
 8010642:	9802      	ldr	r0, [sp, #8]
 8010644:	9903      	ldr	r1, [sp, #12]
 8010646:	f7f1 ffc3 	bl	80025d0 <__aeabi_dsub>
 801064a:	0002      	movs	r2, r0
 801064c:	2000      	movs	r0, #0
 801064e:	000b      	movs	r3, r1
 8010650:	4923      	ldr	r1, [pc, #140]	; (80106e0 <__kernel_cos+0x170>)
 8010652:	f7f1 ffbd 	bl	80025d0 <__aeabi_dsub>
 8010656:	b007      	add	sp, #28
 8010658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801065a:	4b22      	ldr	r3, [pc, #136]	; (80106e4 <__kernel_cos+0x174>)
 801065c:	9a00      	ldr	r2, [sp, #0]
 801065e:	2600      	movs	r6, #0
 8010660:	429a      	cmp	r2, r3
 8010662:	dc1b      	bgt.n	801069c <__kernel_cos+0x12c>
 8010664:	0013      	movs	r3, r2
 8010666:	4a20      	ldr	r2, [pc, #128]	; (80106e8 <__kernel_cos+0x178>)
 8010668:	4694      	mov	ip, r2
 801066a:	4463      	add	r3, ip
 801066c:	001f      	movs	r7, r3
 801066e:	0032      	movs	r2, r6
 8010670:	003b      	movs	r3, r7
 8010672:	2000      	movs	r0, #0
 8010674:	491a      	ldr	r1, [pc, #104]	; (80106e0 <__kernel_cos+0x170>)
 8010676:	f7f1 ffab 	bl	80025d0 <__aeabi_dsub>
 801067a:	0032      	movs	r2, r6
 801067c:	003b      	movs	r3, r7
 801067e:	9000      	str	r0, [sp, #0]
 8010680:	9101      	str	r1, [sp, #4]
 8010682:	9802      	ldr	r0, [sp, #8]
 8010684:	9903      	ldr	r1, [sp, #12]
 8010686:	f7f1 ffa3 	bl	80025d0 <__aeabi_dsub>
 801068a:	0022      	movs	r2, r4
 801068c:	002b      	movs	r3, r5
 801068e:	f7f1 ff9f 	bl	80025d0 <__aeabi_dsub>
 8010692:	0002      	movs	r2, r0
 8010694:	000b      	movs	r3, r1
 8010696:	9800      	ldr	r0, [sp, #0]
 8010698:	9901      	ldr	r1, [sp, #4]
 801069a:	e7da      	b.n	8010652 <__kernel_cos+0xe2>
 801069c:	4f13      	ldr	r7, [pc, #76]	; (80106ec <__kernel_cos+0x17c>)
 801069e:	e7e6      	b.n	801066e <__kernel_cos+0xfe>
 80106a0:	2000      	movs	r0, #0
 80106a2:	490f      	ldr	r1, [pc, #60]	; (80106e0 <__kernel_cos+0x170>)
 80106a4:	e7d7      	b.n	8010656 <__kernel_cos+0xe6>
 80106a6:	46c0      	nop			; (mov r8, r8)
 80106a8:	3fe00000 	.word	0x3fe00000
 80106ac:	be8838d4 	.word	0xbe8838d4
 80106b0:	bda8fae9 	.word	0xbda8fae9
 80106b4:	bdb4b1c4 	.word	0xbdb4b1c4
 80106b8:	3e21ee9e 	.word	0x3e21ee9e
 80106bc:	809c52ad 	.word	0x809c52ad
 80106c0:	3e927e4f 	.word	0x3e927e4f
 80106c4:	19cb1590 	.word	0x19cb1590
 80106c8:	3efa01a0 	.word	0x3efa01a0
 80106cc:	16c15177 	.word	0x16c15177
 80106d0:	3f56c16c 	.word	0x3f56c16c
 80106d4:	5555554c 	.word	0x5555554c
 80106d8:	3fa55555 	.word	0x3fa55555
 80106dc:	3fd33332 	.word	0x3fd33332
 80106e0:	3ff00000 	.word	0x3ff00000
 80106e4:	3fe90000 	.word	0x3fe90000
 80106e8:	ffe00000 	.word	0xffe00000
 80106ec:	3fd20000 	.word	0x3fd20000

080106f0 <__kernel_rem_pio2>:
 80106f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106f2:	4cd0      	ldr	r4, [pc, #832]	; (8010a34 <__kernel_rem_pio2+0x344>)
 80106f4:	44a5      	add	sp, r4
 80106f6:	930d      	str	r3, [sp, #52]	; 0x34
 80106f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80106fa:	0014      	movs	r4, r2
 80106fc:	009a      	lsls	r2, r3, #2
 80106fe:	4bce      	ldr	r3, [pc, #824]	; (8010a38 <__kernel_rem_pio2+0x348>)
 8010700:	900e      	str	r0, [sp, #56]	; 0x38
 8010702:	58d3      	ldr	r3, [r2, r3]
 8010704:	9107      	str	r1, [sp, #28]
 8010706:	9308      	str	r3, [sp, #32]
 8010708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801070a:	3b01      	subs	r3, #1
 801070c:	930c      	str	r3, [sp, #48]	; 0x30
 801070e:	2300      	movs	r3, #0
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	0023      	movs	r3, r4
 8010714:	3314      	adds	r3, #20
 8010716:	db04      	blt.n	8010722 <__kernel_rem_pio2+0x32>
 8010718:	2118      	movs	r1, #24
 801071a:	1ee0      	subs	r0, r4, #3
 801071c:	f7ef fd86 	bl	800022c <__divsi3>
 8010720:	9000      	str	r0, [sp, #0]
 8010722:	2218      	movs	r2, #24
 8010724:	9b00      	ldr	r3, [sp, #0]
 8010726:	4252      	negs	r2, r2
 8010728:	3301      	adds	r3, #1
 801072a:	435a      	muls	r2, r3
 801072c:	1913      	adds	r3, r2, r4
 801072e:	9302      	str	r3, [sp, #8]
 8010730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010732:	9b00      	ldr	r3, [sp, #0]
 8010734:	ae26      	add	r6, sp, #152	; 0x98
 8010736:	1a9d      	subs	r5, r3, r2
 8010738:	002c      	movs	r4, r5
 801073a:	9b08      	ldr	r3, [sp, #32]
 801073c:	189f      	adds	r7, r3, r2
 801073e:	1b63      	subs	r3, r4, r5
 8010740:	429f      	cmp	r7, r3
 8010742:	da17      	bge.n	8010774 <__kernel_rem_pio2+0x84>
 8010744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010748:	9304      	str	r3, [sp, #16]
 801074a:	ab76      	add	r3, sp, #472	; 0x1d8
 801074c:	930a      	str	r3, [sp, #40]	; 0x28
 801074e:	2301      	movs	r3, #1
 8010750:	1a9b      	subs	r3, r3, r2
 8010752:	930b      	str	r3, [sp, #44]	; 0x2c
 8010754:	ab28      	add	r3, sp, #160	; 0xa0
 8010756:	930f      	str	r3, [sp, #60]	; 0x3c
 8010758:	9a04      	ldr	r2, [sp, #16]
 801075a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801075c:	189b      	adds	r3, r3, r2
 801075e:	9a08      	ldr	r2, [sp, #32]
 8010760:	429a      	cmp	r2, r3
 8010762:	db31      	blt.n	80107c8 <__kernel_rem_pio2+0xd8>
 8010764:	9b04      	ldr	r3, [sp, #16]
 8010766:	2400      	movs	r4, #0
 8010768:	00de      	lsls	r6, r3, #3
 801076a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801076c:	2500      	movs	r5, #0
 801076e:	2700      	movs	r7, #0
 8010770:	199e      	adds	r6, r3, r6
 8010772:	e01e      	b.n	80107b2 <__kernel_rem_pio2+0xc2>
 8010774:	2c00      	cmp	r4, #0
 8010776:	db07      	blt.n	8010788 <__kernel_rem_pio2+0x98>
 8010778:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 801077a:	00a3      	lsls	r3, r4, #2
 801077c:	58d0      	ldr	r0, [r2, r3]
 801077e:	f7f2 fb0d 	bl	8002d9c <__aeabi_i2d>
 8010782:	c603      	stmia	r6!, {r0, r1}
 8010784:	3401      	adds	r4, #1
 8010786:	e7da      	b.n	801073e <__kernel_rem_pio2+0x4e>
 8010788:	2000      	movs	r0, #0
 801078a:	2100      	movs	r1, #0
 801078c:	e7f9      	b.n	8010782 <__kernel_rem_pio2+0x92>
 801078e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010790:	00f9      	lsls	r1, r7, #3
 8010792:	1859      	adds	r1, r3, r1
 8010794:	6808      	ldr	r0, [r1, #0]
 8010796:	6849      	ldr	r1, [r1, #4]
 8010798:	6832      	ldr	r2, [r6, #0]
 801079a:	6873      	ldr	r3, [r6, #4]
 801079c:	f7f1 fcac 	bl	80020f8 <__aeabi_dmul>
 80107a0:	0002      	movs	r2, r0
 80107a2:	000b      	movs	r3, r1
 80107a4:	0020      	movs	r0, r4
 80107a6:	0029      	movs	r1, r5
 80107a8:	f7f0 fd36 	bl	8001218 <__aeabi_dadd>
 80107ac:	0004      	movs	r4, r0
 80107ae:	000d      	movs	r5, r1
 80107b0:	3701      	adds	r7, #1
 80107b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107b4:	3e08      	subs	r6, #8
 80107b6:	429f      	cmp	r7, r3
 80107b8:	dde9      	ble.n	801078e <__kernel_rem_pio2+0x9e>
 80107ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107bc:	c330      	stmia	r3!, {r4, r5}
 80107be:	930a      	str	r3, [sp, #40]	; 0x28
 80107c0:	9b04      	ldr	r3, [sp, #16]
 80107c2:	3301      	adds	r3, #1
 80107c4:	9304      	str	r3, [sp, #16]
 80107c6:	e7c7      	b.n	8010758 <__kernel_rem_pio2+0x68>
 80107c8:	9b08      	ldr	r3, [sp, #32]
 80107ca:	aa12      	add	r2, sp, #72	; 0x48
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	189b      	adds	r3, r3, r2
 80107d0:	9310      	str	r3, [sp, #64]	; 0x40
 80107d2:	9b00      	ldr	r3, [sp, #0]
 80107d4:	0098      	lsls	r0, r3, #2
 80107d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80107d8:	181b      	adds	r3, r3, r0
 80107da:	930f      	str	r3, [sp, #60]	; 0x3c
 80107dc:	9b08      	ldr	r3, [sp, #32]
 80107de:	9304      	str	r3, [sp, #16]
 80107e0:	9b04      	ldr	r3, [sp, #16]
 80107e2:	aa76      	add	r2, sp, #472	; 0x1d8
 80107e4:	00db      	lsls	r3, r3, #3
 80107e6:	18d3      	adds	r3, r2, r3
 80107e8:	681c      	ldr	r4, [r3, #0]
 80107ea:	685d      	ldr	r5, [r3, #4]
 80107ec:	ab12      	add	r3, sp, #72	; 0x48
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80107f2:	9b04      	ldr	r3, [sp, #16]
 80107f4:	9211      	str	r2, [sp, #68]	; 0x44
 80107f6:	930a      	str	r3, [sp, #40]	; 0x28
 80107f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	dc74      	bgt.n	80108e8 <__kernel_rem_pio2+0x1f8>
 80107fe:	0020      	movs	r0, r4
 8010800:	0029      	movs	r1, r5
 8010802:	9a02      	ldr	r2, [sp, #8]
 8010804:	f000 fdaa 	bl	801135c <scalbn>
 8010808:	23ff      	movs	r3, #255	; 0xff
 801080a:	2200      	movs	r2, #0
 801080c:	059b      	lsls	r3, r3, #22
 801080e:	0004      	movs	r4, r0
 8010810:	000d      	movs	r5, r1
 8010812:	f7f1 fc71 	bl	80020f8 <__aeabi_dmul>
 8010816:	f000 fd11 	bl	801123c <floor>
 801081a:	2200      	movs	r2, #0
 801081c:	4b87      	ldr	r3, [pc, #540]	; (8010a3c <__kernel_rem_pio2+0x34c>)
 801081e:	f7f1 fc6b 	bl	80020f8 <__aeabi_dmul>
 8010822:	0002      	movs	r2, r0
 8010824:	000b      	movs	r3, r1
 8010826:	0020      	movs	r0, r4
 8010828:	0029      	movs	r1, r5
 801082a:	f7f1 fed1 	bl	80025d0 <__aeabi_dsub>
 801082e:	000d      	movs	r5, r1
 8010830:	0004      	movs	r4, r0
 8010832:	f7f2 fa7d 	bl	8002d30 <__aeabi_d2iz>
 8010836:	900b      	str	r0, [sp, #44]	; 0x2c
 8010838:	f7f2 fab0 	bl	8002d9c <__aeabi_i2d>
 801083c:	000b      	movs	r3, r1
 801083e:	0002      	movs	r2, r0
 8010840:	0029      	movs	r1, r5
 8010842:	0020      	movs	r0, r4
 8010844:	f7f1 fec4 	bl	80025d0 <__aeabi_dsub>
 8010848:	9b02      	ldr	r3, [sp, #8]
 801084a:	0006      	movs	r6, r0
 801084c:	000f      	movs	r7, r1
 801084e:	2b00      	cmp	r3, #0
 8010850:	dd74      	ble.n	801093c <__kernel_rem_pio2+0x24c>
 8010852:	2118      	movs	r1, #24
 8010854:	9b04      	ldr	r3, [sp, #16]
 8010856:	aa12      	add	r2, sp, #72	; 0x48
 8010858:	3b01      	subs	r3, #1
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	589a      	ldr	r2, [r3, r2]
 801085e:	9802      	ldr	r0, [sp, #8]
 8010860:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010862:	1a09      	subs	r1, r1, r0
 8010864:	0010      	movs	r0, r2
 8010866:	4108      	asrs	r0, r1
 8010868:	1824      	adds	r4, r4, r0
 801086a:	4088      	lsls	r0, r1
 801086c:	a912      	add	r1, sp, #72	; 0x48
 801086e:	1a12      	subs	r2, r2, r0
 8010870:	505a      	str	r2, [r3, r1]
 8010872:	2317      	movs	r3, #23
 8010874:	9902      	ldr	r1, [sp, #8]
 8010876:	940b      	str	r4, [sp, #44]	; 0x2c
 8010878:	1a5b      	subs	r3, r3, r1
 801087a:	411a      	asrs	r2, r3
 801087c:	920a      	str	r2, [sp, #40]	; 0x28
 801087e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010880:	2b00      	cmp	r3, #0
 8010882:	dd6d      	ble.n	8010960 <__kernel_rem_pio2+0x270>
 8010884:	2200      	movs	r2, #0
 8010886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010888:	2080      	movs	r0, #128	; 0x80
 801088a:	3301      	adds	r3, #1
 801088c:	930b      	str	r3, [sp, #44]	; 0x2c
 801088e:	4b6c      	ldr	r3, [pc, #432]	; (8010a40 <__kernel_rem_pio2+0x350>)
 8010890:	0014      	movs	r4, r2
 8010892:	469c      	mov	ip, r3
 8010894:	2501      	movs	r5, #1
 8010896:	0440      	lsls	r0, r0, #17
 8010898:	9b04      	ldr	r3, [sp, #16]
 801089a:	4293      	cmp	r3, r2
 801089c:	dd00      	ble.n	80108a0 <__kernel_rem_pio2+0x1b0>
 801089e:	e098      	b.n	80109d2 <__kernel_rem_pio2+0x2e2>
 80108a0:	9b02      	ldr	r3, [sp, #8]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	dd05      	ble.n	80108b2 <__kernel_rem_pio2+0x1c2>
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d100      	bne.n	80108ac <__kernel_rem_pio2+0x1bc>
 80108aa:	e0a8      	b.n	80109fe <__kernel_rem_pio2+0x30e>
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d100      	bne.n	80108b2 <__kernel_rem_pio2+0x1c2>
 80108b0:	e0b0      	b.n	8010a14 <__kernel_rem_pio2+0x324>
 80108b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b4:	2b02      	cmp	r3, #2
 80108b6:	d153      	bne.n	8010960 <__kernel_rem_pio2+0x270>
 80108b8:	0032      	movs	r2, r6
 80108ba:	003b      	movs	r3, r7
 80108bc:	2000      	movs	r0, #0
 80108be:	4961      	ldr	r1, [pc, #388]	; (8010a44 <__kernel_rem_pio2+0x354>)
 80108c0:	f7f1 fe86 	bl	80025d0 <__aeabi_dsub>
 80108c4:	0006      	movs	r6, r0
 80108c6:	000f      	movs	r7, r1
 80108c8:	2c00      	cmp	r4, #0
 80108ca:	d049      	beq.n	8010960 <__kernel_rem_pio2+0x270>
 80108cc:	9a02      	ldr	r2, [sp, #8]
 80108ce:	2000      	movs	r0, #0
 80108d0:	495c      	ldr	r1, [pc, #368]	; (8010a44 <__kernel_rem_pio2+0x354>)
 80108d2:	f000 fd43 	bl	801135c <scalbn>
 80108d6:	0002      	movs	r2, r0
 80108d8:	000b      	movs	r3, r1
 80108da:	0030      	movs	r0, r6
 80108dc:	0039      	movs	r1, r7
 80108de:	f7f1 fe77 	bl	80025d0 <__aeabi_dsub>
 80108e2:	0006      	movs	r6, r0
 80108e4:	000f      	movs	r7, r1
 80108e6:	e03b      	b.n	8010960 <__kernel_rem_pio2+0x270>
 80108e8:	2200      	movs	r2, #0
 80108ea:	4b57      	ldr	r3, [pc, #348]	; (8010a48 <__kernel_rem_pio2+0x358>)
 80108ec:	0020      	movs	r0, r4
 80108ee:	0029      	movs	r1, r5
 80108f0:	f7f1 fc02 	bl	80020f8 <__aeabi_dmul>
 80108f4:	f7f2 fa1c 	bl	8002d30 <__aeabi_d2iz>
 80108f8:	f7f2 fa50 	bl	8002d9c <__aeabi_i2d>
 80108fc:	2200      	movs	r2, #0
 80108fe:	4b53      	ldr	r3, [pc, #332]	; (8010a4c <__kernel_rem_pio2+0x35c>)
 8010900:	0006      	movs	r6, r0
 8010902:	000f      	movs	r7, r1
 8010904:	f7f1 fbf8 	bl	80020f8 <__aeabi_dmul>
 8010908:	0002      	movs	r2, r0
 801090a:	000b      	movs	r3, r1
 801090c:	0020      	movs	r0, r4
 801090e:	0029      	movs	r1, r5
 8010910:	f7f1 fe5e 	bl	80025d0 <__aeabi_dsub>
 8010914:	f7f2 fa0c 	bl	8002d30 <__aeabi_d2iz>
 8010918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801091a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801091c:	c301      	stmia	r3!, {r0}
 801091e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010922:	0030      	movs	r0, r6
 8010924:	3b01      	subs	r3, #1
 8010926:	930a      	str	r3, [sp, #40]	; 0x28
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	18d3      	adds	r3, r2, r3
 801092c:	0039      	movs	r1, r7
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	f7f0 fc71 	bl	8001218 <__aeabi_dadd>
 8010936:	0004      	movs	r4, r0
 8010938:	000d      	movs	r5, r1
 801093a:	e75d      	b.n	80107f8 <__kernel_rem_pio2+0x108>
 801093c:	9b02      	ldr	r3, [sp, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d107      	bne.n	8010952 <__kernel_rem_pio2+0x262>
 8010942:	9b04      	ldr	r3, [sp, #16]
 8010944:	aa12      	add	r2, sp, #72	; 0x48
 8010946:	3b01      	subs	r3, #1
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	5898      	ldr	r0, [r3, r2]
 801094c:	15c3      	asrs	r3, r0, #23
 801094e:	930a      	str	r3, [sp, #40]	; 0x28
 8010950:	e795      	b.n	801087e <__kernel_rem_pio2+0x18e>
 8010952:	2200      	movs	r2, #0
 8010954:	4b3e      	ldr	r3, [pc, #248]	; (8010a50 <__kernel_rem_pio2+0x360>)
 8010956:	f7ef fd89 	bl	800046c <__aeabi_dcmpge>
 801095a:	2800      	cmp	r0, #0
 801095c:	d136      	bne.n	80109cc <__kernel_rem_pio2+0x2dc>
 801095e:	900a      	str	r0, [sp, #40]	; 0x28
 8010960:	2200      	movs	r2, #0
 8010962:	2300      	movs	r3, #0
 8010964:	0030      	movs	r0, r6
 8010966:	0039      	movs	r1, r7
 8010968:	f7ef fd5c 	bl	8000424 <__aeabi_dcmpeq>
 801096c:	2800      	cmp	r0, #0
 801096e:	d100      	bne.n	8010972 <__kernel_rem_pio2+0x282>
 8010970:	e0b9      	b.n	8010ae6 <__kernel_rem_pio2+0x3f6>
 8010972:	2200      	movs	r2, #0
 8010974:	9b04      	ldr	r3, [sp, #16]
 8010976:	3b01      	subs	r3, #1
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	9908      	ldr	r1, [sp, #32]
 801097c:	428b      	cmp	r3, r1
 801097e:	da52      	bge.n	8010a26 <__kernel_rem_pio2+0x336>
 8010980:	2a00      	cmp	r2, #0
 8010982:	d100      	bne.n	8010986 <__kernel_rem_pio2+0x296>
 8010984:	e095      	b.n	8010ab2 <__kernel_rem_pio2+0x3c2>
 8010986:	9b02      	ldr	r3, [sp, #8]
 8010988:	aa12      	add	r2, sp, #72	; 0x48
 801098a:	3b18      	subs	r3, #24
 801098c:	9302      	str	r3, [sp, #8]
 801098e:	9b00      	ldr	r3, [sp, #0]
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	589b      	ldr	r3, [r3, r2]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d100      	bne.n	801099a <__kernel_rem_pio2+0x2aa>
 8010998:	e0a1      	b.n	8010ade <__kernel_rem_pio2+0x3ee>
 801099a:	2000      	movs	r0, #0
 801099c:	9a02      	ldr	r2, [sp, #8]
 801099e:	4929      	ldr	r1, [pc, #164]	; (8010a44 <__kernel_rem_pio2+0x354>)
 80109a0:	f000 fcdc 	bl	801135c <scalbn>
 80109a4:	0006      	movs	r6, r0
 80109a6:	000f      	movs	r7, r1
 80109a8:	9c00      	ldr	r4, [sp, #0]
 80109aa:	2c00      	cmp	r4, #0
 80109ac:	db00      	blt.n	80109b0 <__kernel_rem_pio2+0x2c0>
 80109ae:	e0d9      	b.n	8010b64 <__kernel_rem_pio2+0x474>
 80109b0:	2600      	movs	r6, #0
 80109b2:	9d00      	ldr	r5, [sp, #0]
 80109b4:	2d00      	cmp	r5, #0
 80109b6:	da00      	bge.n	80109ba <__kernel_rem_pio2+0x2ca>
 80109b8:	e10c      	b.n	8010bd4 <__kernel_rem_pio2+0x4e4>
 80109ba:	ab76      	add	r3, sp, #472	; 0x1d8
 80109bc:	00ef      	lsls	r7, r5, #3
 80109be:	2400      	movs	r4, #0
 80109c0:	18ff      	adds	r7, r7, r3
 80109c2:	2300      	movs	r3, #0
 80109c4:	9302      	str	r3, [sp, #8]
 80109c6:	9403      	str	r4, [sp, #12]
 80109c8:	2400      	movs	r4, #0
 80109ca:	e0f4      	b.n	8010bb6 <__kernel_rem_pio2+0x4c6>
 80109cc:	2302      	movs	r3, #2
 80109ce:	930a      	str	r3, [sp, #40]	; 0x28
 80109d0:	e758      	b.n	8010884 <__kernel_rem_pio2+0x194>
 80109d2:	9b00      	ldr	r3, [sp, #0]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	2c00      	cmp	r4, #0
 80109d8:	d10b      	bne.n	80109f2 <__kernel_rem_pio2+0x302>
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d003      	beq.n	80109e6 <__kernel_rem_pio2+0x2f6>
 80109de:	9c00      	ldr	r4, [sp, #0]
 80109e0:	1ac3      	subs	r3, r0, r3
 80109e2:	6023      	str	r3, [r4, #0]
 80109e4:	002b      	movs	r3, r5
 80109e6:	9c00      	ldr	r4, [sp, #0]
 80109e8:	3201      	adds	r2, #1
 80109ea:	3404      	adds	r4, #4
 80109ec:	9400      	str	r4, [sp, #0]
 80109ee:	001c      	movs	r4, r3
 80109f0:	e752      	b.n	8010898 <__kernel_rem_pio2+0x1a8>
 80109f2:	4661      	mov	r1, ip
 80109f4:	1acb      	subs	r3, r1, r3
 80109f6:	9900      	ldr	r1, [sp, #0]
 80109f8:	600b      	str	r3, [r1, #0]
 80109fa:	0023      	movs	r3, r4
 80109fc:	e7f3      	b.n	80109e6 <__kernel_rem_pio2+0x2f6>
 80109fe:	9b04      	ldr	r3, [sp, #16]
 8010a00:	aa12      	add	r2, sp, #72	; 0x48
 8010a02:	3b01      	subs	r3, #1
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	589a      	ldr	r2, [r3, r2]
 8010a08:	9200      	str	r2, [sp, #0]
 8010a0a:	0252      	lsls	r2, r2, #9
 8010a0c:	0a52      	lsrs	r2, r2, #9
 8010a0e:	a912      	add	r1, sp, #72	; 0x48
 8010a10:	505a      	str	r2, [r3, r1]
 8010a12:	e74e      	b.n	80108b2 <__kernel_rem_pio2+0x1c2>
 8010a14:	9b04      	ldr	r3, [sp, #16]
 8010a16:	aa12      	add	r2, sp, #72	; 0x48
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	589a      	ldr	r2, [r3, r2]
 8010a1e:	9200      	str	r2, [sp, #0]
 8010a20:	0292      	lsls	r2, r2, #10
 8010a22:	0a92      	lsrs	r2, r2, #10
 8010a24:	e7f3      	b.n	8010a0e <__kernel_rem_pio2+0x31e>
 8010a26:	0099      	lsls	r1, r3, #2
 8010a28:	a812      	add	r0, sp, #72	; 0x48
 8010a2a:	5809      	ldr	r1, [r1, r0]
 8010a2c:	3b01      	subs	r3, #1
 8010a2e:	430a      	orrs	r2, r1
 8010a30:	e7a3      	b.n	801097a <__kernel_rem_pio2+0x28a>
 8010a32:	46c0      	nop			; (mov r8, r8)
 8010a34:	fffffd84 	.word	0xfffffd84
 8010a38:	08015a08 	.word	0x08015a08
 8010a3c:	40200000 	.word	0x40200000
 8010a40:	00ffffff 	.word	0x00ffffff
 8010a44:	3ff00000 	.word	0x3ff00000
 8010a48:	3e700000 	.word	0x3e700000
 8010a4c:	41700000 	.word	0x41700000
 8010a50:	3fe00000 	.word	0x3fe00000
 8010a54:	3301      	adds	r3, #1
 8010a56:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010a58:	009a      	lsls	r2, r3, #2
 8010a5a:	4252      	negs	r2, r2
 8010a5c:	588a      	ldr	r2, [r1, r2]
 8010a5e:	2a00      	cmp	r2, #0
 8010a60:	d0f8      	beq.n	8010a54 <__kernel_rem_pio2+0x364>
 8010a62:	9a04      	ldr	r2, [sp, #16]
 8010a64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a66:	1c57      	adds	r7, r2, #1
 8010a68:	1854      	adds	r4, r2, r1
 8010a6a:	00e4      	lsls	r4, r4, #3
 8010a6c:	aa26      	add	r2, sp, #152	; 0x98
 8010a6e:	1914      	adds	r4, r2, r4
 8010a70:	9a04      	ldr	r2, [sp, #16]
 8010a72:	18d3      	adds	r3, r2, r3
 8010a74:	9304      	str	r3, [sp, #16]
 8010a76:	9b04      	ldr	r3, [sp, #16]
 8010a78:	42bb      	cmp	r3, r7
 8010a7a:	da00      	bge.n	8010a7e <__kernel_rem_pio2+0x38e>
 8010a7c:	e6b0      	b.n	80107e0 <__kernel_rem_pio2+0xf0>
 8010a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a80:	00bb      	lsls	r3, r7, #2
 8010a82:	58d0      	ldr	r0, [r2, r3]
 8010a84:	f7f2 f98a 	bl	8002d9c <__aeabi_i2d>
 8010a88:	2200      	movs	r2, #0
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	0026      	movs	r6, r4
 8010a8e:	2500      	movs	r5, #0
 8010a90:	6020      	str	r0, [r4, #0]
 8010a92:	6061      	str	r1, [r4, #4]
 8010a94:	9200      	str	r2, [sp, #0]
 8010a96:	9301      	str	r3, [sp, #4]
 8010a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a9a:	429d      	cmp	r5, r3
 8010a9c:	dd0b      	ble.n	8010ab6 <__kernel_rem_pio2+0x3c6>
 8010a9e:	00fb      	lsls	r3, r7, #3
 8010aa0:	aa76      	add	r2, sp, #472	; 0x1d8
 8010aa2:	18d3      	adds	r3, r2, r3
 8010aa4:	3701      	adds	r7, #1
 8010aa6:	9900      	ldr	r1, [sp, #0]
 8010aa8:	9a01      	ldr	r2, [sp, #4]
 8010aaa:	3408      	adds	r4, #8
 8010aac:	6019      	str	r1, [r3, #0]
 8010aae:	605a      	str	r2, [r3, #4]
 8010ab0:	e7e1      	b.n	8010a76 <__kernel_rem_pio2+0x386>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e7cf      	b.n	8010a56 <__kernel_rem_pio2+0x366>
 8010ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ab8:	00e9      	lsls	r1, r5, #3
 8010aba:	1859      	adds	r1, r3, r1
 8010abc:	6808      	ldr	r0, [r1, #0]
 8010abe:	6849      	ldr	r1, [r1, #4]
 8010ac0:	6832      	ldr	r2, [r6, #0]
 8010ac2:	6873      	ldr	r3, [r6, #4]
 8010ac4:	f7f1 fb18 	bl	80020f8 <__aeabi_dmul>
 8010ac8:	0002      	movs	r2, r0
 8010aca:	000b      	movs	r3, r1
 8010acc:	9800      	ldr	r0, [sp, #0]
 8010ace:	9901      	ldr	r1, [sp, #4]
 8010ad0:	f7f0 fba2 	bl	8001218 <__aeabi_dadd>
 8010ad4:	3501      	adds	r5, #1
 8010ad6:	9000      	str	r0, [sp, #0]
 8010ad8:	9101      	str	r1, [sp, #4]
 8010ada:	3e08      	subs	r6, #8
 8010adc:	e7dc      	b.n	8010a98 <__kernel_rem_pio2+0x3a8>
 8010ade:	9b00      	ldr	r3, [sp, #0]
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	e74f      	b.n	8010986 <__kernel_rem_pio2+0x296>
 8010ae6:	9b02      	ldr	r3, [sp, #8]
 8010ae8:	0030      	movs	r0, r6
 8010aea:	425a      	negs	r2, r3
 8010aec:	0039      	movs	r1, r7
 8010aee:	f000 fc35 	bl	801135c <scalbn>
 8010af2:	2200      	movs	r2, #0
 8010af4:	4bb6      	ldr	r3, [pc, #728]	; (8010dd0 <__kernel_rem_pio2+0x6e0>)
 8010af6:	0004      	movs	r4, r0
 8010af8:	000d      	movs	r5, r1
 8010afa:	f7ef fcb7 	bl	800046c <__aeabi_dcmpge>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d025      	beq.n	8010b4e <__kernel_rem_pio2+0x45e>
 8010b02:	2200      	movs	r2, #0
 8010b04:	4bb3      	ldr	r3, [pc, #716]	; (8010dd4 <__kernel_rem_pio2+0x6e4>)
 8010b06:	0020      	movs	r0, r4
 8010b08:	0029      	movs	r1, r5
 8010b0a:	f7f1 faf5 	bl	80020f8 <__aeabi_dmul>
 8010b0e:	f7f2 f90f 	bl	8002d30 <__aeabi_d2iz>
 8010b12:	9b04      	ldr	r3, [sp, #16]
 8010b14:	0006      	movs	r6, r0
 8010b16:	009f      	lsls	r7, r3, #2
 8010b18:	f7f2 f940 	bl	8002d9c <__aeabi_i2d>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	4bac      	ldr	r3, [pc, #688]	; (8010dd0 <__kernel_rem_pio2+0x6e0>)
 8010b20:	f7f1 faea 	bl	80020f8 <__aeabi_dmul>
 8010b24:	0002      	movs	r2, r0
 8010b26:	000b      	movs	r3, r1
 8010b28:	0020      	movs	r0, r4
 8010b2a:	0029      	movs	r1, r5
 8010b2c:	f7f1 fd50 	bl	80025d0 <__aeabi_dsub>
 8010b30:	f7f2 f8fe 	bl	8002d30 <__aeabi_d2iz>
 8010b34:	ab12      	add	r3, sp, #72	; 0x48
 8010b36:	51d8      	str	r0, [r3, r7]
 8010b38:	9b04      	ldr	r3, [sp, #16]
 8010b3a:	aa12      	add	r2, sp, #72	; 0x48
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	9b02      	ldr	r3, [sp, #8]
 8010b42:	3318      	adds	r3, #24
 8010b44:	9302      	str	r3, [sp, #8]
 8010b46:	9b00      	ldr	r3, [sp, #0]
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	509e      	str	r6, [r3, r2]
 8010b4c:	e725      	b.n	801099a <__kernel_rem_pio2+0x2aa>
 8010b4e:	9b04      	ldr	r3, [sp, #16]
 8010b50:	0020      	movs	r0, r4
 8010b52:	0029      	movs	r1, r5
 8010b54:	009e      	lsls	r6, r3, #2
 8010b56:	f7f2 f8eb 	bl	8002d30 <__aeabi_d2iz>
 8010b5a:	ab12      	add	r3, sp, #72	; 0x48
 8010b5c:	5198      	str	r0, [r3, r6]
 8010b5e:	9b04      	ldr	r3, [sp, #16]
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	e71a      	b.n	801099a <__kernel_rem_pio2+0x2aa>
 8010b64:	00e5      	lsls	r5, r4, #3
 8010b66:	ab76      	add	r3, sp, #472	; 0x1d8
 8010b68:	aa12      	add	r2, sp, #72	; 0x48
 8010b6a:	195d      	adds	r5, r3, r5
 8010b6c:	00a3      	lsls	r3, r4, #2
 8010b6e:	5898      	ldr	r0, [r3, r2]
 8010b70:	f7f2 f914 	bl	8002d9c <__aeabi_i2d>
 8010b74:	0032      	movs	r2, r6
 8010b76:	003b      	movs	r3, r7
 8010b78:	f7f1 fabe 	bl	80020f8 <__aeabi_dmul>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	6028      	str	r0, [r5, #0]
 8010b80:	6069      	str	r1, [r5, #4]
 8010b82:	4b94      	ldr	r3, [pc, #592]	; (8010dd4 <__kernel_rem_pio2+0x6e4>)
 8010b84:	0030      	movs	r0, r6
 8010b86:	0039      	movs	r1, r7
 8010b88:	f7f1 fab6 	bl	80020f8 <__aeabi_dmul>
 8010b8c:	3c01      	subs	r4, #1
 8010b8e:	0006      	movs	r6, r0
 8010b90:	000f      	movs	r7, r1
 8010b92:	e70a      	b.n	80109aa <__kernel_rem_pio2+0x2ba>
 8010b94:	4b90      	ldr	r3, [pc, #576]	; (8010dd8 <__kernel_rem_pio2+0x6e8>)
 8010b96:	00e1      	lsls	r1, r4, #3
 8010b98:	1859      	adds	r1, r3, r1
 8010b9a:	6808      	ldr	r0, [r1, #0]
 8010b9c:	6849      	ldr	r1, [r1, #4]
 8010b9e:	cf0c      	ldmia	r7!, {r2, r3}
 8010ba0:	f7f1 faaa 	bl	80020f8 <__aeabi_dmul>
 8010ba4:	0002      	movs	r2, r0
 8010ba6:	000b      	movs	r3, r1
 8010ba8:	9802      	ldr	r0, [sp, #8]
 8010baa:	9903      	ldr	r1, [sp, #12]
 8010bac:	f7f0 fb34 	bl	8001218 <__aeabi_dadd>
 8010bb0:	9002      	str	r0, [sp, #8]
 8010bb2:	9103      	str	r1, [sp, #12]
 8010bb4:	3401      	adds	r4, #1
 8010bb6:	9b08      	ldr	r3, [sp, #32]
 8010bb8:	429c      	cmp	r4, r3
 8010bba:	dc01      	bgt.n	8010bc0 <__kernel_rem_pio2+0x4d0>
 8010bbc:	42a6      	cmp	r6, r4
 8010bbe:	dae9      	bge.n	8010b94 <__kernel_rem_pio2+0x4a4>
 8010bc0:	00f3      	lsls	r3, r6, #3
 8010bc2:	aa4e      	add	r2, sp, #312	; 0x138
 8010bc4:	18d3      	adds	r3, r2, r3
 8010bc6:	3d01      	subs	r5, #1
 8010bc8:	9902      	ldr	r1, [sp, #8]
 8010bca:	9a03      	ldr	r2, [sp, #12]
 8010bcc:	3601      	adds	r6, #1
 8010bce:	6019      	str	r1, [r3, #0]
 8010bd0:	605a      	str	r2, [r3, #4]
 8010bd2:	e6ef      	b.n	80109b4 <__kernel_rem_pio2+0x2c4>
 8010bd4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010bd6:	2b02      	cmp	r3, #2
 8010bd8:	dc0b      	bgt.n	8010bf2 <__kernel_rem_pio2+0x502>
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	dd00      	ble.n	8010be0 <__kernel_rem_pio2+0x4f0>
 8010bde:	e08a      	b.n	8010cf6 <__kernel_rem_pio2+0x606>
 8010be0:	d055      	beq.n	8010c8e <__kernel_rem_pio2+0x59e>
 8010be2:	2007      	movs	r0, #7
 8010be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010be6:	4003      	ands	r3, r0
 8010be8:	0018      	movs	r0, r3
 8010bea:	239f      	movs	r3, #159	; 0x9f
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	449d      	add	sp, r3
 8010bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bf2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010bf4:	2b03      	cmp	r3, #3
 8010bf6:	d1f4      	bne.n	8010be2 <__kernel_rem_pio2+0x4f2>
 8010bf8:	9b00      	ldr	r3, [sp, #0]
 8010bfa:	00dc      	lsls	r4, r3, #3
 8010bfc:	ab4e      	add	r3, sp, #312	; 0x138
 8010bfe:	191c      	adds	r4, r3, r4
 8010c00:	0025      	movs	r5, r4
 8010c02:	9b00      	ldr	r3, [sp, #0]
 8010c04:	9302      	str	r3, [sp, #8]
 8010c06:	9b02      	ldr	r3, [sp, #8]
 8010c08:	3d08      	subs	r5, #8
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dd00      	ble.n	8010c10 <__kernel_rem_pio2+0x520>
 8010c0e:	e083      	b.n	8010d18 <__kernel_rem_pio2+0x628>
 8010c10:	9d00      	ldr	r5, [sp, #0]
 8010c12:	3c08      	subs	r4, #8
 8010c14:	2d01      	cmp	r5, #1
 8010c16:	dd00      	ble.n	8010c1a <__kernel_rem_pio2+0x52a>
 8010c18:	e0a0      	b.n	8010d5c <__kernel_rem_pio2+0x66c>
 8010c1a:	2400      	movs	r4, #0
 8010c1c:	0021      	movs	r1, r4
 8010c1e:	9b00      	ldr	r3, [sp, #0]
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	dd00      	ble.n	8010c26 <__kernel_rem_pio2+0x536>
 8010c24:	e0b8      	b.n	8010d98 <__kernel_rem_pio2+0x6a8>
 8010c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c28:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8010c2a:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8010c2c:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8010c2e:	9851      	ldr	r0, [sp, #324]	; 0x144
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d000      	beq.n	8010c36 <__kernel_rem_pio2+0x546>
 8010c34:	e0be      	b.n	8010db4 <__kernel_rem_pio2+0x6c4>
 8010c36:	0033      	movs	r3, r6
 8010c38:	003a      	movs	r2, r7
 8010c3a:	9e07      	ldr	r6, [sp, #28]
 8010c3c:	6032      	str	r2, [r6, #0]
 8010c3e:	6073      	str	r3, [r6, #4]
 8010c40:	002a      	movs	r2, r5
 8010c42:	0003      	movs	r3, r0
 8010c44:	60b2      	str	r2, [r6, #8]
 8010c46:	60f3      	str	r3, [r6, #12]
 8010c48:	0022      	movs	r2, r4
 8010c4a:	000b      	movs	r3, r1
 8010c4c:	6132      	str	r2, [r6, #16]
 8010c4e:	6173      	str	r3, [r6, #20]
 8010c50:	e7c7      	b.n	8010be2 <__kernel_rem_pio2+0x4f2>
 8010c52:	9b00      	ldr	r3, [sp, #0]
 8010c54:	aa4e      	add	r2, sp, #312	; 0x138
 8010c56:	00db      	lsls	r3, r3, #3
 8010c58:	18d3      	adds	r3, r2, r3
 8010c5a:	0028      	movs	r0, r5
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	0021      	movs	r1, r4
 8010c62:	f7f0 fad9 	bl	8001218 <__aeabi_dadd>
 8010c66:	0005      	movs	r5, r0
 8010c68:	000c      	movs	r4, r1
 8010c6a:	9b00      	ldr	r3, [sp, #0]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	9b00      	ldr	r3, [sp, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	daed      	bge.n	8010c52 <__kernel_rem_pio2+0x562>
 8010c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d002      	beq.n	8010c82 <__kernel_rem_pio2+0x592>
 8010c7c:	2380      	movs	r3, #128	; 0x80
 8010c7e:	061b      	lsls	r3, r3, #24
 8010c80:	18e4      	adds	r4, r4, r3
 8010c82:	002a      	movs	r2, r5
 8010c84:	0023      	movs	r3, r4
 8010c86:	9907      	ldr	r1, [sp, #28]
 8010c88:	600a      	str	r2, [r1, #0]
 8010c8a:	604b      	str	r3, [r1, #4]
 8010c8c:	e7a9      	b.n	8010be2 <__kernel_rem_pio2+0x4f2>
 8010c8e:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8010c90:	002c      	movs	r4, r5
 8010c92:	e7ed      	b.n	8010c70 <__kernel_rem_pio2+0x580>
 8010c94:	00e3      	lsls	r3, r4, #3
 8010c96:	aa4e      	add	r2, sp, #312	; 0x138
 8010c98:	18d3      	adds	r3, r2, r3
 8010c9a:	0030      	movs	r0, r6
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	0029      	movs	r1, r5
 8010ca2:	f7f0 fab9 	bl	8001218 <__aeabi_dadd>
 8010ca6:	0006      	movs	r6, r0
 8010ca8:	000d      	movs	r5, r1
 8010caa:	3c01      	subs	r4, #1
 8010cac:	2c00      	cmp	r4, #0
 8010cae:	daf1      	bge.n	8010c94 <__kernel_rem_pio2+0x5a4>
 8010cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cb2:	0029      	movs	r1, r5
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <__kernel_rem_pio2+0x5ce>
 8010cb8:	2380      	movs	r3, #128	; 0x80
 8010cba:	061b      	lsls	r3, r3, #24
 8010cbc:	18e9      	adds	r1, r5, r3
 8010cbe:	0032      	movs	r2, r6
 8010cc0:	000b      	movs	r3, r1
 8010cc2:	9907      	ldr	r1, [sp, #28]
 8010cc4:	2401      	movs	r4, #1
 8010cc6:	600a      	str	r2, [r1, #0]
 8010cc8:	604b      	str	r3, [r1, #4]
 8010cca:	984e      	ldr	r0, [sp, #312]	; 0x138
 8010ccc:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8010cce:	002b      	movs	r3, r5
 8010cd0:	f7f1 fc7e 	bl	80025d0 <__aeabi_dsub>
 8010cd4:	0006      	movs	r6, r0
 8010cd6:	000d      	movs	r5, r1
 8010cd8:	9b00      	ldr	r3, [sp, #0]
 8010cda:	42a3      	cmp	r3, r4
 8010cdc:	da0f      	bge.n	8010cfe <__kernel_rem_pio2+0x60e>
 8010cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <__kernel_rem_pio2+0x5fa>
 8010ce4:	2380      	movs	r3, #128	; 0x80
 8010ce6:	061b      	lsls	r3, r3, #24
 8010ce8:	18ed      	adds	r5, r5, r3
 8010cea:	0032      	movs	r2, r6
 8010cec:	002b      	movs	r3, r5
 8010cee:	9907      	ldr	r1, [sp, #28]
 8010cf0:	608a      	str	r2, [r1, #8]
 8010cf2:	60cb      	str	r3, [r1, #12]
 8010cf4:	e775      	b.n	8010be2 <__kernel_rem_pio2+0x4f2>
 8010cf6:	2600      	movs	r6, #0
 8010cf8:	9c00      	ldr	r4, [sp, #0]
 8010cfa:	0035      	movs	r5, r6
 8010cfc:	e7d6      	b.n	8010cac <__kernel_rem_pio2+0x5bc>
 8010cfe:	00e3      	lsls	r3, r4, #3
 8010d00:	aa4e      	add	r2, sp, #312	; 0x138
 8010d02:	18d3      	adds	r3, r2, r3
 8010d04:	0030      	movs	r0, r6
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	0029      	movs	r1, r5
 8010d0c:	f7f0 fa84 	bl	8001218 <__aeabi_dadd>
 8010d10:	3401      	adds	r4, #1
 8010d12:	0006      	movs	r6, r0
 8010d14:	000d      	movs	r5, r1
 8010d16:	e7df      	b.n	8010cd8 <__kernel_rem_pio2+0x5e8>
 8010d18:	9b02      	ldr	r3, [sp, #8]
 8010d1a:	68ae      	ldr	r6, [r5, #8]
 8010d1c:	68ef      	ldr	r7, [r5, #12]
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	9302      	str	r3, [sp, #8]
 8010d22:	682a      	ldr	r2, [r5, #0]
 8010d24:	686b      	ldr	r3, [r5, #4]
 8010d26:	9204      	str	r2, [sp, #16]
 8010d28:	9305      	str	r3, [sp, #20]
 8010d2a:	9804      	ldr	r0, [sp, #16]
 8010d2c:	9905      	ldr	r1, [sp, #20]
 8010d2e:	0032      	movs	r2, r6
 8010d30:	003b      	movs	r3, r7
 8010d32:	f7f0 fa71 	bl	8001218 <__aeabi_dadd>
 8010d36:	0002      	movs	r2, r0
 8010d38:	000b      	movs	r3, r1
 8010d3a:	9008      	str	r0, [sp, #32]
 8010d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8010d3e:	9804      	ldr	r0, [sp, #16]
 8010d40:	9905      	ldr	r1, [sp, #20]
 8010d42:	f7f1 fc45 	bl	80025d0 <__aeabi_dsub>
 8010d46:	0032      	movs	r2, r6
 8010d48:	003b      	movs	r3, r7
 8010d4a:	f7f0 fa65 	bl	8001218 <__aeabi_dadd>
 8010d4e:	9a08      	ldr	r2, [sp, #32]
 8010d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d52:	60a8      	str	r0, [r5, #8]
 8010d54:	60e9      	str	r1, [r5, #12]
 8010d56:	602a      	str	r2, [r5, #0]
 8010d58:	606b      	str	r3, [r5, #4]
 8010d5a:	e754      	b.n	8010c06 <__kernel_rem_pio2+0x516>
 8010d5c:	6826      	ldr	r6, [r4, #0]
 8010d5e:	6867      	ldr	r7, [r4, #4]
 8010d60:	68a2      	ldr	r2, [r4, #8]
 8010d62:	68e3      	ldr	r3, [r4, #12]
 8010d64:	0030      	movs	r0, r6
 8010d66:	0039      	movs	r1, r7
 8010d68:	9202      	str	r2, [sp, #8]
 8010d6a:	9303      	str	r3, [sp, #12]
 8010d6c:	f7f0 fa54 	bl	8001218 <__aeabi_dadd>
 8010d70:	0002      	movs	r2, r0
 8010d72:	000b      	movs	r3, r1
 8010d74:	9004      	str	r0, [sp, #16]
 8010d76:	9105      	str	r1, [sp, #20]
 8010d78:	0030      	movs	r0, r6
 8010d7a:	0039      	movs	r1, r7
 8010d7c:	f7f1 fc28 	bl	80025d0 <__aeabi_dsub>
 8010d80:	9a02      	ldr	r2, [sp, #8]
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	f7f0 fa48 	bl	8001218 <__aeabi_dadd>
 8010d88:	9a04      	ldr	r2, [sp, #16]
 8010d8a:	9b05      	ldr	r3, [sp, #20]
 8010d8c:	60a0      	str	r0, [r4, #8]
 8010d8e:	60e1      	str	r1, [r4, #12]
 8010d90:	6022      	str	r2, [r4, #0]
 8010d92:	6063      	str	r3, [r4, #4]
 8010d94:	3d01      	subs	r5, #1
 8010d96:	e73c      	b.n	8010c12 <__kernel_rem_pio2+0x522>
 8010d98:	9b00      	ldr	r3, [sp, #0]
 8010d9a:	aa4e      	add	r2, sp, #312	; 0x138
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	18d3      	adds	r3, r2, r3
 8010da0:	0020      	movs	r0, r4
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	f7f0 fa37 	bl	8001218 <__aeabi_dadd>
 8010daa:	9b00      	ldr	r3, [sp, #0]
 8010dac:	0004      	movs	r4, r0
 8010dae:	3b01      	subs	r3, #1
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	e734      	b.n	8010c1e <__kernel_rem_pio2+0x52e>
 8010db4:	9b07      	ldr	r3, [sp, #28]
 8010db6:	9a07      	ldr	r2, [sp, #28]
 8010db8:	601f      	str	r7, [r3, #0]
 8010dba:	2380      	movs	r3, #128	; 0x80
 8010dbc:	061b      	lsls	r3, r3, #24
 8010dbe:	18f6      	adds	r6, r6, r3
 8010dc0:	18c0      	adds	r0, r0, r3
 8010dc2:	18c9      	adds	r1, r1, r3
 8010dc4:	6056      	str	r6, [r2, #4]
 8010dc6:	6095      	str	r5, [r2, #8]
 8010dc8:	60d0      	str	r0, [r2, #12]
 8010dca:	6114      	str	r4, [r2, #16]
 8010dcc:	6151      	str	r1, [r2, #20]
 8010dce:	e708      	b.n	8010be2 <__kernel_rem_pio2+0x4f2>
 8010dd0:	41700000 	.word	0x41700000
 8010dd4:	3e700000 	.word	0x3e700000
 8010dd8:	080159c8 	.word	0x080159c8

08010ddc <__kernel_sin>:
 8010ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dde:	b089      	sub	sp, #36	; 0x24
 8010de0:	9202      	str	r2, [sp, #8]
 8010de2:	9303      	str	r3, [sp, #12]
 8010de4:	22f9      	movs	r2, #249	; 0xf9
 8010de6:	004b      	lsls	r3, r1, #1
 8010de8:	0007      	movs	r7, r0
 8010dea:	000e      	movs	r6, r1
 8010dec:	085b      	lsrs	r3, r3, #1
 8010dee:	0592      	lsls	r2, r2, #22
 8010df0:	4293      	cmp	r3, r2
 8010df2:	da03      	bge.n	8010dfc <__kernel_sin+0x20>
 8010df4:	f7f1 ff9c 	bl	8002d30 <__aeabi_d2iz>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d04c      	beq.n	8010e96 <__kernel_sin+0xba>
 8010dfc:	003a      	movs	r2, r7
 8010dfe:	0033      	movs	r3, r6
 8010e00:	0038      	movs	r0, r7
 8010e02:	0031      	movs	r1, r6
 8010e04:	f7f1 f978 	bl	80020f8 <__aeabi_dmul>
 8010e08:	0004      	movs	r4, r0
 8010e0a:	000d      	movs	r5, r1
 8010e0c:	0002      	movs	r2, r0
 8010e0e:	000b      	movs	r3, r1
 8010e10:	0038      	movs	r0, r7
 8010e12:	0031      	movs	r1, r6
 8010e14:	f7f1 f970 	bl	80020f8 <__aeabi_dmul>
 8010e18:	4a39      	ldr	r2, [pc, #228]	; (8010f00 <__kernel_sin+0x124>)
 8010e1a:	9000      	str	r0, [sp, #0]
 8010e1c:	9101      	str	r1, [sp, #4]
 8010e1e:	4b39      	ldr	r3, [pc, #228]	; (8010f04 <__kernel_sin+0x128>)
 8010e20:	0020      	movs	r0, r4
 8010e22:	0029      	movs	r1, r5
 8010e24:	f7f1 f968 	bl	80020f8 <__aeabi_dmul>
 8010e28:	4a37      	ldr	r2, [pc, #220]	; (8010f08 <__kernel_sin+0x12c>)
 8010e2a:	4b38      	ldr	r3, [pc, #224]	; (8010f0c <__kernel_sin+0x130>)
 8010e2c:	f7f1 fbd0 	bl	80025d0 <__aeabi_dsub>
 8010e30:	0022      	movs	r2, r4
 8010e32:	002b      	movs	r3, r5
 8010e34:	f7f1 f960 	bl	80020f8 <__aeabi_dmul>
 8010e38:	4a35      	ldr	r2, [pc, #212]	; (8010f10 <__kernel_sin+0x134>)
 8010e3a:	4b36      	ldr	r3, [pc, #216]	; (8010f14 <__kernel_sin+0x138>)
 8010e3c:	f7f0 f9ec 	bl	8001218 <__aeabi_dadd>
 8010e40:	0022      	movs	r2, r4
 8010e42:	002b      	movs	r3, r5
 8010e44:	f7f1 f958 	bl	80020f8 <__aeabi_dmul>
 8010e48:	4a33      	ldr	r2, [pc, #204]	; (8010f18 <__kernel_sin+0x13c>)
 8010e4a:	4b34      	ldr	r3, [pc, #208]	; (8010f1c <__kernel_sin+0x140>)
 8010e4c:	f7f1 fbc0 	bl	80025d0 <__aeabi_dsub>
 8010e50:	0022      	movs	r2, r4
 8010e52:	002b      	movs	r3, r5
 8010e54:	f7f1 f950 	bl	80020f8 <__aeabi_dmul>
 8010e58:	4b31      	ldr	r3, [pc, #196]	; (8010f20 <__kernel_sin+0x144>)
 8010e5a:	4a32      	ldr	r2, [pc, #200]	; (8010f24 <__kernel_sin+0x148>)
 8010e5c:	f7f0 f9dc 	bl	8001218 <__aeabi_dadd>
 8010e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e62:	9004      	str	r0, [sp, #16]
 8010e64:	9105      	str	r1, [sp, #20]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d119      	bne.n	8010e9e <__kernel_sin+0xc2>
 8010e6a:	0002      	movs	r2, r0
 8010e6c:	000b      	movs	r3, r1
 8010e6e:	0020      	movs	r0, r4
 8010e70:	0029      	movs	r1, r5
 8010e72:	f7f1 f941 	bl	80020f8 <__aeabi_dmul>
 8010e76:	4a2c      	ldr	r2, [pc, #176]	; (8010f28 <__kernel_sin+0x14c>)
 8010e78:	4b2c      	ldr	r3, [pc, #176]	; (8010f2c <__kernel_sin+0x150>)
 8010e7a:	f7f1 fba9 	bl	80025d0 <__aeabi_dsub>
 8010e7e:	9a00      	ldr	r2, [sp, #0]
 8010e80:	9b01      	ldr	r3, [sp, #4]
 8010e82:	f7f1 f939 	bl	80020f8 <__aeabi_dmul>
 8010e86:	0002      	movs	r2, r0
 8010e88:	000b      	movs	r3, r1
 8010e8a:	0038      	movs	r0, r7
 8010e8c:	0031      	movs	r1, r6
 8010e8e:	f7f0 f9c3 	bl	8001218 <__aeabi_dadd>
 8010e92:	0007      	movs	r7, r0
 8010e94:	000e      	movs	r6, r1
 8010e96:	0038      	movs	r0, r7
 8010e98:	0031      	movs	r1, r6
 8010e9a:	b009      	add	sp, #36	; 0x24
 8010e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	9802      	ldr	r0, [sp, #8]
 8010ea2:	9903      	ldr	r1, [sp, #12]
 8010ea4:	4b22      	ldr	r3, [pc, #136]	; (8010f30 <__kernel_sin+0x154>)
 8010ea6:	f7f1 f927 	bl	80020f8 <__aeabi_dmul>
 8010eaa:	9a04      	ldr	r2, [sp, #16]
 8010eac:	9b05      	ldr	r3, [sp, #20]
 8010eae:	9006      	str	r0, [sp, #24]
 8010eb0:	9107      	str	r1, [sp, #28]
 8010eb2:	9800      	ldr	r0, [sp, #0]
 8010eb4:	9901      	ldr	r1, [sp, #4]
 8010eb6:	f7f1 f91f 	bl	80020f8 <__aeabi_dmul>
 8010eba:	0002      	movs	r2, r0
 8010ebc:	000b      	movs	r3, r1
 8010ebe:	9806      	ldr	r0, [sp, #24]
 8010ec0:	9907      	ldr	r1, [sp, #28]
 8010ec2:	f7f1 fb85 	bl	80025d0 <__aeabi_dsub>
 8010ec6:	0022      	movs	r2, r4
 8010ec8:	002b      	movs	r3, r5
 8010eca:	f7f1 f915 	bl	80020f8 <__aeabi_dmul>
 8010ece:	9a02      	ldr	r2, [sp, #8]
 8010ed0:	9b03      	ldr	r3, [sp, #12]
 8010ed2:	f7f1 fb7d 	bl	80025d0 <__aeabi_dsub>
 8010ed6:	4a14      	ldr	r2, [pc, #80]	; (8010f28 <__kernel_sin+0x14c>)
 8010ed8:	0004      	movs	r4, r0
 8010eda:	000d      	movs	r5, r1
 8010edc:	9800      	ldr	r0, [sp, #0]
 8010ede:	9901      	ldr	r1, [sp, #4]
 8010ee0:	4b12      	ldr	r3, [pc, #72]	; (8010f2c <__kernel_sin+0x150>)
 8010ee2:	f7f1 f909 	bl	80020f8 <__aeabi_dmul>
 8010ee6:	0002      	movs	r2, r0
 8010ee8:	000b      	movs	r3, r1
 8010eea:	0020      	movs	r0, r4
 8010eec:	0029      	movs	r1, r5
 8010eee:	f7f0 f993 	bl	8001218 <__aeabi_dadd>
 8010ef2:	0002      	movs	r2, r0
 8010ef4:	000b      	movs	r3, r1
 8010ef6:	0038      	movs	r0, r7
 8010ef8:	0031      	movs	r1, r6
 8010efa:	f7f1 fb69 	bl	80025d0 <__aeabi_dsub>
 8010efe:	e7c8      	b.n	8010e92 <__kernel_sin+0xb6>
 8010f00:	5acfd57c 	.word	0x5acfd57c
 8010f04:	3de5d93a 	.word	0x3de5d93a
 8010f08:	8a2b9ceb 	.word	0x8a2b9ceb
 8010f0c:	3e5ae5e6 	.word	0x3e5ae5e6
 8010f10:	57b1fe7d 	.word	0x57b1fe7d
 8010f14:	3ec71de3 	.word	0x3ec71de3
 8010f18:	19c161d5 	.word	0x19c161d5
 8010f1c:	3f2a01a0 	.word	0x3f2a01a0
 8010f20:	3f811111 	.word	0x3f811111
 8010f24:	1110f8a6 	.word	0x1110f8a6
 8010f28:	55555549 	.word	0x55555549
 8010f2c:	3fc55555 	.word	0x3fc55555
 8010f30:	3fe00000 	.word	0x3fe00000

08010f34 <atan>:
 8010f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f36:	4b98      	ldr	r3, [pc, #608]	; (8011198 <atan+0x264>)
 8010f38:	b085      	sub	sp, #20
 8010f3a:	004e      	lsls	r6, r1, #1
 8010f3c:	0004      	movs	r4, r0
 8010f3e:	000d      	movs	r5, r1
 8010f40:	9103      	str	r1, [sp, #12]
 8010f42:	0876      	lsrs	r6, r6, #1
 8010f44:	429e      	cmp	r6, r3
 8010f46:	dd18      	ble.n	8010f7a <atan+0x46>
 8010f48:	4b94      	ldr	r3, [pc, #592]	; (801119c <atan+0x268>)
 8010f4a:	429e      	cmp	r6, r3
 8010f4c:	dc02      	bgt.n	8010f54 <atan+0x20>
 8010f4e:	d10a      	bne.n	8010f66 <atan+0x32>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	d008      	beq.n	8010f66 <atan+0x32>
 8010f54:	0022      	movs	r2, r4
 8010f56:	002b      	movs	r3, r5
 8010f58:	0020      	movs	r0, r4
 8010f5a:	0029      	movs	r1, r5
 8010f5c:	f7f0 f95c 	bl	8001218 <__aeabi_dadd>
 8010f60:	0004      	movs	r4, r0
 8010f62:	000d      	movs	r5, r1
 8010f64:	e005      	b.n	8010f72 <atan+0x3e>
 8010f66:	9b03      	ldr	r3, [sp, #12]
 8010f68:	4c8d      	ldr	r4, [pc, #564]	; (80111a0 <atan+0x26c>)
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dd00      	ble.n	8010f70 <atan+0x3c>
 8010f6e:	e110      	b.n	8011192 <atan+0x25e>
 8010f70:	4d8c      	ldr	r5, [pc, #560]	; (80111a4 <atan+0x270>)
 8010f72:	0020      	movs	r0, r4
 8010f74:	0029      	movs	r1, r5
 8010f76:	b005      	add	sp, #20
 8010f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7a:	4b8b      	ldr	r3, [pc, #556]	; (80111a8 <atan+0x274>)
 8010f7c:	429e      	cmp	r6, r3
 8010f7e:	dc0f      	bgt.n	8010fa0 <atan+0x6c>
 8010f80:	4b8a      	ldr	r3, [pc, #552]	; (80111ac <atan+0x278>)
 8010f82:	429e      	cmp	r6, r3
 8010f84:	dc09      	bgt.n	8010f9a <atan+0x66>
 8010f86:	4a8a      	ldr	r2, [pc, #552]	; (80111b0 <atan+0x27c>)
 8010f88:	4b8a      	ldr	r3, [pc, #552]	; (80111b4 <atan+0x280>)
 8010f8a:	f7f0 f945 	bl	8001218 <__aeabi_dadd>
 8010f8e:	2200      	movs	r2, #0
 8010f90:	4b89      	ldr	r3, [pc, #548]	; (80111b8 <atan+0x284>)
 8010f92:	f7ef fa61 	bl	8000458 <__aeabi_dcmpgt>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d1eb      	bne.n	8010f72 <atan+0x3e>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	425b      	negs	r3, r3
 8010f9e:	e025      	b.n	8010fec <atan+0xb8>
 8010fa0:	f000 f948 	bl	8011234 <fabs>
 8010fa4:	4b85      	ldr	r3, [pc, #532]	; (80111bc <atan+0x288>)
 8010fa6:	0004      	movs	r4, r0
 8010fa8:	000d      	movs	r5, r1
 8010faa:	429e      	cmp	r6, r3
 8010fac:	dd00      	ble.n	8010fb0 <atan+0x7c>
 8010fae:	e0aa      	b.n	8011106 <atan+0x1d2>
 8010fb0:	4b83      	ldr	r3, [pc, #524]	; (80111c0 <atan+0x28c>)
 8010fb2:	429e      	cmp	r6, r3
 8010fb4:	dd00      	ble.n	8010fb8 <atan+0x84>
 8010fb6:	e090      	b.n	80110da <atan+0x1a6>
 8010fb8:	0002      	movs	r2, r0
 8010fba:	000b      	movs	r3, r1
 8010fbc:	f7f0 f92c 	bl	8001218 <__aeabi_dadd>
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	4b7d      	ldr	r3, [pc, #500]	; (80111b8 <atan+0x284>)
 8010fc4:	f7f1 fb04 	bl	80025d0 <__aeabi_dsub>
 8010fc8:	2380      	movs	r3, #128	; 0x80
 8010fca:	0006      	movs	r6, r0
 8010fcc:	000f      	movs	r7, r1
 8010fce:	2200      	movs	r2, #0
 8010fd0:	0020      	movs	r0, r4
 8010fd2:	0029      	movs	r1, r5
 8010fd4:	05db      	lsls	r3, r3, #23
 8010fd6:	f7f0 f91f 	bl	8001218 <__aeabi_dadd>
 8010fda:	000b      	movs	r3, r1
 8010fdc:	0002      	movs	r2, r0
 8010fde:	0039      	movs	r1, r7
 8010fe0:	0030      	movs	r0, r6
 8010fe2:	f7f0 fc83 	bl	80018ec <__aeabi_ddiv>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	0004      	movs	r4, r0
 8010fea:	000d      	movs	r5, r1
 8010fec:	0022      	movs	r2, r4
 8010fee:	9302      	str	r3, [sp, #8]
 8010ff0:	0020      	movs	r0, r4
 8010ff2:	002b      	movs	r3, r5
 8010ff4:	0029      	movs	r1, r5
 8010ff6:	f7f1 f87f 	bl	80020f8 <__aeabi_dmul>
 8010ffa:	0002      	movs	r2, r0
 8010ffc:	000b      	movs	r3, r1
 8010ffe:	9000      	str	r0, [sp, #0]
 8011000:	9101      	str	r1, [sp, #4]
 8011002:	f7f1 f879 	bl	80020f8 <__aeabi_dmul>
 8011006:	0006      	movs	r6, r0
 8011008:	000f      	movs	r7, r1
 801100a:	4a6e      	ldr	r2, [pc, #440]	; (80111c4 <atan+0x290>)
 801100c:	4b6e      	ldr	r3, [pc, #440]	; (80111c8 <atan+0x294>)
 801100e:	f7f1 f873 	bl	80020f8 <__aeabi_dmul>
 8011012:	4a6e      	ldr	r2, [pc, #440]	; (80111cc <atan+0x298>)
 8011014:	4b6e      	ldr	r3, [pc, #440]	; (80111d0 <atan+0x29c>)
 8011016:	f7f0 f8ff 	bl	8001218 <__aeabi_dadd>
 801101a:	0032      	movs	r2, r6
 801101c:	003b      	movs	r3, r7
 801101e:	f7f1 f86b 	bl	80020f8 <__aeabi_dmul>
 8011022:	4a6c      	ldr	r2, [pc, #432]	; (80111d4 <atan+0x2a0>)
 8011024:	4b6c      	ldr	r3, [pc, #432]	; (80111d8 <atan+0x2a4>)
 8011026:	f7f0 f8f7 	bl	8001218 <__aeabi_dadd>
 801102a:	0032      	movs	r2, r6
 801102c:	003b      	movs	r3, r7
 801102e:	f7f1 f863 	bl	80020f8 <__aeabi_dmul>
 8011032:	4a6a      	ldr	r2, [pc, #424]	; (80111dc <atan+0x2a8>)
 8011034:	4b6a      	ldr	r3, [pc, #424]	; (80111e0 <atan+0x2ac>)
 8011036:	f7f0 f8ef 	bl	8001218 <__aeabi_dadd>
 801103a:	0032      	movs	r2, r6
 801103c:	003b      	movs	r3, r7
 801103e:	f7f1 f85b 	bl	80020f8 <__aeabi_dmul>
 8011042:	4a68      	ldr	r2, [pc, #416]	; (80111e4 <atan+0x2b0>)
 8011044:	4b68      	ldr	r3, [pc, #416]	; (80111e8 <atan+0x2b4>)
 8011046:	f7f0 f8e7 	bl	8001218 <__aeabi_dadd>
 801104a:	0032      	movs	r2, r6
 801104c:	003b      	movs	r3, r7
 801104e:	f7f1 f853 	bl	80020f8 <__aeabi_dmul>
 8011052:	4a66      	ldr	r2, [pc, #408]	; (80111ec <atan+0x2b8>)
 8011054:	4b66      	ldr	r3, [pc, #408]	; (80111f0 <atan+0x2bc>)
 8011056:	f7f0 f8df 	bl	8001218 <__aeabi_dadd>
 801105a:	9a00      	ldr	r2, [sp, #0]
 801105c:	9b01      	ldr	r3, [sp, #4]
 801105e:	f7f1 f84b 	bl	80020f8 <__aeabi_dmul>
 8011062:	4a64      	ldr	r2, [pc, #400]	; (80111f4 <atan+0x2c0>)
 8011064:	9000      	str	r0, [sp, #0]
 8011066:	9101      	str	r1, [sp, #4]
 8011068:	4b63      	ldr	r3, [pc, #396]	; (80111f8 <atan+0x2c4>)
 801106a:	0030      	movs	r0, r6
 801106c:	0039      	movs	r1, r7
 801106e:	f7f1 f843 	bl	80020f8 <__aeabi_dmul>
 8011072:	4a62      	ldr	r2, [pc, #392]	; (80111fc <atan+0x2c8>)
 8011074:	4b62      	ldr	r3, [pc, #392]	; (8011200 <atan+0x2cc>)
 8011076:	f7f1 faab 	bl	80025d0 <__aeabi_dsub>
 801107a:	0032      	movs	r2, r6
 801107c:	003b      	movs	r3, r7
 801107e:	f7f1 f83b 	bl	80020f8 <__aeabi_dmul>
 8011082:	4a60      	ldr	r2, [pc, #384]	; (8011204 <atan+0x2d0>)
 8011084:	4b60      	ldr	r3, [pc, #384]	; (8011208 <atan+0x2d4>)
 8011086:	f7f1 faa3 	bl	80025d0 <__aeabi_dsub>
 801108a:	0032      	movs	r2, r6
 801108c:	003b      	movs	r3, r7
 801108e:	f7f1 f833 	bl	80020f8 <__aeabi_dmul>
 8011092:	4a5e      	ldr	r2, [pc, #376]	; (801120c <atan+0x2d8>)
 8011094:	4b5e      	ldr	r3, [pc, #376]	; (8011210 <atan+0x2dc>)
 8011096:	f7f1 fa9b 	bl	80025d0 <__aeabi_dsub>
 801109a:	0032      	movs	r2, r6
 801109c:	003b      	movs	r3, r7
 801109e:	f7f1 f82b 	bl	80020f8 <__aeabi_dmul>
 80110a2:	4a5c      	ldr	r2, [pc, #368]	; (8011214 <atan+0x2e0>)
 80110a4:	4b5c      	ldr	r3, [pc, #368]	; (8011218 <atan+0x2e4>)
 80110a6:	f7f1 fa93 	bl	80025d0 <__aeabi_dsub>
 80110aa:	0032      	movs	r2, r6
 80110ac:	003b      	movs	r3, r7
 80110ae:	f7f1 f823 	bl	80020f8 <__aeabi_dmul>
 80110b2:	0002      	movs	r2, r0
 80110b4:	000b      	movs	r3, r1
 80110b6:	9800      	ldr	r0, [sp, #0]
 80110b8:	9901      	ldr	r1, [sp, #4]
 80110ba:	f7f0 f8ad 	bl	8001218 <__aeabi_dadd>
 80110be:	002b      	movs	r3, r5
 80110c0:	0022      	movs	r2, r4
 80110c2:	f7f1 f819 	bl	80020f8 <__aeabi_dmul>
 80110c6:	9b02      	ldr	r3, [sp, #8]
 80110c8:	3301      	adds	r3, #1
 80110ca:	d143      	bne.n	8011154 <atan+0x220>
 80110cc:	0002      	movs	r2, r0
 80110ce:	000b      	movs	r3, r1
 80110d0:	0020      	movs	r0, r4
 80110d2:	0029      	movs	r1, r5
 80110d4:	f7f1 fa7c 	bl	80025d0 <__aeabi_dsub>
 80110d8:	e742      	b.n	8010f60 <atan+0x2c>
 80110da:	2200      	movs	r2, #0
 80110dc:	4b36      	ldr	r3, [pc, #216]	; (80111b8 <atan+0x284>)
 80110de:	f7f1 fa77 	bl	80025d0 <__aeabi_dsub>
 80110e2:	2200      	movs	r2, #0
 80110e4:	0006      	movs	r6, r0
 80110e6:	000f      	movs	r7, r1
 80110e8:	0020      	movs	r0, r4
 80110ea:	0029      	movs	r1, r5
 80110ec:	4b32      	ldr	r3, [pc, #200]	; (80111b8 <atan+0x284>)
 80110ee:	f7f0 f893 	bl	8001218 <__aeabi_dadd>
 80110f2:	000b      	movs	r3, r1
 80110f4:	0002      	movs	r2, r0
 80110f6:	0039      	movs	r1, r7
 80110f8:	0030      	movs	r0, r6
 80110fa:	f7f0 fbf7 	bl	80018ec <__aeabi_ddiv>
 80110fe:	2301      	movs	r3, #1
 8011100:	0004      	movs	r4, r0
 8011102:	000d      	movs	r5, r1
 8011104:	e772      	b.n	8010fec <atan+0xb8>
 8011106:	4b45      	ldr	r3, [pc, #276]	; (801121c <atan+0x2e8>)
 8011108:	429e      	cmp	r6, r3
 801110a:	dc19      	bgt.n	8011140 <atan+0x20c>
 801110c:	2200      	movs	r2, #0
 801110e:	4b44      	ldr	r3, [pc, #272]	; (8011220 <atan+0x2ec>)
 8011110:	f7f1 fa5e 	bl	80025d0 <__aeabi_dsub>
 8011114:	2200      	movs	r2, #0
 8011116:	0006      	movs	r6, r0
 8011118:	000f      	movs	r7, r1
 801111a:	0020      	movs	r0, r4
 801111c:	0029      	movs	r1, r5
 801111e:	4b40      	ldr	r3, [pc, #256]	; (8011220 <atan+0x2ec>)
 8011120:	f7f0 ffea 	bl	80020f8 <__aeabi_dmul>
 8011124:	2200      	movs	r2, #0
 8011126:	4b24      	ldr	r3, [pc, #144]	; (80111b8 <atan+0x284>)
 8011128:	f7f0 f876 	bl	8001218 <__aeabi_dadd>
 801112c:	000b      	movs	r3, r1
 801112e:	0002      	movs	r2, r0
 8011130:	0039      	movs	r1, r7
 8011132:	0030      	movs	r0, r6
 8011134:	f7f0 fbda 	bl	80018ec <__aeabi_ddiv>
 8011138:	2302      	movs	r3, #2
 801113a:	0004      	movs	r4, r0
 801113c:	000d      	movs	r5, r1
 801113e:	e755      	b.n	8010fec <atan+0xb8>
 8011140:	000b      	movs	r3, r1
 8011142:	0002      	movs	r2, r0
 8011144:	4937      	ldr	r1, [pc, #220]	; (8011224 <atan+0x2f0>)
 8011146:	2000      	movs	r0, #0
 8011148:	f7f0 fbd0 	bl	80018ec <__aeabi_ddiv>
 801114c:	2303      	movs	r3, #3
 801114e:	0004      	movs	r4, r0
 8011150:	000d      	movs	r5, r1
 8011152:	e74b      	b.n	8010fec <atan+0xb8>
 8011154:	9b02      	ldr	r3, [sp, #8]
 8011156:	4f34      	ldr	r7, [pc, #208]	; (8011228 <atan+0x2f4>)
 8011158:	00de      	lsls	r6, r3, #3
 801115a:	4b34      	ldr	r3, [pc, #208]	; (801122c <atan+0x2f8>)
 801115c:	19bf      	adds	r7, r7, r6
 801115e:	199e      	adds	r6, r3, r6
 8011160:	6832      	ldr	r2, [r6, #0]
 8011162:	6873      	ldr	r3, [r6, #4]
 8011164:	f7f1 fa34 	bl	80025d0 <__aeabi_dsub>
 8011168:	0022      	movs	r2, r4
 801116a:	002b      	movs	r3, r5
 801116c:	f7f1 fa30 	bl	80025d0 <__aeabi_dsub>
 8011170:	000b      	movs	r3, r1
 8011172:	0002      	movs	r2, r0
 8011174:	6838      	ldr	r0, [r7, #0]
 8011176:	6879      	ldr	r1, [r7, #4]
 8011178:	f7f1 fa2a 	bl	80025d0 <__aeabi_dsub>
 801117c:	9b03      	ldr	r3, [sp, #12]
 801117e:	0004      	movs	r4, r0
 8011180:	000d      	movs	r5, r1
 8011182:	2b00      	cmp	r3, #0
 8011184:	db00      	blt.n	8011188 <atan+0x254>
 8011186:	e6f4      	b.n	8010f72 <atan+0x3e>
 8011188:	2180      	movs	r1, #128	; 0x80
 801118a:	0609      	lsls	r1, r1, #24
 801118c:	186b      	adds	r3, r5, r1
 801118e:	001d      	movs	r5, r3
 8011190:	e6ef      	b.n	8010f72 <atan+0x3e>
 8011192:	4d27      	ldr	r5, [pc, #156]	; (8011230 <atan+0x2fc>)
 8011194:	e6ed      	b.n	8010f72 <atan+0x3e>
 8011196:	46c0      	nop			; (mov r8, r8)
 8011198:	440fffff 	.word	0x440fffff
 801119c:	7ff00000 	.word	0x7ff00000
 80111a0:	54442d18 	.word	0x54442d18
 80111a4:	bff921fb 	.word	0xbff921fb
 80111a8:	3fdbffff 	.word	0x3fdbffff
 80111ac:	3e1fffff 	.word	0x3e1fffff
 80111b0:	8800759c 	.word	0x8800759c
 80111b4:	7e37e43c 	.word	0x7e37e43c
 80111b8:	3ff00000 	.word	0x3ff00000
 80111bc:	3ff2ffff 	.word	0x3ff2ffff
 80111c0:	3fe5ffff 	.word	0x3fe5ffff
 80111c4:	e322da11 	.word	0xe322da11
 80111c8:	3f90ad3a 	.word	0x3f90ad3a
 80111cc:	24760deb 	.word	0x24760deb
 80111d0:	3fa97b4b 	.word	0x3fa97b4b
 80111d4:	a0d03d51 	.word	0xa0d03d51
 80111d8:	3fb10d66 	.word	0x3fb10d66
 80111dc:	c54c206e 	.word	0xc54c206e
 80111e0:	3fb745cd 	.word	0x3fb745cd
 80111e4:	920083ff 	.word	0x920083ff
 80111e8:	3fc24924 	.word	0x3fc24924
 80111ec:	5555550d 	.word	0x5555550d
 80111f0:	3fd55555 	.word	0x3fd55555
 80111f4:	2c6a6c2f 	.word	0x2c6a6c2f
 80111f8:	bfa2b444 	.word	0xbfa2b444
 80111fc:	52defd9a 	.word	0x52defd9a
 8011200:	3fadde2d 	.word	0x3fadde2d
 8011204:	af749a6d 	.word	0xaf749a6d
 8011208:	3fb3b0f2 	.word	0x3fb3b0f2
 801120c:	fe231671 	.word	0xfe231671
 8011210:	3fbc71c6 	.word	0x3fbc71c6
 8011214:	9998ebc4 	.word	0x9998ebc4
 8011218:	3fc99999 	.word	0x3fc99999
 801121c:	40037fff 	.word	0x40037fff
 8011220:	3ff80000 	.word	0x3ff80000
 8011224:	bff00000 	.word	0xbff00000
 8011228:	08015a18 	.word	0x08015a18
 801122c:	08015a38 	.word	0x08015a38
 8011230:	3ff921fb 	.word	0x3ff921fb

08011234 <fabs>:
 8011234:	004b      	lsls	r3, r1, #1
 8011236:	0859      	lsrs	r1, r3, #1
 8011238:	4770      	bx	lr
	...

0801123c <floor>:
 801123c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801123e:	004b      	lsls	r3, r1, #1
 8011240:	4a3d      	ldr	r2, [pc, #244]	; (8011338 <floor+0xfc>)
 8011242:	0d5b      	lsrs	r3, r3, #21
 8011244:	189f      	adds	r7, r3, r2
 8011246:	4684      	mov	ip, r0
 8011248:	000e      	movs	r6, r1
 801124a:	000d      	movs	r5, r1
 801124c:	0004      	movs	r4, r0
 801124e:	9001      	str	r0, [sp, #4]
 8011250:	2f13      	cmp	r7, #19
 8011252:	dc34      	bgt.n	80112be <floor+0x82>
 8011254:	2f00      	cmp	r7, #0
 8011256:	da16      	bge.n	8011286 <floor+0x4a>
 8011258:	4a38      	ldr	r2, [pc, #224]	; (801133c <floor+0x100>)
 801125a:	4b39      	ldr	r3, [pc, #228]	; (8011340 <floor+0x104>)
 801125c:	4660      	mov	r0, ip
 801125e:	0031      	movs	r1, r6
 8011260:	f7ef ffda 	bl	8001218 <__aeabi_dadd>
 8011264:	2200      	movs	r2, #0
 8011266:	2300      	movs	r3, #0
 8011268:	f7ef f8f6 	bl	8000458 <__aeabi_dcmpgt>
 801126c:	2800      	cmp	r0, #0
 801126e:	d007      	beq.n	8011280 <floor+0x44>
 8011270:	2e00      	cmp	r6, #0
 8011272:	da5d      	bge.n	8011330 <floor+0xf4>
 8011274:	0073      	lsls	r3, r6, #1
 8011276:	085b      	lsrs	r3, r3, #1
 8011278:	431c      	orrs	r4, r3
 801127a:	d001      	beq.n	8011280 <floor+0x44>
 801127c:	2400      	movs	r4, #0
 801127e:	4d31      	ldr	r5, [pc, #196]	; (8011344 <floor+0x108>)
 8011280:	46a4      	mov	ip, r4
 8011282:	002e      	movs	r6, r5
 8011284:	e029      	b.n	80112da <floor+0x9e>
 8011286:	4b30      	ldr	r3, [pc, #192]	; (8011348 <floor+0x10c>)
 8011288:	413b      	asrs	r3, r7
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	400b      	ands	r3, r1
 801128e:	4303      	orrs	r3, r0
 8011290:	d023      	beq.n	80112da <floor+0x9e>
 8011292:	4a2a      	ldr	r2, [pc, #168]	; (801133c <floor+0x100>)
 8011294:	4b2a      	ldr	r3, [pc, #168]	; (8011340 <floor+0x104>)
 8011296:	4660      	mov	r0, ip
 8011298:	0031      	movs	r1, r6
 801129a:	f7ef ffbd 	bl	8001218 <__aeabi_dadd>
 801129e:	2200      	movs	r2, #0
 80112a0:	2300      	movs	r3, #0
 80112a2:	f7ef f8d9 	bl	8000458 <__aeabi_dcmpgt>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d0ea      	beq.n	8011280 <floor+0x44>
 80112aa:	2e00      	cmp	r6, #0
 80112ac:	da03      	bge.n	80112b6 <floor+0x7a>
 80112ae:	2380      	movs	r3, #128	; 0x80
 80112b0:	035b      	lsls	r3, r3, #13
 80112b2:	413b      	asrs	r3, r7
 80112b4:	18f5      	adds	r5, r6, r3
 80112b6:	9b00      	ldr	r3, [sp, #0]
 80112b8:	2400      	movs	r4, #0
 80112ba:	439d      	bics	r5, r3
 80112bc:	e7e0      	b.n	8011280 <floor+0x44>
 80112be:	2f33      	cmp	r7, #51	; 0x33
 80112c0:	dd0f      	ble.n	80112e2 <floor+0xa6>
 80112c2:	2380      	movs	r3, #128	; 0x80
 80112c4:	00db      	lsls	r3, r3, #3
 80112c6:	429f      	cmp	r7, r3
 80112c8:	d107      	bne.n	80112da <floor+0x9e>
 80112ca:	0002      	movs	r2, r0
 80112cc:	000b      	movs	r3, r1
 80112ce:	4660      	mov	r0, ip
 80112d0:	0031      	movs	r1, r6
 80112d2:	f7ef ffa1 	bl	8001218 <__aeabi_dadd>
 80112d6:	4684      	mov	ip, r0
 80112d8:	000e      	movs	r6, r1
 80112da:	4660      	mov	r0, ip
 80112dc:	0031      	movs	r1, r6
 80112de:	b003      	add	sp, #12
 80112e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e2:	4a1a      	ldr	r2, [pc, #104]	; (801134c <floor+0x110>)
 80112e4:	189b      	adds	r3, r3, r2
 80112e6:	2201      	movs	r2, #1
 80112e8:	4252      	negs	r2, r2
 80112ea:	40da      	lsrs	r2, r3
 80112ec:	9200      	str	r2, [sp, #0]
 80112ee:	4210      	tst	r0, r2
 80112f0:	d0f3      	beq.n	80112da <floor+0x9e>
 80112f2:	4a12      	ldr	r2, [pc, #72]	; (801133c <floor+0x100>)
 80112f4:	4b12      	ldr	r3, [pc, #72]	; (8011340 <floor+0x104>)
 80112f6:	4660      	mov	r0, ip
 80112f8:	0031      	movs	r1, r6
 80112fa:	f7ef ff8d 	bl	8001218 <__aeabi_dadd>
 80112fe:	2200      	movs	r2, #0
 8011300:	2300      	movs	r3, #0
 8011302:	f7ef f8a9 	bl	8000458 <__aeabi_dcmpgt>
 8011306:	2800      	cmp	r0, #0
 8011308:	d0ba      	beq.n	8011280 <floor+0x44>
 801130a:	2e00      	cmp	r6, #0
 801130c:	da02      	bge.n	8011314 <floor+0xd8>
 801130e:	2f14      	cmp	r7, #20
 8011310:	d103      	bne.n	801131a <floor+0xde>
 8011312:	3501      	adds	r5, #1
 8011314:	9b00      	ldr	r3, [sp, #0]
 8011316:	439c      	bics	r4, r3
 8011318:	e7b2      	b.n	8011280 <floor+0x44>
 801131a:	2334      	movs	r3, #52	; 0x34
 801131c:	1bdf      	subs	r7, r3, r7
 801131e:	3b33      	subs	r3, #51	; 0x33
 8011320:	40bb      	lsls	r3, r7
 8011322:	18e4      	adds	r4, r4, r3
 8011324:	9b01      	ldr	r3, [sp, #4]
 8011326:	429c      	cmp	r4, r3
 8011328:	419b      	sbcs	r3, r3
 801132a:	425b      	negs	r3, r3
 801132c:	18f5      	adds	r5, r6, r3
 801132e:	e7f1      	b.n	8011314 <floor+0xd8>
 8011330:	2400      	movs	r4, #0
 8011332:	0025      	movs	r5, r4
 8011334:	e7a4      	b.n	8011280 <floor+0x44>
 8011336:	46c0      	nop			; (mov r8, r8)
 8011338:	fffffc01 	.word	0xfffffc01
 801133c:	8800759c 	.word	0x8800759c
 8011340:	7e37e43c 	.word	0x7e37e43c
 8011344:	bff00000 	.word	0xbff00000
 8011348:	000fffff 	.word	0x000fffff
 801134c:	fffffbed 	.word	0xfffffbed

08011350 <nan>:
 8011350:	2000      	movs	r0, #0
 8011352:	4901      	ldr	r1, [pc, #4]	; (8011358 <nan+0x8>)
 8011354:	4770      	bx	lr
 8011356:	46c0      	nop			; (mov r8, r8)
 8011358:	7ff80000 	.word	0x7ff80000

0801135c <scalbn>:
 801135c:	004b      	lsls	r3, r1, #1
 801135e:	b570      	push	{r4, r5, r6, lr}
 8011360:	0d5b      	lsrs	r3, r3, #21
 8011362:	0014      	movs	r4, r2
 8011364:	000a      	movs	r2, r1
 8011366:	2b00      	cmp	r3, #0
 8011368:	d10d      	bne.n	8011386 <scalbn+0x2a>
 801136a:	004b      	lsls	r3, r1, #1
 801136c:	085b      	lsrs	r3, r3, #1
 801136e:	4303      	orrs	r3, r0
 8011370:	d010      	beq.n	8011394 <scalbn+0x38>
 8011372:	4b27      	ldr	r3, [pc, #156]	; (8011410 <scalbn+0xb4>)
 8011374:	2200      	movs	r2, #0
 8011376:	f7f0 febf 	bl	80020f8 <__aeabi_dmul>
 801137a:	4b26      	ldr	r3, [pc, #152]	; (8011414 <scalbn+0xb8>)
 801137c:	429c      	cmp	r4, r3
 801137e:	da0a      	bge.n	8011396 <scalbn+0x3a>
 8011380:	4a25      	ldr	r2, [pc, #148]	; (8011418 <scalbn+0xbc>)
 8011382:	4b26      	ldr	r3, [pc, #152]	; (801141c <scalbn+0xc0>)
 8011384:	e019      	b.n	80113ba <scalbn+0x5e>
 8011386:	4d26      	ldr	r5, [pc, #152]	; (8011420 <scalbn+0xc4>)
 8011388:	42ab      	cmp	r3, r5
 801138a:	d108      	bne.n	801139e <scalbn+0x42>
 801138c:	0002      	movs	r2, r0
 801138e:	000b      	movs	r3, r1
 8011390:	f7ef ff42 	bl	8001218 <__aeabi_dadd>
 8011394:	bd70      	pop	{r4, r5, r6, pc}
 8011396:	000a      	movs	r2, r1
 8011398:	004b      	lsls	r3, r1, #1
 801139a:	0d5b      	lsrs	r3, r3, #21
 801139c:	3b36      	subs	r3, #54	; 0x36
 801139e:	4d21      	ldr	r5, [pc, #132]	; (8011424 <scalbn+0xc8>)
 80113a0:	18e3      	adds	r3, r4, r3
 80113a2:	42ab      	cmp	r3, r5
 80113a4:	dd0c      	ble.n	80113c0 <scalbn+0x64>
 80113a6:	4c20      	ldr	r4, [pc, #128]	; (8011428 <scalbn+0xcc>)
 80113a8:	4d20      	ldr	r5, [pc, #128]	; (801142c <scalbn+0xd0>)
 80113aa:	2900      	cmp	r1, #0
 80113ac:	da01      	bge.n	80113b2 <scalbn+0x56>
 80113ae:	4c1e      	ldr	r4, [pc, #120]	; (8011428 <scalbn+0xcc>)
 80113b0:	4d1f      	ldr	r5, [pc, #124]	; (8011430 <scalbn+0xd4>)
 80113b2:	0020      	movs	r0, r4
 80113b4:	0029      	movs	r1, r5
 80113b6:	4a1c      	ldr	r2, [pc, #112]	; (8011428 <scalbn+0xcc>)
 80113b8:	4b1c      	ldr	r3, [pc, #112]	; (801142c <scalbn+0xd0>)
 80113ba:	f7f0 fe9d 	bl	80020f8 <__aeabi_dmul>
 80113be:	e7e9      	b.n	8011394 <scalbn+0x38>
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	dd05      	ble.n	80113d0 <scalbn+0x74>
 80113c4:	4c1b      	ldr	r4, [pc, #108]	; (8011434 <scalbn+0xd8>)
 80113c6:	051b      	lsls	r3, r3, #20
 80113c8:	4022      	ands	r2, r4
 80113ca:	431a      	orrs	r2, r3
 80113cc:	0011      	movs	r1, r2
 80113ce:	e7e1      	b.n	8011394 <scalbn+0x38>
 80113d0:	001d      	movs	r5, r3
 80113d2:	3535      	adds	r5, #53	; 0x35
 80113d4:	da13      	bge.n	80113fe <scalbn+0xa2>
 80113d6:	4a18      	ldr	r2, [pc, #96]	; (8011438 <scalbn+0xdc>)
 80113d8:	0fcb      	lsrs	r3, r1, #31
 80113da:	4294      	cmp	r4, r2
 80113dc:	dd08      	ble.n	80113f0 <scalbn+0x94>
 80113de:	4812      	ldr	r0, [pc, #72]	; (8011428 <scalbn+0xcc>)
 80113e0:	4912      	ldr	r1, [pc, #72]	; (801142c <scalbn+0xd0>)
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d001      	beq.n	80113ea <scalbn+0x8e>
 80113e6:	4810      	ldr	r0, [pc, #64]	; (8011428 <scalbn+0xcc>)
 80113e8:	4911      	ldr	r1, [pc, #68]	; (8011430 <scalbn+0xd4>)
 80113ea:	4a0f      	ldr	r2, [pc, #60]	; (8011428 <scalbn+0xcc>)
 80113ec:	4b0f      	ldr	r3, [pc, #60]	; (801142c <scalbn+0xd0>)
 80113ee:	e7e4      	b.n	80113ba <scalbn+0x5e>
 80113f0:	4809      	ldr	r0, [pc, #36]	; (8011418 <scalbn+0xbc>)
 80113f2:	490a      	ldr	r1, [pc, #40]	; (801141c <scalbn+0xc0>)
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d0c3      	beq.n	8011380 <scalbn+0x24>
 80113f8:	4807      	ldr	r0, [pc, #28]	; (8011418 <scalbn+0xbc>)
 80113fa:	4910      	ldr	r1, [pc, #64]	; (801143c <scalbn+0xe0>)
 80113fc:	e7c0      	b.n	8011380 <scalbn+0x24>
 80113fe:	4c0d      	ldr	r4, [pc, #52]	; (8011434 <scalbn+0xd8>)
 8011400:	3336      	adds	r3, #54	; 0x36
 8011402:	4022      	ands	r2, r4
 8011404:	051b      	lsls	r3, r3, #20
 8011406:	4313      	orrs	r3, r2
 8011408:	0019      	movs	r1, r3
 801140a:	2200      	movs	r2, #0
 801140c:	4b0c      	ldr	r3, [pc, #48]	; (8011440 <scalbn+0xe4>)
 801140e:	e7d4      	b.n	80113ba <scalbn+0x5e>
 8011410:	43500000 	.word	0x43500000
 8011414:	ffff3cb0 	.word	0xffff3cb0
 8011418:	c2f8f359 	.word	0xc2f8f359
 801141c:	01a56e1f 	.word	0x01a56e1f
 8011420:	000007ff 	.word	0x000007ff
 8011424:	000007fe 	.word	0x000007fe
 8011428:	8800759c 	.word	0x8800759c
 801142c:	7e37e43c 	.word	0x7e37e43c
 8011430:	fe37e43c 	.word	0xfe37e43c
 8011434:	800fffff 	.word	0x800fffff
 8011438:	0000c350 	.word	0x0000c350
 801143c:	81a56e1f 	.word	0x81a56e1f
 8011440:	3c900000 	.word	0x3c900000

08011444 <_init>:
 8011444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011446:	46c0      	nop			; (mov r8, r8)
 8011448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801144a:	bc08      	pop	{r3}
 801144c:	469e      	mov	lr, r3
 801144e:	4770      	bx	lr

08011450 <_fini>:
 8011450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011452:	46c0      	nop			; (mov r8, r8)
 8011454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011456:	bc08      	pop	{r3}
 8011458:	469e      	mov	lr, r3
 801145a:	4770      	bx	lr
